; ModuleID = 'enclave.so.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon.0 = type { i64, [8 x %struct.anon] }
%struct.anon = type { i8*, i8, i8 }
%struct.anon.1 = type { i64, [1 x [8 x i8]] }
%struct.KeyStoreBank = type { i8*, i8*, %struct.KeyStoreBank* }
%struct.binn_struct = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i8*, i32, i32, void (i8*)*, %union.anon, i32 }
%union.anon = type { i64 }
%struct.ms_add_password_t = type { i32, i8*, i64, i8*, i64 }
%struct.ms_create_keystore_t = type { i32, i8*, i64 }
%struct.ms_get_password_t = type { i32, i8*, i64, i8*, i8*, i64 }
%struct.ms_encrypt_and_serialize_key_store_t = type { i32, i8* }
%struct.ms_seal_t = type { i32, i8*, i64, %struct._sealed_data_t*, i64 }
%struct._sealed_data_t = type { %struct._key_request_t, i32, [12 x i8], %struct._aes_gcm_data_t }
%struct._key_request_t = type { i16, i16, i16, i16, %struct._sgx_cpu_svn_t, %struct._attributes_t, %struct._sgx_key_id_t, i32, i16, [434 x i8] }
%struct._sgx_cpu_svn_t = type { [16 x i8] }
%struct._attributes_t = type { i64, i64 }
%struct._sgx_key_id_t = type { [32 x i8] }
%struct._aes_gcm_data_t = type { i32, [12 x i8], [16 x i8], [0 x i8] }
%struct.ms_unseal_t = type { i32, %struct._sealed_data_t*, i64, i8*, i32 }
%struct.ms_ocall_print_t = type { i8* }
%struct.binn_iter_struct = type { i8*, i8*, i32, i32, i32 }
%struct.libcperciva_SHA256_CTX = type { [8 x i32], i64, [64 x i8] }
%struct.libcperciva_HMAC_SHA256_CTX = type { %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX }

@g_ecall_table = hidden constant %struct.anon.0 { i64 8, [8 x %struct.anon] [%struct.anon { i8* bitcast (i32 (i8*)* @sgx_add_password to i8*), i8 0, i8 0 }, %struct.anon { i8* bitcast (i32 (i8*)* @sgx_create_keystore to i8*), i8 0, i8 0 }, %struct.anon { i8* bitcast (i32 (i8*)* @sgx_get_password to i8*), i8 0, i8 0 }, %struct.anon { i8* bitcast (i32 (i8*)* @sgx_serialize_key_store to i8*), i8 0, i8 0 }, %struct.anon { i8* bitcast (i32 (i8*)* @sgx_decrypt_and_set_key_store to i8*), i8 0, i8 0 }, %struct.anon { i8* bitcast (i32 (i8*)* @sgx_encrypt_and_serialize_key_store to i8*), i8 0, i8 0 }, %struct.anon { i8* bitcast (i32 (i8*)* @sgx_seal to i8*), i8 0, i8 0 }, %struct.anon { i8* bitcast (i32 (i8*)* @sgx_unseal to i8*), i8 0, i8 0 }] }, align 8, !dbg !0
@g_dyn_entry_table = hidden constant %struct.anon.1 { i64 1, [1 x [8 x i8]] zeroinitializer }, align 8, !dbg !236
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_Enclave.cpp, i8* null }]
@password = hidden global i8* null, align 8, !dbg !259
@numPasswords = hidden global i32 0, align 4, !dbg !351
@buffer = hidden global [1024 x i8] zeroinitializer, align 16, !dbg !353
@firstKey = hidden global %struct.KeyStoreBank* null, align 8, !dbg !358
@currentKey = hidden global %struct.KeyStoreBank* null, align 8, !dbg !360
@.str = private unnamed_addr constant [20 x i8] c"Returning Password\0A\00", align 1
@__const.get_password.var = private unnamed_addr constant [3 x i8] c"hi\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"password\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"salt\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Buffer Error\0A\00", align 1
@_ZZ4itoaiiE3buf = internal global [32 x i8] zeroinitializer, align 16, !dbg !365
@.str.5 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@_ZZ31encrypt_and_serialize_key_storeE12g_region_key = internal global [16 x i8] zeroinitializer, align 16, !dbg !372
@__const.encrypt_and_serialize_key_store.key = private unnamed_addr constant [16 x i8] c"abshsydgsvsgshs\00", align 16
@.str.6 = private unnamed_addr constant [15 x i8] c"dude it failed\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"website\00", align 1
@_ZZ25decrypt_and_set_key_storeE12g_region_key = internal global [16 x i8] zeroinitializer, align 16, !dbg !378
@__const.decrypt_and_set_key_store.key = private unnamed_addr constant [16 x i8] c"abshsydgsvsgshs\00", align 16
@.str.8 = private unnamed_addr constant [7 x i8] c"Failed\00", align 1
@malloc_fn = hidden global i8* (i64)* null, align 8, !dbg !381
@realloc_fn = hidden global i8* (i8*, i64)* null, align 8, !dbg !452
@free_fn = hidden global void (i8*)* null, align 8, !dbg !459
@local_value = hidden global %struct.binn_struct zeroinitializer, align 8, !dbg !461
@.str.35 = private unnamed_addr constant [5 x i8] c"%lli\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@.str.2.29 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.3.32 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.4.30 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.5.31 = private unnamed_addr constant [3 x i8] c"on\00", align 1
@.str.6.33 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.7.34 = private unnamed_addr constant [4 x i8] c"off\00", align 1
@.str.36 = private unnamed_addr constant [17 x i8] c"doing something.\00", align 1
@.str.1.39 = private unnamed_addr constant [25 x i8] c"entering crypto_scrypt.\0A\00", align 1
@_ZL13initial_state = internal constant [8 x i32] [i32 1779033703, i32 -1150833019, i32 1013904242, i32 -1521486534, i32 1359893119, i32 -1694144372, i32 528734635, i32 1541459225], align 16, !dbg !466
@.str.40 = private unnamed_addr constant [26 x i8] c"Enclave/scrypt/sha256.cpp\00", align 1
@__func__._Z13PBKDF2_SHA256PKhmS0_mmPhm = private unnamed_addr constant [14 x i8] c"PBKDF2_SHA256\00", align 1
@.str.1.44 = private unnamed_addr constant [35 x i8] c"dkLen <= 32 * (size_t)(UINT32_MAX)\00", align 1
@_ZL4Krnd = internal constant [64 x i32] [i32 1116352408, i32 1899447441, i32 -1245643825, i32 -373957723, i32 961987163, i32 1508970993, i32 -1841331548, i32 -1424204075, i32 -670586216, i32 310598401, i32 607225278, i32 1426881987, i32 1925078388, i32 -2132889090, i32 -1680079193, i32 -1046744716, i32 -459576895, i32 -272742522, i32 264347078, i32 604807628, i32 770255983, i32 1249150122, i32 1555081692, i32 1996064986, i32 -1740746414, i32 -1473132947, i32 -1341970488, i32 -1084653625, i32 -958395405, i32 -710438585, i32 113926993, i32 338241895, i32 666307205, i32 773529912, i32 1294757372, i32 1396182291, i32 1695183700, i32 1986661051, i32 -2117940946, i32 -1838011259, i32 -1564481375, i32 -1474664885, i32 -1035236496, i32 -949202525, i32 -778901479, i32 -694614492, i32 -200395387, i32 275423344, i32 430227734, i32 506948616, i32 659060556, i32 883997877, i32 958139571, i32 1322822218, i32 1537002063, i32 1747873779, i32 1955562222, i32 2024104815, i32 -2067236844, i32 -1933114872, i32 -1866530822, i32 -1538233109, i32 -1090935817, i32 -965641998], align 16, !dbg !474
@__func__._ZL12be32dec_vectPjPKhm = private unnamed_addr constant [13 x i8] c"be32dec_vect\00", align 1
@.str.2.41 = private unnamed_addr constant [13 x i8] c"len % 4 == 0\00", align 1
@_ZL3PAD = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16, !dbg !480
@__func__._ZL12be32enc_vectPhPKjm = private unnamed_addr constant [13 x i8] c"be32enc_vect\00", align 1
@insecure_memzero_ptr = hidden global void (i8*, i64)* @_ZL21insecure_memzero_funcPVvm, align 8, !dbg !484

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @sgx_add_password(i8* %0) #0 !dbg !524 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ms_add_password_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !527, metadata !DIExpression()), !dbg !528
  br label %12, !dbg !529

12:                                               ; preds = %1
  %13 = load i8*, i8** %3, align 8, !dbg !530
  %14 = icmp ne i8* %13, null, !dbg !530
  br i1 %14, label %15, label %19, !dbg !530

15:                                               ; preds = %12
  %16 = load i8*, i8** %3, align 8, !dbg !530
  %17 = call i32 @sgx_is_outside_enclave(i8* %16, i64 40), !dbg !530
  %18 = icmp ne i32 %17, 0, !dbg !530
  br i1 %18, label %20, label %19, !dbg !533

19:                                               ; preds = %15, %12
  store i32 2, i32* %2, align 4, !dbg !530
  br label %139, !dbg !530

20:                                               ; preds = %15
  br label %21, !dbg !533

21:                                               ; preds = %20
  call void @llvm.x86.sse2.lfence(), !dbg !534
  call void @llvm.dbg.declare(metadata %struct.ms_add_password_t** %4, metadata !535, metadata !DIExpression()), !dbg !536
  %22 = load i8*, i8** %3, align 8, !dbg !537
  %23 = bitcast i8* %22 to %struct.ms_add_password_t*, !dbg !537
  store %struct.ms_add_password_t* %23, %struct.ms_add_password_t** %4, align 8, !dbg !536
  call void @llvm.dbg.declare(metadata i32* %5, metadata !538, metadata !DIExpression()), !dbg !539
  store i32 0, i32* %5, align 4, !dbg !539
  call void @llvm.dbg.declare(metadata i8** %6, metadata !540, metadata !DIExpression()), !dbg !541
  %24 = load %struct.ms_add_password_t*, %struct.ms_add_password_t** %4, align 8, !dbg !542
  %25 = getelementptr inbounds %struct.ms_add_password_t, %struct.ms_add_password_t* %24, i32 0, i32 1, !dbg !543
  %26 = load i8*, i8** %25, align 8, !dbg !543
  store i8* %26, i8** %6, align 8, !dbg !541
  call void @llvm.dbg.declare(metadata i64* %7, metadata !544, metadata !DIExpression()), !dbg !545
  %27 = load %struct.ms_add_password_t*, %struct.ms_add_password_t** %4, align 8, !dbg !546
  %28 = getelementptr inbounds %struct.ms_add_password_t, %struct.ms_add_password_t* %27, i32 0, i32 2, !dbg !547
  %29 = load i64, i64* %28, align 8, !dbg !547
  store i64 %29, i64* %7, align 8, !dbg !545
  call void @llvm.dbg.declare(metadata i8** %8, metadata !548, metadata !DIExpression()), !dbg !549
  store i8* null, i8** %8, align 8, !dbg !549
  call void @llvm.dbg.declare(metadata i8** %9, metadata !550, metadata !DIExpression()), !dbg !551
  %30 = load %struct.ms_add_password_t*, %struct.ms_add_password_t** %4, align 8, !dbg !552
  %31 = getelementptr inbounds %struct.ms_add_password_t, %struct.ms_add_password_t* %30, i32 0, i32 3, !dbg !553
  %32 = load i8*, i8** %31, align 8, !dbg !553
  store i8* %32, i8** %9, align 8, !dbg !551
  call void @llvm.dbg.declare(metadata i64* %10, metadata !554, metadata !DIExpression()), !dbg !555
  %33 = load %struct.ms_add_password_t*, %struct.ms_add_password_t** %4, align 8, !dbg !556
  %34 = getelementptr inbounds %struct.ms_add_password_t, %struct.ms_add_password_t* %33, i32 0, i32 4, !dbg !557
  %35 = load i64, i64* %34, align 8, !dbg !557
  store i64 %35, i64* %10, align 8, !dbg !555
  call void @llvm.dbg.declare(metadata i8** %11, metadata !558, metadata !DIExpression()), !dbg !559
  store i8* null, i8** %11, align 8, !dbg !559
  br label %36, !dbg !560

36:                                               ; preds = %21
  %37 = load i8*, i8** %6, align 8, !dbg !561
  %38 = icmp ne i8* %37, null, !dbg !561
  br i1 %38, label %39, label %45, !dbg !561

39:                                               ; preds = %36
  %40 = load i8*, i8** %6, align 8, !dbg !561
  %41 = load i64, i64* %7, align 8, !dbg !561
  %42 = call i32 @sgx_is_outside_enclave(i8* %40, i64 %41), !dbg !561
  %43 = icmp ne i32 %42, 0, !dbg !561
  br i1 %43, label %45, label %44, !dbg !564

44:                                               ; preds = %39
  store i32 2, i32* %2, align 4, !dbg !561
  br label %139, !dbg !561

45:                                               ; preds = %39, %36
  br label %46, !dbg !564

46:                                               ; preds = %45
  br label %47, !dbg !565

47:                                               ; preds = %46
  %48 = load i8*, i8** %9, align 8, !dbg !566
  %49 = icmp ne i8* %48, null, !dbg !566
  br i1 %49, label %50, label %56, !dbg !566

50:                                               ; preds = %47
  %51 = load i8*, i8** %9, align 8, !dbg !566
  %52 = load i64, i64* %10, align 8, !dbg !566
  %53 = call i32 @sgx_is_outside_enclave(i8* %51, i64 %52), !dbg !566
  %54 = icmp ne i32 %53, 0, !dbg !566
  br i1 %54, label %56, label %55, !dbg !569

55:                                               ; preds = %50
  store i32 2, i32* %2, align 4, !dbg !566
  br label %139, !dbg !566

56:                                               ; preds = %50, %47
  br label %57, !dbg !569

57:                                               ; preds = %56
  call void @llvm.x86.sse2.lfence(), !dbg !570
  %58 = load i8*, i8** %6, align 8, !dbg !571
  %59 = icmp ne i8* %58, null, !dbg !573
  br i1 %59, label %60, label %89, !dbg !574

60:                                               ; preds = %57
  %61 = load i64, i64* %7, align 8, !dbg !575
  %62 = icmp ne i64 %61, 0, !dbg !576
  br i1 %62, label %63, label %89, !dbg !577

63:                                               ; preds = %60
  %64 = load i64, i64* %7, align 8, !dbg !578
  %65 = call align 16 i8* @malloc(i64 %64), !dbg !580
  store i8* %65, i8** %8, align 8, !dbg !581
  %66 = load i8*, i8** %8, align 8, !dbg !582
  %67 = icmp eq i8* %66, null, !dbg !584
  br i1 %67, label %68, label %69, !dbg !585

68:                                               ; preds = %63
  store i32 3, i32* %5, align 4, !dbg !586
  br label %127, !dbg !588

69:                                               ; preds = %63
  %70 = load i8*, i8** %8, align 8, !dbg !589
  %71 = load i64, i64* %7, align 8, !dbg !591
  %72 = load i8*, i8** %6, align 8, !dbg !592
  %73 = load i64, i64* %7, align 8, !dbg !593
  %74 = call i32 @memcpy_s(i8* %70, i64 %71, i8* %72, i64 %73), !dbg !594
  %75 = icmp ne i32 %74, 0, !dbg !594
  br i1 %75, label %76, label %77, !dbg !595

76:                                               ; preds = %69
  store i32 1, i32* %5, align 4, !dbg !596
  br label %127, !dbg !598

77:                                               ; preds = %69
  %78 = load i8*, i8** %8, align 8, !dbg !599
  %79 = load i64, i64* %7, align 8, !dbg !600
  %80 = sub i64 %79, 1, !dbg !601
  %81 = getelementptr inbounds i8, i8* %78, i64 %80, !dbg !599
  store i8 0, i8* %81, align 1, !dbg !602
  %82 = load i64, i64* %7, align 8, !dbg !603
  %83 = load i8*, i8** %8, align 8, !dbg !605
  %84 = call i64 @strlen(i8* %83), !dbg !606
  %85 = add i64 %84, 1, !dbg !607
  %86 = icmp ne i64 %82, %85, !dbg !608
  br i1 %86, label %87, label %88, !dbg !609

87:                                               ; preds = %77
  store i32 1, i32* %5, align 4, !dbg !610
  br label %127, !dbg !612

88:                                               ; preds = %77
  br label %89, !dbg !613

89:                                               ; preds = %88, %60, %57
  %90 = load i8*, i8** %9, align 8, !dbg !614
  %91 = icmp ne i8* %90, null, !dbg !616
  br i1 %91, label %92, label %121, !dbg !617

92:                                               ; preds = %89
  %93 = load i64, i64* %10, align 8, !dbg !618
  %94 = icmp ne i64 %93, 0, !dbg !619
  br i1 %94, label %95, label %121, !dbg !620

95:                                               ; preds = %92
  %96 = load i64, i64* %10, align 8, !dbg !621
  %97 = call align 16 i8* @malloc(i64 %96), !dbg !623
  store i8* %97, i8** %11, align 8, !dbg !624
  %98 = load i8*, i8** %11, align 8, !dbg !625
  %99 = icmp eq i8* %98, null, !dbg !627
  br i1 %99, label %100, label %101, !dbg !628

100:                                              ; preds = %95
  store i32 3, i32* %5, align 4, !dbg !629
  br label %127, !dbg !631

101:                                              ; preds = %95
  %102 = load i8*, i8** %11, align 8, !dbg !632
  %103 = load i64, i64* %10, align 8, !dbg !634
  %104 = load i8*, i8** %9, align 8, !dbg !635
  %105 = load i64, i64* %10, align 8, !dbg !636
  %106 = call i32 @memcpy_s(i8* %102, i64 %103, i8* %104, i64 %105), !dbg !637
  %107 = icmp ne i32 %106, 0, !dbg !637
  br i1 %107, label %108, label %109, !dbg !638

108:                                              ; preds = %101
  store i32 1, i32* %5, align 4, !dbg !639
  br label %127, !dbg !641

109:                                              ; preds = %101
  %110 = load i8*, i8** %11, align 8, !dbg !642
  %111 = load i64, i64* %10, align 8, !dbg !643
  %112 = sub i64 %111, 1, !dbg !644
  %113 = getelementptr inbounds i8, i8* %110, i64 %112, !dbg !642
  store i8 0, i8* %113, align 1, !dbg !645
  %114 = load i64, i64* %10, align 8, !dbg !646
  %115 = load i8*, i8** %11, align 8, !dbg !648
  %116 = call i64 @strlen(i8* %115), !dbg !649
  %117 = add i64 %116, 1, !dbg !650
  %118 = icmp ne i64 %114, %117, !dbg !651
  br i1 %118, label %119, label %120, !dbg !652

119:                                              ; preds = %109
  store i32 1, i32* %5, align 4, !dbg !653
  br label %127, !dbg !655

120:                                              ; preds = %109
  br label %121, !dbg !656

121:                                              ; preds = %120, %92, %89
  %122 = load i8*, i8** %8, align 8, !dbg !657
  %123 = load i8*, i8** %11, align 8, !dbg !658
  %124 = call i32 @add_password(i8* %122, i8* %123), !dbg !659
  %125 = load %struct.ms_add_password_t*, %struct.ms_add_password_t** %4, align 8, !dbg !660
  %126 = getelementptr inbounds %struct.ms_add_password_t, %struct.ms_add_password_t* %125, i32 0, i32 0, !dbg !661
  store i32 %124, i32* %126, align 8, !dbg !662
  br label %127, !dbg !660

127:                                              ; preds = %121, %119, %108, %100, %87, %76, %68
  call void @llvm.dbg.label(metadata !663), !dbg !664
  %128 = load i8*, i8** %8, align 8, !dbg !665
  %129 = icmp ne i8* %128, null, !dbg !665
  br i1 %129, label %130, label %132, !dbg !667

130:                                              ; preds = %127
  %131 = load i8*, i8** %8, align 8, !dbg !668
  call void @free(i8* %131), !dbg !669
  br label %132, !dbg !669

132:                                              ; preds = %130, %127
  %133 = load i8*, i8** %11, align 8, !dbg !670
  %134 = icmp ne i8* %133, null, !dbg !670
  br i1 %134, label %135, label %137, !dbg !672

135:                                              ; preds = %132
  %136 = load i8*, i8** %11, align 8, !dbg !673
  call void @free(i8* %136), !dbg !674
  br label %137, !dbg !674

137:                                              ; preds = %135, %132
  %138 = load i32, i32* %5, align 4, !dbg !675
  store i32 %138, i32* %2, align 4, !dbg !676
  br label %139, !dbg !676

139:                                              ; preds = %137, %55, %44, %19
  %140 = load i32, i32* %2, align 4, !dbg !677
  ret i32 %140, !dbg !677
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @sgx_create_keystore(i8* %0) #0 !dbg !678 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ms_create_keystore_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !679, metadata !DIExpression()), !dbg !680
  br label %9, !dbg !681

9:                                                ; preds = %1
  %10 = load i8*, i8** %3, align 8, !dbg !682
  %11 = icmp ne i8* %10, null, !dbg !682
  br i1 %11, label %12, label %16, !dbg !682

12:                                               ; preds = %9
  %13 = load i8*, i8** %3, align 8, !dbg !682
  %14 = call i32 @sgx_is_outside_enclave(i8* %13, i64 24), !dbg !682
  %15 = icmp ne i32 %14, 0, !dbg !682
  br i1 %15, label %17, label %16, !dbg !685

16:                                               ; preds = %12, %9
  store i32 2, i32* %2, align 4, !dbg !682
  br label %81, !dbg !682

17:                                               ; preds = %12
  br label %18, !dbg !685

18:                                               ; preds = %17
  call void @llvm.x86.sse2.lfence(), !dbg !686
  call void @llvm.dbg.declare(metadata %struct.ms_create_keystore_t** %4, metadata !687, metadata !DIExpression()), !dbg !688
  %19 = load i8*, i8** %3, align 8, !dbg !689
  %20 = bitcast i8* %19 to %struct.ms_create_keystore_t*, !dbg !689
  store %struct.ms_create_keystore_t* %20, %struct.ms_create_keystore_t** %4, align 8, !dbg !688
  call void @llvm.dbg.declare(metadata i32* %5, metadata !690, metadata !DIExpression()), !dbg !691
  store i32 0, i32* %5, align 4, !dbg !691
  call void @llvm.dbg.declare(metadata i8** %6, metadata !692, metadata !DIExpression()), !dbg !693
  %21 = load %struct.ms_create_keystore_t*, %struct.ms_create_keystore_t** %4, align 8, !dbg !694
  %22 = getelementptr inbounds %struct.ms_create_keystore_t, %struct.ms_create_keystore_t* %21, i32 0, i32 1, !dbg !695
  %23 = load i8*, i8** %22, align 8, !dbg !695
  store i8* %23, i8** %6, align 8, !dbg !693
  call void @llvm.dbg.declare(metadata i64* %7, metadata !696, metadata !DIExpression()), !dbg !697
  %24 = load %struct.ms_create_keystore_t*, %struct.ms_create_keystore_t** %4, align 8, !dbg !698
  %25 = getelementptr inbounds %struct.ms_create_keystore_t, %struct.ms_create_keystore_t* %24, i32 0, i32 2, !dbg !699
  %26 = load i64, i64* %25, align 8, !dbg !699
  store i64 %26, i64* %7, align 8, !dbg !697
  call void @llvm.dbg.declare(metadata i8** %8, metadata !700, metadata !DIExpression()), !dbg !701
  store i8* null, i8** %8, align 8, !dbg !701
  br label %27, !dbg !702

27:                                               ; preds = %18
  %28 = load i8*, i8** %6, align 8, !dbg !703
  %29 = icmp ne i8* %28, null, !dbg !703
  br i1 %29, label %30, label %36, !dbg !703

30:                                               ; preds = %27
  %31 = load i8*, i8** %6, align 8, !dbg !703
  %32 = load i64, i64* %7, align 8, !dbg !703
  %33 = call i32 @sgx_is_outside_enclave(i8* %31, i64 %32), !dbg !703
  %34 = icmp ne i32 %33, 0, !dbg !703
  br i1 %34, label %36, label %35, !dbg !706

35:                                               ; preds = %30
  store i32 2, i32* %2, align 4, !dbg !703
  br label %81, !dbg !703

36:                                               ; preds = %30, %27
  br label %37, !dbg !706

37:                                               ; preds = %36
  call void @llvm.x86.sse2.lfence(), !dbg !707
  %38 = load i8*, i8** %6, align 8, !dbg !708
  %39 = icmp ne i8* %38, null, !dbg !710
  br i1 %39, label %40, label %69, !dbg !711

40:                                               ; preds = %37
  %41 = load i64, i64* %7, align 8, !dbg !712
  %42 = icmp ne i64 %41, 0, !dbg !713
  br i1 %42, label %43, label %69, !dbg !714

43:                                               ; preds = %40
  %44 = load i64, i64* %7, align 8, !dbg !715
  %45 = call align 16 i8* @malloc(i64 %44), !dbg !717
  store i8* %45, i8** %8, align 8, !dbg !718
  %46 = load i8*, i8** %8, align 8, !dbg !719
  %47 = icmp eq i8* %46, null, !dbg !721
  br i1 %47, label %48, label %49, !dbg !722

48:                                               ; preds = %43
  store i32 3, i32* %5, align 4, !dbg !723
  br label %74, !dbg !725

49:                                               ; preds = %43
  %50 = load i8*, i8** %8, align 8, !dbg !726
  %51 = load i64, i64* %7, align 8, !dbg !728
  %52 = load i8*, i8** %6, align 8, !dbg !729
  %53 = load i64, i64* %7, align 8, !dbg !730
  %54 = call i32 @memcpy_s(i8* %50, i64 %51, i8* %52, i64 %53), !dbg !731
  %55 = icmp ne i32 %54, 0, !dbg !731
  br i1 %55, label %56, label %57, !dbg !732

56:                                               ; preds = %49
  store i32 1, i32* %5, align 4, !dbg !733
  br label %74, !dbg !735

57:                                               ; preds = %49
  %58 = load i8*, i8** %8, align 8, !dbg !736
  %59 = load i64, i64* %7, align 8, !dbg !737
  %60 = sub i64 %59, 1, !dbg !738
  %61 = getelementptr inbounds i8, i8* %58, i64 %60, !dbg !736
  store i8 0, i8* %61, align 1, !dbg !739
  %62 = load i64, i64* %7, align 8, !dbg !740
  %63 = load i8*, i8** %8, align 8, !dbg !742
  %64 = call i64 @strlen(i8* %63), !dbg !743
  %65 = add i64 %64, 1, !dbg !744
  %66 = icmp ne i64 %62, %65, !dbg !745
  br i1 %66, label %67, label %68, !dbg !746

67:                                               ; preds = %57
  store i32 1, i32* %5, align 4, !dbg !747
  br label %74, !dbg !749

68:                                               ; preds = %57
  br label %69, !dbg !750

69:                                               ; preds = %68, %40, %37
  %70 = load i8*, i8** %8, align 8, !dbg !751
  %71 = call i32 @create_keystore(i8* %70), !dbg !752
  %72 = load %struct.ms_create_keystore_t*, %struct.ms_create_keystore_t** %4, align 8, !dbg !753
  %73 = getelementptr inbounds %struct.ms_create_keystore_t, %struct.ms_create_keystore_t* %72, i32 0, i32 0, !dbg !754
  store i32 %71, i32* %73, align 8, !dbg !755
  br label %74, !dbg !753

74:                                               ; preds = %69, %67, %56, %48
  call void @llvm.dbg.label(metadata !756), !dbg !757
  %75 = load i8*, i8** %8, align 8, !dbg !758
  %76 = icmp ne i8* %75, null, !dbg !758
  br i1 %76, label %77, label %79, !dbg !760

77:                                               ; preds = %74
  %78 = load i8*, i8** %8, align 8, !dbg !761
  call void @free(i8* %78), !dbg !762
  br label %79, !dbg !762

79:                                               ; preds = %77, %74
  %80 = load i32, i32* %5, align 4, !dbg !763
  store i32 %80, i32* %2, align 4, !dbg !764
  br label %81, !dbg !764

81:                                               ; preds = %79, %35, %16
  %82 = load i32, i32* %2, align 4, !dbg !765
  ret i32 %82, !dbg !765
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @sgx_get_password(i8* %0) #0 !dbg !766 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ms_get_password_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !767, metadata !DIExpression()), !dbg !768
  br label %15, !dbg !769

15:                                               ; preds = %1
  %16 = load i8*, i8** %3, align 8, !dbg !770
  %17 = icmp ne i8* %16, null, !dbg !770
  br i1 %17, label %18, label %22, !dbg !770

18:                                               ; preds = %15
  %19 = load i8*, i8** %3, align 8, !dbg !770
  %20 = call i32 @sgx_is_outside_enclave(i8* %19, i64 48), !dbg !770
  %21 = icmp ne i32 %20, 0, !dbg !770
  br i1 %21, label %23, label %22, !dbg !773

22:                                               ; preds = %18, %15
  store i32 2, i32* %2, align 4, !dbg !770
  br label %193, !dbg !770

23:                                               ; preds = %18
  br label %24, !dbg !773

24:                                               ; preds = %23
  call void @llvm.x86.sse2.lfence(), !dbg !774
  call void @llvm.dbg.declare(metadata %struct.ms_get_password_t** %4, metadata !775, metadata !DIExpression()), !dbg !776
  %25 = load i8*, i8** %3, align 8, !dbg !777
  %26 = bitcast i8* %25 to %struct.ms_get_password_t*, !dbg !777
  store %struct.ms_get_password_t* %26, %struct.ms_get_password_t** %4, align 8, !dbg !776
  call void @llvm.dbg.declare(metadata i32* %5, metadata !778, metadata !DIExpression()), !dbg !779
  store i32 0, i32* %5, align 4, !dbg !779
  call void @llvm.dbg.declare(metadata i8** %6, metadata !780, metadata !DIExpression()), !dbg !781
  %27 = load %struct.ms_get_password_t*, %struct.ms_get_password_t** %4, align 8, !dbg !782
  %28 = getelementptr inbounds %struct.ms_get_password_t, %struct.ms_get_password_t* %27, i32 0, i32 1, !dbg !783
  %29 = load i8*, i8** %28, align 8, !dbg !783
  store i8* %29, i8** %6, align 8, !dbg !781
  call void @llvm.dbg.declare(metadata i64* %7, metadata !784, metadata !DIExpression()), !dbg !785
  %30 = load %struct.ms_get_password_t*, %struct.ms_get_password_t** %4, align 8, !dbg !786
  %31 = getelementptr inbounds %struct.ms_get_password_t, %struct.ms_get_password_t* %30, i32 0, i32 2, !dbg !787
  %32 = load i64, i64* %31, align 8, !dbg !787
  store i64 %32, i64* %7, align 8, !dbg !785
  call void @llvm.dbg.declare(metadata i8** %8, metadata !788, metadata !DIExpression()), !dbg !789
  store i8* null, i8** %8, align 8, !dbg !789
  call void @llvm.dbg.declare(metadata i8** %9, metadata !790, metadata !DIExpression()), !dbg !791
  %33 = load %struct.ms_get_password_t*, %struct.ms_get_password_t** %4, align 8, !dbg !792
  %34 = getelementptr inbounds %struct.ms_get_password_t, %struct.ms_get_password_t* %33, i32 0, i32 3, !dbg !793
  %35 = load i8*, i8** %34, align 8, !dbg !793
  store i8* %35, i8** %9, align 8, !dbg !791
  call void @llvm.dbg.declare(metadata i64* %10, metadata !794, metadata !DIExpression()), !dbg !795
  store i64 16, i64* %10, align 8, !dbg !795
  call void @llvm.dbg.declare(metadata i8** %11, metadata !796, metadata !DIExpression()), !dbg !797
  store i8* null, i8** %11, align 8, !dbg !797
  call void @llvm.dbg.declare(metadata i8** %12, metadata !798, metadata !DIExpression()), !dbg !799
  %36 = load %struct.ms_get_password_t*, %struct.ms_get_password_t** %4, align 8, !dbg !800
  %37 = getelementptr inbounds %struct.ms_get_password_t, %struct.ms_get_password_t* %36, i32 0, i32 4, !dbg !801
  %38 = load i8*, i8** %37, align 8, !dbg !801
  store i8* %38, i8** %12, align 8, !dbg !799
  call void @llvm.dbg.declare(metadata i64* %13, metadata !802, metadata !DIExpression()), !dbg !803
  %39 = load %struct.ms_get_password_t*, %struct.ms_get_password_t** %4, align 8, !dbg !804
  %40 = getelementptr inbounds %struct.ms_get_password_t, %struct.ms_get_password_t* %39, i32 0, i32 5, !dbg !805
  %41 = load i64, i64* %40, align 8, !dbg !805
  store i64 %41, i64* %13, align 8, !dbg !803
  call void @llvm.dbg.declare(metadata i8** %14, metadata !806, metadata !DIExpression()), !dbg !807
  store i8* null, i8** %14, align 8, !dbg !807
  br label %42, !dbg !808

42:                                               ; preds = %24
  %43 = load i8*, i8** %6, align 8, !dbg !809
  %44 = icmp ne i8* %43, null, !dbg !809
  br i1 %44, label %45, label %51, !dbg !809

45:                                               ; preds = %42
  %46 = load i8*, i8** %6, align 8, !dbg !809
  %47 = load i64, i64* %7, align 8, !dbg !809
  %48 = call i32 @sgx_is_outside_enclave(i8* %46, i64 %47), !dbg !809
  %49 = icmp ne i32 %48, 0, !dbg !809
  br i1 %49, label %51, label %50, !dbg !812

50:                                               ; preds = %45
  store i32 2, i32* %2, align 4, !dbg !809
  br label %193, !dbg !809

51:                                               ; preds = %45, %42
  br label %52, !dbg !812

52:                                               ; preds = %51
  br label %53, !dbg !813

53:                                               ; preds = %52
  %54 = load i8*, i8** %9, align 8, !dbg !814
  %55 = icmp ne i8* %54, null, !dbg !814
  br i1 %55, label %56, label %62, !dbg !814

56:                                               ; preds = %53
  %57 = load i8*, i8** %9, align 8, !dbg !814
  %58 = load i64, i64* %10, align 8, !dbg !814
  %59 = call i32 @sgx_is_outside_enclave(i8* %57, i64 %58), !dbg !814
  %60 = icmp ne i32 %59, 0, !dbg !814
  br i1 %60, label %62, label %61, !dbg !817

61:                                               ; preds = %56
  store i32 2, i32* %2, align 4, !dbg !814
  br label %193, !dbg !814

62:                                               ; preds = %56, %53
  br label %63, !dbg !817

63:                                               ; preds = %62
  br label %64, !dbg !818

64:                                               ; preds = %63
  %65 = load i8*, i8** %12, align 8, !dbg !819
  %66 = icmp ne i8* %65, null, !dbg !819
  br i1 %66, label %67, label %73, !dbg !819

67:                                               ; preds = %64
  %68 = load i8*, i8** %12, align 8, !dbg !819
  %69 = load i64, i64* %13, align 8, !dbg !819
  %70 = call i32 @sgx_is_outside_enclave(i8* %68, i64 %69), !dbg !819
  %71 = icmp ne i32 %70, 0, !dbg !819
  br i1 %71, label %73, label %72, !dbg !822

72:                                               ; preds = %67
  store i32 2, i32* %2, align 4, !dbg !819
  br label %193, !dbg !819

73:                                               ; preds = %67, %64
  br label %74, !dbg !822

74:                                               ; preds = %73
  call void @llvm.x86.sse2.lfence(), !dbg !823
  %75 = load i8*, i8** %6, align 8, !dbg !824
  %76 = icmp ne i8* %75, null, !dbg !826
  br i1 %76, label %77, label %106, !dbg !827

77:                                               ; preds = %74
  %78 = load i64, i64* %7, align 8, !dbg !828
  %79 = icmp ne i64 %78, 0, !dbg !829
  br i1 %79, label %80, label %106, !dbg !830

80:                                               ; preds = %77
  %81 = load i64, i64* %7, align 8, !dbg !831
  %82 = call align 16 i8* @malloc(i64 %81), !dbg !833
  store i8* %82, i8** %8, align 8, !dbg !834
  %83 = load i8*, i8** %8, align 8, !dbg !835
  %84 = icmp eq i8* %83, null, !dbg !837
  br i1 %84, label %85, label %86, !dbg !838

85:                                               ; preds = %80
  store i32 3, i32* %5, align 4, !dbg !839
  br label %176, !dbg !841

86:                                               ; preds = %80
  %87 = load i8*, i8** %8, align 8, !dbg !842
  %88 = load i64, i64* %7, align 8, !dbg !844
  %89 = load i8*, i8** %6, align 8, !dbg !845
  %90 = load i64, i64* %7, align 8, !dbg !846
  %91 = call i32 @memcpy_s(i8* %87, i64 %88, i8* %89, i64 %90), !dbg !847
  %92 = icmp ne i32 %91, 0, !dbg !847
  br i1 %92, label %93, label %94, !dbg !848

93:                                               ; preds = %86
  store i32 1, i32* %5, align 4, !dbg !849
  br label %176, !dbg !851

94:                                               ; preds = %86
  %95 = load i8*, i8** %8, align 8, !dbg !852
  %96 = load i64, i64* %7, align 8, !dbg !853
  %97 = sub i64 %96, 1, !dbg !854
  %98 = getelementptr inbounds i8, i8* %95, i64 %97, !dbg !852
  store i8 0, i8* %98, align 1, !dbg !855
  %99 = load i64, i64* %7, align 8, !dbg !856
  %100 = load i8*, i8** %8, align 8, !dbg !858
  %101 = call i64 @strlen(i8* %100), !dbg !859
  %102 = add i64 %101, 1, !dbg !860
  %103 = icmp ne i64 %99, %102, !dbg !861
  br i1 %103, label %104, label %105, !dbg !862

104:                                              ; preds = %94
  store i32 1, i32* %5, align 4, !dbg !863
  br label %176, !dbg !865

105:                                              ; preds = %94
  br label %106, !dbg !866

106:                                              ; preds = %105, %77, %74
  %107 = load i8*, i8** %9, align 8, !dbg !867
  %108 = icmp ne i8* %107, null, !dbg !869
  br i1 %108, label %109, label %125, !dbg !870

109:                                              ; preds = %106
  %110 = load i64, i64* %10, align 8, !dbg !871
  %111 = icmp ne i64 %110, 0, !dbg !872
  br i1 %111, label %112, label %125, !dbg !873

112:                                              ; preds = %109
  %113 = load i64, i64* %10, align 8, !dbg !874
  %114 = urem i64 %113, 1, !dbg !877
  %115 = icmp ne i64 %114, 0, !dbg !878
  br i1 %115, label %116, label %117, !dbg !879

116:                                              ; preds = %112
  store i32 2, i32* %5, align 4, !dbg !880
  br label %176, !dbg !882

117:                                              ; preds = %112
  %118 = load i64, i64* %10, align 8, !dbg !883
  %119 = call align 16 i8* @malloc(i64 %118), !dbg !885
  store i8* %119, i8** %11, align 8, !dbg !886
  %120 = icmp eq i8* %119, null, !dbg !887
  br i1 %120, label %121, label %122, !dbg !888

121:                                              ; preds = %117
  store i32 3, i32* %5, align 4, !dbg !889
  br label %176, !dbg !891

122:                                              ; preds = %117
  %123 = load i8*, i8** %11, align 8, !dbg !892
  %124 = load i64, i64* %10, align 8, !dbg !893
  call void @llvm.memset.p0i8.i64(i8* align 1 %123, i8 0, i64 %124, i1 false), !dbg !894
  br label %125, !dbg !895

125:                                              ; preds = %122, %109, %106
  %126 = load i8*, i8** %12, align 8, !dbg !896
  %127 = icmp ne i8* %126, null, !dbg !898
  br i1 %127, label %128, label %157, !dbg !899

128:                                              ; preds = %125
  %129 = load i64, i64* %13, align 8, !dbg !900
  %130 = icmp ne i64 %129, 0, !dbg !901
  br i1 %130, label %131, label %157, !dbg !902

131:                                              ; preds = %128
  %132 = load i64, i64* %13, align 8, !dbg !903
  %133 = call align 16 i8* @malloc(i64 %132), !dbg !905
  store i8* %133, i8** %14, align 8, !dbg !906
  %134 = load i8*, i8** %14, align 8, !dbg !907
  %135 = icmp eq i8* %134, null, !dbg !909
  br i1 %135, label %136, label %137, !dbg !910

136:                                              ; preds = %131
  store i32 3, i32* %5, align 4, !dbg !911
  br label %176, !dbg !913

137:                                              ; preds = %131
  %138 = load i8*, i8** %14, align 8, !dbg !914
  %139 = load i64, i64* %13, align 8, !dbg !916
  %140 = load i8*, i8** %12, align 8, !dbg !917
  %141 = load i64, i64* %13, align 8, !dbg !918
  %142 = call i32 @memcpy_s(i8* %138, i64 %139, i8* %140, i64 %141), !dbg !919
  %143 = icmp ne i32 %142, 0, !dbg !919
  br i1 %143, label %144, label %145, !dbg !920

144:                                              ; preds = %137
  store i32 1, i32* %5, align 4, !dbg !921
  br label %176, !dbg !923

145:                                              ; preds = %137
  %146 = load i8*, i8** %14, align 8, !dbg !924
  %147 = load i64, i64* %13, align 8, !dbg !925
  %148 = sub i64 %147, 1, !dbg !926
  %149 = getelementptr inbounds i8, i8* %146, i64 %148, !dbg !924
  store i8 0, i8* %149, align 1, !dbg !927
  %150 = load i64, i64* %13, align 8, !dbg !928
  %151 = load i8*, i8** %14, align 8, !dbg !930
  %152 = call i64 @strlen(i8* %151), !dbg !931
  %153 = add i64 %152, 1, !dbg !932
  %154 = icmp ne i64 %150, %153, !dbg !933
  br i1 %154, label %155, label %156, !dbg !934

155:                                              ; preds = %145
  store i32 1, i32* %5, align 4, !dbg !935
  br label %176, !dbg !937

156:                                              ; preds = %145
  br label %157, !dbg !938

157:                                              ; preds = %156, %128, %125
  %158 = load i8*, i8** %8, align 8, !dbg !939
  %159 = load i8*, i8** %11, align 8, !dbg !940
  %160 = load i8*, i8** %14, align 8, !dbg !941
  %161 = call i32 @get_password(i8* %158, i8* %159, i8* %160), !dbg !942
  %162 = load %struct.ms_get_password_t*, %struct.ms_get_password_t** %4, align 8, !dbg !943
  %163 = getelementptr inbounds %struct.ms_get_password_t, %struct.ms_get_password_t* %162, i32 0, i32 0, !dbg !944
  store i32 %161, i32* %163, align 8, !dbg !945
  %164 = load i8*, i8** %11, align 8, !dbg !946
  %165 = icmp ne i8* %164, null, !dbg !946
  br i1 %165, label %166, label %175, !dbg !948

166:                                              ; preds = %157
  %167 = load i8*, i8** %9, align 8, !dbg !949
  %168 = load i64, i64* %10, align 8, !dbg !952
  %169 = load i8*, i8** %11, align 8, !dbg !953
  %170 = load i64, i64* %10, align 8, !dbg !954
  %171 = call i32 @memcpy_s(i8* %167, i64 %168, i8* %169, i64 %170), !dbg !955
  %172 = icmp ne i32 %171, 0, !dbg !955
  br i1 %172, label %173, label %174, !dbg !956

173:                                              ; preds = %166
  store i32 1, i32* %5, align 4, !dbg !957
  br label %176, !dbg !959

174:                                              ; preds = %166
  br label %175, !dbg !960

175:                                              ; preds = %174, %157
  br label %176, !dbg !946

176:                                              ; preds = %175, %173, %155, %144, %136, %121, %116, %104, %93, %85
  call void @llvm.dbg.label(metadata !961), !dbg !962
  %177 = load i8*, i8** %8, align 8, !dbg !963
  %178 = icmp ne i8* %177, null, !dbg !963
  br i1 %178, label %179, label %181, !dbg !965

179:                                              ; preds = %176
  %180 = load i8*, i8** %8, align 8, !dbg !966
  call void @free(i8* %180), !dbg !967
  br label %181, !dbg !967

181:                                              ; preds = %179, %176
  %182 = load i8*, i8** %11, align 8, !dbg !968
  %183 = icmp ne i8* %182, null, !dbg !968
  br i1 %183, label %184, label %186, !dbg !970

184:                                              ; preds = %181
  %185 = load i8*, i8** %11, align 8, !dbg !971
  call void @free(i8* %185), !dbg !972
  br label %186, !dbg !972

186:                                              ; preds = %184, %181
  %187 = load i8*, i8** %14, align 8, !dbg !973
  %188 = icmp ne i8* %187, null, !dbg !973
  br i1 %188, label %189, label %191, !dbg !975

189:                                              ; preds = %186
  %190 = load i8*, i8** %14, align 8, !dbg !976
  call void @free(i8* %190), !dbg !977
  br label %191, !dbg !977

191:                                              ; preds = %189, %186
  %192 = load i32, i32* %5, align 4, !dbg !978
  store i32 %192, i32* %2, align 4, !dbg !979
  br label %193, !dbg !979

193:                                              ; preds = %191, %72, %61, %50, %22
  %194 = load i32, i32* %2, align 4, !dbg !980
  ret i32 %194, !dbg !980
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @sgx_serialize_key_store(i8* %0) #0 !dbg !981 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ms_encrypt_and_serialize_key_store_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !982, metadata !DIExpression()), !dbg !983
  br label %9, !dbg !984

9:                                                ; preds = %1
  %10 = load i8*, i8** %3, align 8, !dbg !985
  %11 = icmp ne i8* %10, null, !dbg !985
  br i1 %11, label %12, label %16, !dbg !985

12:                                               ; preds = %9
  %13 = load i8*, i8** %3, align 8, !dbg !985
  %14 = call i32 @sgx_is_outside_enclave(i8* %13, i64 16), !dbg !985
  %15 = icmp ne i32 %14, 0, !dbg !985
  br i1 %15, label %17, label %16, !dbg !988

16:                                               ; preds = %12, %9
  store i32 2, i32* %2, align 4, !dbg !985
  br label %72, !dbg !985

17:                                               ; preds = %12
  br label %18, !dbg !988

18:                                               ; preds = %17
  call void @llvm.x86.sse2.lfence(), !dbg !989
  call void @llvm.dbg.declare(metadata %struct.ms_encrypt_and_serialize_key_store_t** %4, metadata !990, metadata !DIExpression()), !dbg !991
  %19 = load i8*, i8** %3, align 8, !dbg !992
  %20 = bitcast i8* %19 to %struct.ms_encrypt_and_serialize_key_store_t*, !dbg !992
  store %struct.ms_encrypt_and_serialize_key_store_t* %20, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !991
  call void @llvm.dbg.declare(metadata i32* %5, metadata !993, metadata !DIExpression()), !dbg !994
  store i32 0, i32* %5, align 4, !dbg !994
  call void @llvm.dbg.declare(metadata i8** %6, metadata !995, metadata !DIExpression()), !dbg !996
  %21 = load %struct.ms_encrypt_and_serialize_key_store_t*, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !997
  %22 = getelementptr inbounds %struct.ms_encrypt_and_serialize_key_store_t, %struct.ms_encrypt_and_serialize_key_store_t* %21, i32 0, i32 1, !dbg !998
  %23 = load i8*, i8** %22, align 8, !dbg !998
  store i8* %23, i8** %6, align 8, !dbg !996
  call void @llvm.dbg.declare(metadata i64* %7, metadata !999, metadata !DIExpression()), !dbg !1000
  store i64 70, i64* %7, align 8, !dbg !1000
  call void @llvm.dbg.declare(metadata i8** %8, metadata !1001, metadata !DIExpression()), !dbg !1002
  store i8* null, i8** %8, align 8, !dbg !1002
  br label %24, !dbg !1003

24:                                               ; preds = %18
  %25 = load i8*, i8** %6, align 8, !dbg !1004
  %26 = icmp ne i8* %25, null, !dbg !1004
  br i1 %26, label %27, label %33, !dbg !1004

27:                                               ; preds = %24
  %28 = load i8*, i8** %6, align 8, !dbg !1004
  %29 = load i64, i64* %7, align 8, !dbg !1004
  %30 = call i32 @sgx_is_outside_enclave(i8* %28, i64 %29), !dbg !1004
  %31 = icmp ne i32 %30, 0, !dbg !1004
  br i1 %31, label %33, label %32, !dbg !1007

32:                                               ; preds = %27
  store i32 2, i32* %2, align 4, !dbg !1004
  br label %72, !dbg !1004

33:                                               ; preds = %27, %24
  br label %34, !dbg !1007

34:                                               ; preds = %33
  call void @llvm.x86.sse2.lfence(), !dbg !1008
  %35 = load i8*, i8** %6, align 8, !dbg !1009
  %36 = icmp ne i8* %35, null, !dbg !1011
  br i1 %36, label %37, label %48, !dbg !1012

37:                                               ; preds = %34
  %38 = load i64, i64* %7, align 8, !dbg !1013
  %39 = icmp ne i64 %38, 0, !dbg !1014
  br i1 %39, label %40, label %48, !dbg !1015

40:                                               ; preds = %37
  %41 = load i64, i64* %7, align 8, !dbg !1016
  %42 = call align 16 i8* @malloc(i64 %41), !dbg !1019
  store i8* %42, i8** %8, align 8, !dbg !1020
  %43 = icmp eq i8* %42, null, !dbg !1021
  br i1 %43, label %44, label %45, !dbg !1022

44:                                               ; preds = %40
  store i32 3, i32* %5, align 4, !dbg !1023
  br label %65, !dbg !1025

45:                                               ; preds = %40
  %46 = load i8*, i8** %8, align 8, !dbg !1026
  %47 = load i64, i64* %7, align 8, !dbg !1027
  call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 0, i64 %47, i1 false), !dbg !1028
  br label %48, !dbg !1029

48:                                               ; preds = %45, %37, %34
  %49 = load i8*, i8** %8, align 8, !dbg !1030
  %50 = call i32 @serialize_key_store(i8* %49), !dbg !1031
  %51 = load %struct.ms_encrypt_and_serialize_key_store_t*, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !1032
  %52 = getelementptr inbounds %struct.ms_encrypt_and_serialize_key_store_t, %struct.ms_encrypt_and_serialize_key_store_t* %51, i32 0, i32 0, !dbg !1033
  store i32 %50, i32* %52, align 8, !dbg !1034
  %53 = load i8*, i8** %8, align 8, !dbg !1035
  %54 = icmp ne i8* %53, null, !dbg !1035
  br i1 %54, label %55, label %64, !dbg !1037

55:                                               ; preds = %48
  %56 = load i8*, i8** %6, align 8, !dbg !1038
  %57 = load i64, i64* %7, align 8, !dbg !1041
  %58 = load i8*, i8** %8, align 8, !dbg !1042
  %59 = load i64, i64* %7, align 8, !dbg !1043
  %60 = call i32 @memcpy_s(i8* %56, i64 %57, i8* %58, i64 %59), !dbg !1044
  %61 = icmp ne i32 %60, 0, !dbg !1044
  br i1 %61, label %62, label %63, !dbg !1045

62:                                               ; preds = %55
  store i32 1, i32* %5, align 4, !dbg !1046
  br label %65, !dbg !1048

63:                                               ; preds = %55
  br label %64, !dbg !1049

64:                                               ; preds = %63, %48
  br label %65, !dbg !1035

65:                                               ; preds = %64, %62, %44
  call void @llvm.dbg.label(metadata !1050), !dbg !1051
  %66 = load i8*, i8** %8, align 8, !dbg !1052
  %67 = icmp ne i8* %66, null, !dbg !1052
  br i1 %67, label %68, label %70, !dbg !1054

68:                                               ; preds = %65
  %69 = load i8*, i8** %8, align 8, !dbg !1055
  call void @free(i8* %69), !dbg !1056
  br label %70, !dbg !1056

70:                                               ; preds = %68, %65
  %71 = load i32, i32* %5, align 4, !dbg !1057
  store i32 %71, i32* %2, align 4, !dbg !1058
  br label %72, !dbg !1058

72:                                               ; preds = %70, %32, %16
  %73 = load i32, i32* %2, align 4, !dbg !1059
  ret i32 %73, !dbg !1059
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @sgx_decrypt_and_set_key_store(i8* %0) #0 !dbg !1060 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ms_encrypt_and_serialize_key_store_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1061, metadata !DIExpression()), !dbg !1062
  br label %9, !dbg !1063

9:                                                ; preds = %1
  %10 = load i8*, i8** %3, align 8, !dbg !1064
  %11 = icmp ne i8* %10, null, !dbg !1064
  br i1 %11, label %12, label %16, !dbg !1064

12:                                               ; preds = %9
  %13 = load i8*, i8** %3, align 8, !dbg !1064
  %14 = call i32 @sgx_is_outside_enclave(i8* %13, i64 16), !dbg !1064
  %15 = icmp ne i32 %14, 0, !dbg !1064
  br i1 %15, label %17, label %16, !dbg !1067

16:                                               ; preds = %12, %9
  store i32 2, i32* %2, align 4, !dbg !1064
  br label %67, !dbg !1064

17:                                               ; preds = %12
  br label %18, !dbg !1067

18:                                               ; preds = %17
  call void @llvm.x86.sse2.lfence(), !dbg !1068
  call void @llvm.dbg.declare(metadata %struct.ms_encrypt_and_serialize_key_store_t** %4, metadata !1069, metadata !DIExpression()), !dbg !1070
  %19 = load i8*, i8** %3, align 8, !dbg !1071
  %20 = bitcast i8* %19 to %struct.ms_encrypt_and_serialize_key_store_t*, !dbg !1071
  store %struct.ms_encrypt_and_serialize_key_store_t* %20, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !1070
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1072, metadata !DIExpression()), !dbg !1073
  store i32 0, i32* %5, align 4, !dbg !1073
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1074, metadata !DIExpression()), !dbg !1075
  %21 = load %struct.ms_encrypt_and_serialize_key_store_t*, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !1076
  %22 = getelementptr inbounds %struct.ms_encrypt_and_serialize_key_store_t, %struct.ms_encrypt_and_serialize_key_store_t* %21, i32 0, i32 1, !dbg !1077
  %23 = load i8*, i8** %22, align 8, !dbg !1077
  store i8* %23, i8** %6, align 8, !dbg !1075
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1078, metadata !DIExpression()), !dbg !1079
  store i64 70, i64* %7, align 8, !dbg !1079
  call void @llvm.dbg.declare(metadata i8** %8, metadata !1080, metadata !DIExpression()), !dbg !1081
  store i8* null, i8** %8, align 8, !dbg !1081
  br label %24, !dbg !1082

24:                                               ; preds = %18
  %25 = load i8*, i8** %6, align 8, !dbg !1083
  %26 = icmp ne i8* %25, null, !dbg !1083
  br i1 %26, label %27, label %33, !dbg !1083

27:                                               ; preds = %24
  %28 = load i8*, i8** %6, align 8, !dbg !1083
  %29 = load i64, i64* %7, align 8, !dbg !1083
  %30 = call i32 @sgx_is_outside_enclave(i8* %28, i64 %29), !dbg !1083
  %31 = icmp ne i32 %30, 0, !dbg !1083
  br i1 %31, label %33, label %32, !dbg !1086

32:                                               ; preds = %27
  store i32 2, i32* %2, align 4, !dbg !1083
  br label %67, !dbg !1083

33:                                               ; preds = %27, %24
  br label %34, !dbg !1086

34:                                               ; preds = %33
  call void @llvm.x86.sse2.lfence(), !dbg !1087
  %35 = load i8*, i8** %6, align 8, !dbg !1088
  %36 = icmp ne i8* %35, null, !dbg !1090
  br i1 %36, label %37, label %55, !dbg !1091

37:                                               ; preds = %34
  %38 = load i64, i64* %7, align 8, !dbg !1092
  %39 = icmp ne i64 %38, 0, !dbg !1093
  br i1 %39, label %40, label %55, !dbg !1094

40:                                               ; preds = %37
  %41 = load i64, i64* %7, align 8, !dbg !1095
  %42 = call align 16 i8* @malloc(i64 %41), !dbg !1097
  store i8* %42, i8** %8, align 8, !dbg !1098
  %43 = load i8*, i8** %8, align 8, !dbg !1099
  %44 = icmp eq i8* %43, null, !dbg !1101
  br i1 %44, label %45, label %46, !dbg !1102

45:                                               ; preds = %40
  store i32 3, i32* %5, align 4, !dbg !1103
  br label %60, !dbg !1105

46:                                               ; preds = %40
  %47 = load i8*, i8** %8, align 8, !dbg !1106
  %48 = load i64, i64* %7, align 8, !dbg !1108
  %49 = load i8*, i8** %6, align 8, !dbg !1109
  %50 = load i64, i64* %7, align 8, !dbg !1110
  %51 = call i32 @memcpy_s(i8* %47, i64 %48, i8* %49, i64 %50), !dbg !1111
  %52 = icmp ne i32 %51, 0, !dbg !1111
  br i1 %52, label %53, label %54, !dbg !1112

53:                                               ; preds = %46
  store i32 1, i32* %5, align 4, !dbg !1113
  br label %60, !dbg !1115

54:                                               ; preds = %46
  br label %55, !dbg !1116

55:                                               ; preds = %54, %37, %34
  %56 = load i8*, i8** %8, align 8, !dbg !1117
  %57 = call i32 @decrypt_and_set_key_store(i8* %56), !dbg !1118
  %58 = load %struct.ms_encrypt_and_serialize_key_store_t*, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !1119
  %59 = getelementptr inbounds %struct.ms_encrypt_and_serialize_key_store_t, %struct.ms_encrypt_and_serialize_key_store_t* %58, i32 0, i32 0, !dbg !1120
  store i32 %57, i32* %59, align 8, !dbg !1121
  br label %60, !dbg !1119

60:                                               ; preds = %55, %53, %45
  call void @llvm.dbg.label(metadata !1122), !dbg !1123
  %61 = load i8*, i8** %8, align 8, !dbg !1124
  %62 = icmp ne i8* %61, null, !dbg !1124
  br i1 %62, label %63, label %65, !dbg !1126

63:                                               ; preds = %60
  %64 = load i8*, i8** %8, align 8, !dbg !1127
  call void @free(i8* %64), !dbg !1128
  br label %65, !dbg !1128

65:                                               ; preds = %63, %60
  %66 = load i32, i32* %5, align 4, !dbg !1129
  store i32 %66, i32* %2, align 4, !dbg !1130
  br label %67, !dbg !1130

67:                                               ; preds = %65, %32, %16
  %68 = load i32, i32* %2, align 4, !dbg !1131
  ret i32 %68, !dbg !1131
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @sgx_encrypt_and_serialize_key_store(i8* %0) #0 !dbg !1132 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ms_encrypt_and_serialize_key_store_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1133, metadata !DIExpression()), !dbg !1134
  br label %9, !dbg !1135

9:                                                ; preds = %1
  %10 = load i8*, i8** %3, align 8, !dbg !1136
  %11 = icmp ne i8* %10, null, !dbg !1136
  br i1 %11, label %12, label %16, !dbg !1136

12:                                               ; preds = %9
  %13 = load i8*, i8** %3, align 8, !dbg !1136
  %14 = call i32 @sgx_is_outside_enclave(i8* %13, i64 16), !dbg !1136
  %15 = icmp ne i32 %14, 0, !dbg !1136
  br i1 %15, label %17, label %16, !dbg !1139

16:                                               ; preds = %12, %9
  store i32 2, i32* %2, align 4, !dbg !1136
  br label %72, !dbg !1136

17:                                               ; preds = %12
  br label %18, !dbg !1139

18:                                               ; preds = %17
  call void @llvm.x86.sse2.lfence(), !dbg !1140
  call void @llvm.dbg.declare(metadata %struct.ms_encrypt_and_serialize_key_store_t** %4, metadata !1141, metadata !DIExpression()), !dbg !1142
  %19 = load i8*, i8** %3, align 8, !dbg !1143
  %20 = bitcast i8* %19 to %struct.ms_encrypt_and_serialize_key_store_t*, !dbg !1143
  store %struct.ms_encrypt_and_serialize_key_store_t* %20, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !1142
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1144, metadata !DIExpression()), !dbg !1145
  store i32 0, i32* %5, align 4, !dbg !1145
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1146, metadata !DIExpression()), !dbg !1147
  %21 = load %struct.ms_encrypt_and_serialize_key_store_t*, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !1148
  %22 = getelementptr inbounds %struct.ms_encrypt_and_serialize_key_store_t, %struct.ms_encrypt_and_serialize_key_store_t* %21, i32 0, i32 1, !dbg !1149
  %23 = load i8*, i8** %22, align 8, !dbg !1149
  store i8* %23, i8** %6, align 8, !dbg !1147
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1150, metadata !DIExpression()), !dbg !1151
  store i64 70, i64* %7, align 8, !dbg !1151
  call void @llvm.dbg.declare(metadata i8** %8, metadata !1152, metadata !DIExpression()), !dbg !1153
  store i8* null, i8** %8, align 8, !dbg !1153
  br label %24, !dbg !1154

24:                                               ; preds = %18
  %25 = load i8*, i8** %6, align 8, !dbg !1155
  %26 = icmp ne i8* %25, null, !dbg !1155
  br i1 %26, label %27, label %33, !dbg !1155

27:                                               ; preds = %24
  %28 = load i8*, i8** %6, align 8, !dbg !1155
  %29 = load i64, i64* %7, align 8, !dbg !1155
  %30 = call i32 @sgx_is_outside_enclave(i8* %28, i64 %29), !dbg !1155
  %31 = icmp ne i32 %30, 0, !dbg !1155
  br i1 %31, label %33, label %32, !dbg !1158

32:                                               ; preds = %27
  store i32 2, i32* %2, align 4, !dbg !1155
  br label %72, !dbg !1155

33:                                               ; preds = %27, %24
  br label %34, !dbg !1158

34:                                               ; preds = %33
  call void @llvm.x86.sse2.lfence(), !dbg !1159
  %35 = load i8*, i8** %6, align 8, !dbg !1160
  %36 = icmp ne i8* %35, null, !dbg !1162
  br i1 %36, label %37, label %48, !dbg !1163

37:                                               ; preds = %34
  %38 = load i64, i64* %7, align 8, !dbg !1164
  %39 = icmp ne i64 %38, 0, !dbg !1165
  br i1 %39, label %40, label %48, !dbg !1166

40:                                               ; preds = %37
  %41 = load i64, i64* %7, align 8, !dbg !1167
  %42 = call align 16 i8* @malloc(i64 %41), !dbg !1170
  store i8* %42, i8** %8, align 8, !dbg !1171
  %43 = icmp eq i8* %42, null, !dbg !1172
  br i1 %43, label %44, label %45, !dbg !1173

44:                                               ; preds = %40
  store i32 3, i32* %5, align 4, !dbg !1174
  br label %65, !dbg !1176

45:                                               ; preds = %40
  %46 = load i8*, i8** %8, align 8, !dbg !1177
  %47 = load i64, i64* %7, align 8, !dbg !1178
  call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 0, i64 %47, i1 false), !dbg !1179
  br label %48, !dbg !1180

48:                                               ; preds = %45, %37, %34
  %49 = load i8*, i8** %8, align 8, !dbg !1181
  %50 = call i32 @encrypt_and_serialize_key_store(i8* %49), !dbg !1182
  %51 = load %struct.ms_encrypt_and_serialize_key_store_t*, %struct.ms_encrypt_and_serialize_key_store_t** %4, align 8, !dbg !1183
  %52 = getelementptr inbounds %struct.ms_encrypt_and_serialize_key_store_t, %struct.ms_encrypt_and_serialize_key_store_t* %51, i32 0, i32 0, !dbg !1184
  store i32 %50, i32* %52, align 8, !dbg !1185
  %53 = load i8*, i8** %8, align 8, !dbg !1186
  %54 = icmp ne i8* %53, null, !dbg !1186
  br i1 %54, label %55, label %64, !dbg !1188

55:                                               ; preds = %48
  %56 = load i8*, i8** %6, align 8, !dbg !1189
  %57 = load i64, i64* %7, align 8, !dbg !1192
  %58 = load i8*, i8** %8, align 8, !dbg !1193
  %59 = load i64, i64* %7, align 8, !dbg !1194
  %60 = call i32 @memcpy_s(i8* %56, i64 %57, i8* %58, i64 %59), !dbg !1195
  %61 = icmp ne i32 %60, 0, !dbg !1195
  br i1 %61, label %62, label %63, !dbg !1196

62:                                               ; preds = %55
  store i32 1, i32* %5, align 4, !dbg !1197
  br label %65, !dbg !1199

63:                                               ; preds = %55
  br label %64, !dbg !1200

64:                                               ; preds = %63, %48
  br label %65, !dbg !1186

65:                                               ; preds = %64, %62, %44
  call void @llvm.dbg.label(metadata !1201), !dbg !1202
  %66 = load i8*, i8** %8, align 8, !dbg !1203
  %67 = icmp ne i8* %66, null, !dbg !1203
  br i1 %67, label %68, label %70, !dbg !1205

68:                                               ; preds = %65
  %69 = load i8*, i8** %8, align 8, !dbg !1206
  call void @free(i8* %69), !dbg !1207
  br label %70, !dbg !1207

70:                                               ; preds = %68, %65
  %71 = load i32, i32* %5, align 4, !dbg !1208
  store i32 %71, i32* %2, align 4, !dbg !1209
  br label %72, !dbg !1209

72:                                               ; preds = %70, %32, %16
  %73 = load i32, i32* %2, align 4, !dbg !1210
  ret i32 %73, !dbg !1210
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @sgx_seal(i8* %0) #0 !dbg !1211 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ms_seal_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct._sealed_data_t*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct._sealed_data_t*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1212, metadata !DIExpression()), !dbg !1213
  br label %14, !dbg !1214

14:                                               ; preds = %1
  %15 = load i8*, i8** %3, align 8, !dbg !1215
  %16 = icmp ne i8* %15, null, !dbg !1215
  br i1 %16, label %17, label %21, !dbg !1215

17:                                               ; preds = %14
  %18 = load i8*, i8** %3, align 8, !dbg !1215
  %19 = call i32 @sgx_is_outside_enclave(i8* %18, i64 40), !dbg !1215
  %20 = icmp ne i32 %19, 0, !dbg !1215
  br i1 %20, label %22, label %21, !dbg !1218

21:                                               ; preds = %17, %14
  store i32 2, i32* %2, align 4, !dbg !1215
  br label %139, !dbg !1215

22:                                               ; preds = %17
  br label %23, !dbg !1218

23:                                               ; preds = %22
  call void @llvm.x86.sse2.lfence(), !dbg !1219
  call void @llvm.dbg.declare(metadata %struct.ms_seal_t** %4, metadata !1220, metadata !DIExpression()), !dbg !1221
  %24 = load i8*, i8** %3, align 8, !dbg !1222
  %25 = bitcast i8* %24 to %struct.ms_seal_t*, !dbg !1222
  store %struct.ms_seal_t* %25, %struct.ms_seal_t** %4, align 8, !dbg !1221
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1223, metadata !DIExpression()), !dbg !1224
  store i32 0, i32* %5, align 4, !dbg !1224
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1225, metadata !DIExpression()), !dbg !1226
  %26 = load %struct.ms_seal_t*, %struct.ms_seal_t** %4, align 8, !dbg !1227
  %27 = getelementptr inbounds %struct.ms_seal_t, %struct.ms_seal_t* %26, i32 0, i32 1, !dbg !1228
  %28 = load i8*, i8** %27, align 8, !dbg !1228
  store i8* %28, i8** %6, align 8, !dbg !1226
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1229, metadata !DIExpression()), !dbg !1230
  %29 = load %struct.ms_seal_t*, %struct.ms_seal_t** %4, align 8, !dbg !1231
  %30 = getelementptr inbounds %struct.ms_seal_t, %struct.ms_seal_t* %29, i32 0, i32 2, !dbg !1232
  %31 = load i64, i64* %30, align 8, !dbg !1232
  store i64 %31, i64* %7, align 8, !dbg !1230
  call void @llvm.dbg.declare(metadata i64* %8, metadata !1233, metadata !DIExpression()), !dbg !1234
  %32 = load i64, i64* %7, align 8, !dbg !1235
  store i64 %32, i64* %8, align 8, !dbg !1234
  call void @llvm.dbg.declare(metadata i8** %9, metadata !1236, metadata !DIExpression()), !dbg !1237
  store i8* null, i8** %9, align 8, !dbg !1237
  call void @llvm.dbg.declare(metadata %struct._sealed_data_t** %10, metadata !1238, metadata !DIExpression()), !dbg !1239
  %33 = load %struct.ms_seal_t*, %struct.ms_seal_t** %4, align 8, !dbg !1240
  %34 = getelementptr inbounds %struct.ms_seal_t, %struct.ms_seal_t* %33, i32 0, i32 3, !dbg !1241
  %35 = load %struct._sealed_data_t*, %struct._sealed_data_t** %34, align 8, !dbg !1241
  store %struct._sealed_data_t* %35, %struct._sealed_data_t** %10, align 8, !dbg !1239
  call void @llvm.dbg.declare(metadata i64* %11, metadata !1242, metadata !DIExpression()), !dbg !1243
  %36 = load %struct.ms_seal_t*, %struct.ms_seal_t** %4, align 8, !dbg !1244
  %37 = getelementptr inbounds %struct.ms_seal_t, %struct.ms_seal_t* %36, i32 0, i32 4, !dbg !1245
  %38 = load i64, i64* %37, align 8, !dbg !1245
  store i64 %38, i64* %11, align 8, !dbg !1243
  call void @llvm.dbg.declare(metadata i64* %12, metadata !1246, metadata !DIExpression()), !dbg !1247
  %39 = load i64, i64* %11, align 8, !dbg !1248
  store i64 %39, i64* %12, align 8, !dbg !1247
  call void @llvm.dbg.declare(metadata %struct._sealed_data_t** %13, metadata !1249, metadata !DIExpression()), !dbg !1250
  store %struct._sealed_data_t* null, %struct._sealed_data_t** %13, align 8, !dbg !1250
  br label %40, !dbg !1251

40:                                               ; preds = %23
  %41 = load i8*, i8** %6, align 8, !dbg !1252
  %42 = icmp ne i8* %41, null, !dbg !1252
  br i1 %42, label %43, label %49, !dbg !1252

43:                                               ; preds = %40
  %44 = load i8*, i8** %6, align 8, !dbg !1252
  %45 = load i64, i64* %8, align 8, !dbg !1252
  %46 = call i32 @sgx_is_outside_enclave(i8* %44, i64 %45), !dbg !1252
  %47 = icmp ne i32 %46, 0, !dbg !1252
  br i1 %47, label %49, label %48, !dbg !1255

48:                                               ; preds = %43
  store i32 2, i32* %2, align 4, !dbg !1252
  br label %139, !dbg !1252

49:                                               ; preds = %43, %40
  br label %50, !dbg !1255

50:                                               ; preds = %49
  br label %51, !dbg !1256

51:                                               ; preds = %50
  %52 = load %struct._sealed_data_t*, %struct._sealed_data_t** %10, align 8, !dbg !1257
  %53 = icmp ne %struct._sealed_data_t* %52, null, !dbg !1257
  br i1 %53, label %54, label %61, !dbg !1257

54:                                               ; preds = %51
  %55 = load %struct._sealed_data_t*, %struct._sealed_data_t** %10, align 8, !dbg !1257
  %56 = bitcast %struct._sealed_data_t* %55 to i8*, !dbg !1257
  %57 = load i64, i64* %12, align 8, !dbg !1257
  %58 = call i32 @sgx_is_outside_enclave(i8* %56, i64 %57), !dbg !1257
  %59 = icmp ne i32 %58, 0, !dbg !1257
  br i1 %59, label %61, label %60, !dbg !1260

60:                                               ; preds = %54
  store i32 2, i32* %2, align 4, !dbg !1257
  br label %139, !dbg !1257

61:                                               ; preds = %54, %51
  br label %62, !dbg !1260

62:                                               ; preds = %61
  call void @llvm.x86.sse2.lfence(), !dbg !1261
  %63 = load i8*, i8** %6, align 8, !dbg !1262
  %64 = icmp ne i8* %63, null, !dbg !1264
  br i1 %64, label %65, label %88, !dbg !1265

65:                                               ; preds = %62
  %66 = load i64, i64* %8, align 8, !dbg !1266
  %67 = icmp ne i64 %66, 0, !dbg !1267
  br i1 %67, label %68, label %88, !dbg !1268

68:                                               ; preds = %65
  %69 = load i64, i64* %8, align 8, !dbg !1269
  %70 = urem i64 %69, 1, !dbg !1272
  %71 = icmp ne i64 %70, 0, !dbg !1273
  br i1 %71, label %72, label %73, !dbg !1274

72:                                               ; preds = %68
  store i32 2, i32* %5, align 4, !dbg !1275
  br label %126, !dbg !1277

73:                                               ; preds = %68
  %74 = load i64, i64* %8, align 8, !dbg !1278
  %75 = call align 16 i8* @malloc(i64 %74), !dbg !1279
  store i8* %75, i8** %9, align 8, !dbg !1280
  %76 = load i8*, i8** %9, align 8, !dbg !1281
  %77 = icmp eq i8* %76, null, !dbg !1283
  br i1 %77, label %78, label %79, !dbg !1284

78:                                               ; preds = %73
  store i32 3, i32* %5, align 4, !dbg !1285
  br label %126, !dbg !1287

79:                                               ; preds = %73
  %80 = load i8*, i8** %9, align 8, !dbg !1288
  %81 = load i64, i64* %8, align 8, !dbg !1290
  %82 = load i8*, i8** %6, align 8, !dbg !1291
  %83 = load i64, i64* %8, align 8, !dbg !1292
  %84 = call i32 @memcpy_s(i8* %80, i64 %81, i8* %82, i64 %83), !dbg !1293
  %85 = icmp ne i32 %84, 0, !dbg !1293
  br i1 %85, label %86, label %87, !dbg !1294

86:                                               ; preds = %79
  store i32 1, i32* %5, align 4, !dbg !1295
  br label %126, !dbg !1297

87:                                               ; preds = %79
  br label %88, !dbg !1298

88:                                               ; preds = %87, %65, %62
  %89 = load %struct._sealed_data_t*, %struct._sealed_data_t** %10, align 8, !dbg !1299
  %90 = icmp ne %struct._sealed_data_t* %89, null, !dbg !1301
  br i1 %90, label %91, label %104, !dbg !1302

91:                                               ; preds = %88
  %92 = load i64, i64* %12, align 8, !dbg !1303
  %93 = icmp ne i64 %92, 0, !dbg !1304
  br i1 %93, label %94, label %104, !dbg !1305

94:                                               ; preds = %91
  %95 = load i64, i64* %12, align 8, !dbg !1306
  %96 = call align 16 i8* @malloc(i64 %95), !dbg !1309
  %97 = bitcast i8* %96 to %struct._sealed_data_t*, !dbg !1310
  store %struct._sealed_data_t* %97, %struct._sealed_data_t** %13, align 8, !dbg !1311
  %98 = icmp eq %struct._sealed_data_t* %97, null, !dbg !1312
  br i1 %98, label %99, label %100, !dbg !1313

99:                                               ; preds = %94
  store i32 3, i32* %5, align 4, !dbg !1314
  br label %126, !dbg !1316

100:                                              ; preds = %94
  %101 = load %struct._sealed_data_t*, %struct._sealed_data_t** %13, align 8, !dbg !1317
  %102 = bitcast %struct._sealed_data_t* %101 to i8*, !dbg !1318
  %103 = load i64, i64* %12, align 8, !dbg !1319
  call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %103, i1 false), !dbg !1318
  br label %104, !dbg !1320

104:                                              ; preds = %100, %91, %88
  %105 = load i8*, i8** %9, align 8, !dbg !1321
  %106 = load i64, i64* %7, align 8, !dbg !1322
  %107 = load %struct._sealed_data_t*, %struct._sealed_data_t** %13, align 8, !dbg !1323
  %108 = load i64, i64* %11, align 8, !dbg !1324
  %109 = call i32 @seal(i8* %105, i64 %106, %struct._sealed_data_t* %107, i64 %108), !dbg !1325
  %110 = load %struct.ms_seal_t*, %struct.ms_seal_t** %4, align 8, !dbg !1326
  %111 = getelementptr inbounds %struct.ms_seal_t, %struct.ms_seal_t* %110, i32 0, i32 0, !dbg !1327
  store i32 %109, i32* %111, align 8, !dbg !1328
  %112 = load %struct._sealed_data_t*, %struct._sealed_data_t** %13, align 8, !dbg !1329
  %113 = icmp ne %struct._sealed_data_t* %112, null, !dbg !1329
  br i1 %113, label %114, label %125, !dbg !1331

114:                                              ; preds = %104
  %115 = load %struct._sealed_data_t*, %struct._sealed_data_t** %10, align 8, !dbg !1332
  %116 = bitcast %struct._sealed_data_t* %115 to i8*, !dbg !1332
  %117 = load i64, i64* %12, align 8, !dbg !1335
  %118 = load %struct._sealed_data_t*, %struct._sealed_data_t** %13, align 8, !dbg !1336
  %119 = bitcast %struct._sealed_data_t* %118 to i8*, !dbg !1336
  %120 = load i64, i64* %12, align 8, !dbg !1337
  %121 = call i32 @memcpy_s(i8* %116, i64 %117, i8* %119, i64 %120), !dbg !1338
  %122 = icmp ne i32 %121, 0, !dbg !1338
  br i1 %122, label %123, label %124, !dbg !1339

123:                                              ; preds = %114
  store i32 1, i32* %5, align 4, !dbg !1340
  br label %126, !dbg !1342

124:                                              ; preds = %114
  br label %125, !dbg !1343

125:                                              ; preds = %124, %104
  br label %126, !dbg !1329

126:                                              ; preds = %125, %123, %99, %86, %78, %72
  call void @llvm.dbg.label(metadata !1344), !dbg !1345
  %127 = load i8*, i8** %9, align 8, !dbg !1346
  %128 = icmp ne i8* %127, null, !dbg !1346
  br i1 %128, label %129, label %131, !dbg !1348

129:                                              ; preds = %126
  %130 = load i8*, i8** %9, align 8, !dbg !1349
  call void @free(i8* %130), !dbg !1350
  br label %131, !dbg !1350

131:                                              ; preds = %129, %126
  %132 = load %struct._sealed_data_t*, %struct._sealed_data_t** %13, align 8, !dbg !1351
  %133 = icmp ne %struct._sealed_data_t* %132, null, !dbg !1351
  br i1 %133, label %134, label %137, !dbg !1353

134:                                              ; preds = %131
  %135 = load %struct._sealed_data_t*, %struct._sealed_data_t** %13, align 8, !dbg !1354
  %136 = bitcast %struct._sealed_data_t* %135 to i8*, !dbg !1354
  call void @free(i8* %136), !dbg !1355
  br label %137, !dbg !1355

137:                                              ; preds = %134, %131
  %138 = load i32, i32* %5, align 4, !dbg !1356
  store i32 %138, i32* %2, align 4, !dbg !1357
  br label %139, !dbg !1357

139:                                              ; preds = %137, %60, %48, %21
  %140 = load i32, i32* %2, align 4, !dbg !1358
  ret i32 %140, !dbg !1358
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @sgx_unseal(i8* %0) #0 !dbg !1359 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ms_unseal_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct._sealed_data_t*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct._sealed_data_t*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1360, metadata !DIExpression()), !dbg !1361
  br label %14, !dbg !1362

14:                                               ; preds = %1
  %15 = load i8*, i8** %3, align 8, !dbg !1363
  %16 = icmp ne i8* %15, null, !dbg !1363
  br i1 %16, label %17, label %21, !dbg !1363

17:                                               ; preds = %14
  %18 = load i8*, i8** %3, align 8, !dbg !1363
  %19 = call i32 @sgx_is_outside_enclave(i8* %18, i64 40), !dbg !1363
  %20 = icmp ne i32 %19, 0, !dbg !1363
  br i1 %20, label %22, label %21, !dbg !1366

21:                                               ; preds = %17, %14
  store i32 2, i32* %2, align 4, !dbg !1363
  br label %139, !dbg !1363

22:                                               ; preds = %17
  br label %23, !dbg !1366

23:                                               ; preds = %22
  call void @llvm.x86.sse2.lfence(), !dbg !1367
  call void @llvm.dbg.declare(metadata %struct.ms_unseal_t** %4, metadata !1368, metadata !DIExpression()), !dbg !1369
  %24 = load i8*, i8** %3, align 8, !dbg !1370
  %25 = bitcast i8* %24 to %struct.ms_unseal_t*, !dbg !1370
  store %struct.ms_unseal_t* %25, %struct.ms_unseal_t** %4, align 8, !dbg !1369
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1371, metadata !DIExpression()), !dbg !1372
  store i32 0, i32* %5, align 4, !dbg !1372
  call void @llvm.dbg.declare(metadata %struct._sealed_data_t** %6, metadata !1373, metadata !DIExpression()), !dbg !1374
  %26 = load %struct.ms_unseal_t*, %struct.ms_unseal_t** %4, align 8, !dbg !1375
  %27 = getelementptr inbounds %struct.ms_unseal_t, %struct.ms_unseal_t* %26, i32 0, i32 1, !dbg !1376
  %28 = load %struct._sealed_data_t*, %struct._sealed_data_t** %27, align 8, !dbg !1376
  store %struct._sealed_data_t* %28, %struct._sealed_data_t** %6, align 8, !dbg !1374
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1377, metadata !DIExpression()), !dbg !1378
  %29 = load %struct.ms_unseal_t*, %struct.ms_unseal_t** %4, align 8, !dbg !1379
  %30 = getelementptr inbounds %struct.ms_unseal_t, %struct.ms_unseal_t* %29, i32 0, i32 2, !dbg !1380
  %31 = load i64, i64* %30, align 8, !dbg !1380
  store i64 %31, i64* %7, align 8, !dbg !1378
  call void @llvm.dbg.declare(metadata i64* %8, metadata !1381, metadata !DIExpression()), !dbg !1382
  %32 = load i64, i64* %7, align 8, !dbg !1383
  store i64 %32, i64* %8, align 8, !dbg !1382
  call void @llvm.dbg.declare(metadata %struct._sealed_data_t** %9, metadata !1384, metadata !DIExpression()), !dbg !1385
  store %struct._sealed_data_t* null, %struct._sealed_data_t** %9, align 8, !dbg !1385
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1386, metadata !DIExpression()), !dbg !1387
  %33 = load %struct.ms_unseal_t*, %struct.ms_unseal_t** %4, align 8, !dbg !1388
  %34 = getelementptr inbounds %struct.ms_unseal_t, %struct.ms_unseal_t* %33, i32 0, i32 3, !dbg !1389
  %35 = load i8*, i8** %34, align 8, !dbg !1389
  store i8* %35, i8** %10, align 8, !dbg !1387
  call void @llvm.dbg.declare(metadata i32* %11, metadata !1390, metadata !DIExpression()), !dbg !1391
  %36 = load %struct.ms_unseal_t*, %struct.ms_unseal_t** %4, align 8, !dbg !1392
  %37 = getelementptr inbounds %struct.ms_unseal_t, %struct.ms_unseal_t* %36, i32 0, i32 4, !dbg !1393
  %38 = load i32, i32* %37, align 8, !dbg !1393
  store i32 %38, i32* %11, align 4, !dbg !1391
  call void @llvm.dbg.declare(metadata i64* %12, metadata !1394, metadata !DIExpression()), !dbg !1395
  %39 = load i32, i32* %11, align 4, !dbg !1396
  %40 = zext i32 %39 to i64, !dbg !1396
  store i64 %40, i64* %12, align 8, !dbg !1395
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1397, metadata !DIExpression()), !dbg !1398
  store i8* null, i8** %13, align 8, !dbg !1398
  br label %41, !dbg !1399

41:                                               ; preds = %23
  %42 = load %struct._sealed_data_t*, %struct._sealed_data_t** %6, align 8, !dbg !1400
  %43 = icmp ne %struct._sealed_data_t* %42, null, !dbg !1400
  br i1 %43, label %44, label %51, !dbg !1400

44:                                               ; preds = %41
  %45 = load %struct._sealed_data_t*, %struct._sealed_data_t** %6, align 8, !dbg !1400
  %46 = bitcast %struct._sealed_data_t* %45 to i8*, !dbg !1400
  %47 = load i64, i64* %8, align 8, !dbg !1400
  %48 = call i32 @sgx_is_outside_enclave(i8* %46, i64 %47), !dbg !1400
  %49 = icmp ne i32 %48, 0, !dbg !1400
  br i1 %49, label %51, label %50, !dbg !1403

50:                                               ; preds = %44
  store i32 2, i32* %2, align 4, !dbg !1400
  br label %139, !dbg !1400

51:                                               ; preds = %44, %41
  br label %52, !dbg !1403

52:                                               ; preds = %51
  br label %53, !dbg !1404

53:                                               ; preds = %52
  %54 = load i8*, i8** %10, align 8, !dbg !1405
  %55 = icmp ne i8* %54, null, !dbg !1405
  br i1 %55, label %56, label %62, !dbg !1405

56:                                               ; preds = %53
  %57 = load i8*, i8** %10, align 8, !dbg !1405
  %58 = load i64, i64* %12, align 8, !dbg !1405
  %59 = call i32 @sgx_is_outside_enclave(i8* %57, i64 %58), !dbg !1405
  %60 = icmp ne i32 %59, 0, !dbg !1405
  br i1 %60, label %62, label %61, !dbg !1408

61:                                               ; preds = %56
  store i32 2, i32* %2, align 4, !dbg !1405
  br label %139, !dbg !1405

62:                                               ; preds = %56, %53
  br label %63, !dbg !1408

63:                                               ; preds = %62
  call void @llvm.x86.sse2.lfence(), !dbg !1409
  %64 = load %struct._sealed_data_t*, %struct._sealed_data_t** %6, align 8, !dbg !1410
  %65 = icmp ne %struct._sealed_data_t* %64, null, !dbg !1412
  br i1 %65, label %66, label %87, !dbg !1413

66:                                               ; preds = %63
  %67 = load i64, i64* %8, align 8, !dbg !1414
  %68 = icmp ne i64 %67, 0, !dbg !1415
  br i1 %68, label %69, label %87, !dbg !1416

69:                                               ; preds = %66
  %70 = load i64, i64* %8, align 8, !dbg !1417
  %71 = call align 16 i8* @malloc(i64 %70), !dbg !1419
  %72 = bitcast i8* %71 to %struct._sealed_data_t*, !dbg !1420
  store %struct._sealed_data_t* %72, %struct._sealed_data_t** %9, align 8, !dbg !1421
  %73 = load %struct._sealed_data_t*, %struct._sealed_data_t** %9, align 8, !dbg !1422
  %74 = icmp eq %struct._sealed_data_t* %73, null, !dbg !1424
  br i1 %74, label %75, label %76, !dbg !1425

75:                                               ; preds = %69
  store i32 3, i32* %5, align 4, !dbg !1426
  br label %126, !dbg !1428

76:                                               ; preds = %69
  %77 = load %struct._sealed_data_t*, %struct._sealed_data_t** %9, align 8, !dbg !1429
  %78 = bitcast %struct._sealed_data_t* %77 to i8*, !dbg !1429
  %79 = load i64, i64* %8, align 8, !dbg !1431
  %80 = load %struct._sealed_data_t*, %struct._sealed_data_t** %6, align 8, !dbg !1432
  %81 = bitcast %struct._sealed_data_t* %80 to i8*, !dbg !1432
  %82 = load i64, i64* %8, align 8, !dbg !1433
  %83 = call i32 @memcpy_s(i8* %78, i64 %79, i8* %81, i64 %82), !dbg !1434
  %84 = icmp ne i32 %83, 0, !dbg !1434
  br i1 %84, label %85, label %86, !dbg !1435

85:                                               ; preds = %76
  store i32 1, i32* %5, align 4, !dbg !1436
  br label %126, !dbg !1438

86:                                               ; preds = %76
  br label %87, !dbg !1439

87:                                               ; preds = %86, %66, %63
  %88 = load i8*, i8** %10, align 8, !dbg !1440
  %89 = icmp ne i8* %88, null, !dbg !1442
  br i1 %89, label %90, label %106, !dbg !1443

90:                                               ; preds = %87
  %91 = load i64, i64* %12, align 8, !dbg !1444
  %92 = icmp ne i64 %91, 0, !dbg !1445
  br i1 %92, label %93, label %106, !dbg !1446

93:                                               ; preds = %90
  %94 = load i64, i64* %12, align 8, !dbg !1447
  %95 = urem i64 %94, 1, !dbg !1450
  %96 = icmp ne i64 %95, 0, !dbg !1451
  br i1 %96, label %97, label %98, !dbg !1452

97:                                               ; preds = %93
  store i32 2, i32* %5, align 4, !dbg !1453
  br label %126, !dbg !1455

98:                                               ; preds = %93
  %99 = load i64, i64* %12, align 8, !dbg !1456
  %100 = call align 16 i8* @malloc(i64 %99), !dbg !1458
  store i8* %100, i8** %13, align 8, !dbg !1459
  %101 = icmp eq i8* %100, null, !dbg !1460
  br i1 %101, label %102, label %103, !dbg !1461

102:                                              ; preds = %98
  store i32 3, i32* %5, align 4, !dbg !1462
  br label %126, !dbg !1464

103:                                              ; preds = %98
  %104 = load i8*, i8** %13, align 8, !dbg !1465
  %105 = load i64, i64* %12, align 8, !dbg !1466
  call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 0, i64 %105, i1 false), !dbg !1467
  br label %106, !dbg !1468

106:                                              ; preds = %103, %90, %87
  %107 = load %struct._sealed_data_t*, %struct._sealed_data_t** %9, align 8, !dbg !1469
  %108 = load i64, i64* %7, align 8, !dbg !1470
  %109 = load i8*, i8** %13, align 8, !dbg !1471
  %110 = load i32, i32* %11, align 4, !dbg !1472
  %111 = call i32 @unseal(%struct._sealed_data_t* %107, i64 %108, i8* %109, i32 %110), !dbg !1473
  %112 = load %struct.ms_unseal_t*, %struct.ms_unseal_t** %4, align 8, !dbg !1474
  %113 = getelementptr inbounds %struct.ms_unseal_t, %struct.ms_unseal_t* %112, i32 0, i32 0, !dbg !1475
  store i32 %111, i32* %113, align 8, !dbg !1476
  %114 = load i8*, i8** %13, align 8, !dbg !1477
  %115 = icmp ne i8* %114, null, !dbg !1477
  br i1 %115, label %116, label %125, !dbg !1479

116:                                              ; preds = %106
  %117 = load i8*, i8** %10, align 8, !dbg !1480
  %118 = load i64, i64* %12, align 8, !dbg !1483
  %119 = load i8*, i8** %13, align 8, !dbg !1484
  %120 = load i64, i64* %12, align 8, !dbg !1485
  %121 = call i32 @memcpy_s(i8* %117, i64 %118, i8* %119, i64 %120), !dbg !1486
  %122 = icmp ne i32 %121, 0, !dbg !1486
  br i1 %122, label %123, label %124, !dbg !1487

123:                                              ; preds = %116
  store i32 1, i32* %5, align 4, !dbg !1488
  br label %126, !dbg !1490

124:                                              ; preds = %116
  br label %125, !dbg !1491

125:                                              ; preds = %124, %106
  br label %126, !dbg !1477

126:                                              ; preds = %125, %123, %102, %97, %85, %75
  call void @llvm.dbg.label(metadata !1492), !dbg !1493
  %127 = load %struct._sealed_data_t*, %struct._sealed_data_t** %9, align 8, !dbg !1494
  %128 = icmp ne %struct._sealed_data_t* %127, null, !dbg !1494
  br i1 %128, label %129, label %132, !dbg !1496

129:                                              ; preds = %126
  %130 = load %struct._sealed_data_t*, %struct._sealed_data_t** %9, align 8, !dbg !1497
  %131 = bitcast %struct._sealed_data_t* %130 to i8*, !dbg !1497
  call void @free(i8* %131), !dbg !1498
  br label %132, !dbg !1498

132:                                              ; preds = %129, %126
  %133 = load i8*, i8** %13, align 8, !dbg !1499
  %134 = icmp ne i8* %133, null, !dbg !1499
  br i1 %134, label %135, label %137, !dbg !1501

135:                                              ; preds = %132
  %136 = load i8*, i8** %13, align 8, !dbg !1502
  call void @free(i8* %136), !dbg !1503
  br label %137, !dbg !1503

137:                                              ; preds = %135, %132
  %138 = load i32, i32* %5, align 4, !dbg !1504
  store i32 %138, i32* %2, align 4, !dbg !1505
  br label %139, !dbg !1505

139:                                              ; preds = %137, %61, %50, %21
  %140 = load i32, i32* %2, align 4, !dbg !1506
  ret i32 %140, !dbg !1506
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @sgx_is_outside_enclave(i8*, i64) #2

; Function Attrs: nounwind
declare void @llvm.x86.sse2.lfence() #3

declare align 16 i8* @malloc(i64) #2

declare i32 @memcpy_s(i8*, i64, i8*, i64) #2

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare void @free(i8*) #2

declare i64 @strlen(i8*) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @ocall_print(i8* %0) #0 !dbg !1507 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca %struct.ms_ocall_print_t*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1510, metadata !DIExpression()), !dbg !1511
  call void @llvm.dbg.declare(metadata i32* %4, metadata !1512, metadata !DIExpression()), !dbg !1513
  store i32 0, i32* %4, align 4, !dbg !1513
  call void @llvm.dbg.declare(metadata i64* %5, metadata !1514, metadata !DIExpression()), !dbg !1515
  %9 = load i8*, i8** %3, align 8, !dbg !1516
  %10 = icmp ne i8* %9, null, !dbg !1516
  br i1 %10, label %11, label %15, !dbg !1516

11:                                               ; preds = %1
  %12 = load i8*, i8** %3, align 8, !dbg !1517
  %13 = call i64 @strlen(i8* %12), !dbg !1518
  %14 = add i64 %13, 1, !dbg !1519
  br label %16, !dbg !1516

15:                                               ; preds = %1
  br label %16, !dbg !1516

16:                                               ; preds = %15, %11
  %17 = phi i64 [ %14, %11 ], [ 0, %15 ], !dbg !1516
  store i64 %17, i64* %5, align 8, !dbg !1515
  call void @llvm.dbg.declare(metadata %struct.ms_ocall_print_t** %6, metadata !1520, metadata !DIExpression()), !dbg !1521
  store %struct.ms_ocall_print_t* null, %struct.ms_ocall_print_t** %6, align 8, !dbg !1521
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1522, metadata !DIExpression()), !dbg !1523
  store i64 8, i64* %7, align 8, !dbg !1523
  call void @llvm.dbg.declare(metadata i8** %8, metadata !1524, metadata !DIExpression()), !dbg !1525
  store i8* null, i8** %8, align 8, !dbg !1525
  br label %18, !dbg !1526

18:                                               ; preds = %16
  %19 = load i8*, i8** %3, align 8, !dbg !1527
  %20 = icmp ne i8* %19, null, !dbg !1527
  br i1 %20, label %21, label %27, !dbg !1527

21:                                               ; preds = %18
  %22 = load i8*, i8** %3, align 8, !dbg !1527
  %23 = load i64, i64* %5, align 8, !dbg !1527
  %24 = call i32 @sgx_is_within_enclave(i8* %22, i64 %23), !dbg !1527
  %25 = icmp ne i32 %24, 0, !dbg !1527
  br i1 %25, label %27, label %26, !dbg !1530

26:                                               ; preds = %21
  store i32 2, i32* %2, align 4, !dbg !1527
  br label %101, !dbg !1527

27:                                               ; preds = %21, %18
  br label %28, !dbg !1530

28:                                               ; preds = %27
  %29 = load i8*, i8** %3, align 8, !dbg !1531
  %30 = icmp ne i8* %29, null, !dbg !1531
  br i1 %30, label %31, label %33, !dbg !1531

31:                                               ; preds = %28
  %32 = load i64, i64* %5, align 8, !dbg !1531
  br label %34, !dbg !1531

33:                                               ; preds = %28
  br label %34, !dbg !1531

34:                                               ; preds = %33, %31
  %35 = phi i64 [ %32, %31 ], [ 0, %33 ], !dbg !1531
  %36 = load i64, i64* %7, align 8, !dbg !1531
  %37 = add i64 %36, %35, !dbg !1531
  store i64 %37, i64* %7, align 8, !dbg !1531
  %38 = load i8*, i8** %3, align 8, !dbg !1531
  %39 = icmp ne i8* %38, null, !dbg !1531
  br i1 %39, label %40, label %42, !dbg !1531

40:                                               ; preds = %34
  %41 = load i64, i64* %5, align 8, !dbg !1531
  br label %43, !dbg !1531

42:                                               ; preds = %34
  br label %43, !dbg !1531

43:                                               ; preds = %42, %40
  %44 = phi i64 [ %41, %40 ], [ 0, %42 ], !dbg !1531
  %45 = icmp ult i64 %37, %44, !dbg !1531
  br i1 %45, label %46, label %47, !dbg !1533

46:                                               ; preds = %43
  store i32 2, i32* %2, align 4, !dbg !1534
  br label %101, !dbg !1534

47:                                               ; preds = %43
  %48 = load i64, i64* %7, align 8, !dbg !1535
  %49 = call i8* @sgx_ocalloc(i64 %48), !dbg !1536
  store i8* %49, i8** %8, align 8, !dbg !1537
  %50 = load i8*, i8** %8, align 8, !dbg !1538
  %51 = icmp eq i8* %50, null, !dbg !1540
  br i1 %51, label %52, label %53, !dbg !1541

52:                                               ; preds = %47
  call void @sgx_ocfree(), !dbg !1542
  store i32 1, i32* %2, align 4, !dbg !1544
  br label %101, !dbg !1544

53:                                               ; preds = %47
  %54 = load i8*, i8** %8, align 8, !dbg !1545
  %55 = bitcast i8* %54 to %struct.ms_ocall_print_t*, !dbg !1546
  store %struct.ms_ocall_print_t* %55, %struct.ms_ocall_print_t** %6, align 8, !dbg !1547
  %56 = load i8*, i8** %8, align 8, !dbg !1548
  %57 = ptrtoint i8* %56 to i64, !dbg !1549
  %58 = add i64 %57, 8, !dbg !1550
  %59 = inttoptr i64 %58 to i8*, !dbg !1551
  store i8* %59, i8** %8, align 8, !dbg !1552
  %60 = load i64, i64* %7, align 8, !dbg !1553
  %61 = sub i64 %60, 8, !dbg !1553
  store i64 %61, i64* %7, align 8, !dbg !1553
  %62 = load i8*, i8** %3, align 8, !dbg !1554
  %63 = icmp ne i8* %62, null, !dbg !1556
  br i1 %63, label %64, label %89, !dbg !1557

64:                                               ; preds = %53
  %65 = load i8*, i8** %8, align 8, !dbg !1558
  %66 = load %struct.ms_ocall_print_t*, %struct.ms_ocall_print_t** %6, align 8, !dbg !1560
  %67 = getelementptr inbounds %struct.ms_ocall_print_t, %struct.ms_ocall_print_t* %66, i32 0, i32 0, !dbg !1561
  store i8* %65, i8** %67, align 8, !dbg !1562
  %68 = load i64, i64* %5, align 8, !dbg !1563
  %69 = urem i64 %68, 1, !dbg !1565
  %70 = icmp ne i64 %69, 0, !dbg !1566
  br i1 %70, label %71, label %72, !dbg !1567

71:                                               ; preds = %64
  call void @sgx_ocfree(), !dbg !1568
  store i32 2, i32* %2, align 4, !dbg !1570
  br label %101, !dbg !1570

72:                                               ; preds = %64
  %73 = load i8*, i8** %8, align 8, !dbg !1571
  %74 = load i64, i64* %7, align 8, !dbg !1573
  %75 = load i8*, i8** %3, align 8, !dbg !1574
  %76 = load i64, i64* %5, align 8, !dbg !1575
  %77 = call i32 @memcpy_s(i8* %73, i64 %74, i8* %75, i64 %76), !dbg !1576
  %78 = icmp ne i32 %77, 0, !dbg !1576
  br i1 %78, label %79, label %80, !dbg !1577

79:                                               ; preds = %72
  call void @sgx_ocfree(), !dbg !1578
  store i32 1, i32* %2, align 4, !dbg !1580
  br label %101, !dbg !1580

80:                                               ; preds = %72
  %81 = load i8*, i8** %8, align 8, !dbg !1581
  %82 = ptrtoint i8* %81 to i64, !dbg !1582
  %83 = load i64, i64* %5, align 8, !dbg !1583
  %84 = add i64 %82, %83, !dbg !1584
  %85 = inttoptr i64 %84 to i8*, !dbg !1585
  store i8* %85, i8** %8, align 8, !dbg !1586
  %86 = load i64, i64* %5, align 8, !dbg !1587
  %87 = load i64, i64* %7, align 8, !dbg !1588
  %88 = sub i64 %87, %86, !dbg !1588
  store i64 %88, i64* %7, align 8, !dbg !1588
  br label %92, !dbg !1589

89:                                               ; preds = %53
  %90 = load %struct.ms_ocall_print_t*, %struct.ms_ocall_print_t** %6, align 8, !dbg !1590
  %91 = getelementptr inbounds %struct.ms_ocall_print_t, %struct.ms_ocall_print_t* %90, i32 0, i32 0, !dbg !1592
  store i8* null, i8** %91, align 8, !dbg !1593
  br label %92

92:                                               ; preds = %89, %80
  %93 = load %struct.ms_ocall_print_t*, %struct.ms_ocall_print_t** %6, align 8, !dbg !1594
  %94 = bitcast %struct.ms_ocall_print_t* %93 to i8*, !dbg !1594
  %95 = call i32 @sgx_ocall(i32 0, i8* %94), !dbg !1595
  store i32 %95, i32* %4, align 4, !dbg !1596
  %96 = load i32, i32* %4, align 4, !dbg !1597
  %97 = icmp eq i32 %96, 0, !dbg !1599
  br i1 %97, label %98, label %99, !dbg !1600

98:                                               ; preds = %92
  br label %99, !dbg !1601

99:                                               ; preds = %98, %92
  call void @sgx_ocfree(), !dbg !1603
  %100 = load i32, i32* %4, align 4, !dbg !1604
  store i32 %100, i32* %2, align 4, !dbg !1605
  br label %101, !dbg !1605

101:                                              ; preds = %99, %79, %71, %52, %46, %26
  %102 = load i32, i32* %2, align 4, !dbg !1606
  ret i32 %102, !dbg !1606
}

declare i32 @sgx_is_within_enclave(i8*, i64) #2

declare i8* @sgx_ocalloc(i64) #2

declare void @sgx_ocfree() #2

declare i32 @sgx_ocall(i32, i8*) #2

; Function Attrs: noinline ssp uwtable
define internal void @_GLOBAL__sub_I_Enclave.cpp() #5 section ".text.startup" !dbg !1607 {
  call void @__cxx_global_var_init(), !dbg !1609
  call void @__cxx_global_var_init.1(), !dbg !1609
  ret void
}

; Function Attrs: noinline ssp uwtable
define internal void @__cxx_global_var_init() #5 section ".text.startup" !dbg !1610 {
  %1 = call align 16 i8* @malloc(i64 24), !dbg !1613
  %2 = bitcast i8* %1 to %struct.KeyStoreBank*, !dbg !1614
  store %struct.KeyStoreBank* %2, %struct.KeyStoreBank** @firstKey, align 8, !dbg !1615
  ret void, !dbg !1616
}

; Function Attrs: noinline ssp uwtable
define internal void @__cxx_global_var_init.1() #5 section ".text.startup" !dbg !1617 {
  %1 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @firstKey, align 8, !dbg !1618
  store %struct.KeyStoreBank* %1, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1619
  ret void, !dbg !1618
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden void @_Z7encryptPc(i8* %0) #0 !dbg !1620 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !1623, metadata !DIExpression()), !dbg !1624
  br label %3, !dbg !1625

3:                                                ; preds = %8, %1
  %4 = load i8*, i8** %2, align 8, !dbg !1626
  %5 = load i8, i8* %4, align 1, !dbg !1627
  %6 = sext i8 %5 to i32, !dbg !1627
  %7 = icmp ne i32 %6, 0, !dbg !1628
  br i1 %7, label %8, label %17, !dbg !1625

8:                                                ; preds = %3
  %9 = load i8*, i8** %2, align 8, !dbg !1629
  %10 = load i8, i8* %9, align 1, !dbg !1631
  %11 = sext i8 %10 to i32, !dbg !1631
  %12 = add nsw i32 %11, 1, !dbg !1632
  %13 = trunc i32 %12 to i8, !dbg !1631
  %14 = load i8*, i8** %2, align 8, !dbg !1633
  store i8 %13, i8* %14, align 1, !dbg !1634
  %15 = load i8*, i8** %2, align 8, !dbg !1635
  %16 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !1635
  store i8* %16, i8** %2, align 8, !dbg !1635
  br label %3, !dbg !1625, !llvm.loop !1636

17:                                               ; preds = %3
  ret void, !dbg !1638
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden void @_Z7decryptPc(i8* %0) #0 !dbg !1639 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !1640, metadata !DIExpression()), !dbg !1641
  br label %3, !dbg !1642

3:                                                ; preds = %8, %1
  %4 = load i8*, i8** %2, align 8, !dbg !1643
  %5 = load i8, i8* %4, align 1, !dbg !1644
  %6 = sext i8 %5 to i32, !dbg !1644
  %7 = icmp ne i32 %6, 0, !dbg !1645
  br i1 %7, label %8, label %17, !dbg !1642

8:                                                ; preds = %3
  %9 = load i8*, i8** %2, align 8, !dbg !1646
  %10 = load i8, i8* %9, align 1, !dbg !1648
  %11 = sext i8 %10 to i32, !dbg !1648
  %12 = sub nsw i32 %11, 1, !dbg !1649
  %13 = trunc i32 %12 to i8, !dbg !1648
  %14 = load i8*, i8** %2, align 8, !dbg !1650
  store i8 %13, i8* %14, align 1, !dbg !1651
  %15 = load i8*, i8** %2, align 8, !dbg !1652
  %16 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !1652
  store i8* %16, i8** %2, align 8, !dbg !1652
  br label %3, !dbg !1642, !llvm.loop !1653

17:                                               ; preds = %3
  ret void, !dbg !1655
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @create_keystore(i8* %0) #6 !dbg !1656 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !1659, metadata !DIExpression()), !dbg !1660
  call void @llvm.dbg.declare(metadata i64* %3, metadata !1661, metadata !DIExpression()), !dbg !1662
  %4 = load i8*, i8** %2, align 8, !dbg !1663
  %5 = call i64 @strlen(i8* %4), !dbg !1664
  store i64 %5, i64* %3, align 8, !dbg !1662
  %6 = load i64, i64* %3, align 8, !dbg !1665
  %7 = add i64 1, %6, !dbg !1666
  %8 = add i64 %7, 1, !dbg !1667
  %9 = call align 16 i8* @malloc(i64 %8), !dbg !1668
  store i8* %9, i8** @password, align 8, !dbg !1669
  %10 = load i8*, i8** @password, align 8, !dbg !1670
  %11 = icmp eq i8* %10, null, !dbg !1672
  br i1 %11, label %12, label %13, !dbg !1673

12:                                               ; preds = %1
  call void @abort() #10, !dbg !1674
  unreachable, !dbg !1674

13:                                               ; preds = %1
  %14 = load i8*, i8** @password, align 8, !dbg !1676
  %15 = load i8*, i8** %2, align 8, !dbg !1677
  %16 = load i64, i64* %3, align 8, !dbg !1678
  %17 = call i8* @strncpy(i8* %14, i8* %15, i64 %16), !dbg !1679
  %18 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @firstKey, align 8, !dbg !1680
  %19 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %18, i32 0, i32 2, !dbg !1681
  store %struct.KeyStoreBank* null, %struct.KeyStoreBank** %19, align 8, !dbg !1682
  ret i32 0, !dbg !1683
}

; Function Attrs: noreturn
declare void @abort() #7

declare i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @add_password(i8* %0, i8* %1) #6 !dbg !1684 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.KeyStoreBank*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !1687, metadata !DIExpression()), !dbg !1688
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !1689, metadata !DIExpression()), !dbg !1690
  call void @llvm.dbg.declare(metadata i64* %6, metadata !1691, metadata !DIExpression()), !dbg !1692
  %9 = load i8*, i8** %5, align 8, !dbg !1693
  %10 = call i64 @strlen(i8* %9), !dbg !1694
  store i64 %10, i64* %6, align 8, !dbg !1692
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1695, metadata !DIExpression()), !dbg !1696
  %11 = load i8*, i8** %4, align 8, !dbg !1697
  %12 = call i64 @strlen(i8* %11), !dbg !1698
  store i64 %12, i64* %7, align 8, !dbg !1696
  %13 = load i64, i64* %6, align 8, !dbg !1699
  %14 = icmp uge i64 %13, 1024, !dbg !1701
  br i1 %14, label %18, label %15, !dbg !1702

15:                                               ; preds = %2
  %16 = load i64, i64* %7, align 8, !dbg !1703
  %17 = icmp uge i64 %16, 1024, !dbg !1704
  br i1 %17, label %18, label %19, !dbg !1705

18:                                               ; preds = %15, %2
  store i32 -1, i32* %3, align 4, !dbg !1706
  br label %60, !dbg !1706

19:                                               ; preds = %15
  %20 = load i64, i64* %6, align 8, !dbg !1708
  %21 = mul i64 1, %20, !dbg !1709
  %22 = add i64 %21, 1, !dbg !1710
  %23 = call align 16 i8* @malloc(i64 %22), !dbg !1711
  %24 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1712
  %25 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %24, i32 0, i32 1, !dbg !1713
  store i8* %23, i8** %25, align 8, !dbg !1714
  %26 = load i64, i64* %7, align 8, !dbg !1715
  %27 = mul i64 1, %26, !dbg !1716
  %28 = add i64 %27, 1, !dbg !1717
  %29 = call align 16 i8* @malloc(i64 %28), !dbg !1718
  %30 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1719
  %31 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %30, i32 0, i32 0, !dbg !1720
  store i8* %29, i8** %31, align 8, !dbg !1721
  %32 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1722
  %33 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %32, i32 0, i32 1, !dbg !1724
  %34 = load i8*, i8** %33, align 8, !dbg !1724
  %35 = icmp eq i8* %34, null, !dbg !1725
  br i1 %35, label %36, label %37, !dbg !1726

36:                                               ; preds = %19
  call void @abort() #10, !dbg !1727
  unreachable, !dbg !1727

37:                                               ; preds = %19
  %38 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1729
  %39 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %38, i32 0, i32 1, !dbg !1730
  %40 = load i8*, i8** %39, align 8, !dbg !1730
  %41 = load i8*, i8** %5, align 8, !dbg !1731
  %42 = load i64, i64* %6, align 8, !dbg !1732
  %43 = call i8* @strncpy(i8* %40, i8* %41, i64 %42), !dbg !1733
  %44 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1734
  %45 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %44, i32 0, i32 0, !dbg !1735
  %46 = load i8*, i8** %45, align 8, !dbg !1735
  %47 = load i8*, i8** %4, align 8, !dbg !1736
  %48 = load i64, i64* %7, align 8, !dbg !1737
  %49 = call i8* @strncpy(i8* %46, i8* %47, i64 %48), !dbg !1738
  call void @llvm.dbg.declare(metadata %struct.KeyStoreBank** %8, metadata !1739, metadata !DIExpression()), !dbg !1740
  %50 = call align 16 i8* @malloc(i64 24), !dbg !1741
  %51 = bitcast i8* %50 to %struct.KeyStoreBank*, !dbg !1742
  store %struct.KeyStoreBank* %51, %struct.KeyStoreBank** %8, align 8, !dbg !1740
  %52 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %8, align 8, !dbg !1743
  %53 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1744
  %54 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %53, i32 0, i32 2, !dbg !1745
  store %struct.KeyStoreBank* %52, %struct.KeyStoreBank** %54, align 8, !dbg !1746
  %55 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %8, align 8, !dbg !1747
  store %struct.KeyStoreBank* %55, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1748
  %56 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @currentKey, align 8, !dbg !1749
  %57 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %56, i32 0, i32 2, !dbg !1750
  store %struct.KeyStoreBank* null, %struct.KeyStoreBank** %57, align 8, !dbg !1751
  %58 = load i32, i32* @numPasswords, align 4, !dbg !1752
  %59 = add nsw i32 %58, 1, !dbg !1752
  store i32 %59, i32* @numPasswords, align 4, !dbg !1752
  store i32 0, i32* %3, align 4, !dbg !1753
  br label %60, !dbg !1753

60:                                               ; preds = %37, %18
  %61 = load i32, i32* %3, align 4, !dbg !1754
  ret i32 %61, !dbg !1754
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @get_password(i8* %0, i8* %1, i8* %2) #6 !dbg !1755 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.KeyStoreBank*, align 8
  %10 = alloca [3 x i8], align 1
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !1758, metadata !DIExpression()), !dbg !1759
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1760, metadata !DIExpression()), !dbg !1761
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !1762, metadata !DIExpression()), !dbg !1763
  %20 = call i32 @ocall_print(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)), !dbg !1764
  call void @llvm.dbg.declare(metadata i64* %8, metadata !1765, metadata !DIExpression()), !dbg !1766
  %21 = load i8*, i8** %5, align 8, !dbg !1767
  %22 = call i64 @strlen(i8* %21), !dbg !1768
  store i64 %22, i64* %8, align 8, !dbg !1766
  %23 = load i8*, i8** %7, align 8, !dbg !1769
  %24 = load i8*, i8** @password, align 8, !dbg !1771
  %25 = call i32 @strcmp(i8* %23, i8* %24), !dbg !1772
  %26 = icmp ne i32 %25, 0, !dbg !1773
  br i1 %26, label %27, label %29, !dbg !1774

27:                                               ; preds = %3
  %28 = load i8*, i8** %6, align 8, !dbg !1775
  store i8 0, i8* %28, align 1, !dbg !1777
  store i32 -1, i32* %4, align 4, !dbg !1778
  br label %92, !dbg !1778

29:                                               ; preds = %3
  call void @llvm.dbg.declare(metadata %struct.KeyStoreBank** %9, metadata !1779, metadata !DIExpression()), !dbg !1780
  %30 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @firstKey, align 8, !dbg !1781
  store %struct.KeyStoreBank* %30, %struct.KeyStoreBank** %9, align 8, !dbg !1780
  br label %31, !dbg !1782

31:                                               ; preds = %48, %29
  %32 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %9, align 8, !dbg !1783
  %33 = icmp ne %struct.KeyStoreBank* %32, null, !dbg !1784
  br i1 %33, label %34, label %46, !dbg !1785

34:                                               ; preds = %31
  %35 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %9, align 8, !dbg !1786
  %36 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %35, i32 0, i32 2, !dbg !1787
  %37 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %36, align 8, !dbg !1787
  %38 = icmp ne %struct.KeyStoreBank* %37, null, !dbg !1788
  br i1 %38, label %39, label %46, !dbg !1789

39:                                               ; preds = %34
  %40 = load i8*, i8** %5, align 8, !dbg !1790
  %41 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %9, align 8, !dbg !1791
  %42 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %41, i32 0, i32 0, !dbg !1792
  %43 = load i8*, i8** %42, align 8, !dbg !1792
  %44 = call i32 @strcmp(i8* %40, i8* %43), !dbg !1793
  %45 = icmp ne i32 %44, 0, !dbg !1794
  br label %46

46:                                               ; preds = %39, %34, %31
  %47 = phi i1 [ false, %34 ], [ false, %31 ], [ %45, %39 ], !dbg !1795
  br i1 %47, label %48, label %52, !dbg !1782

48:                                               ; preds = %46
  %49 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %9, align 8, !dbg !1796
  %50 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %49, i32 0, i32 2, !dbg !1798
  %51 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %50, align 8, !dbg !1798
  store %struct.KeyStoreBank* %51, %struct.KeyStoreBank** %9, align 8, !dbg !1799
  br label %31, !dbg !1782, !llvm.loop !1800

52:                                               ; preds = %46
  %53 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %9, align 8, !dbg !1802
  %54 = icmp eq %struct.KeyStoreBank* %53, null, !dbg !1804
  br i1 %54, label %60, label %55, !dbg !1805

55:                                               ; preds = %52
  %56 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %9, align 8, !dbg !1806
  %57 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %56, i32 0, i32 2, !dbg !1807
  %58 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %57, align 8, !dbg !1807
  %59 = icmp eq %struct.KeyStoreBank* %58, null, !dbg !1808
  br i1 %59, label %60, label %62, !dbg !1809

60:                                               ; preds = %55, %52
  %61 = load i8*, i8** %6, align 8, !dbg !1810
  store i8 0, i8* %61, align 1, !dbg !1812
  store i32 -1, i32* %4, align 4, !dbg !1813
  br label %92, !dbg !1813

62:                                               ; preds = %55
  %63 = load i8*, i8** %6, align 8, !dbg !1814
  %64 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %9, align 8, !dbg !1815
  %65 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %64, i32 0, i32 1, !dbg !1816
  %66 = load i8*, i8** %65, align 8, !dbg !1816
  %67 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %9, align 8, !dbg !1817
  %68 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %67, i32 0, i32 1, !dbg !1818
  %69 = load i8*, i8** %68, align 8, !dbg !1818
  %70 = call i64 @strlen(i8* %69), !dbg !1819
  %71 = call i8* @strncpy(i8* %63, i8* %66, i64 %70), !dbg !1820
  call void @llvm.dbg.declare(metadata [3 x i8]* %10, metadata !1821, metadata !DIExpression()), !dbg !1825
  %72 = bitcast [3 x i8]* %10 to i8*, !dbg !1825
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.get_password.var, i32 0, i32 0), i64 3, i1 false), !dbg !1825
  %73 = getelementptr inbounds [3 x i8], [3 x i8]* %10, i64 0, i64 0, !dbg !1826
  %74 = call i32 @sgx_read_rand(i8* %73, i64 2), !dbg !1827
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1828, metadata !DIExpression()), !dbg !1829
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8** %11, align 8, !dbg !1829
  call void @llvm.dbg.declare(metadata i64* %12, metadata !1830, metadata !DIExpression()), !dbg !1831
  store i64 8, i64* %12, align 8, !dbg !1831
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1832, metadata !DIExpression()), !dbg !1833
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8** %13, align 8, !dbg !1833
  call void @llvm.dbg.declare(metadata i64* %14, metadata !1834, metadata !DIExpression()), !dbg !1835
  store i64 4, i64* %14, align 8, !dbg !1835
  call void @llvm.dbg.declare(metadata i8** %15, metadata !1836, metadata !DIExpression()), !dbg !1837
  %75 = call align 16 i8* @malloc(i64 1024), !dbg !1838
  store i8* %75, i8** %15, align 8, !dbg !1837
  call void @llvm.dbg.declare(metadata i64* %16, metadata !1839, metadata !DIExpression()), !dbg !1840
  store i64 1024, i64* %16, align 8, !dbg !1840
  call void @llvm.dbg.declare(metadata i64* %17, metadata !1841, metadata !DIExpression()), !dbg !1842
  store i64 8, i64* %17, align 8, !dbg !1842
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1843, metadata !DIExpression()), !dbg !1844
  store i32 30, i32* %18, align 4, !dbg !1844
  call void @llvm.dbg.declare(metadata i32* %19, metadata !1845, metadata !DIExpression()), !dbg !1846
  store i32 20, i32* %19, align 4, !dbg !1846
  %76 = load i8*, i8** %15, align 8, !dbg !1847
  %77 = icmp eq i8* %76, null, !dbg !1849
  br i1 %77, label %78, label %80, !dbg !1850

78:                                               ; preds = %62
  %79 = call i32 @ocall_print(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0)), !dbg !1851
  br label %91, !dbg !1853

80:                                               ; preds = %62
  %81 = load i8*, i8** %11, align 8, !dbg !1854
  %82 = load i64, i64* %12, align 8, !dbg !1856
  %83 = load i8*, i8** %13, align 8, !dbg !1857
  %84 = load i64, i64* %14, align 8, !dbg !1858
  %85 = load i64, i64* %17, align 8, !dbg !1859
  %86 = load i32, i32* %18, align 4, !dbg !1860
  %87 = load i32, i32* %19, align 4, !dbg !1861
  %88 = load i8*, i8** %15, align 8, !dbg !1862
  %89 = load i64, i64* %16, align 8, !dbg !1863
  %90 = call i32 @_Z13crypto_scryptPKhmS0_mmjjPhm(i8* %81, i64 %82, i8* %83, i64 %84, i64 %85, i32 %86, i32 %87, i8* %88, i64 %89), !dbg !1864
  br label %91

91:                                               ; preds = %80, %78
  store i32 0, i32* %4, align 4, !dbg !1865
  br label %92, !dbg !1865

92:                                               ; preds = %91, %60, %27
  %93 = load i32, i32* %4, align 4, !dbg !1866
  ret i32 %93, !dbg !1866
}

declare i32 @strcmp(i8*, i8*) #2

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #8

declare i32 @sgx_read_rand(i8*, i64) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i8* @_Z4itoaii(i32 %0, i32 %1) #0 !dbg !367 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !1867, metadata !DIExpression()), !dbg !1868
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !1869, metadata !DIExpression()), !dbg !1870
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1871, metadata !DIExpression()), !dbg !1872
  store i32 30, i32* %5, align 4, !dbg !1872
  br label %6, !dbg !1873

6:                                                ; preds = %24, %2
  %7 = load i32, i32* %3, align 4, !dbg !1874
  %8 = icmp ne i32 %7, 0, !dbg !1874
  br i1 %8, label %9, label %12, !dbg !1877

9:                                                ; preds = %6
  %10 = load i32, i32* %5, align 4, !dbg !1878
  %11 = icmp ne i32 %10, 0, !dbg !1878
  br label %12

12:                                               ; preds = %9, %6
  %13 = phi i1 [ false, %6 ], [ %11, %9 ], !dbg !1879
  br i1 %13, label %14, label %30, !dbg !1880

14:                                               ; preds = %12
  %15 = load i32, i32* %3, align 4, !dbg !1881
  %16 = load i32, i32* %4, align 4, !dbg !1882
  %17 = srem i32 %15, %16, !dbg !1883
  %18 = sext i32 %17 to i64, !dbg !1884
  %19 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.5, i64 0, i64 %18, !dbg !1884
  %20 = load i8, i8* %19, align 1, !dbg !1884
  %21 = load i32, i32* %5, align 4, !dbg !1885
  %22 = sext i32 %21 to i64, !dbg !1886
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZ4itoaiiE3buf, i64 0, i64 %22, !dbg !1886
  store i8 %20, i8* %23, align 1, !dbg !1887
  br label %24, !dbg !1886

24:                                               ; preds = %14
  %25 = load i32, i32* %5, align 4, !dbg !1888
  %26 = add nsw i32 %25, -1, !dbg !1888
  store i32 %26, i32* %5, align 4, !dbg !1888
  %27 = load i32, i32* %4, align 4, !dbg !1889
  %28 = load i32, i32* %3, align 4, !dbg !1890
  %29 = sdiv i32 %28, %27, !dbg !1890
  store i32 %29, i32* %3, align 4, !dbg !1890
  br label %6, !dbg !1891, !llvm.loop !1892

30:                                               ; preds = %12
  %31 = load i32, i32* %5, align 4, !dbg !1894
  %32 = add nsw i32 %31, 1, !dbg !1895
  %33 = sext i32 %32 to i64, !dbg !1896
  %34 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZ4itoaiiE3buf, i64 0, i64 %33, !dbg !1896
  ret i8* %34, !dbg !1897
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @_Z21string_integer_concatPci(i8* %0, i32 %1) #6 !dbg !1898 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1901, metadata !DIExpression()), !dbg !1902
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !1903, metadata !DIExpression()), !dbg !1904
  call void @llvm.dbg.declare(metadata i8** %5, metadata !1905, metadata !DIExpression()), !dbg !1906
  %12 = load i32, i32* %4, align 4, !dbg !1907
  %13 = call i8* @_Z4itoaii(i32 %12, i32 10), !dbg !1908
  store i8* %13, i8** %5, align 8, !dbg !1906
  call void @llvm.dbg.declare(metadata i32* %6, metadata !1909, metadata !DIExpression()), !dbg !1910
  %14 = load i8*, i8** %3, align 8, !dbg !1911
  %15 = call i64 @strlen(i8* %14), !dbg !1912
  %16 = trunc i64 %15 to i32, !dbg !1912
  store i32 %16, i32* %6, align 4, !dbg !1910
  call void @llvm.dbg.declare(metadata i32* %7, metadata !1913, metadata !DIExpression()), !dbg !1914
  %17 = load i8*, i8** %5, align 8, !dbg !1915
  %18 = call i64 @strlen(i8* %17), !dbg !1916
  %19 = trunc i64 %18 to i32, !dbg !1916
  store i32 %19, i32* %7, align 4, !dbg !1914
  call void @llvm.dbg.declare(metadata i8** %8, metadata !1917, metadata !DIExpression()), !dbg !1918
  %20 = load i32, i32* %6, align 4, !dbg !1919
  %21 = load i32, i32* %7, align 4, !dbg !1920
  %22 = add nsw i32 %20, %21, !dbg !1921
  %23 = add nsw i32 %22, 1, !dbg !1922
  %24 = sext i32 %23 to i64, !dbg !1919
  %25 = call align 16 i8* @malloc(i64 %24), !dbg !1923
  store i8* %25, i8** %8, align 8, !dbg !1918
  call void @llvm.dbg.declare(metadata i8** %9, metadata !1924, metadata !DIExpression()), !dbg !1925
  %26 = load i8*, i8** %8, align 8, !dbg !1926
  store i8* %26, i8** %9, align 8, !dbg !1925
  call void @llvm.dbg.declare(metadata i32* %10, metadata !1927, metadata !DIExpression()), !dbg !1929
  store i32 0, i32* %10, align 4, !dbg !1929
  br label %27, !dbg !1930

27:                                               ; preds = %39, %2
  %28 = load i32, i32* %10, align 4, !dbg !1931
  %29 = load i32, i32* %6, align 4, !dbg !1933
  %30 = icmp slt i32 %28, %29, !dbg !1934
  br i1 %30, label %31, label %42, !dbg !1935

31:                                               ; preds = %27
  %32 = load i8*, i8** %3, align 8, !dbg !1936
  %33 = load i8, i8* %32, align 1, !dbg !1938
  %34 = load i8*, i8** %9, align 8, !dbg !1939
  store i8 %33, i8* %34, align 1, !dbg !1940
  %35 = load i8*, i8** %9, align 8, !dbg !1941
  %36 = getelementptr inbounds i8, i8* %35, i32 1, !dbg !1941
  store i8* %36, i8** %9, align 8, !dbg !1941
  %37 = load i8*, i8** %3, align 8, !dbg !1942
  %38 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !1942
  store i8* %38, i8** %3, align 8, !dbg !1942
  br label %39, !dbg !1943

39:                                               ; preds = %31
  %40 = load i32, i32* %10, align 4, !dbg !1944
  %41 = add nsw i32 %40, 1, !dbg !1944
  store i32 %41, i32* %10, align 4, !dbg !1944
  br label %27, !dbg !1945, !llvm.loop !1946

42:                                               ; preds = %27
  call void @llvm.dbg.declare(metadata i32* %11, metadata !1948, metadata !DIExpression()), !dbg !1950
  store i32 0, i32* %11, align 4, !dbg !1950
  br label %43, !dbg !1951

43:                                               ; preds = %55, %42
  %44 = load i32, i32* %11, align 4, !dbg !1952
  %45 = load i32, i32* %7, align 4, !dbg !1954
  %46 = icmp slt i32 %44, %45, !dbg !1955
  br i1 %46, label %47, label %58, !dbg !1956

47:                                               ; preds = %43
  %48 = load i8*, i8** %5, align 8, !dbg !1957
  %49 = load i8, i8* %48, align 1, !dbg !1959
  %50 = load i8*, i8** %9, align 8, !dbg !1960
  store i8 %49, i8* %50, align 1, !dbg !1961
  %51 = load i8*, i8** %9, align 8, !dbg !1962
  %52 = getelementptr inbounds i8, i8* %51, i32 1, !dbg !1962
  store i8* %52, i8** %9, align 8, !dbg !1962
  %53 = load i8*, i8** %5, align 8, !dbg !1963
  %54 = getelementptr inbounds i8, i8* %53, i32 1, !dbg !1963
  store i8* %54, i8** %5, align 8, !dbg !1963
  br label %55, !dbg !1964

55:                                               ; preds = %47
  %56 = load i32, i32* %11, align 4, !dbg !1965
  %57 = add nsw i32 %56, 1, !dbg !1965
  store i32 %57, i32* %11, align 4, !dbg !1965
  br label %43, !dbg !1966, !llvm.loop !1967

58:                                               ; preds = %43
  %59 = load i8*, i8** %9, align 8, !dbg !1969
  store i8 0, i8* %59, align 1, !dbg !1970
  %60 = load i8*, i8** %8, align 8, !dbg !1971
  ret i8* %60, !dbg !1972
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden void @_Z12dumb_mem_cpyPvS_i(i8* %0, i8* %1, i32 %2) #0 !dbg !1973 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !1976, metadata !DIExpression()), !dbg !1977
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !1978, metadata !DIExpression()), !dbg !1979
  store i32 %2, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !1980, metadata !DIExpression()), !dbg !1981
  call void @llvm.dbg.declare(metadata i8** %7, metadata !1982, metadata !DIExpression()), !dbg !1983
  %10 = load i8*, i8** %4, align 8, !dbg !1984
  store i8* %10, i8** %7, align 8, !dbg !1983
  call void @llvm.dbg.declare(metadata i8** %8, metadata !1985, metadata !DIExpression()), !dbg !1986
  %11 = load i8*, i8** %5, align 8, !dbg !1987
  store i8* %11, i8** %8, align 8, !dbg !1986
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1988, metadata !DIExpression()), !dbg !1990
  store i32 0, i32* %9, align 4, !dbg !1990
  br label %12, !dbg !1991

12:                                               ; preds = %24, %3
  %13 = load i32, i32* %9, align 4, !dbg !1992
  %14 = load i32, i32* %6, align 4, !dbg !1994
  %15 = icmp slt i32 %13, %14, !dbg !1995
  br i1 %15, label %16, label %27, !dbg !1996

16:                                               ; preds = %12
  %17 = load i8*, i8** %8, align 8, !dbg !1997
  %18 = load i8, i8* %17, align 1, !dbg !1999
  %19 = load i8*, i8** %7, align 8, !dbg !2000
  store i8 %18, i8* %19, align 1, !dbg !2001
  %20 = load i8*, i8** %7, align 8, !dbg !2002
  %21 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !2002
  store i8* %21, i8** %7, align 8, !dbg !2002
  %22 = load i8*, i8** %8, align 8, !dbg !2003
  %23 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !2003
  store i8* %23, i8** %8, align 8, !dbg !2003
  br label %24, !dbg !2004

24:                                               ; preds = %16
  %25 = load i32, i32* %9, align 4, !dbg !2005
  %26 = add nsw i32 %25, 1, !dbg !2005
  store i32 %26, i32* %9, align 4, !dbg !2005
  br label %12, !dbg !2006, !llvm.loop !2007

27:                                               ; preds = %12
  ret void, !dbg !2009
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @encrypt_and_serialize_key_store(i8* %0) #6 !dbg !374 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca [16 x i8], align 16
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !2010, metadata !DIExpression()), !dbg !2011
  call void @llvm.dbg.declare(metadata [16 x i8]* %4, metadata !2012, metadata !DIExpression()), !dbg !2013
  %9 = bitcast [16 x i8]* %4 to i8*, !dbg !2013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %9, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.encrypt_and_serialize_key_store.key, i32 0, i32 0), i64 16, i1 false), !dbg !2013
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0, !dbg !2014
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZ31encrypt_and_serialize_key_storeE12g_region_key, i64 0, i64 0), i8* align 16 %10, i64 16, i1 false), !dbg !2014
  call void @llvm.dbg.declare(metadata [1024 x i8]* %5, metadata !2015, metadata !DIExpression()), !dbg !2016
  %11 = bitcast [1024 x i8]* %5 to i8*, !dbg !2016
  call void @llvm.memset.p0i8.i64(i8* align 16 %11, i8 0, i64 1024, i1 false), !dbg !2016
  %12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0, !dbg !2017
  %13 = call i32 @sgx_read_rand(i8* %12, i64 12), !dbg !2019
  %14 = icmp ne i32 %13, 0, !dbg !2019
  br i1 %14, label %15, label %16, !dbg !2020

15:                                               ; preds = %1
  store i32 -1, i32* %2, align 4, !dbg !2021
  br label %44, !dbg !2021

16:                                               ; preds = %1
  %17 = load i8*, i8** %3, align 8, !dbg !2022
  %18 = call i32 @serialize_key_store(i8* %17), !dbg !2023
  call void @llvm.dbg.declare(metadata i8** %6, metadata !2024, metadata !DIExpression()), !dbg !2025
  %19 = load i8*, i8** %3, align 8, !dbg !2026
  %20 = call i32 @binn_size(i8* %19), !dbg !2027
  %21 = sext i32 %20 to i64, !dbg !2027
  %22 = call align 16 i8* @malloc(i64 %21), !dbg !2028
  store i8* %22, i8** %6, align 8, !dbg !2025
  call void @llvm.dbg.declare(metadata i32* %7, metadata !2029, metadata !DIExpression()), !dbg !2030
  %23 = load i8*, i8** %3, align 8, !dbg !2031
  %24 = call i32 @binn_size(i8* %23), !dbg !2032
  store i32 %24, i32* %7, align 4, !dbg !2030
  call void @llvm.dbg.declare(metadata i32* %8, metadata !2033, metadata !DIExpression()), !dbg !2035
  %25 = load i8*, i8** %3, align 8, !dbg !2036
  %26 = load i8*, i8** %3, align 8, !dbg !2037
  %27 = call i32 @binn_size(i8* %26), !dbg !2038
  %28 = load i8*, i8** %6, align 8, !dbg !2039
  %29 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0, !dbg !2040
  %30 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0, !dbg !2041
  %31 = getelementptr inbounds i8, i8* %30, i64 12, !dbg !2042
  %32 = bitcast i8* %31 to [16 x i8]*, !dbg !2043
  %33 = call i32 @sgx_rijndael128GCM_encrypt([16 x i8]* @_ZZ31encrypt_and_serialize_key_storeE12g_region_key, i8* %25, i32 %27, i8* %28, i8* %29, i32 12, i8* null, i32 0, [16 x i8]* %32), !dbg !2044
  store i32 %33, i32* %8, align 4, !dbg !2035
  %34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0, !dbg !2045
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 getelementptr inbounds ([1024 x i8], [1024 x i8]* @buffer, i64 0, i64 0), i8* align 16 %34, i64 1024, i1 false), !dbg !2045
  %35 = load i32, i32* %8, align 4, !dbg !2046
  %36 = icmp ne i32 %35, 0, !dbg !2048
  br i1 %36, label %37, label %39, !dbg !2049

37:                                               ; preds = %16
  %38 = call i32 @ocall_print(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0)), !dbg !2050
  store i32 -1, i32* %2, align 4, !dbg !2052
  br label %44, !dbg !2052

39:                                               ; preds = %16
  %40 = load i8*, i8** %3, align 8, !dbg !2053
  %41 = load i8*, i8** %6, align 8, !dbg !2054
  %42 = load i32, i32* %7, align 4, !dbg !2055
  %43 = sext i32 %42 to i64, !dbg !2055
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %41, i64 %43, i1 false), !dbg !2056
  store i32 0, i32* %2, align 4, !dbg !2057
  br label %44, !dbg !2057

44:                                               ; preds = %39, %37, %15
  %45 = load i32, i32* %2, align 4, !dbg !2058
  ret i32 %45, !dbg !2058
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @serialize_key_store(i8* %0) #6 !dbg !2059 {
  %2 = alloca %struct.binn_struct*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.binn_struct*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca %struct.binn_struct*, align 8
  %10 = alloca %struct.KeyStoreBank*, align 8
  %11 = alloca i32, align 4
  store i8* %0, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !2060, metadata !DIExpression()), !dbg !2061
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %9, metadata !2062, metadata !DIExpression()), !dbg !2063
  %12 = call %struct.binn_struct* @binn_object(), !dbg !2064
  store %struct.binn_struct* %12, %struct.binn_struct** %9, align 8, !dbg !2063
  call void @llvm.dbg.declare(metadata %struct.KeyStoreBank** %10, metadata !2065, metadata !DIExpression()), !dbg !2066
  %13 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @firstKey, align 8, !dbg !2067
  store %struct.KeyStoreBank* %13, %struct.KeyStoreBank** %10, align 8, !dbg !2066
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2068, metadata !DIExpression()), !dbg !2069
  store i32 0, i32* %11, align 4, !dbg !2069
  br label %14, !dbg !2070

14:                                               ; preds = %19, %1
  %15 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %10, align 8, !dbg !2071
  %16 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %15, i32 0, i32 2, !dbg !2072
  %17 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %16, align 8, !dbg !2072
  %18 = icmp ne %struct.KeyStoreBank* %17, null, !dbg !2073
  br i1 %18, label %19, label %45, !dbg !2070

19:                                               ; preds = %14
  %20 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !2074
  %21 = load i32, i32* %11, align 4, !dbg !2076
  %22 = call i8* @_Z21string_integer_concatPci(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 %21), !dbg !2077
  %23 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %10, align 8, !dbg !2078
  %24 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %23, i32 0, i32 0, !dbg !2079
  %25 = load i8*, i8** %24, align 8, !dbg !2079
  store %struct.binn_struct* %20, %struct.binn_struct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %2, metadata !2080, metadata !DIExpression()), !dbg !2084
  store i8* %22, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !2086, metadata !DIExpression()), !dbg !2087
  store i8* %25, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2088, metadata !DIExpression()), !dbg !2089
  %26 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !2090
  %27 = load i8*, i8** %3, align 8, !dbg !2091
  %28 = load i8*, i8** %4, align 8, !dbg !2092
  %29 = call i32 @binn_object_set(%struct.binn_struct* %26, i8* %27, i32 160, i8* %28, i32 0), !dbg !2093
  %30 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !2094
  %31 = load i32, i32* %11, align 4, !dbg !2095
  %32 = call i8* @_Z21string_integer_concatPci(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32 %31), !dbg !2096
  %33 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %10, align 8, !dbg !2097
  %34 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %33, i32 0, i32 1, !dbg !2098
  %35 = load i8*, i8** %34, align 8, !dbg !2098
  store %struct.binn_struct* %30, %struct.binn_struct** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %5, metadata !2080, metadata !DIExpression()), !dbg !2099
  store i8* %32, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !2086, metadata !DIExpression()), !dbg !2101
  store i8* %35, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2088, metadata !DIExpression()), !dbg !2102
  %36 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !2103
  %37 = load i8*, i8** %6, align 8, !dbg !2104
  %38 = load i8*, i8** %7, align 8, !dbg !2105
  %39 = call i32 @binn_object_set(%struct.binn_struct* %36, i8* %37, i32 160, i8* %38, i32 0), !dbg !2106
  %40 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %10, align 8, !dbg !2107
  %41 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %40, i32 0, i32 2, !dbg !2108
  %42 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** %41, align 8, !dbg !2108
  store %struct.KeyStoreBank* %42, %struct.KeyStoreBank** %10, align 8, !dbg !2109
  %43 = load i32, i32* %11, align 4, !dbg !2110
  %44 = add nsw i32 %43, 1, !dbg !2110
  store i32 %44, i32* %11, align 4, !dbg !2110
  br label %14, !dbg !2070, !llvm.loop !2111

45:                                               ; preds = %14
  %46 = load i8*, i8** %8, align 8, !dbg !2113
  %47 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !2114
  %48 = bitcast %struct.binn_struct* %47 to i8*, !dbg !2114
  %49 = call i8* @binn_ptr(i8* %48), !dbg !2115
  %50 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !2116
  %51 = bitcast %struct.binn_struct* %50 to i8*, !dbg !2116
  %52 = call i32 @binn_size(i8* %51), !dbg !2117
  %53 = sext i32 %52 to i64, !dbg !2117
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %49, i64 %53, i1 false), !dbg !2118
  %54 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !2119
  call void @binn_free(%struct.binn_struct* %54), !dbg !2120
  ret i32 0, !dbg !2121
}

declare i32 @sgx_rijndael128GCM_encrypt([16 x i8]*, i8*, i32, i8*, i8*, i32, i8*, i32, [16 x i8]*) #2

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @decrypt_and_set_key_store(i8* %0) #6 !dbg !380 {
  %2 = alloca i8*, align 8
  %3 = alloca [16 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !2122, metadata !DIExpression()), !dbg !2123
  call void @llvm.dbg.declare(metadata [16 x i8]* %3, metadata !2124, metadata !DIExpression()), !dbg !2125
  %11 = bitcast [16 x i8]* %3 to i8*, !dbg !2125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.decrypt_and_set_key_store.key, i32 0, i32 0), i64 16, i1 false), !dbg !2125
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 0, !dbg !2126
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZ25decrypt_and_set_key_storeE12g_region_key, i64 0, i64 0), i8* align 16 %12, i64 16, i1 false), !dbg !2126
  call void @llvm.dbg.declare(metadata i32* %4, metadata !2127, metadata !DIExpression()), !dbg !2128
  store i32 35, i32* %4, align 4, !dbg !2128
  call void @llvm.dbg.declare(metadata i8** %5, metadata !2129, metadata !DIExpression()), !dbg !2130
  %13 = load i32, i32* %4, align 4, !dbg !2131
  %14 = sext i32 %13 to i64, !dbg !2131
  %15 = call align 16 i8* @malloc(i64 %14), !dbg !2132
  store i8* %15, i8** %5, align 8, !dbg !2130
  call void @llvm.dbg.declare(metadata i32* %6, metadata !2133, metadata !DIExpression()), !dbg !2134
  %16 = load i8*, i8** %2, align 8, !dbg !2135
  %17 = load i32, i32* %4, align 4, !dbg !2136
  %18 = load i8*, i8** %5, align 8, !dbg !2137
  %19 = call i32 @sgx_rijndael128GCM_decrypt([16 x i8]* @_ZZ25decrypt_and_set_key_storeE12g_region_key, i8* %16, i32 %17, i8* %18, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buffer, i64 0, i64 0), i32 12, i8* null, i32 0, [16 x i8]* bitcast (i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buffer, i64 0, i64 12) to [16 x i8]*)), !dbg !2138
  store i32 %19, i32* %6, align 4, !dbg !2134
  %20 = load i32, i32* %6, align 4, !dbg !2139
  %21 = icmp ne i32 %20, 0, !dbg !2141
  br i1 %21, label %22, label %24, !dbg !2142

22:                                               ; preds = %1
  %23 = call i32 @ocall_print(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)), !dbg !2143
  ret i32 -1, !dbg !2145

24:                                               ; preds = %1
  %25 = load i8*, i8** %5, align 8, !dbg !2146
  store i8* %25, i8** %2, align 8, !dbg !2147
  %26 = call align 16 i8* @malloc(i64 24), !dbg !2148
  %27 = bitcast i8* %26 to %struct.KeyStoreBank*, !dbg !2149
  store %struct.KeyStoreBank* %27, %struct.KeyStoreBank** @firstKey, align 8, !dbg !2150
  %28 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @firstKey, align 8, !dbg !2151
  store %struct.KeyStoreBank* %28, %struct.KeyStoreBank** @currentKey, align 8, !dbg !2152
  %29 = load %struct.KeyStoreBank*, %struct.KeyStoreBank** @firstKey, align 8, !dbg !2153
  %30 = getelementptr inbounds %struct.KeyStoreBank, %struct.KeyStoreBank* %29, i32 0, i32 2, !dbg !2154
  store %struct.KeyStoreBank* null, %struct.KeyStoreBank** %30, align 8, !dbg !2155
  store i32 0, i32* @numPasswords, align 4, !dbg !2156
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2157, metadata !DIExpression()), !dbg !2158
  %31 = load i8*, i8** %2, align 8, !dbg !2159
  %32 = call i8* @_Z21string_integer_concatPci(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 0), !dbg !2160
  %33 = call i8* @binn_object_str(i8* %31, i8* %32), !dbg !2161
  store i8* %33, i8** %7, align 8, !dbg !2158
  call void @llvm.dbg.declare(metadata i32* %8, metadata !2162, metadata !DIExpression()), !dbg !2163
  store i32 0, i32* %8, align 4, !dbg !2163
  br label %34, !dbg !2164

34:                                               ; preds = %37, %24
  %35 = load i8*, i8** %7, align 8, !dbg !2165
  %36 = icmp ne i8* %35, null, !dbg !2166
  br i1 %36, label %37, label %59, !dbg !2164

37:                                               ; preds = %34
  call void @llvm.dbg.declare(metadata i8** %9, metadata !2167, metadata !DIExpression()), !dbg !2169
  %38 = load i8*, i8** %2, align 8, !dbg !2170
  %39 = load i32, i32* %8, align 4, !dbg !2171
  %40 = call i8* @_Z21string_integer_concatPci(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 %39), !dbg !2172
  %41 = call i8* @binn_object_str(i8* %38, i8* %40), !dbg !2173
  store i8* %41, i8** %9, align 8, !dbg !2169
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2174, metadata !DIExpression()), !dbg !2175
  %42 = load i8*, i8** %2, align 8, !dbg !2176
  %43 = load i32, i32* %8, align 4, !dbg !2177
  %44 = call i8* @_Z21string_integer_concatPci(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32 %43), !dbg !2178
  %45 = call i8* @binn_object_str(i8* %42, i8* %44), !dbg !2179
  store i8* %45, i8** %10, align 8, !dbg !2175
  %46 = load i8*, i8** %9, align 8, !dbg !2180
  %47 = call i32 @ocall_print(i8* %46), !dbg !2181
  %48 = load i8*, i8** %10, align 8, !dbg !2182
  %49 = call i32 @ocall_print(i8* %48), !dbg !2183
  %50 = load i8*, i8** %9, align 8, !dbg !2184
  %51 = load i8*, i8** %10, align 8, !dbg !2185
  %52 = call i32 @add_password(i8* %50, i8* %51), !dbg !2186
  %53 = load i32, i32* %8, align 4, !dbg !2187
  %54 = add nsw i32 %53, 1, !dbg !2187
  store i32 %54, i32* %8, align 4, !dbg !2187
  %55 = load i8*, i8** %2, align 8, !dbg !2188
  %56 = load i32, i32* %8, align 4, !dbg !2189
  %57 = call i8* @_Z21string_integer_concatPci(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 %56), !dbg !2190
  %58 = call i8* @binn_object_str(i8* %55, i8* %57), !dbg !2191
  store i8* %58, i8** %7, align 8, !dbg !2192
  br label %34, !dbg !2164, !llvm.loop !2193

59:                                               ; preds = %34
  call void @llvm.trap(), !dbg !2164
  unreachable, !dbg !2164
}

declare i32 @sgx_rijndael128GCM_decrypt([16 x i8]*, i8*, i32, i8*, i8*, i32, i8*, i32, [16 x i8]*) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @seal(i8* %0, i64 %1, %struct._sealed_data_t* %2, i64 %3) #6 !dbg !2195 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct._sealed_data_t*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !2201, metadata !DIExpression()), !dbg !2202
  store i64 %1, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !2203, metadata !DIExpression()), !dbg !2204
  store %struct._sealed_data_t* %2, %struct._sealed_data_t** %7, align 8
  call void @llvm.dbg.declare(metadata %struct._sealed_data_t** %7, metadata !2205, metadata !DIExpression()), !dbg !2206
  store i64 %3, i64* %8, align 8
  call void @llvm.dbg.declare(metadata i64* %8, metadata !2207, metadata !DIExpression()), !dbg !2208
  call void @llvm.dbg.declare(metadata i32* %9, metadata !2209, metadata !DIExpression()), !dbg !2210
  %10 = load i64, i64* %6, align 8, !dbg !2211
  %11 = trunc i64 %10 to i32, !dbg !2211
  %12 = load i8*, i8** %5, align 8, !dbg !2212
  %13 = load i64, i64* %8, align 8, !dbg !2213
  %14 = trunc i64 %13 to i32, !dbg !2213
  %15 = load %struct._sealed_data_t*, %struct._sealed_data_t** %7, align 8, !dbg !2214
  %16 = call i32 @sgx_seal_data(i32 0, i8* null, i32 %11, i8* %12, i32 %14, %struct._sealed_data_t* %15), !dbg !2215
  store i32 %16, i32* %9, align 4, !dbg !2210
  %17 = load i32, i32* %9, align 4, !dbg !2216
  ret i32 %17, !dbg !2217
}

declare i32 @sgx_seal_data(i32, i8*, i32, i8*, i32, %struct._sealed_data_t*) #2

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @unseal(%struct._sealed_data_t* %0, i64 %1, i8* %2, i32 %3) #6 !dbg !2218 {
  %5 = alloca %struct._sealed_data_t*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct._sealed_data_t* %0, %struct._sealed_data_t** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._sealed_data_t** %5, metadata !2221, metadata !DIExpression()), !dbg !2222
  store i64 %1, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !2223, metadata !DIExpression()), !dbg !2224
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2225, metadata !DIExpression()), !dbg !2226
  store i32 %3, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !2227, metadata !DIExpression()), !dbg !2228
  call void @llvm.dbg.declare(metadata i32* %9, metadata !2229, metadata !DIExpression()), !dbg !2230
  %10 = load %struct._sealed_data_t*, %struct._sealed_data_t** %5, align 8, !dbg !2231
  %11 = load i8*, i8** %7, align 8, !dbg !2232
  %12 = call i32 @sgx_unseal_data(%struct._sealed_data_t* %10, i8* null, i32* null, i8* %11, i32* %8), !dbg !2233
  store i32 %12, i32* %9, align 4, !dbg !2230
  %13 = load i32, i32* %9, align 4, !dbg !2234
  ret i32 %13, !dbg !2235
}

declare i32 @sgx_unseal_data(%struct._sealed_data_t*, i8*, i32*, i8*, i32*) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden void @binn_set_alloc_functions(i8* (i64)* %0, i8* (i8*, i64)* %1, void (i8*)* %2) #0 !dbg !2236 {
  %4 = alloca i8* (i64)*, align 8
  %5 = alloca i8* (i8*, i64)*, align 8
  %6 = alloca void (i8*)*, align 8
  store i8* (i64)* %0, i8* (i64)** %4, align 8
  call void @llvm.dbg.declare(metadata i8* (i64)** %4, metadata !2239, metadata !DIExpression()), !dbg !2240
  store i8* (i8*, i64)* %1, i8* (i8*, i64)** %5, align 8
  call void @llvm.dbg.declare(metadata i8* (i8*, i64)** %5, metadata !2241, metadata !DIExpression()), !dbg !2242
  store void (i8*)* %2, void (i8*)** %6, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %6, metadata !2243, metadata !DIExpression()), !dbg !2244
  %7 = load i8* (i64)*, i8* (i64)** %4, align 8, !dbg !2245
  store i8* (i64)* %7, i8* (i64)** @malloc_fn, align 8, !dbg !2246
  %8 = load i8* (i8*, i64)*, i8* (i8*, i64)** %5, align 8, !dbg !2247
  store i8* (i8*, i64)* %8, i8* (i8*, i64)** @realloc_fn, align 8, !dbg !2248
  %9 = load void (i8*)*, void (i8*)** %6, align 8, !dbg !2249
  store void (i8*)* %9, void (i8*)** @free_fn, align 8, !dbg !2250
  ret void, !dbg !2251
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @binn_create_type(i32 %0, i32 %1) #0 !dbg !2252 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !2255, metadata !DIExpression()), !dbg !2256
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !2257, metadata !DIExpression()), !dbg !2258
  %6 = load i32, i32* %5, align 4, !dbg !2259
  %7 = icmp slt i32 %6, 0, !dbg !2261
  br i1 %7, label %8, label %9, !dbg !2262

8:                                                ; preds = %2
  store i32 -1, i32* %3, align 4, !dbg !2263
  br label %37, !dbg !2263

9:                                                ; preds = %2
  %10 = load i32, i32* %4, align 4, !dbg !2264
  %11 = icmp slt i32 %10, 0, !dbg !2266
  br i1 %11, label %15, label %12, !dbg !2267

12:                                               ; preds = %9
  %13 = load i32, i32* %4, align 4, !dbg !2268
  %14 = icmp sgt i32 %13, 224, !dbg !2269
  br i1 %14, label %15, label %16, !dbg !2270

15:                                               ; preds = %12, %9
  store i32 -1, i32* %3, align 4, !dbg !2271
  br label %37, !dbg !2271

16:                                               ; preds = %12
  %17 = load i32, i32* %5, align 4, !dbg !2272
  %18 = icmp slt i32 %17, 16, !dbg !2274
  br i1 %18, label %19, label %23, !dbg !2275

19:                                               ; preds = %16
  %20 = load i32, i32* %4, align 4, !dbg !2276
  %21 = load i32, i32* %5, align 4, !dbg !2277
  %22 = or i32 %20, %21, !dbg !2278
  store i32 %22, i32* %3, align 4, !dbg !2279
  br label %37, !dbg !2279

23:                                               ; preds = %16
  %24 = load i32, i32* %5, align 4, !dbg !2280
  %25 = icmp slt i32 %24, 4096, !dbg !2282
  br i1 %25, label %26, label %36, !dbg !2283

26:                                               ; preds = %23
  %27 = load i32, i32* %4, align 4, !dbg !2284
  %28 = or i32 %27, 16, !dbg !2284
  store i32 %28, i32* %4, align 4, !dbg !2284
  %29 = load i32, i32* %4, align 4, !dbg !2286
  %30 = shl i32 %29, 8, !dbg !2286
  store i32 %30, i32* %4, align 4, !dbg !2286
  %31 = load i32, i32* %5, align 4, !dbg !2287
  %32 = ashr i32 %31, 4, !dbg !2287
  store i32 %32, i32* %5, align 4, !dbg !2287
  %33 = load i32, i32* %4, align 4, !dbg !2288
  %34 = load i32, i32* %5, align 4, !dbg !2289
  %35 = or i32 %33, %34, !dbg !2290
  store i32 %35, i32* %3, align 4, !dbg !2291
  br label %37, !dbg !2291

36:                                               ; preds = %23
  store i32 -1, i32* %3, align 4, !dbg !2292
  br label %37, !dbg !2292

37:                                               ; preds = %36, %26, %19, %15, %8
  %38 = load i32, i32* %3, align 4, !dbg !2293
  ret i32 %38, !dbg !2293
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @binn_get_type_info(i32 %0, i32* %1, i32* %2) #0 !dbg !2294 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !2297, metadata !DIExpression()), !dbg !2298
  store i32* %1, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !2299, metadata !DIExpression()), !dbg !2300
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !2301, metadata !DIExpression()), !dbg !2302
  call void @llvm.dbg.declare(metadata i32* %7, metadata !2303, metadata !DIExpression()), !dbg !2304
  call void @llvm.dbg.declare(metadata i32* %8, metadata !2305, metadata !DIExpression()), !dbg !2306
  call void @llvm.dbg.declare(metadata i32* %9, metadata !2307, metadata !DIExpression()), !dbg !2308
  store i32 1, i32* %9, align 4, !dbg !2308
  br label %10, !dbg !2309

10:                                               ; preds = %38, %3
  call void @llvm.dbg.label(metadata !2310), !dbg !2311
  %11 = load i32, i32* %4, align 4, !dbg !2312
  %12 = icmp slt i32 %11, 0, !dbg !2314
  br i1 %12, label %13, label %14, !dbg !2315

13:                                               ; preds = %10
  br label %42, !dbg !2316

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4, !dbg !2318
  %16 = icmp sle i32 %15, 255, !dbg !2320
  br i1 %16, label %17, label %22, !dbg !2321

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4, !dbg !2322
  %19 = and i32 %18, 224, !dbg !2324
  store i32 %19, i32* %7, align 4, !dbg !2325
  %20 = load i32, i32* %4, align 4, !dbg !2326
  %21 = and i32 %20, 15, !dbg !2327
  store i32 %21, i32* %8, align 4, !dbg !2328
  br label %45, !dbg !2329

22:                                               ; preds = %14
  %23 = load i32, i32* %4, align 4, !dbg !2330
  %24 = icmp sle i32 %23, 65535, !dbg !2332
  br i1 %24, label %25, label %34, !dbg !2333

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4, !dbg !2334
  %27 = and i32 %26, 57344, !dbg !2336
  store i32 %27, i32* %7, align 4, !dbg !2337
  %28 = load i32, i32* %7, align 4, !dbg !2338
  %29 = ashr i32 %28, 8, !dbg !2338
  store i32 %29, i32* %7, align 4, !dbg !2338
  %30 = load i32, i32* %4, align 4, !dbg !2339
  %31 = and i32 %30, 4095, !dbg !2340
  store i32 %31, i32* %8, align 4, !dbg !2341
  %32 = load i32, i32* %8, align 4, !dbg !2342
  %33 = ashr i32 %32, 4, !dbg !2342
  store i32 %33, i32* %8, align 4, !dbg !2342
  br label %44, !dbg !2343

34:                                               ; preds = %22
  %35 = load i32, i32* %4, align 4, !dbg !2344
  %36 = and i32 %35, 524288, !dbg !2346
  %37 = icmp ne i32 %36, 0, !dbg !2344
  br i1 %37, label %38, label %41, !dbg !2347

38:                                               ; preds = %34
  %39 = load i32, i32* %4, align 4, !dbg !2348
  %40 = and i32 %39, 65535, !dbg !2348
  store i32 %40, i32* %4, align 4, !dbg !2348
  br label %10, !dbg !2350

41:                                               ; preds = %34
  br label %42, !dbg !2351

42:                                               ; preds = %41, %13
  call void @llvm.dbg.label(metadata !2352), !dbg !2354
  store i32 -1, i32* %7, align 4, !dbg !2355
  store i32 -1, i32* %8, align 4, !dbg !2356
  store i32 0, i32* %9, align 4, !dbg !2357
  br label %43

43:                                               ; preds = %42
  br label %44

44:                                               ; preds = %43, %25
  br label %45

45:                                               ; preds = %44, %17
  br label %46

46:                                               ; preds = %45
  %47 = load i32*, i32** %5, align 8, !dbg !2358
  %48 = icmp ne i32* %47, null, !dbg !2358
  br i1 %48, label %49, label %52, !dbg !2360

49:                                               ; preds = %46
  %50 = load i32, i32* %7, align 4, !dbg !2361
  %51 = load i32*, i32** %5, align 8, !dbg !2362
  store i32 %50, i32* %51, align 4, !dbg !2363
  br label %52, !dbg !2364

52:                                               ; preds = %49, %46
  %53 = load i32*, i32** %6, align 8, !dbg !2365
  %54 = icmp ne i32* %53, null, !dbg !2365
  br i1 %54, label %55, label %58, !dbg !2367

55:                                               ; preds = %52
  %56 = load i32, i32* %8, align 4, !dbg !2368
  %57 = load i32*, i32** %6, align 8, !dbg !2369
  store i32 %56, i32* %57, align 4, !dbg !2370
  br label %58, !dbg !2371

58:                                               ; preds = %55, %52
  %59 = load i32, i32* %9, align 4, !dbg !2372
  ret i32 %59, !dbg !2373
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_create(%struct.binn_struct* %0, i32 %1, i32 %2, i8* %3) #6 !dbg !2374 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.binn_struct*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !2377, metadata !DIExpression()), !dbg !2378
  store i32 %1, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !2379, metadata !DIExpression()), !dbg !2380
  store i32 %2, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !2381, metadata !DIExpression()), !dbg !2382
  store i8* %3, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !2383, metadata !DIExpression()), !dbg !2384
  call void @llvm.dbg.declare(metadata i32* %10, metadata !2385, metadata !DIExpression()), !dbg !2386
  store i32 0, i32* %10, align 4, !dbg !2386
  %11 = load i32, i32* %7, align 4, !dbg !2387
  switch i32 %11, label %13 [
    i32 224, label %12
    i32 225, label %12
    i32 226, label %12
  ], !dbg !2388

12:                                               ; preds = %4, %4, %4
  br label %14, !dbg !2389

13:                                               ; preds = %4
  br label %75, !dbg !2391

14:                                               ; preds = %12
  %15 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2392
  %16 = icmp eq %struct.binn_struct* %15, null, !dbg !2394
  br i1 %16, label %20, label %17, !dbg !2395

17:                                               ; preds = %14
  %18 = load i32, i32* %8, align 4, !dbg !2396
  %19 = icmp slt i32 %18, 0, !dbg !2397
  br i1 %19, label %20, label %21, !dbg !2398

20:                                               ; preds = %17, %14
  br label %75, !dbg !2399

21:                                               ; preds = %17
  %22 = load i32, i32* %8, align 4, !dbg !2400
  %23 = icmp slt i32 %22, 3, !dbg !2402
  br i1 %23, label %24, label %30, !dbg !2403

24:                                               ; preds = %21
  %25 = load i8*, i8** %9, align 8, !dbg !2404
  %26 = icmp ne i8* %25, null, !dbg !2404
  br i1 %26, label %27, label %28, !dbg !2407

27:                                               ; preds = %24
  br label %75, !dbg !2408

28:                                               ; preds = %24
  store i32 0, i32* %8, align 4, !dbg !2409
  br label %29

29:                                               ; preds = %28
  br label %30, !dbg !2410

30:                                               ; preds = %29, %21
  %31 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2411
  %32 = bitcast %struct.binn_struct* %31 to i8*, !dbg !2412
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 80, i1 false), !dbg !2412
  %33 = load i8*, i8** %9, align 8, !dbg !2413
  %34 = icmp ne i8* %33, null, !dbg !2413
  br i1 %34, label %35, label %44, !dbg !2415

35:                                               ; preds = %30
  %36 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2416
  %37 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %36, i32 0, i32 5, !dbg !2418
  store i32 1, i32* %37, align 8, !dbg !2419
  %38 = load i8*, i8** %9, align 8, !dbg !2420
  %39 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2421
  %40 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %39, i32 0, i32 4, !dbg !2422
  store i8* %38, i8** %40, align 8, !dbg !2423
  %41 = load i32, i32* %8, align 4, !dbg !2424
  %42 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2425
  %43 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %42, i32 0, i32 6, !dbg !2426
  store i32 %41, i32* %43, align 4, !dbg !2427
  br label %63, !dbg !2428

44:                                               ; preds = %30
  %45 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2429
  %46 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %45, i32 0, i32 5, !dbg !2431
  store i32 0, i32* %46, align 8, !dbg !2432
  %47 = load i32, i32* %8, align 4, !dbg !2433
  %48 = icmp eq i32 %47, 0, !dbg !2435
  br i1 %48, label %49, label %50, !dbg !2436

49:                                               ; preds = %44
  store i32 256, i32* %8, align 4, !dbg !2437
  br label %50, !dbg !2438

50:                                               ; preds = %49, %44
  %51 = load i32, i32* %8, align 4, !dbg !2439
  %52 = call i8* @_ZL11binn_malloci(i32 %51), !dbg !2440
  store i8* %52, i8** %9, align 8, !dbg !2441
  %53 = load i8*, i8** %9, align 8, !dbg !2442
  %54 = icmp eq i8* %53, null, !dbg !2444
  br i1 %54, label %55, label %56, !dbg !2445

55:                                               ; preds = %50
  store i32 0, i32* %5, align 4, !dbg !2446
  br label %77, !dbg !2446

56:                                               ; preds = %50
  %57 = load i8*, i8** %9, align 8, !dbg !2447
  %58 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2448
  %59 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %58, i32 0, i32 4, !dbg !2449
  store i8* %57, i8** %59, align 8, !dbg !2450
  %60 = load i32, i32* %8, align 4, !dbg !2451
  %61 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2452
  %62 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %61, i32 0, i32 6, !dbg !2453
  store i32 %60, i32* %62, align 4, !dbg !2454
  br label %63

63:                                               ; preds = %56, %35
  %64 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2455
  %65 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %64, i32 0, i32 0, !dbg !2456
  store i32 522367263, i32* %65, align 8, !dbg !2457
  %66 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2458
  %67 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %66, i32 0, i32 2, !dbg !2459
  store i32 1, i32* %67, align 8, !dbg !2460
  %68 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2461
  %69 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %68, i32 0, i32 7, !dbg !2462
  store i32 9, i32* %69, align 8, !dbg !2463
  %70 = load i32, i32* %7, align 4, !dbg !2464
  %71 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2465
  %72 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %71, i32 0, i32 8, !dbg !2466
  store i32 %70, i32* %72, align 4, !dbg !2467
  %73 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !2468
  %74 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %73, i32 0, i32 3, !dbg !2469
  store i32 1, i32* %74, align 4, !dbg !2470
  store i32 1, i32* %10, align 4, !dbg !2471
  br label %75, !dbg !2472

75:                                               ; preds = %63, %27, %20, %13
  call void @llvm.dbg.label(metadata !2473), !dbg !2474
  %76 = load i32, i32* %10, align 4, !dbg !2475
  store i32 %76, i32* %5, align 4, !dbg !2476
  br label %77, !dbg !2476

77:                                               ; preds = %75, %55
  %78 = load i32, i32* %5, align 4, !dbg !2477
  ret i32 %78, !dbg !2477
}

; Function Attrs: noinline optnone ssp uwtable
define internal i8* @_ZL11binn_malloci(i32 %0) #6 !dbg !2478 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !2481, metadata !DIExpression()), !dbg !2482
  call void @_ZL21check_alloc_functionsv(), !dbg !2483
  %3 = load i8* (i64)*, i8* (i64)** @malloc_fn, align 8, !dbg !2484
  %4 = load i32, i32* %2, align 4, !dbg !2485
  %5 = sext i32 %4 to i64, !dbg !2485
  %6 = call i8* %3(i64 %5), !dbg !2484
  ret i8* %6, !dbg !2486
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL21check_alloc_functionsv() #0 !dbg !2487 {
  %1 = load i8* (i64)*, i8* (i64)** @malloc_fn, align 8, !dbg !2488
  %2 = icmp eq i8* (i64)* %1, null, !dbg !2490
  br i1 %2, label %3, label %4, !dbg !2491

3:                                                ; preds = %0
  store i8* (i64)* @malloc, i8* (i64)** @malloc_fn, align 8, !dbg !2492
  br label %4, !dbg !2493

4:                                                ; preds = %3, %0
  %5 = load i8* (i8*, i64)*, i8* (i8*, i64)** @realloc_fn, align 8, !dbg !2494
  %6 = icmp eq i8* (i8*, i64)* %5, null, !dbg !2496
  br i1 %6, label %7, label %8, !dbg !2497

7:                                                ; preds = %4
  store i8* (i8*, i64)* @realloc, i8* (i8*, i64)** @realloc_fn, align 8, !dbg !2498
  br label %8, !dbg !2499

8:                                                ; preds = %7, %4
  %9 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !2500
  %10 = icmp eq void (i8*)* %9, null, !dbg !2502
  br i1 %10, label %11, label %12, !dbg !2503

11:                                               ; preds = %8
  store void (i8*)* @free, void (i8*)** @free_fn, align 8, !dbg !2504
  br label %12, !dbg !2505

12:                                               ; preds = %11, %8
  ret void, !dbg !2506
}

declare align 16 i8* @realloc(i8*, i64) #2

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_new(i32 %0, i32 %1, i8* %2) #6 !dbg !2507 {
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.binn_struct*, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !2510, metadata !DIExpression()), !dbg !2511
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !2512, metadata !DIExpression()), !dbg !2513
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2514, metadata !DIExpression()), !dbg !2515
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %8, metadata !2516, metadata !DIExpression()), !dbg !2517
  %9 = call i8* @_ZL11binn_malloci(i32 80), !dbg !2518
  %10 = bitcast i8* %9 to %struct.binn_struct*, !dbg !2519
  store %struct.binn_struct* %10, %struct.binn_struct** %8, align 8, !dbg !2520
  %11 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !2521
  %12 = load i32, i32* %5, align 4, !dbg !2523
  %13 = load i32, i32* %6, align 4, !dbg !2524
  %14 = load i8*, i8** %7, align 8, !dbg !2525
  %15 = call i32 @binn_create(%struct.binn_struct* %11, i32 %12, i32 %13, i8* %14), !dbg !2526
  %16 = icmp eq i32 %15, 0, !dbg !2527
  br i1 %16, label %17, label %21, !dbg !2528

17:                                               ; preds = %3
  %18 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !2529
  %19 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !2531
  %20 = bitcast %struct.binn_struct* %19 to i8*, !dbg !2531
  call void %18(i8* %20), !dbg !2529
  store %struct.binn_struct* null, %struct.binn_struct** %4, align 8, !dbg !2532
  br label %25, !dbg !2532

21:                                               ; preds = %3
  %22 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !2533
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %22, i32 0, i32 1, !dbg !2534
  store i32 1, i32* %23, align 4, !dbg !2535
  %24 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !2536
  store %struct.binn_struct* %24, %struct.binn_struct** %4, align 8, !dbg !2537
  br label %25, !dbg !2537

25:                                               ; preds = %21, %17
  %26 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !2538
  ret %struct.binn_struct* %26, !dbg !2538
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_create_list(%struct.binn_struct* %0) #6 !dbg !2539 {
  %2 = alloca %struct.binn_struct*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %2, metadata !2542, metadata !DIExpression()), !dbg !2543
  %3 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !2544
  %4 = call i32 @binn_create(%struct.binn_struct* %3, i32 224, i32 0, i8* null), !dbg !2545
  ret i32 %4, !dbg !2546
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_create_map(%struct.binn_struct* %0) #6 !dbg !2547 {
  %2 = alloca %struct.binn_struct*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %2, metadata !2548, metadata !DIExpression()), !dbg !2549
  %3 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !2550
  %4 = call i32 @binn_create(%struct.binn_struct* %3, i32 225, i32 0, i8* null), !dbg !2551
  ret i32 %4, !dbg !2552
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_create_object(%struct.binn_struct* %0) #6 !dbg !2553 {
  %2 = alloca %struct.binn_struct*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %2, metadata !2554, metadata !DIExpression()), !dbg !2555
  %3 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !2556
  %4 = call i32 @binn_create(%struct.binn_struct* %3, i32 226, i32 0, i8* null), !dbg !2557
  ret i32 %4, !dbg !2558
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_list() #6 !dbg !2559 {
  %1 = call %struct.binn_struct* @binn_new(i32 224, i32 0, i8* null), !dbg !2562
  ret %struct.binn_struct* %1, !dbg !2563
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_map() #6 !dbg !2564 {
  %1 = call %struct.binn_struct* @binn_new(i32 225, i32 0, i8* null), !dbg !2565
  ret %struct.binn_struct* %1, !dbg !2566
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_object() #6 !dbg !2567 {
  %1 = call %struct.binn_struct* @binn_new(i32 226, i32 0, i8* null), !dbg !2568
  ret %struct.binn_struct* %1, !dbg !2569
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_load(i8* %0, %struct.binn_struct* %1) #6 !dbg !2570 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2573, metadata !DIExpression()), !dbg !2574
  store %struct.binn_struct* %1, %struct.binn_struct** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %5, metadata !2575, metadata !DIExpression()), !dbg !2576
  %6 = load i8*, i8** %4, align 8, !dbg !2577
  %7 = icmp eq i8* %6, null, !dbg !2579
  br i1 %7, label %11, label %8, !dbg !2580

8:                                                ; preds = %2
  %9 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !2581
  %10 = icmp eq %struct.binn_struct* %9, null, !dbg !2582
  br i1 %10, label %11, label %12, !dbg !2583

11:                                               ; preds = %8, %2
  store i32 0, i32* %3, align 4, !dbg !2584
  br label %31, !dbg !2584

12:                                               ; preds = %8
  %13 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !2585
  %14 = bitcast %struct.binn_struct* %13 to i8*, !dbg !2586
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 80, i1 false), !dbg !2586
  %15 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !2587
  %16 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %15, i32 0, i32 0, !dbg !2588
  store i32 522367263, i32* %16, align 8, !dbg !2589
  %17 = load i8*, i8** %4, align 8, !dbg !2590
  %18 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !2592
  %19 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %18, i32 0, i32 8, !dbg !2593
  %20 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !2594
  %21 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %20, i32 0, i32 11, !dbg !2595
  %22 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !2596
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %22, i32 0, i32 10, !dbg !2597
  %24 = call i32 @binn_is_valid(i8* %17, i32* %19, i32* %21, i32* %23), !dbg !2598
  %25 = icmp eq i32 %24, 0, !dbg !2599
  br i1 %25, label %26, label %27, !dbg !2600

26:                                               ; preds = %12
  store i32 0, i32* %3, align 4, !dbg !2601
  br label %31, !dbg !2601

27:                                               ; preds = %12
  %28 = load i8*, i8** %4, align 8, !dbg !2602
  %29 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !2603
  %30 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %29, i32 0, i32 9, !dbg !2604
  store i8* %28, i8** %30, align 8, !dbg !2605
  store i32 1, i32* %3, align 4, !dbg !2606
  br label %31, !dbg !2606

31:                                               ; preds = %27, %26, %11
  %32 = load i32, i32* %3, align 4, !dbg !2607
  ret i32 %32, !dbg !2607
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_is_valid(i8* %0, i32* %1, i32* %2, i32* %3) #6 !dbg !2608 {
  %5 = alloca i8*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !2611, metadata !DIExpression()), !dbg !2612
  store i32* %1, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !2613, metadata !DIExpression()), !dbg !2614
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !2615, metadata !DIExpression()), !dbg !2616
  store i32* %3, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !2617, metadata !DIExpression()), !dbg !2618
  %9 = load i32*, i32** %6, align 8, !dbg !2619
  %10 = icmp ne i32* %9, null, !dbg !2619
  br i1 %10, label %11, label %13, !dbg !2621

11:                                               ; preds = %4
  %12 = load i32*, i32** %6, align 8, !dbg !2622
  store i32 0, i32* %12, align 4, !dbg !2623
  br label %13, !dbg !2624

13:                                               ; preds = %11, %4
  %14 = load i32*, i32** %7, align 8, !dbg !2625
  %15 = icmp ne i32* %14, null, !dbg !2625
  br i1 %15, label %16, label %18, !dbg !2627

16:                                               ; preds = %13
  %17 = load i32*, i32** %7, align 8, !dbg !2628
  store i32 0, i32* %17, align 4, !dbg !2629
  br label %18, !dbg !2630

18:                                               ; preds = %16, %13
  %19 = load i32*, i32** %8, align 8, !dbg !2631
  %20 = icmp ne i32* %19, null, !dbg !2631
  br i1 %20, label %21, label %23, !dbg !2633

21:                                               ; preds = %18
  %22 = load i32*, i32** %8, align 8, !dbg !2634
  store i32 0, i32* %22, align 4, !dbg !2635
  br label %23, !dbg !2636

23:                                               ; preds = %21, %18
  %24 = load i8*, i8** %5, align 8, !dbg !2637
  %25 = load i32*, i32** %6, align 8, !dbg !2638
  %26 = load i32*, i32** %7, align 8, !dbg !2639
  %27 = load i32*, i32** %8, align 8, !dbg !2640
  %28 = call i32 @binn_is_valid_ex(i8* %24, i32* %25, i32* %26, i32* %27), !dbg !2641
  ret i32 %28, !dbg !2642
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_is_valid_ex(i8* %0, i32* %1, i32* %2, i32* %3) #6 !dbg !2643 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !2644, metadata !DIExpression()), !dbg !2645
  store i32* %1, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !2646, metadata !DIExpression()), !dbg !2647
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !2648, metadata !DIExpression()), !dbg !2649
  store i32* %3, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !2650, metadata !DIExpression()), !dbg !2651
  call void @llvm.dbg.declare(metadata i32* %10, metadata !2652, metadata !DIExpression()), !dbg !2653
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2654, metadata !DIExpression()), !dbg !2655
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2656, metadata !DIExpression()), !dbg !2657
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2658, metadata !DIExpression()), !dbg !2659
  call void @llvm.dbg.declare(metadata i32* %14, metadata !2660, metadata !DIExpression()), !dbg !2661
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2662, metadata !DIExpression()), !dbg !2663
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2664, metadata !DIExpression()), !dbg !2665
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2666, metadata !DIExpression()), !dbg !2667
  call void @llvm.dbg.declare(metadata i8* %18, metadata !2668, metadata !DIExpression()), !dbg !2669
  call void @llvm.dbg.declare(metadata i8** %19, metadata !2670, metadata !DIExpression()), !dbg !2671
  %20 = load i8*, i8** %6, align 8, !dbg !2672
  %21 = call i8* @binn_ptr(i8* %20), !dbg !2673
  store i8* %21, i8** %19, align 8, !dbg !2674
  %22 = load i8*, i8** %19, align 8, !dbg !2675
  %23 = icmp eq i8* %22, null, !dbg !2677
  br i1 %23, label %24, label %25, !dbg !2678

24:                                               ; preds = %4
  store i32 0, i32* %5, align 4, !dbg !2679
  br label %160, !dbg !2679

25:                                               ; preds = %4
  %26 = load i32*, i32** %9, align 8, !dbg !2680
  %27 = icmp ne i32* %26, null, !dbg !2680
  br i1 %27, label %28, label %35, !dbg !2682

28:                                               ; preds = %25
  %29 = load i32*, i32** %9, align 8, !dbg !2683
  %30 = load i32, i32* %29, align 4, !dbg !2684
  %31 = icmp sgt i32 %30, 0, !dbg !2685
  br i1 %31, label %32, label %35, !dbg !2686

32:                                               ; preds = %28
  %33 = load i32*, i32** %9, align 8, !dbg !2687
  %34 = load i32, i32* %33, align 4, !dbg !2689
  store i32 %34, i32* %13, align 4, !dbg !2690
  br label %36, !dbg !2691

35:                                               ; preds = %28, %25
  store i32 0, i32* %13, align 4, !dbg !2692
  br label %36

36:                                               ; preds = %35, %32
  %37 = load i8*, i8** %19, align 8, !dbg !2694
  %38 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %37, i32* %11, i32* %12, i32* %13, i32* %14), !dbg !2696
  %39 = icmp ne i32 %38, 0, !dbg !2696
  br i1 %39, label %41, label %40, !dbg !2697

40:                                               ; preds = %36
  store i32 0, i32* %5, align 4, !dbg !2698
  br label %160, !dbg !2698

41:                                               ; preds = %36
  %42 = load i32*, i32** %9, align 8, !dbg !2699
  %43 = icmp ne i32* %42, null, !dbg !2699
  br i1 %43, label %44, label %55, !dbg !2701

44:                                               ; preds = %41
  %45 = load i32*, i32** %9, align 8, !dbg !2702
  %46 = load i32, i32* %45, align 4, !dbg !2703
  %47 = icmp sgt i32 %46, 0, !dbg !2704
  br i1 %47, label %48, label %55, !dbg !2705

48:                                               ; preds = %44
  %49 = load i32, i32* %13, align 4, !dbg !2706
  %50 = load i32*, i32** %9, align 8, !dbg !2709
  %51 = load i32, i32* %50, align 4, !dbg !2710
  %52 = icmp ne i32 %49, %51, !dbg !2711
  br i1 %52, label %53, label %54, !dbg !2712

53:                                               ; preds = %48
  store i32 0, i32* %5, align 4, !dbg !2713
  br label %160, !dbg !2713

54:                                               ; preds = %48
  br label %55, !dbg !2714

55:                                               ; preds = %54, %44, %41
  %56 = load i32*, i32** %8, align 8, !dbg !2715
  %57 = icmp ne i32* %56, null, !dbg !2715
  br i1 %57, label %58, label %69, !dbg !2717

58:                                               ; preds = %55
  %59 = load i32*, i32** %8, align 8, !dbg !2718
  %60 = load i32, i32* %59, align 4, !dbg !2719
  %61 = icmp sgt i32 %60, 0, !dbg !2720
  br i1 %61, label %62, label %69, !dbg !2721

62:                                               ; preds = %58
  %63 = load i32, i32* %12, align 4, !dbg !2722
  %64 = load i32*, i32** %8, align 8, !dbg !2725
  %65 = load i32, i32* %64, align 4, !dbg !2726
  %66 = icmp ne i32 %63, %65, !dbg !2727
  br i1 %66, label %67, label %68, !dbg !2728

67:                                               ; preds = %62
  store i32 0, i32* %5, align 4, !dbg !2729
  br label %160, !dbg !2729

68:                                               ; preds = %62
  br label %69, !dbg !2730

69:                                               ; preds = %68, %58, %55
  %70 = load i32*, i32** %7, align 8, !dbg !2731
  %71 = icmp ne i32* %70, null, !dbg !2731
  br i1 %71, label %72, label %83, !dbg !2733

72:                                               ; preds = %69
  %73 = load i32*, i32** %7, align 8, !dbg !2734
  %74 = load i32, i32* %73, align 4, !dbg !2735
  %75 = icmp ne i32 %74, 0, !dbg !2736
  br i1 %75, label %76, label %83, !dbg !2737

76:                                               ; preds = %72
  %77 = load i32, i32* %11, align 4, !dbg !2738
  %78 = load i32*, i32** %7, align 8, !dbg !2741
  %79 = load i32, i32* %78, align 4, !dbg !2742
  %80 = icmp ne i32 %77, %79, !dbg !2743
  br i1 %80, label %81, label %82, !dbg !2744

81:                                               ; preds = %76
  store i32 0, i32* %5, align 4, !dbg !2745
  br label %160, !dbg !2745

82:                                               ; preds = %76
  br label %83, !dbg !2746

83:                                               ; preds = %82, %72, %69
  %84 = load i8*, i8** %19, align 8, !dbg !2747
  store i8* %84, i8** %15, align 8, !dbg !2748
  %85 = load i8*, i8** %15, align 8, !dbg !2749
  store i8* %85, i8** %17, align 8, !dbg !2750
  %86 = load i8*, i8** %15, align 8, !dbg !2751
  %87 = load i32, i32* %13, align 4, !dbg !2752
  %88 = sext i32 %87 to i64, !dbg !2753
  %89 = getelementptr inbounds i8, i8* %86, i64 %88, !dbg !2753
  store i8* %89, i8** %16, align 8, !dbg !2754
  %90 = load i32, i32* %14, align 4, !dbg !2755
  %91 = load i8*, i8** %15, align 8, !dbg !2756
  %92 = sext i32 %90 to i64, !dbg !2756
  %93 = getelementptr inbounds i8, i8* %91, i64 %92, !dbg !2756
  store i8* %93, i8** %15, align 8, !dbg !2756
  store i32 0, i32* %10, align 4, !dbg !2757
  br label %94, !dbg !2759

94:                                               ; preds = %125, %83
  %95 = load i32, i32* %10, align 4, !dbg !2760
  %96 = load i32, i32* %12, align 4, !dbg !2762
  %97 = icmp slt i32 %95, %96, !dbg !2763
  br i1 %97, label %98, label %128, !dbg !2764

98:                                               ; preds = %94
  %99 = load i32, i32* %11, align 4, !dbg !2765
  switch i32 %99, label %113 [
    i32 226, label %100
    i32 225, label %110
  ], !dbg !2767

100:                                              ; preds = %98
  %101 = load i8*, i8** %15, align 8, !dbg !2768
  %102 = load i8, i8* %101, align 1, !dbg !2770
  store i8 %102, i8* %18, align 1, !dbg !2771
  %103 = load i8*, i8** %15, align 8, !dbg !2772
  %104 = getelementptr inbounds i8, i8* %103, i32 1, !dbg !2772
  store i8* %104, i8** %15, align 8, !dbg !2772
  %105 = load i8, i8* %18, align 1, !dbg !2773
  %106 = zext i8 %105 to i32, !dbg !2773
  %107 = load i8*, i8** %15, align 8, !dbg !2774
  %108 = sext i32 %106 to i64, !dbg !2774
  %109 = getelementptr inbounds i8, i8* %107, i64 %108, !dbg !2774
  store i8* %109, i8** %15, align 8, !dbg !2774
  br label %113, !dbg !2775

110:                                              ; preds = %98
  %111 = load i8*, i8** %15, align 8, !dbg !2776
  %112 = getelementptr inbounds i8, i8* %111, i64 4, !dbg !2776
  store i8* %112, i8** %15, align 8, !dbg !2776
  br label %113, !dbg !2777

113:                                              ; preds = %98, %110, %100
  %114 = load i8*, i8** %15, align 8, !dbg !2778
  %115 = load i8*, i8** %16, align 8, !dbg !2779
  %116 = call i8* @_ZL14AdvanceDataPosPhS_(i8* %114, i8* %115), !dbg !2780
  store i8* %116, i8** %15, align 8, !dbg !2781
  %117 = load i8*, i8** %15, align 8, !dbg !2782
  %118 = icmp eq i8* %117, null, !dbg !2784
  br i1 %118, label %123, label %119, !dbg !2785

119:                                              ; preds = %113
  %120 = load i8*, i8** %15, align 8, !dbg !2786
  %121 = load i8*, i8** %17, align 8, !dbg !2787
  %122 = icmp ult i8* %120, %121, !dbg !2788
  br i1 %122, label %123, label %124, !dbg !2789

123:                                              ; preds = %119, %113
  br label %159, !dbg !2790

124:                                              ; preds = %119
  br label %125, !dbg !2791

125:                                              ; preds = %124
  %126 = load i32, i32* %10, align 4, !dbg !2792
  %127 = add nsw i32 %126, 1, !dbg !2792
  store i32 %127, i32* %10, align 4, !dbg !2792
  br label %94, !dbg !2793, !llvm.loop !2794

128:                                              ; preds = %94
  %129 = load i32*, i32** %7, align 8, !dbg !2796
  %130 = icmp ne i32* %129, null, !dbg !2796
  br i1 %130, label %131, label %138, !dbg !2798

131:                                              ; preds = %128
  %132 = load i32*, i32** %7, align 8, !dbg !2799
  %133 = load i32, i32* %132, align 4, !dbg !2800
  %134 = icmp eq i32 %133, 0, !dbg !2801
  br i1 %134, label %135, label %138, !dbg !2802

135:                                              ; preds = %131
  %136 = load i32, i32* %11, align 4, !dbg !2803
  %137 = load i32*, i32** %7, align 8, !dbg !2804
  store i32 %136, i32* %137, align 4, !dbg !2805
  br label %138, !dbg !2806

138:                                              ; preds = %135, %131, %128
  %139 = load i32*, i32** %8, align 8, !dbg !2807
  %140 = icmp ne i32* %139, null, !dbg !2807
  br i1 %140, label %141, label %148, !dbg !2809

141:                                              ; preds = %138
  %142 = load i32*, i32** %8, align 8, !dbg !2810
  %143 = load i32, i32* %142, align 4, !dbg !2811
  %144 = icmp eq i32 %143, 0, !dbg !2812
  br i1 %144, label %145, label %148, !dbg !2813

145:                                              ; preds = %141
  %146 = load i32, i32* %12, align 4, !dbg !2814
  %147 = load i32*, i32** %8, align 8, !dbg !2815
  store i32 %146, i32* %147, align 4, !dbg !2816
  br label %148, !dbg !2817

148:                                              ; preds = %145, %141, %138
  %149 = load i32*, i32** %9, align 8, !dbg !2818
  %150 = icmp ne i32* %149, null, !dbg !2818
  br i1 %150, label %151, label %158, !dbg !2820

151:                                              ; preds = %148
  %152 = load i32*, i32** %9, align 8, !dbg !2821
  %153 = load i32, i32* %152, align 4, !dbg !2822
  %154 = icmp eq i32 %153, 0, !dbg !2823
  br i1 %154, label %155, label %158, !dbg !2824

155:                                              ; preds = %151
  %156 = load i32, i32* %13, align 4, !dbg !2825
  %157 = load i32*, i32** %9, align 8, !dbg !2826
  store i32 %156, i32* %157, align 4, !dbg !2827
  br label %158, !dbg !2828

158:                                              ; preds = %155, %151, %148
  store i32 1, i32* %5, align 4, !dbg !2829
  br label %160, !dbg !2829

159:                                              ; preds = %123
  call void @llvm.dbg.label(metadata !2830), !dbg !2831
  store i32 0, i32* %5, align 4, !dbg !2832
  br label %160, !dbg !2832

160:                                              ; preds = %159, %158, %81, %67, %53, %40, %24
  %161 = load i32, i32* %5, align 4, !dbg !2833
  ret i32 %161, !dbg !2833
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_ptr(i8* %0) #6 !dbg !2834 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !2837, metadata !DIExpression()), !dbg !2838
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !2839, metadata !DIExpression()), !dbg !2840
  %5 = load i8*, i8** %3, align 8, !dbg !2841
  %6 = call i32 @_ZL17binn_get_ptr_typePv(i8* %5), !dbg !2842
  switch i32 %6, label %28 [
    i32 1, label %7
    i32 2, label %26
  ], !dbg !2843

7:                                                ; preds = %1
  %8 = load i8*, i8** %3, align 8, !dbg !2844
  %9 = bitcast i8* %8 to %struct.binn_struct*, !dbg !2846
  store %struct.binn_struct* %9, %struct.binn_struct** %4, align 8, !dbg !2847
  %10 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !2848
  %11 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 2, !dbg !2850
  %12 = load i32, i32* %11, align 8, !dbg !2850
  %13 = icmp ne i32 %12, 0, !dbg !2848
  br i1 %13, label %14, label %22, !dbg !2851

14:                                               ; preds = %7
  %15 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !2852
  %16 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %15, i32 0, i32 3, !dbg !2853
  %17 = load i32, i32* %16, align 4, !dbg !2853
  %18 = icmp ne i32 %17, 0, !dbg !2852
  br i1 %18, label %19, label %22, !dbg !2854

19:                                               ; preds = %14
  %20 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !2855
  %21 = call i32 @_ZL16binn_save_headerP11binn_struct(%struct.binn_struct* %20), !dbg !2857
  br label %22, !dbg !2858

22:                                               ; preds = %19, %14, %7
  %23 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !2859
  %24 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %23, i32 0, i32 9, !dbg !2860
  %25 = load i8*, i8** %24, align 8, !dbg !2860
  store i8* %25, i8** %2, align 8, !dbg !2861
  br label %29, !dbg !2861

26:                                               ; preds = %1
  %27 = load i8*, i8** %3, align 8, !dbg !2862
  store i8* %27, i8** %2, align 8, !dbg !2863
  br label %29, !dbg !2863

28:                                               ; preds = %1
  store i8* null, i8** %2, align 8, !dbg !2864
  br label %29, !dbg !2864

29:                                               ; preds = %28, %26, %22
  %30 = load i8*, i8** %2, align 8, !dbg !2865
  ret i8* %30, !dbg !2865
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %0, i32* %1, i32* %2, i32* %3, i32* %4) #0 !dbg !2866 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2869, metadata !DIExpression()), !dbg !2870
  store i32* %1, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !2871, metadata !DIExpression()), !dbg !2872
  store i32* %2, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !2873, metadata !DIExpression()), !dbg !2874
  store i32* %3, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !2875, metadata !DIExpression()), !dbg !2876
  store i32* %4, i32** %11, align 8
  call void @llvm.dbg.declare(metadata i32** %11, metadata !2877, metadata !DIExpression()), !dbg !2878
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2879, metadata !DIExpression()), !dbg !2880
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2881, metadata !DIExpression()), !dbg !2882
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2883, metadata !DIExpression()), !dbg !2884
  store i8* null, i8** %14, align 8, !dbg !2884
  call void @llvm.dbg.declare(metadata i32* %15, metadata !2885, metadata !DIExpression()), !dbg !2886
  call void @llvm.dbg.declare(metadata i32* %16, metadata !2887, metadata !DIExpression()), !dbg !2888
  call void @llvm.dbg.declare(metadata i32* %17, metadata !2889, metadata !DIExpression()), !dbg !2890
  call void @llvm.dbg.declare(metadata i32* %18, metadata !2891, metadata !DIExpression()), !dbg !2892
  %19 = load i8*, i8** %7, align 8, !dbg !2893
  %20 = icmp eq i8* %19, null, !dbg !2895
  br i1 %20, label %21, label %22, !dbg !2896

21:                                               ; preds = %5
  store i32 0, i32* %6, align 4, !dbg !2897
  br label %178, !dbg !2897

22:                                               ; preds = %5
  %23 = load i8*, i8** %7, align 8, !dbg !2898
  store i8* %23, i8** %13, align 8, !dbg !2899
  %24 = load i32*, i32** %10, align 8, !dbg !2900
  %25 = icmp ne i32* %24, null, !dbg !2900
  br i1 %25, label %26, label %37, !dbg !2902

26:                                               ; preds = %22
  %27 = load i32*, i32** %10, align 8, !dbg !2903
  %28 = load i32, i32* %27, align 4, !dbg !2904
  %29 = icmp sgt i32 %28, 0, !dbg !2905
  br i1 %29, label %30, label %37, !dbg !2906

30:                                               ; preds = %26
  %31 = load i8*, i8** %13, align 8, !dbg !2907
  %32 = load i32*, i32** %10, align 8, !dbg !2909
  %33 = load i32, i32* %32, align 4, !dbg !2910
  %34 = sext i32 %33 to i64, !dbg !2911
  %35 = getelementptr inbounds i8, i8* %31, i64 %34, !dbg !2911
  %36 = getelementptr inbounds i8, i8* %35, i64 -1, !dbg !2912
  store i8* %36, i8** %14, align 8, !dbg !2913
  br label %37, !dbg !2914

37:                                               ; preds = %30, %26, %22
  %38 = load i8*, i8** %13, align 8, !dbg !2915
  %39 = load i8, i8* %38, align 1, !dbg !2916
  store i8 %39, i8* %12, align 1, !dbg !2917
  %40 = load i8*, i8** %13, align 8, !dbg !2918
  %41 = getelementptr inbounds i8, i8* %40, i32 1, !dbg !2918
  store i8* %41, i8** %13, align 8, !dbg !2918
  %42 = load i8, i8* %12, align 1, !dbg !2919
  %43 = zext i8 %42 to i32, !dbg !2919
  %44 = and i32 %43, 224, !dbg !2921
  %45 = icmp ne i32 %44, 224, !dbg !2922
  br i1 %45, label %46, label %47, !dbg !2923

46:                                               ; preds = %37
  store i32 0, i32* %6, align 4, !dbg !2924
  br label %178, !dbg !2924

47:                                               ; preds = %37
  %48 = load i8, i8* %12, align 1, !dbg !2925
  %49 = zext i8 %48 to i32, !dbg !2925
  %50 = and i32 %49, 16, !dbg !2927
  %51 = icmp ne i32 %50, 0, !dbg !2925
  br i1 %51, label %52, label %53, !dbg !2928

52:                                               ; preds = %47
  store i32 0, i32* %6, align 4, !dbg !2929
  br label %178, !dbg !2929

53:                                               ; preds = %47
  %54 = load i8, i8* %12, align 1, !dbg !2930
  %55 = zext i8 %54 to i32, !dbg !2930
  store i32 %55, i32* %16, align 4, !dbg !2931
  %56 = load i32, i32* %16, align 4, !dbg !2932
  switch i32 %56, label %58 [
    i32 224, label %57
    i32 225, label %57
    i32 226, label %57
  ], !dbg !2933

57:                                               ; preds = %53, %53, %53
  br label %59, !dbg !2934

58:                                               ; preds = %53
  store i32 0, i32* %6, align 4, !dbg !2936
  br label %178, !dbg !2936

59:                                               ; preds = %57
  %60 = load i8*, i8** %14, align 8, !dbg !2937
  %61 = icmp ne i8* %60, null, !dbg !2937
  br i1 %61, label %62, label %67, !dbg !2939

62:                                               ; preds = %59
  %63 = load i8*, i8** %13, align 8, !dbg !2940
  %64 = load i8*, i8** %14, align 8, !dbg !2941
  %65 = icmp ugt i8* %63, %64, !dbg !2942
  br i1 %65, label %66, label %67, !dbg !2943

66:                                               ; preds = %62
  store i32 0, i32* %6, align 4, !dbg !2944
  br label %178, !dbg !2944

67:                                               ; preds = %62, %59
  %68 = load i8*, i8** %13, align 8, !dbg !2945
  %69 = load i8, i8* %68, align 1, !dbg !2946
  %70 = zext i8 %69 to i32, !dbg !2946
  store i32 %70, i32* %15, align 4, !dbg !2947
  %71 = load i32, i32* %15, align 4, !dbg !2948
  %72 = and i32 %71, 128, !dbg !2950
  %73 = icmp ne i32 %72, 0, !dbg !2948
  br i1 %73, label %74, label %94, !dbg !2951

74:                                               ; preds = %67
  %75 = load i8*, i8** %14, align 8, !dbg !2952
  %76 = icmp ne i8* %75, null, !dbg !2952
  br i1 %76, label %77, label %84, !dbg !2955

77:                                               ; preds = %74
  %78 = load i8*, i8** %13, align 8, !dbg !2956
  %79 = getelementptr inbounds i8, i8* %78, i64 4, !dbg !2957
  %80 = getelementptr inbounds i8, i8* %79, i64 -1, !dbg !2958
  %81 = load i8*, i8** %14, align 8, !dbg !2959
  %82 = icmp ugt i8* %80, %81, !dbg !2960
  br i1 %82, label %83, label %84, !dbg !2961

83:                                               ; preds = %77
  store i32 0, i32* %6, align 4, !dbg !2962
  br label %178, !dbg !2962

84:                                               ; preds = %77, %74
  %85 = load i8*, i8** %13, align 8, !dbg !2963
  %86 = bitcast i8* %85 to i32*, !dbg !2964
  %87 = load i32, i32* %86, align 4, !dbg !2964
  store i32 %87, i32* %15, align 4, !dbg !2965
  %88 = load i8*, i8** %13, align 8, !dbg !2966
  %89 = getelementptr inbounds i8, i8* %88, i64 4, !dbg !2966
  store i8* %89, i8** %13, align 8, !dbg !2966
  %90 = load i32, i32* %15, align 4, !dbg !2967
  %91 = call i32 @_ZL6tobe32j(i32 %90), !dbg !2968
  store i32 %91, i32* %15, align 4, !dbg !2969
  %92 = load i32, i32* %15, align 4, !dbg !2970
  %93 = and i32 %92, 2147483647, !dbg !2970
  store i32 %93, i32* %15, align 4, !dbg !2970
  br label %97, !dbg !2971

94:                                               ; preds = %67
  %95 = load i8*, i8** %13, align 8, !dbg !2972
  %96 = getelementptr inbounds i8, i8* %95, i32 1, !dbg !2972
  store i8* %96, i8** %13, align 8, !dbg !2972
  br label %97

97:                                               ; preds = %94, %84
  %98 = load i32, i32* %15, align 4, !dbg !2974
  store i32 %98, i32* %17, align 4, !dbg !2975
  %99 = load i8*, i8** %14, align 8, !dbg !2976
  %100 = icmp ne i8* %99, null, !dbg !2976
  br i1 %100, label %101, label %106, !dbg !2978

101:                                              ; preds = %97
  %102 = load i8*, i8** %13, align 8, !dbg !2979
  %103 = load i8*, i8** %14, align 8, !dbg !2980
  %104 = icmp ugt i8* %102, %103, !dbg !2981
  br i1 %104, label %105, label %106, !dbg !2982

105:                                              ; preds = %101
  store i32 0, i32* %6, align 4, !dbg !2983
  br label %178, !dbg !2983

106:                                              ; preds = %101, %97
  %107 = load i8*, i8** %13, align 8, !dbg !2984
  %108 = load i8, i8* %107, align 1, !dbg !2985
  %109 = zext i8 %108 to i32, !dbg !2985
  store i32 %109, i32* %15, align 4, !dbg !2986
  %110 = load i32, i32* %15, align 4, !dbg !2987
  %111 = and i32 %110, 128, !dbg !2989
  %112 = icmp ne i32 %111, 0, !dbg !2987
  br i1 %112, label %113, label %133, !dbg !2990

113:                                              ; preds = %106
  %114 = load i8*, i8** %14, align 8, !dbg !2991
  %115 = icmp ne i8* %114, null, !dbg !2991
  br i1 %115, label %116, label %123, !dbg !2994

116:                                              ; preds = %113
  %117 = load i8*, i8** %13, align 8, !dbg !2995
  %118 = getelementptr inbounds i8, i8* %117, i64 4, !dbg !2996
  %119 = getelementptr inbounds i8, i8* %118, i64 -1, !dbg !2997
  %120 = load i8*, i8** %14, align 8, !dbg !2998
  %121 = icmp ugt i8* %119, %120, !dbg !2999
  br i1 %121, label %122, label %123, !dbg !3000

122:                                              ; preds = %116
  store i32 0, i32* %6, align 4, !dbg !3001
  br label %178, !dbg !3001

123:                                              ; preds = %116, %113
  %124 = load i8*, i8** %13, align 8, !dbg !3002
  %125 = bitcast i8* %124 to i32*, !dbg !3003
  %126 = load i32, i32* %125, align 4, !dbg !3003
  store i32 %126, i32* %15, align 4, !dbg !3004
  %127 = load i8*, i8** %13, align 8, !dbg !3005
  %128 = getelementptr inbounds i8, i8* %127, i64 4, !dbg !3005
  store i8* %128, i8** %13, align 8, !dbg !3005
  %129 = load i32, i32* %15, align 4, !dbg !3006
  %130 = call i32 @_ZL6tobe32j(i32 %129), !dbg !3007
  store i32 %130, i32* %15, align 4, !dbg !3008
  %131 = load i32, i32* %15, align 4, !dbg !3009
  %132 = and i32 %131, 2147483647, !dbg !3009
  store i32 %132, i32* %15, align 4, !dbg !3009
  br label %136, !dbg !3010

133:                                              ; preds = %106
  %134 = load i8*, i8** %13, align 8, !dbg !3011
  %135 = getelementptr inbounds i8, i8* %134, i32 1, !dbg !3011
  store i8* %135, i8** %13, align 8, !dbg !3011
  br label %136

136:                                              ; preds = %133, %123
  %137 = load i32, i32* %15, align 4, !dbg !3013
  store i32 %137, i32* %18, align 4, !dbg !3014
  %138 = load i32, i32* %17, align 4, !dbg !3015
  %139 = icmp slt i32 %138, 3, !dbg !3017
  br i1 %139, label %143, label %140, !dbg !3018

140:                                              ; preds = %136
  %141 = load i32, i32* %18, align 4, !dbg !3019
  %142 = icmp slt i32 %141, 0, !dbg !3020
  br i1 %142, label %143, label %144, !dbg !3021

143:                                              ; preds = %140, %136
  store i32 0, i32* %6, align 4, !dbg !3022
  br label %178, !dbg !3022

144:                                              ; preds = %140
  %145 = load i32*, i32** %8, align 8, !dbg !3023
  %146 = icmp ne i32* %145, null, !dbg !3023
  br i1 %146, label %147, label %150, !dbg !3025

147:                                              ; preds = %144
  %148 = load i32, i32* %16, align 4, !dbg !3026
  %149 = load i32*, i32** %8, align 8, !dbg !3027
  store i32 %148, i32* %149, align 4, !dbg !3028
  br label %150, !dbg !3029

150:                                              ; preds = %147, %144
  %151 = load i32*, i32** %9, align 8, !dbg !3030
  %152 = icmp ne i32* %151, null, !dbg !3030
  br i1 %152, label %153, label %156, !dbg !3032

153:                                              ; preds = %150
  %154 = load i32, i32* %18, align 4, !dbg !3033
  %155 = load i32*, i32** %9, align 8, !dbg !3034
  store i32 %154, i32* %155, align 4, !dbg !3035
  br label %156, !dbg !3036

156:                                              ; preds = %153, %150
  %157 = load i32*, i32** %10, align 8, !dbg !3037
  %158 = icmp ne i32* %157, null, !dbg !3037
  br i1 %158, label %159, label %166, !dbg !3039

159:                                              ; preds = %156
  %160 = load i32*, i32** %10, align 8, !dbg !3040
  %161 = load i32, i32* %160, align 4, !dbg !3041
  %162 = icmp eq i32 %161, 0, !dbg !3042
  br i1 %162, label %163, label %166, !dbg !3043

163:                                              ; preds = %159
  %164 = load i32, i32* %17, align 4, !dbg !3044
  %165 = load i32*, i32** %10, align 8, !dbg !3045
  store i32 %164, i32* %165, align 4, !dbg !3046
  br label %166, !dbg !3047

166:                                              ; preds = %163, %159, %156
  %167 = load i32*, i32** %11, align 8, !dbg !3048
  %168 = icmp ne i32* %167, null, !dbg !3048
  br i1 %168, label %169, label %177, !dbg !3050

169:                                              ; preds = %166
  %170 = load i8*, i8** %13, align 8, !dbg !3051
  %171 = load i8*, i8** %7, align 8, !dbg !3052
  %172 = ptrtoint i8* %170 to i64, !dbg !3053
  %173 = ptrtoint i8* %171 to i64, !dbg !3053
  %174 = sub i64 %172, %173, !dbg !3053
  %175 = trunc i64 %174 to i32, !dbg !3054
  %176 = load i32*, i32** %11, align 8, !dbg !3055
  store i32 %175, i32* %176, align 4, !dbg !3056
  br label %177, !dbg !3057

177:                                              ; preds = %169, %166
  store i32 1, i32* %6, align 4, !dbg !3058
  br label %178, !dbg !3058

178:                                              ; preds = %177, %143, %122, %105, %83, %66, %58, %52, %46, %21
  %179 = load i32, i32* %6, align 4, !dbg !3059
  ret i32 %179, !dbg !3059
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @_ZL14AdvanceDataPosPhS_(i8* %0, i8* %1) #0 !dbg !3060 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !3063, metadata !DIExpression()), !dbg !3064
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !3065, metadata !DIExpression()), !dbg !3066
  call void @llvm.dbg.declare(metadata i8* %6, metadata !3067, metadata !DIExpression()), !dbg !3068
  call void @llvm.dbg.declare(metadata i32* %7, metadata !3069, metadata !DIExpression()), !dbg !3070
  call void @llvm.dbg.declare(metadata i32* %8, metadata !3071, metadata !DIExpression()), !dbg !3072
  %9 = load i8*, i8** %4, align 8, !dbg !3073
  %10 = load i8*, i8** %5, align 8, !dbg !3075
  %11 = icmp ugt i8* %9, %10, !dbg !3076
  br i1 %11, label %12, label %13, !dbg !3077

12:                                               ; preds = %2
  store i8* null, i8** %3, align 8, !dbg !3078
  br label %142, !dbg !3078

13:                                               ; preds = %2
  %14 = load i8*, i8** %4, align 8, !dbg !3079
  %15 = load i8, i8* %14, align 1, !dbg !3080
  store i8 %15, i8* %6, align 1, !dbg !3081
  %16 = load i8*, i8** %4, align 8, !dbg !3082
  %17 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !3082
  store i8* %17, i8** %4, align 8, !dbg !3082
  %18 = load i8, i8* %6, align 1, !dbg !3083
  %19 = zext i8 %18 to i32, !dbg !3083
  %20 = and i32 %19, 224, !dbg !3084
  store i32 %20, i32* %7, align 4, !dbg !3085
  %21 = load i8, i8* %6, align 1, !dbg !3086
  %22 = zext i8 %21 to i32, !dbg !3086
  %23 = and i32 %22, 16, !dbg !3088
  %24 = icmp ne i32 %23, 0, !dbg !3086
  br i1 %24, label %25, label %28, !dbg !3089

25:                                               ; preds = %13
  %26 = load i8*, i8** %4, align 8, !dbg !3090
  %27 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !3090
  store i8* %27, i8** %4, align 8, !dbg !3090
  br label %28, !dbg !3091

28:                                               ; preds = %25, %13
  %29 = load i32, i32* %7, align 4, !dbg !3092
  switch i32 %29, label %134 [
    i32 0, label %30
    i32 32, label %31
    i32 64, label %34
    i32 96, label %37
    i32 128, label %40
    i32 192, label %43
    i32 224, label %61
    i32 160, label %95
  ], !dbg !3093

30:                                               ; preds = %28
  br label %135, !dbg !3094

31:                                               ; preds = %28
  %32 = load i8*, i8** %4, align 8, !dbg !3096
  %33 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !3096
  store i8* %33, i8** %4, align 8, !dbg !3096
  br label %135, !dbg !3097

34:                                               ; preds = %28
  %35 = load i8*, i8** %4, align 8, !dbg !3098
  %36 = getelementptr inbounds i8, i8* %35, i64 2, !dbg !3098
  store i8* %36, i8** %4, align 8, !dbg !3098
  br label %135, !dbg !3099

37:                                               ; preds = %28
  %38 = load i8*, i8** %4, align 8, !dbg !3100
  %39 = getelementptr inbounds i8, i8* %38, i64 4, !dbg !3100
  store i8* %39, i8** %4, align 8, !dbg !3100
  br label %135, !dbg !3101

40:                                               ; preds = %28
  %41 = load i8*, i8** %4, align 8, !dbg !3102
  %42 = getelementptr inbounds i8, i8* %41, i64 8, !dbg !3102
  store i8* %42, i8** %4, align 8, !dbg !3102
  br label %135, !dbg !3103

43:                                               ; preds = %28
  %44 = load i8*, i8** %4, align 8, !dbg !3104
  %45 = getelementptr inbounds i8, i8* %44, i64 4, !dbg !3106
  %46 = getelementptr inbounds i8, i8* %45, i64 -1, !dbg !3107
  %47 = load i8*, i8** %5, align 8, !dbg !3108
  %48 = icmp ugt i8* %46, %47, !dbg !3109
  br i1 %48, label %49, label %50, !dbg !3110

49:                                               ; preds = %43
  store i8* null, i8** %3, align 8, !dbg !3111
  br label %142, !dbg !3111

50:                                               ; preds = %43
  %51 = load i8*, i8** %4, align 8, !dbg !3112
  %52 = bitcast i8* %51 to i32*, !dbg !3113
  %53 = load i32, i32* %52, align 4, !dbg !3113
  store i32 %53, i32* %8, align 4, !dbg !3114
  %54 = load i32, i32* %8, align 4, !dbg !3115
  %55 = call i32 @_ZL6tobe32j(i32 %54), !dbg !3116
  store i32 %55, i32* %8, align 4, !dbg !3117
  %56 = load i32, i32* %8, align 4, !dbg !3118
  %57 = add nsw i32 4, %56, !dbg !3119
  %58 = load i8*, i8** %4, align 8, !dbg !3120
  %59 = sext i32 %57 to i64, !dbg !3120
  %60 = getelementptr inbounds i8, i8* %58, i64 %59, !dbg !3120
  store i8* %60, i8** %4, align 8, !dbg !3120
  br label %135, !dbg !3121

61:                                               ; preds = %28
  %62 = load i8*, i8** %4, align 8, !dbg !3122
  %63 = load i8*, i8** %5, align 8, !dbg !3124
  %64 = icmp ugt i8* %62, %63, !dbg !3125
  br i1 %64, label %65, label %66, !dbg !3126

65:                                               ; preds = %61
  store i8* null, i8** %3, align 8, !dbg !3127
  br label %142, !dbg !3127

66:                                               ; preds = %61
  %67 = load i8*, i8** %4, align 8, !dbg !3128
  %68 = load i8, i8* %67, align 1, !dbg !3129
  %69 = zext i8 %68 to i32, !dbg !3129
  store i32 %69, i32* %8, align 4, !dbg !3130
  %70 = load i32, i32* %8, align 4, !dbg !3131
  %71 = and i32 %70, 128, !dbg !3133
  %72 = icmp ne i32 %71, 0, !dbg !3131
  br i1 %72, label %73, label %88, !dbg !3134

73:                                               ; preds = %66
  %74 = load i8*, i8** %4, align 8, !dbg !3135
  %75 = getelementptr inbounds i8, i8* %74, i64 4, !dbg !3138
  %76 = getelementptr inbounds i8, i8* %75, i64 -1, !dbg !3139
  %77 = load i8*, i8** %5, align 8, !dbg !3140
  %78 = icmp ugt i8* %76, %77, !dbg !3141
  br i1 %78, label %79, label %80, !dbg !3142

79:                                               ; preds = %73
  store i8* null, i8** %3, align 8, !dbg !3143
  br label %142, !dbg !3143

80:                                               ; preds = %73
  %81 = load i8*, i8** %4, align 8, !dbg !3144
  %82 = bitcast i8* %81 to i32*, !dbg !3145
  %83 = load i32, i32* %82, align 4, !dbg !3145
  store i32 %83, i32* %8, align 4, !dbg !3146
  %84 = load i32, i32* %8, align 4, !dbg !3147
  %85 = call i32 @_ZL6tobe32j(i32 %84), !dbg !3148
  store i32 %85, i32* %8, align 4, !dbg !3149
  %86 = load i32, i32* %8, align 4, !dbg !3150
  %87 = and i32 %86, 2147483647, !dbg !3150
  store i32 %87, i32* %8, align 4, !dbg !3150
  br label %88, !dbg !3151

88:                                               ; preds = %80, %66
  %89 = load i32, i32* %8, align 4, !dbg !3152
  %90 = add nsw i32 %89, -1, !dbg !3152
  store i32 %90, i32* %8, align 4, !dbg !3152
  %91 = load i32, i32* %8, align 4, !dbg !3153
  %92 = load i8*, i8** %4, align 8, !dbg !3154
  %93 = sext i32 %91 to i64, !dbg !3154
  %94 = getelementptr inbounds i8, i8* %92, i64 %93, !dbg !3154
  store i8* %94, i8** %4, align 8, !dbg !3154
  br label %135, !dbg !3155

95:                                               ; preds = %28
  %96 = load i8*, i8** %4, align 8, !dbg !3156
  %97 = load i8*, i8** %5, align 8, !dbg !3158
  %98 = icmp ugt i8* %96, %97, !dbg !3159
  br i1 %98, label %99, label %100, !dbg !3160

99:                                               ; preds = %95
  store i8* null, i8** %3, align 8, !dbg !3161
  br label %142, !dbg !3161

100:                                              ; preds = %95
  %101 = load i8*, i8** %4, align 8, !dbg !3162
  %102 = load i8, i8* %101, align 1, !dbg !3163
  %103 = zext i8 %102 to i32, !dbg !3163
  store i32 %103, i32* %8, align 4, !dbg !3164
  %104 = load i32, i32* %8, align 4, !dbg !3165
  %105 = and i32 %104, 128, !dbg !3167
  %106 = icmp ne i32 %105, 0, !dbg !3165
  br i1 %106, label %107, label %124, !dbg !3168

107:                                              ; preds = %100
  %108 = load i8*, i8** %4, align 8, !dbg !3169
  %109 = getelementptr inbounds i8, i8* %108, i64 4, !dbg !3172
  %110 = getelementptr inbounds i8, i8* %109, i64 -1, !dbg !3173
  %111 = load i8*, i8** %5, align 8, !dbg !3174
  %112 = icmp ugt i8* %110, %111, !dbg !3175
  br i1 %112, label %113, label %114, !dbg !3176

113:                                              ; preds = %107
  store i8* null, i8** %3, align 8, !dbg !3177
  br label %142, !dbg !3177

114:                                              ; preds = %107
  %115 = load i8*, i8** %4, align 8, !dbg !3178
  %116 = bitcast i8* %115 to i32*, !dbg !3179
  %117 = load i32, i32* %116, align 4, !dbg !3179
  store i32 %117, i32* %8, align 4, !dbg !3180
  %118 = load i8*, i8** %4, align 8, !dbg !3181
  %119 = getelementptr inbounds i8, i8* %118, i64 4, !dbg !3181
  store i8* %119, i8** %4, align 8, !dbg !3181
  %120 = load i32, i32* %8, align 4, !dbg !3182
  %121 = call i32 @_ZL6tobe32j(i32 %120), !dbg !3183
  store i32 %121, i32* %8, align 4, !dbg !3184
  %122 = load i32, i32* %8, align 4, !dbg !3185
  %123 = and i32 %122, 2147483647, !dbg !3185
  store i32 %123, i32* %8, align 4, !dbg !3185
  br label %127, !dbg !3186

124:                                              ; preds = %100
  %125 = load i8*, i8** %4, align 8, !dbg !3187
  %126 = getelementptr inbounds i8, i8* %125, i32 1, !dbg !3187
  store i8* %126, i8** %4, align 8, !dbg !3187
  br label %127

127:                                              ; preds = %124, %114
  %128 = load i32, i32* %8, align 4, !dbg !3189
  %129 = load i8*, i8** %4, align 8, !dbg !3190
  %130 = sext i32 %128 to i64, !dbg !3190
  %131 = getelementptr inbounds i8, i8* %129, i64 %130, !dbg !3190
  store i8* %131, i8** %4, align 8, !dbg !3190
  %132 = load i8*, i8** %4, align 8, !dbg !3191
  %133 = getelementptr inbounds i8, i8* %132, i32 1, !dbg !3191
  store i8* %133, i8** %4, align 8, !dbg !3191
  br label %135, !dbg !3192

134:                                              ; preds = %28
  store i8* null, i8** %3, align 8, !dbg !3193
  br label %142, !dbg !3193

135:                                              ; preds = %127, %88, %50, %40, %37, %34, %31, %30
  %136 = load i8*, i8** %4, align 8, !dbg !3194
  %137 = load i8*, i8** %5, align 8, !dbg !3196
  %138 = icmp ugt i8* %136, %137, !dbg !3197
  br i1 %138, label %139, label %140, !dbg !3198

139:                                              ; preds = %135
  store i8* null, i8** %3, align 8, !dbg !3199
  br label %142, !dbg !3199

140:                                              ; preds = %135
  %141 = load i8*, i8** %4, align 8, !dbg !3200
  store i8* %141, i8** %3, align 8, !dbg !3201
  br label %142, !dbg !3201

142:                                              ; preds = %140, %139, %134, %113, %99, %79, %65, %49, %12
  %143 = load i8*, i8** %3, align 8, !dbg !3202
  ret i8* %143, !dbg !3202
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL6tobe32j(i32 %0) #0 !dbg !3203 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !3206, metadata !DIExpression()), !dbg !3207
  call void @llvm.dbg.declare(metadata i32* %3, metadata !3208, metadata !DIExpression()), !dbg !3209
  call void @llvm.dbg.declare(metadata i8** %4, metadata !3210, metadata !DIExpression()), !dbg !3211
  %6 = bitcast i32* %2 to i8*, !dbg !3212
  store i8* %6, i8** %4, align 8, !dbg !3211
  call void @llvm.dbg.declare(metadata i8** %5, metadata !3213, metadata !DIExpression()), !dbg !3214
  %7 = bitcast i32* %3 to i8*, !dbg !3215
  store i8* %7, i8** %5, align 8, !dbg !3214
  %8 = load i8*, i8** %4, align 8, !dbg !3216
  %9 = getelementptr inbounds i8, i8* %8, i64 3, !dbg !3216
  %10 = load i8, i8* %9, align 1, !dbg !3216
  %11 = load i8*, i8** %5, align 8, !dbg !3217
  %12 = getelementptr inbounds i8, i8* %11, i64 0, !dbg !3217
  store i8 %10, i8* %12, align 1, !dbg !3218
  %13 = load i8*, i8** %4, align 8, !dbg !3219
  %14 = getelementptr inbounds i8, i8* %13, i64 2, !dbg !3219
  %15 = load i8, i8* %14, align 1, !dbg !3219
  %16 = load i8*, i8** %5, align 8, !dbg !3220
  %17 = getelementptr inbounds i8, i8* %16, i64 1, !dbg !3220
  store i8 %15, i8* %17, align 1, !dbg !3221
  %18 = load i8*, i8** %4, align 8, !dbg !3222
  %19 = getelementptr inbounds i8, i8* %18, i64 1, !dbg !3222
  %20 = load i8, i8* %19, align 1, !dbg !3222
  %21 = load i8*, i8** %5, align 8, !dbg !3223
  %22 = getelementptr inbounds i8, i8* %21, i64 2, !dbg !3223
  store i8 %20, i8* %22, align 1, !dbg !3224
  %23 = load i8*, i8** %4, align 8, !dbg !3225
  %24 = getelementptr inbounds i8, i8* %23, i64 0, !dbg !3225
  %25 = load i8, i8* %24, align 1, !dbg !3225
  %26 = load i8*, i8** %5, align 8, !dbg !3226
  %27 = getelementptr inbounds i8, i8* %26, i64 3, !dbg !3226
  store i8 %25, i8* %27, align 1, !dbg !3227
  %28 = load i32, i32* %3, align 4, !dbg !3228
  ret i32 %28, !dbg !3229
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL17binn_get_ptr_typePv(i8* %0) #0 !dbg !3230 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3231, metadata !DIExpression()), !dbg !3232
  %4 = load i8*, i8** %3, align 8, !dbg !3233
  %5 = icmp eq i8* %4, null, !dbg !3235
  br i1 %5, label %6, label %7, !dbg !3236

6:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !3237
  br label %13, !dbg !3237

7:                                                ; preds = %1
  %8 = load i8*, i8** %3, align 8, !dbg !3238
  %9 = bitcast i8* %8 to i32*, !dbg !3239
  %10 = load i32, i32* %9, align 4, !dbg !3240
  switch i32 %10, label %12 [
    i32 522367263, label %11
  ], !dbg !3241

11:                                               ; preds = %7
  store i32 1, i32* %2, align 4, !dbg !3242
  br label %13, !dbg !3242

12:                                               ; preds = %7
  store i32 2, i32* %2, align 4, !dbg !3244
  br label %13, !dbg !3244

13:                                               ; preds = %12, %11, %6
  %14 = load i32, i32* %2, align 4, !dbg !3245
  ret i32 %14, !dbg !3245
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL16binn_save_headerP11binn_struct(%struct.binn_struct* %0) #6 !dbg !3246 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %3, metadata !3247, metadata !DIExpression()), !dbg !3248
  call void @llvm.dbg.declare(metadata i8* %4, metadata !3249, metadata !DIExpression()), !dbg !3250
  call void @llvm.dbg.declare(metadata i8** %5, metadata !3251, metadata !DIExpression()), !dbg !3252
  call void @llvm.dbg.declare(metadata i32* %6, metadata !3253, metadata !DIExpression()), !dbg !3254
  call void @llvm.dbg.declare(metadata i32* %7, metadata !3255, metadata !DIExpression()), !dbg !3256
  %8 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3257
  %9 = icmp eq %struct.binn_struct* %8, null, !dbg !3259
  br i1 %9, label %10, label %11, !dbg !3260

10:                                               ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !3261
  br label %84, !dbg !3261

11:                                               ; preds = %1
  %12 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3262
  %13 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 4, !dbg !3263
  %14 = load i8*, i8** %13, align 8, !dbg !3263
  %15 = getelementptr inbounds i8, i8* %14, i64 9, !dbg !3264
  store i8* %15, i8** %5, align 8, !dbg !3265
  %16 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3266
  %17 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %16, i32 0, i32 7, !dbg !3267
  %18 = load i32, i32* %17, align 8, !dbg !3267
  %19 = sub nsw i32 %18, 9, !dbg !3268
  %20 = add nsw i32 %19, 3, !dbg !3269
  store i32 %20, i32* %7, align 4, !dbg !3270
  %21 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3271
  %22 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %21, i32 0, i32 11, !dbg !3273
  %23 = load i32, i32* %22, align 4, !dbg !3273
  %24 = icmp sgt i32 %23, 127, !dbg !3274
  br i1 %24, label %25, label %39, !dbg !3275

25:                                               ; preds = %11
  %26 = load i8*, i8** %5, align 8, !dbg !3276
  %27 = getelementptr inbounds i8, i8* %26, i64 -4, !dbg !3276
  store i8* %27, i8** %5, align 8, !dbg !3276
  %28 = load i32, i32* %7, align 4, !dbg !3278
  %29 = add nsw i32 %28, 3, !dbg !3278
  store i32 %29, i32* %7, align 4, !dbg !3278
  %30 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3279
  %31 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %30, i32 0, i32 11, !dbg !3280
  %32 = load i32, i32* %31, align 4, !dbg !3280
  %33 = or i32 %32, -2147483648, !dbg !3281
  store i32 %33, i32* %6, align 4, !dbg !3282
  %34 = load i32, i32* %6, align 4, !dbg !3283
  %35 = call i32 @_ZL6tobe32j(i32 %34), !dbg !3284
  store i32 %35, i32* %6, align 4, !dbg !3285
  %36 = load i32, i32* %6, align 4, !dbg !3286
  %37 = load i8*, i8** %5, align 8, !dbg !3287
  %38 = bitcast i8* %37 to i32*, !dbg !3288
  store i32 %36, i32* %38, align 4, !dbg !3289
  br label %47, !dbg !3290

39:                                               ; preds = %11
  %40 = load i8*, i8** %5, align 8, !dbg !3291
  %41 = getelementptr inbounds i8, i8* %40, i32 -1, !dbg !3291
  store i8* %41, i8** %5, align 8, !dbg !3291
  %42 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3293
  %43 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %42, i32 0, i32 11, !dbg !3294
  %44 = load i32, i32* %43, align 4, !dbg !3294
  %45 = trunc i32 %44 to i8, !dbg !3293
  %46 = load i8*, i8** %5, align 8, !dbg !3295
  store i8 %45, i8* %46, align 1, !dbg !3296
  br label %47

47:                                               ; preds = %39, %25
  %48 = load i32, i32* %7, align 4, !dbg !3297
  %49 = icmp sgt i32 %48, 127, !dbg !3299
  br i1 %49, label %50, label %62, !dbg !3300

50:                                               ; preds = %47
  %51 = load i8*, i8** %5, align 8, !dbg !3301
  %52 = getelementptr inbounds i8, i8* %51, i64 -4, !dbg !3301
  store i8* %52, i8** %5, align 8, !dbg !3301
  %53 = load i32, i32* %7, align 4, !dbg !3303
  %54 = add nsw i32 %53, 3, !dbg !3303
  store i32 %54, i32* %7, align 4, !dbg !3303
  %55 = load i32, i32* %7, align 4, !dbg !3304
  %56 = or i32 %55, -2147483648, !dbg !3305
  store i32 %56, i32* %6, align 4, !dbg !3306
  %57 = load i32, i32* %6, align 4, !dbg !3307
  %58 = call i32 @_ZL6tobe32j(i32 %57), !dbg !3308
  store i32 %58, i32* %6, align 4, !dbg !3309
  %59 = load i32, i32* %6, align 4, !dbg !3310
  %60 = load i8*, i8** %5, align 8, !dbg !3311
  %61 = bitcast i8* %60 to i32*, !dbg !3312
  store i32 %59, i32* %61, align 4, !dbg !3313
  br label %68, !dbg !3314

62:                                               ; preds = %47
  %63 = load i8*, i8** %5, align 8, !dbg !3315
  %64 = getelementptr inbounds i8, i8* %63, i32 -1, !dbg !3315
  store i8* %64, i8** %5, align 8, !dbg !3315
  %65 = load i32, i32* %7, align 4, !dbg !3317
  %66 = trunc i32 %65 to i8, !dbg !3317
  %67 = load i8*, i8** %5, align 8, !dbg !3318
  store i8 %66, i8* %67, align 1, !dbg !3319
  br label %68

68:                                               ; preds = %62, %50
  %69 = load i8*, i8** %5, align 8, !dbg !3320
  %70 = getelementptr inbounds i8, i8* %69, i32 -1, !dbg !3320
  store i8* %70, i8** %5, align 8, !dbg !3320
  %71 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3321
  %72 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %71, i32 0, i32 8, !dbg !3322
  %73 = load i32, i32* %72, align 4, !dbg !3322
  %74 = trunc i32 %73 to i8, !dbg !3321
  %75 = load i8*, i8** %5, align 8, !dbg !3323
  store i8 %74, i8* %75, align 1, !dbg !3324
  %76 = load i8*, i8** %5, align 8, !dbg !3325
  %77 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3326
  %78 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %77, i32 0, i32 9, !dbg !3327
  store i8* %76, i8** %78, align 8, !dbg !3328
  %79 = load i32, i32* %7, align 4, !dbg !3329
  %80 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3330
  %81 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %80, i32 0, i32 10, !dbg !3331
  store i32 %79, i32* %81, align 8, !dbg !3332
  %82 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3333
  %83 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %82, i32 0, i32 3, !dbg !3334
  store i32 0, i32* %83, align 4, !dbg !3335
  store i32 1, i32* %2, align 4, !dbg !3336
  br label %84, !dbg !3336

84:                                               ; preds = %68, %10
  %85 = load i32, i32* %2, align 4, !dbg !3337
  ret i32 %85, !dbg !3337
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_open(i8* %0) #6 !dbg !3338 {
  %2 = alloca %struct.binn_struct*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3341, metadata !DIExpression()), !dbg !3342
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !3343, metadata !DIExpression()), !dbg !3344
  %5 = call i8* @_ZL11binn_malloci(i32 80), !dbg !3345
  %6 = bitcast i8* %5 to %struct.binn_struct*, !dbg !3346
  store %struct.binn_struct* %6, %struct.binn_struct** %4, align 8, !dbg !3347
  %7 = load i8*, i8** %3, align 8, !dbg !3348
  %8 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3350
  %9 = call i32 @binn_load(i8* %7, %struct.binn_struct* %8), !dbg !3351
  %10 = icmp eq i32 %9, 0, !dbg !3352
  br i1 %10, label %11, label %15, !dbg !3353

11:                                               ; preds = %1
  %12 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !3354
  %13 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3356
  %14 = bitcast %struct.binn_struct* %13 to i8*, !dbg !3356
  call void %12(i8* %14), !dbg !3354
  store %struct.binn_struct* null, %struct.binn_struct** %2, align 8, !dbg !3357
  br label %19, !dbg !3357

15:                                               ; preds = %1
  %16 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3358
  %17 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %16, i32 0, i32 1, !dbg !3359
  store i32 1, i32* %17, align 4, !dbg !3360
  %18 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3361
  store %struct.binn_struct* %18, %struct.binn_struct** %2, align 8, !dbg !3362
  br label %19, !dbg !3362

19:                                               ; preds = %15, %11
  %20 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3363
  ret %struct.binn_struct* %20, !dbg !3363
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @binn_is_struct(i8* %0) #0 !dbg !3364 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3367, metadata !DIExpression()), !dbg !3368
  %4 = load i8*, i8** %3, align 8, !dbg !3369
  %5 = icmp eq i8* %4, null, !dbg !3371
  br i1 %5, label %6, label %7, !dbg !3372

6:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !3373
  br label %14, !dbg !3373

7:                                                ; preds = %1
  %8 = load i8*, i8** %3, align 8, !dbg !3374
  %9 = bitcast i8* %8 to i32*, !dbg !3376
  %10 = load i32, i32* %9, align 4, !dbg !3377
  %11 = icmp eq i32 %10, 522367263, !dbg !3378
  br i1 %11, label %12, label %13, !dbg !3379

12:                                               ; preds = %7
  store i32 1, i32* %2, align 4, !dbg !3380
  br label %14, !dbg !3380

13:                                               ; preds = %7
  store i32 0, i32* %2, align 4, !dbg !3382
  br label %14, !dbg !3382

14:                                               ; preds = %13, %12, %6
  %15 = load i32, i32* %2, align 4, !dbg !3384
  ret i32 %15, !dbg !3384
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @binn_free(%struct.binn_struct* %0) #6 !dbg !3385 {
  %2 = alloca %struct.binn_struct*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %2, metadata !3388, metadata !DIExpression()), !dbg !3389
  %3 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3390
  %4 = icmp eq %struct.binn_struct* %3, null, !dbg !3392
  br i1 %4, label %5, label %6, !dbg !3393

5:                                                ; preds = %1
  br label %47, !dbg !3394

6:                                                ; preds = %1
  %7 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3395
  %8 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %7, i32 0, i32 2, !dbg !3397
  %9 = load i32, i32* %8, align 8, !dbg !3397
  %10 = icmp ne i32 %9, 0, !dbg !3398
  br i1 %10, label %11, label %21, !dbg !3399

11:                                               ; preds = %6
  %12 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3400
  %13 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 5, !dbg !3401
  %14 = load i32, i32* %13, align 8, !dbg !3401
  %15 = icmp eq i32 %14, 0, !dbg !3402
  br i1 %15, label %16, label %21, !dbg !3403

16:                                               ; preds = %11
  %17 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !3404
  %18 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3406
  %19 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %18, i32 0, i32 4, !dbg !3407
  %20 = load i8*, i8** %19, align 8, !dbg !3407
  call void %17(i8* %20), !dbg !3404
  br label %21, !dbg !3408

21:                                               ; preds = %16, %11, %6
  %22 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3409
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %22, i32 0, i32 12, !dbg !3411
  %24 = load void (i8*)*, void (i8*)** %23, align 8, !dbg !3411
  %25 = icmp ne void (i8*)* %24, null, !dbg !3409
  br i1 %25, label %26, label %33, !dbg !3412

26:                                               ; preds = %21
  %27 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3413
  %28 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %27, i32 0, i32 12, !dbg !3414
  %29 = load void (i8*)*, void (i8*)** %28, align 8, !dbg !3414
  %30 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3415
  %31 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %30, i32 0, i32 9, !dbg !3416
  %32 = load i8*, i8** %31, align 8, !dbg !3416
  call void %29(i8* %32), !dbg !3413
  br label %33, !dbg !3413

33:                                               ; preds = %26, %21
  %34 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3417
  %35 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %34, i32 0, i32 1, !dbg !3419
  %36 = load i32, i32* %35, align 4, !dbg !3419
  %37 = icmp ne i32 %36, 0, !dbg !3417
  br i1 %37, label %38, label %42, !dbg !3420

38:                                               ; preds = %33
  %39 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !3421
  %40 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3423
  %41 = bitcast %struct.binn_struct* %40 to i8*, !dbg !3423
  call void %39(i8* %41), !dbg !3421
  br label %47, !dbg !3424

42:                                               ; preds = %33
  %43 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3425
  %44 = bitcast %struct.binn_struct* %43 to i8*, !dbg !3427
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 80, i1 false), !dbg !3427
  %45 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !3428
  %46 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %45, i32 0, i32 0, !dbg !3429
  store i32 522367263, i32* %46, align 8, !dbg !3430
  br label %47

47:                                               ; preds = %5, %42, %38
  ret void, !dbg !3431
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_release(%struct.binn_struct* %0) #6 !dbg !3432 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca i8*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %3, metadata !3435, metadata !DIExpression()), !dbg !3436
  call void @llvm.dbg.declare(metadata i8** %4, metadata !3437, metadata !DIExpression()), !dbg !3438
  %5 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3439
  %6 = icmp eq %struct.binn_struct* %5, null, !dbg !3441
  br i1 %6, label %7, label %8, !dbg !3442

7:                                                ; preds = %1
  store i8* null, i8** %2, align 8, !dbg !3443
  br label %45, !dbg !3443

8:                                                ; preds = %1
  %9 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3444
  %10 = bitcast %struct.binn_struct* %9 to i8*, !dbg !3444
  %11 = call i8* @binn_ptr(i8* %10), !dbg !3445
  store i8* %11, i8** %4, align 8, !dbg !3446
  %12 = load i8*, i8** %4, align 8, !dbg !3447
  %13 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3449
  %14 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %13, i32 0, i32 4, !dbg !3450
  %15 = load i8*, i8** %14, align 8, !dbg !3450
  %16 = icmp ugt i8* %12, %15, !dbg !3451
  br i1 %16, label %17, label %29, !dbg !3452

17:                                               ; preds = %8
  %18 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3453
  %19 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %18, i32 0, i32 4, !dbg !3455
  %20 = load i8*, i8** %19, align 8, !dbg !3455
  %21 = load i8*, i8** %4, align 8, !dbg !3456
  %22 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3457
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %22, i32 0, i32 10, !dbg !3458
  %24 = load i32, i32* %23, align 8, !dbg !3458
  %25 = sext i32 %24 to i64, !dbg !3457
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 %25, i1 false), !dbg !3459
  %26 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3460
  %27 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %26, i32 0, i32 4, !dbg !3461
  %28 = load i8*, i8** %27, align 8, !dbg !3461
  store i8* %28, i8** %4, align 8, !dbg !3462
  br label %29, !dbg !3463

29:                                               ; preds = %17, %8
  %30 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3464
  %31 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %30, i32 0, i32 1, !dbg !3466
  %32 = load i32, i32* %31, align 4, !dbg !3466
  %33 = icmp ne i32 %32, 0, !dbg !3464
  br i1 %33, label %34, label %38, !dbg !3467

34:                                               ; preds = %29
  %35 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !3468
  %36 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3470
  %37 = bitcast %struct.binn_struct* %36 to i8*, !dbg !3470
  call void %35(i8* %37), !dbg !3468
  br label %43, !dbg !3471

38:                                               ; preds = %29
  %39 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3472
  %40 = bitcast %struct.binn_struct* %39 to i8*, !dbg !3474
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 80, i1 false), !dbg !3474
  %41 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !3475
  %42 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %41, i32 0, i32 0, !dbg !3476
  store i32 522367263, i32* %42, align 8, !dbg !3477
  br label %43

43:                                               ; preds = %38, %34
  %44 = load i8*, i8** %4, align 8, !dbg !3478
  store i8* %44, i8** %2, align 8, !dbg !3479
  br label %45, !dbg !3479

45:                                               ; preds = %43, %7
  %46 = load i8*, i8** %2, align 8, !dbg !3480
  ret i8* %46, !dbg !3480
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #8

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_size(i8* %0) #6 !dbg !3481 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3482, metadata !DIExpression()), !dbg !3483
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !3484, metadata !DIExpression()), !dbg !3485
  %5 = load i8*, i8** %3, align 8, !dbg !3486
  %6 = call i32 @_ZL17binn_get_ptr_typePv(i8* %5), !dbg !3487
  switch i32 %6, label %29 [
    i32 1, label %7
    i32 2, label %26
  ], !dbg !3488

7:                                                ; preds = %1
  %8 = load i8*, i8** %3, align 8, !dbg !3489
  %9 = bitcast i8* %8 to %struct.binn_struct*, !dbg !3491
  store %struct.binn_struct* %9, %struct.binn_struct** %4, align 8, !dbg !3492
  %10 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3493
  %11 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 2, !dbg !3495
  %12 = load i32, i32* %11, align 8, !dbg !3495
  %13 = icmp ne i32 %12, 0, !dbg !3493
  br i1 %13, label %14, label %22, !dbg !3496

14:                                               ; preds = %7
  %15 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3497
  %16 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %15, i32 0, i32 3, !dbg !3498
  %17 = load i32, i32* %16, align 4, !dbg !3498
  %18 = icmp ne i32 %17, 0, !dbg !3497
  br i1 %18, label %19, label %22, !dbg !3499

19:                                               ; preds = %14
  %20 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3500
  %21 = call i32 @_ZL16binn_save_headerP11binn_struct(%struct.binn_struct* %20), !dbg !3502
  br label %22, !dbg !3503

22:                                               ; preds = %19, %14, %7
  %23 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3504
  %24 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %23, i32 0, i32 10, !dbg !3505
  %25 = load i32, i32* %24, align 8, !dbg !3505
  store i32 %25, i32* %2, align 4, !dbg !3506
  br label %30, !dbg !3506

26:                                               ; preds = %1
  %27 = load i8*, i8** %3, align 8, !dbg !3507
  %28 = call i32 @_ZL13binn_buf_sizePv(i8* %27), !dbg !3508
  store i32 %28, i32* %2, align 4, !dbg !3509
  br label %30, !dbg !3509

29:                                               ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !3510
  br label %30, !dbg !3510

30:                                               ; preds = %29, %26, %22
  %31 = load i32, i32* %2, align 4, !dbg !3511
  ret i32 %31, !dbg !3511
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL13binn_buf_sizePv(i8* %0) #6 !dbg !3512 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3513, metadata !DIExpression()), !dbg !3514
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3515, metadata !DIExpression()), !dbg !3516
  store i32 0, i32* %4, align 4, !dbg !3516
  %5 = load i8*, i8** %3, align 8, !dbg !3517
  %6 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %5, i32* null, i32* null, i32* %4, i32* null), !dbg !3519
  %7 = icmp ne i32 %6, 0, !dbg !3519
  br i1 %7, label %9, label %8, !dbg !3520

8:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !3521
  br label %11, !dbg !3521

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4, !dbg !3522
  store i32 %10, i32* %2, align 4, !dbg !3523
  br label %11, !dbg !3523

11:                                               ; preds = %9, %8
  %12 = load i32, i32* %2, align 4, !dbg !3524
  ret i32 %12, !dbg !3524
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_type(i8* %0) #6 !dbg !3525 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3526, metadata !DIExpression()), !dbg !3527
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !3528, metadata !DIExpression()), !dbg !3529
  %5 = load i8*, i8** %3, align 8, !dbg !3530
  %6 = call i32 @_ZL17binn_get_ptr_typePv(i8* %5), !dbg !3531
  switch i32 %6, label %16 [
    i32 1, label %7
    i32 2, label %13
  ], !dbg !3532

7:                                                ; preds = %1
  %8 = load i8*, i8** %3, align 8, !dbg !3533
  %9 = bitcast i8* %8 to %struct.binn_struct*, !dbg !3535
  store %struct.binn_struct* %9, %struct.binn_struct** %4, align 8, !dbg !3536
  %10 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3537
  %11 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 8, !dbg !3538
  %12 = load i32, i32* %11, align 4, !dbg !3538
  store i32 %12, i32* %2, align 4, !dbg !3539
  br label %17, !dbg !3539

13:                                               ; preds = %1
  %14 = load i8*, i8** %3, align 8, !dbg !3540
  %15 = call i32 @_ZL13binn_buf_typePv(i8* %14), !dbg !3541
  store i32 %15, i32* %2, align 4, !dbg !3542
  br label %17, !dbg !3542

16:                                               ; preds = %1
  store i32 -1, i32* %2, align 4, !dbg !3543
  br label %17, !dbg !3543

17:                                               ; preds = %16, %13, %7
  %18 = load i32, i32* %2, align 4, !dbg !3544
  ret i32 %18, !dbg !3544
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL13binn_buf_typePv(i8* %0) #6 !dbg !3545 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3546, metadata !DIExpression()), !dbg !3547
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3548, metadata !DIExpression()), !dbg !3549
  %5 = load i8*, i8** %3, align 8, !dbg !3550
  %6 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %5, i32* %4, i32* null, i32* null, i32* null), !dbg !3552
  %7 = icmp ne i32 %6, 0, !dbg !3552
  br i1 %7, label %9, label %8, !dbg !3553

8:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !3554
  br label %11, !dbg !3554

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4, !dbg !3555
  store i32 %10, i32* %2, align 4, !dbg !3556
  br label %11, !dbg !3556

11:                                               ; preds = %9, %8
  %12 = load i32, i32* %2, align 4, !dbg !3557
  ret i32 %12, !dbg !3557
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_count(i8* %0) #6 !dbg !3558 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3559, metadata !DIExpression()), !dbg !3560
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !3561, metadata !DIExpression()), !dbg !3562
  %5 = load i8*, i8** %3, align 8, !dbg !3563
  %6 = call i32 @_ZL17binn_get_ptr_typePv(i8* %5), !dbg !3564
  switch i32 %6, label %16 [
    i32 1, label %7
    i32 2, label %13
  ], !dbg !3565

7:                                                ; preds = %1
  %8 = load i8*, i8** %3, align 8, !dbg !3566
  %9 = bitcast i8* %8 to %struct.binn_struct*, !dbg !3568
  store %struct.binn_struct* %9, %struct.binn_struct** %4, align 8, !dbg !3569
  %10 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !3570
  %11 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 11, !dbg !3571
  %12 = load i32, i32* %11, align 4, !dbg !3571
  store i32 %12, i32* %2, align 4, !dbg !3572
  br label %17, !dbg !3572

13:                                               ; preds = %1
  %14 = load i8*, i8** %3, align 8, !dbg !3573
  %15 = call i32 @_ZL14binn_buf_countPv(i8* %14), !dbg !3574
  store i32 %15, i32* %2, align 4, !dbg !3575
  br label %17, !dbg !3575

16:                                               ; preds = %1
  store i32 -1, i32* %2, align 4, !dbg !3576
  br label %17, !dbg !3576

17:                                               ; preds = %16, %13, %7
  %18 = load i32, i32* %2, align 4, !dbg !3577
  ret i32 %18, !dbg !3577
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL14binn_buf_countPv(i8* %0) #6 !dbg !3578 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3579, metadata !DIExpression()), !dbg !3580
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3581, metadata !DIExpression()), !dbg !3582
  %5 = load i8*, i8** %3, align 8, !dbg !3583
  %6 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %5, i32* null, i32* %4, i32* null, i32* null), !dbg !3585
  %7 = icmp ne i32 %6, 0, !dbg !3585
  br i1 %7, label %9, label %8, !dbg !3586

8:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !3587
  br label %11, !dbg !3587

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4, !dbg !3588
  store i32 %10, i32* %2, align 4, !dbg !3589
  br label %11, !dbg !3589

11:                                               ; preds = %9, %8
  %12 = load i32, i32* %2, align 4, !dbg !3590
  ret i32 %12, !dbg !3590
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_get_value(i8* %0, i8* %1, %struct.binn_struct* %2) #6 !dbg !3591 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !3594, metadata !DIExpression()), !dbg !3595
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3596, metadata !DIExpression()), !dbg !3597
  store %struct.binn_struct* %2, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !3598, metadata !DIExpression()), !dbg !3599
  call void @llvm.dbg.declare(metadata i32* %8, metadata !3600, metadata !DIExpression()), !dbg !3601
  call void @llvm.dbg.declare(metadata i32* %9, metadata !3602, metadata !DIExpression()), !dbg !3603
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3604, metadata !DIExpression()), !dbg !3605
  store i32 0, i32* %10, align 4, !dbg !3605
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3606, metadata !DIExpression()), !dbg !3607
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3608, metadata !DIExpression()), !dbg !3609
  %13 = load i8*, i8** %5, align 8, !dbg !3610
  %14 = call i8* @binn_ptr(i8* %13), !dbg !3611
  store i8* %14, i8** %5, align 8, !dbg !3612
  %15 = load i8*, i8** %5, align 8, !dbg !3613
  %16 = icmp eq i8* %15, null, !dbg !3615
  br i1 %16, label %23, label %17, !dbg !3616

17:                                               ; preds = %3
  %18 = load i8*, i8** %6, align 8, !dbg !3617
  %19 = icmp eq i8* %18, null, !dbg !3618
  br i1 %19, label %23, label %20, !dbg !3619

20:                                               ; preds = %17
  %21 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !3620
  %22 = icmp eq %struct.binn_struct* %21, null, !dbg !3621
  br i1 %22, label %23, label %24, !dbg !3622

23:                                               ; preds = %20, %17, %3
  store i32 0, i32* %4, align 4, !dbg !3623
  br label %52, !dbg !3623

24:                                               ; preds = %20
  %25 = load i8*, i8** %5, align 8, !dbg !3624
  %26 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %25, i32* %8, i32* %9, i32* %10, i32* %11), !dbg !3626
  %27 = icmp eq i32 %26, 0, !dbg !3627
  br i1 %27, label %28, label %29, !dbg !3628

28:                                               ; preds = %24
  store i32 0, i32* %4, align 4, !dbg !3629
  br label %52, !dbg !3629

29:                                               ; preds = %24
  %30 = load i32, i32* %8, align 4, !dbg !3630
  %31 = icmp ne i32 %30, 226, !dbg !3632
  br i1 %31, label %32, label %33, !dbg !3633

32:                                               ; preds = %29
  store i32 0, i32* %4, align 4, !dbg !3634
  br label %52, !dbg !3634

33:                                               ; preds = %29
  %34 = load i32, i32* %9, align 4, !dbg !3635
  %35 = icmp eq i32 %34, 0, !dbg !3637
  br i1 %35, label %36, label %37, !dbg !3638

36:                                               ; preds = %33
  store i32 0, i32* %4, align 4, !dbg !3639
  br label %52, !dbg !3639

37:                                               ; preds = %33
  %38 = load i8*, i8** %5, align 8, !dbg !3640
  store i8* %38, i8** %12, align 8, !dbg !3641
  %39 = load i8*, i8** %12, align 8, !dbg !3642
  %40 = load i32, i32* %11, align 4, !dbg !3643
  %41 = load i32, i32* %10, align 4, !dbg !3644
  %42 = load i32, i32* %9, align 4, !dbg !3645
  %43 = load i8*, i8** %6, align 8, !dbg !3646
  %44 = call i8* @_ZL12SearchForKeyPhiiiPc(i8* %39, i32 %40, i32 %41, i32 %42, i8* %43), !dbg !3647
  store i8* %44, i8** %12, align 8, !dbg !3648
  %45 = load i8*, i8** %12, align 8, !dbg !3649
  %46 = icmp eq i8* %45, null, !dbg !3651
  br i1 %46, label %47, label %48, !dbg !3652

47:                                               ; preds = %37
  store i32 0, i32* %4, align 4, !dbg !3653
  br label %52, !dbg !3653

48:                                               ; preds = %37
  %49 = load i8*, i8** %12, align 8, !dbg !3654
  %50 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !3655
  %51 = call i32 @_ZL8GetValuePhP11binn_struct(i8* %49, %struct.binn_struct* %50), !dbg !3656
  store i32 %51, i32* %4, align 4, !dbg !3657
  br label %52, !dbg !3657

52:                                               ; preds = %48, %47, %36, %32, %28, %23
  %53 = load i32, i32* %4, align 4, !dbg !3658
  ret i32 %53, !dbg !3658
}

; Function Attrs: noinline optnone ssp uwtable
define internal i8* @_ZL12SearchForKeyPhiiiPc(i8* %0, i32 %1, i32 %2, i32 %3, i8* %4) #6 !dbg !3659 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !3662, metadata !DIExpression()), !dbg !3663
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !3664, metadata !DIExpression()), !dbg !3665
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !3666, metadata !DIExpression()), !dbg !3667
  store i32 %3, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3668, metadata !DIExpression()), !dbg !3669
  store i8* %4, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3670, metadata !DIExpression()), !dbg !3671
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3672, metadata !DIExpression()), !dbg !3673
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3674, metadata !DIExpression()), !dbg !3675
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3676, metadata !DIExpression()), !dbg !3677
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3678, metadata !DIExpression()), !dbg !3679
  call void @llvm.dbg.declare(metadata i32* %16, metadata !3680, metadata !DIExpression()), !dbg !3681
  %17 = load i8*, i8** %7, align 8, !dbg !3682
  store i8* %17, i8** %14, align 8, !dbg !3683
  %18 = load i8*, i8** %7, align 8, !dbg !3684
  %19 = load i32, i32* %9, align 4, !dbg !3685
  %20 = sext i32 %19 to i64, !dbg !3686
  %21 = getelementptr inbounds i8, i8* %18, i64 %20, !dbg !3686
  %22 = getelementptr inbounds i8, i8* %21, i64 -1, !dbg !3687
  store i8* %22, i8** %13, align 8, !dbg !3688
  %23 = load i32, i32* %8, align 4, !dbg !3689
  %24 = load i8*, i8** %7, align 8, !dbg !3690
  %25 = sext i32 %23 to i64, !dbg !3690
  %26 = getelementptr inbounds i8, i8* %24, i64 %25, !dbg !3690
  store i8* %26, i8** %7, align 8, !dbg !3690
  %27 = load i8*, i8** %11, align 8, !dbg !3691
  %28 = call i64 @strlen(i8* %27), !dbg !3692
  %29 = trunc i64 %28 to i32, !dbg !3692
  store i32 %29, i32* %16, align 4, !dbg !3693
  store i32 0, i32* %15, align 4, !dbg !3694
  br label %30, !dbg !3696

30:                                               ; preds = %98, %5
  %31 = load i32, i32* %15, align 4, !dbg !3697
  %32 = load i32, i32* %10, align 4, !dbg !3699
  %33 = icmp slt i32 %31, %32, !dbg !3700
  br i1 %33, label %34, label %101, !dbg !3701

34:                                               ; preds = %30
  %35 = load i8*, i8** %7, align 8, !dbg !3702
  %36 = load i8, i8* %35, align 1, !dbg !3704
  store i8 %36, i8* %12, align 1, !dbg !3705
  %37 = load i8*, i8** %7, align 8, !dbg !3706
  %38 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !3706
  store i8* %38, i8** %7, align 8, !dbg !3706
  %39 = load i8*, i8** %7, align 8, !dbg !3707
  %40 = load i8*, i8** %13, align 8, !dbg !3709
  %41 = icmp ugt i8* %39, %40, !dbg !3710
  br i1 %41, label %42, label %43, !dbg !3711

42:                                               ; preds = %34
  br label %101, !dbg !3712

43:                                               ; preds = %34
  %44 = load i8, i8* %12, align 1, !dbg !3713
  %45 = zext i8 %44 to i32, !dbg !3713
  %46 = icmp sgt i32 %45, 0, !dbg !3715
  br i1 %46, label %47, label %78, !dbg !3716

47:                                               ; preds = %43
  %48 = load i8*, i8** %7, align 8, !dbg !3717
  %49 = load i8*, i8** %11, align 8, !dbg !3720
  %50 = load i8, i8* %12, align 1, !dbg !3721
  %51 = zext i8 %50 to i64, !dbg !3721
  %52 = call i32 @strncasecmp(i8* %48, i8* %49, i64 %51), !dbg !3722
  %53 = icmp eq i32 %52, 0, !dbg !3723
  br i1 %53, label %54, label %67, !dbg !3724

54:                                               ; preds = %47
  %55 = load i32, i32* %16, align 4, !dbg !3725
  %56 = load i8, i8* %12, align 1, !dbg !3728
  %57 = zext i8 %56 to i32, !dbg !3728
  %58 = icmp eq i32 %55, %57, !dbg !3729
  br i1 %58, label %59, label %66, !dbg !3730

59:                                               ; preds = %54
  %60 = load i8, i8* %12, align 1, !dbg !3731
  %61 = zext i8 %60 to i32, !dbg !3731
  %62 = load i8*, i8** %7, align 8, !dbg !3733
  %63 = sext i32 %61 to i64, !dbg !3733
  %64 = getelementptr inbounds i8, i8* %62, i64 %63, !dbg !3733
  store i8* %64, i8** %7, align 8, !dbg !3733
  %65 = load i8*, i8** %7, align 8, !dbg !3734
  store i8* %65, i8** %6, align 8, !dbg !3735
  br label %102, !dbg !3735

66:                                               ; preds = %54
  br label %67, !dbg !3736

67:                                               ; preds = %66, %47
  %68 = load i8, i8* %12, align 1, !dbg !3737
  %69 = zext i8 %68 to i32, !dbg !3737
  %70 = load i8*, i8** %7, align 8, !dbg !3738
  %71 = sext i32 %69 to i64, !dbg !3738
  %72 = getelementptr inbounds i8, i8* %70, i64 %71, !dbg !3738
  store i8* %72, i8** %7, align 8, !dbg !3738
  %73 = load i8*, i8** %7, align 8, !dbg !3739
  %74 = load i8*, i8** %13, align 8, !dbg !3741
  %75 = icmp ugt i8* %73, %74, !dbg !3742
  br i1 %75, label %76, label %77, !dbg !3743

76:                                               ; preds = %67
  br label %101, !dbg !3744

77:                                               ; preds = %67
  br label %86, !dbg !3745

78:                                               ; preds = %43
  %79 = load i8, i8* %12, align 1, !dbg !3746
  %80 = zext i8 %79 to i32, !dbg !3746
  %81 = load i32, i32* %16, align 4, !dbg !3748
  %82 = icmp eq i32 %80, %81, !dbg !3749
  br i1 %82, label %83, label %85, !dbg !3750

83:                                               ; preds = %78
  %84 = load i8*, i8** %7, align 8, !dbg !3751
  store i8* %84, i8** %6, align 8, !dbg !3753
  br label %102, !dbg !3753

85:                                               ; preds = %78
  br label %86

86:                                               ; preds = %85, %77
  %87 = load i8*, i8** %7, align 8, !dbg !3754
  %88 = load i8*, i8** %13, align 8, !dbg !3755
  %89 = call i8* @_ZL14AdvanceDataPosPhS_(i8* %87, i8* %88), !dbg !3756
  store i8* %89, i8** %7, align 8, !dbg !3757
  %90 = load i8*, i8** %7, align 8, !dbg !3758
  %91 = icmp eq i8* %90, null, !dbg !3760
  br i1 %91, label %96, label %92, !dbg !3761

92:                                               ; preds = %86
  %93 = load i8*, i8** %7, align 8, !dbg !3762
  %94 = load i8*, i8** %14, align 8, !dbg !3763
  %95 = icmp ult i8* %93, %94, !dbg !3764
  br i1 %95, label %96, label %97, !dbg !3765

96:                                               ; preds = %92, %86
  br label %101, !dbg !3766

97:                                               ; preds = %92
  br label %98, !dbg !3767

98:                                               ; preds = %97
  %99 = load i32, i32* %15, align 4, !dbg !3768
  %100 = add nsw i32 %99, 1, !dbg !3768
  store i32 %100, i32* %15, align 4, !dbg !3768
  br label %30, !dbg !3769, !llvm.loop !3770

101:                                              ; preds = %96, %76, %42, %30
  store i8* null, i8** %6, align 8, !dbg !3772
  br label %102, !dbg !3772

102:                                              ; preds = %101, %83, %59
  %103 = load i8*, i8** %6, align 8, !dbg !3773
  ret i8* %103, !dbg !3773
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL8GetValuePhP11binn_struct(i8* %0, %struct.binn_struct* %1) #6 !dbg !3774 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %struct.binn_struct*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !3777, metadata !DIExpression()), !dbg !3778
  store %struct.binn_struct* %1, %struct.binn_struct** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %5, metadata !3779, metadata !DIExpression()), !dbg !3780
  call void @llvm.dbg.declare(metadata i8* %6, metadata !3781, metadata !DIExpression()), !dbg !3782
  call void @llvm.dbg.declare(metadata i32* %7, metadata !3783, metadata !DIExpression()), !dbg !3784
  call void @llvm.dbg.declare(metadata i32* %8, metadata !3785, metadata !DIExpression()), !dbg !3786
  call void @llvm.dbg.declare(metadata i32* %9, metadata !3787, metadata !DIExpression()), !dbg !3788
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3789, metadata !DIExpression()), !dbg !3790
  %11 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3791
  %12 = icmp eq %struct.binn_struct* %11, null, !dbg !3793
  br i1 %12, label %13, label %14, !dbg !3794

13:                                               ; preds = %2
  store i32 0, i32* %3, align 4, !dbg !3795
  br label %211, !dbg !3795

14:                                               ; preds = %2
  %15 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3796
  %16 = bitcast %struct.binn_struct* %15 to i8*, !dbg !3797
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 80, i1 false), !dbg !3797
  %17 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3798
  %18 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %17, i32 0, i32 0, !dbg !3799
  store i32 522367263, i32* %18, align 8, !dbg !3800
  %19 = load i8*, i8** %4, align 8, !dbg !3801
  store i8* %19, i8** %10, align 8, !dbg !3802
  %20 = load i8*, i8** %4, align 8, !dbg !3803
  %21 = load i8, i8* %20, align 1, !dbg !3804
  store i8 %21, i8* %6, align 1, !dbg !3805
  %22 = load i8*, i8** %4, align 8, !dbg !3806
  %23 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !3806
  store i8* %23, i8** %4, align 8, !dbg !3806
  %24 = load i8, i8* %6, align 1, !dbg !3807
  %25 = zext i8 %24 to i32, !dbg !3807
  %26 = and i32 %25, 224, !dbg !3808
  store i32 %26, i32* %8, align 4, !dbg !3809
  %27 = load i8, i8* %6, align 1, !dbg !3810
  %28 = zext i8 %27 to i32, !dbg !3810
  %29 = and i32 %28, 16, !dbg !3812
  %30 = icmp ne i32 %29, 0, !dbg !3810
  br i1 %30, label %31, label %43, !dbg !3813

31:                                               ; preds = %14
  %32 = load i8, i8* %6, align 1, !dbg !3814
  %33 = zext i8 %32 to i32, !dbg !3814
  %34 = shl i32 %33, 8, !dbg !3816
  store i32 %34, i32* %7, align 4, !dbg !3817
  %35 = load i8*, i8** %4, align 8, !dbg !3818
  %36 = load i8, i8* %35, align 1, !dbg !3819
  store i8 %36, i8* %6, align 1, !dbg !3820
  %37 = load i8*, i8** %4, align 8, !dbg !3821
  %38 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !3821
  store i8* %38, i8** %4, align 8, !dbg !3821
  %39 = load i8, i8* %6, align 1, !dbg !3822
  %40 = zext i8 %39 to i32, !dbg !3822
  %41 = load i32, i32* %7, align 4, !dbg !3823
  %42 = or i32 %41, %40, !dbg !3823
  store i32 %42, i32* %7, align 4, !dbg !3823
  br label %46, !dbg !3824

43:                                               ; preds = %14
  %44 = load i8, i8* %6, align 1, !dbg !3825
  %45 = zext i8 %44 to i32, !dbg !3825
  store i32 %45, i32* %7, align 4, !dbg !3827
  br label %46

46:                                               ; preds = %43, %31
  %47 = load i32, i32* %7, align 4, !dbg !3828
  %48 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3829
  %49 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %48, i32 0, i32 8, !dbg !3830
  store i32 %47, i32* %49, align 4, !dbg !3831
  %50 = load i32, i32* %8, align 4, !dbg !3832
  switch i32 %50, label %181 [
    i32 0, label %51
    i32 32, label %52
    i32 64, label %61
    i32 96, label %82
    i32 128, label %103
    i32 192, label %124
    i32 224, label %141
    i32 160, label %154
  ], !dbg !3833

51:                                               ; preds = %46
  br label %182, !dbg !3834

52:                                               ; preds = %46
  %53 = load i8*, i8** %4, align 8, !dbg !3836
  %54 = load i8, i8* %53, align 1, !dbg !3837
  %55 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3838
  %56 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %55, i32 0, i32 13, !dbg !3839
  %57 = bitcast %union.anon* %56 to i8*, !dbg !3839
  store i8 %54, i8* %57, align 8, !dbg !3840
  %58 = load i8*, i8** %4, align 8, !dbg !3841
  %59 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3842
  %60 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %59, i32 0, i32 9, !dbg !3843
  store i8* %58, i8** %60, align 8, !dbg !3844
  br label %182, !dbg !3845

61:                                               ; preds = %46
  %62 = load i8*, i8** %4, align 8, !dbg !3846
  %63 = bitcast i8* %62 to i16*, !dbg !3847
  %64 = load i16, i16* %63, align 2, !dbg !3847
  %65 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3848
  %66 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %65, i32 0, i32 13, !dbg !3849
  %67 = bitcast %union.anon* %66 to i16*, !dbg !3849
  store i16 %64, i16* %67, align 8, !dbg !3850
  %68 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3851
  %69 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %68, i32 0, i32 13, !dbg !3852
  %70 = bitcast %union.anon* %69 to i16*, !dbg !3852
  %71 = load i16, i16* %70, align 8, !dbg !3852
  %72 = call zeroext i16 @_ZL6tobe16t(i16 zeroext %71), !dbg !3853
  %73 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3854
  %74 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %73, i32 0, i32 13, !dbg !3855
  %75 = bitcast %union.anon* %74 to i16*, !dbg !3855
  store i16 %72, i16* %75, align 8, !dbg !3856
  %76 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3857
  %77 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %76, i32 0, i32 13, !dbg !3858
  %78 = bitcast %union.anon* %77 to i16*, !dbg !3858
  %79 = bitcast i16* %78 to i8*, !dbg !3859
  %80 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3860
  %81 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %80, i32 0, i32 9, !dbg !3861
  store i8* %79, i8** %81, align 8, !dbg !3862
  br label %182, !dbg !3863

82:                                               ; preds = %46
  %83 = load i8*, i8** %4, align 8, !dbg !3864
  %84 = bitcast i8* %83 to i32*, !dbg !3865
  %85 = load i32, i32* %84, align 4, !dbg !3865
  %86 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3866
  %87 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %86, i32 0, i32 13, !dbg !3867
  %88 = bitcast %union.anon* %87 to i32*, !dbg !3867
  store i32 %85, i32* %88, align 8, !dbg !3868
  %89 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3869
  %90 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %89, i32 0, i32 13, !dbg !3870
  %91 = bitcast %union.anon* %90 to i32*, !dbg !3870
  %92 = load i32, i32* %91, align 8, !dbg !3870
  %93 = call i32 @_ZL6tobe32j(i32 %92), !dbg !3871
  %94 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3872
  %95 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %94, i32 0, i32 13, !dbg !3873
  %96 = bitcast %union.anon* %95 to i32*, !dbg !3873
  store i32 %93, i32* %96, align 8, !dbg !3874
  %97 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3875
  %98 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %97, i32 0, i32 13, !dbg !3876
  %99 = bitcast %union.anon* %98 to i32*, !dbg !3876
  %100 = bitcast i32* %99 to i8*, !dbg !3877
  %101 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3878
  %102 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %101, i32 0, i32 9, !dbg !3879
  store i8* %100, i8** %102, align 8, !dbg !3880
  br label %182, !dbg !3881

103:                                              ; preds = %46
  %104 = load i8*, i8** %4, align 8, !dbg !3882
  %105 = bitcast i8* %104 to i64*, !dbg !3883
  %106 = load i64, i64* %105, align 8, !dbg !3883
  %107 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3884
  %108 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %107, i32 0, i32 13, !dbg !3885
  %109 = bitcast %union.anon* %108 to i64*, !dbg !3885
  store i64 %106, i64* %109, align 8, !dbg !3886
  %110 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3887
  %111 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %110, i32 0, i32 13, !dbg !3888
  %112 = bitcast %union.anon* %111 to i64*, !dbg !3888
  %113 = load i64, i64* %112, align 8, !dbg !3888
  %114 = call i64 @_ZL6tobe64y(i64 %113), !dbg !3889
  %115 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3890
  %116 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %115, i32 0, i32 13, !dbg !3891
  %117 = bitcast %union.anon* %116 to i64*, !dbg !3891
  store i64 %114, i64* %117, align 8, !dbg !3892
  %118 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3893
  %119 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %118, i32 0, i32 13, !dbg !3894
  %120 = bitcast %union.anon* %119 to i64*, !dbg !3894
  %121 = bitcast i64* %120 to i8*, !dbg !3895
  %122 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3896
  %123 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %122, i32 0, i32 9, !dbg !3897
  store i8* %121, i8** %123, align 8, !dbg !3898
  br label %182, !dbg !3899

124:                                              ; preds = %46
  %125 = load i8*, i8** %4, align 8, !dbg !3900
  %126 = bitcast i8* %125 to i32*, !dbg !3901
  %127 = load i32, i32* %126, align 4, !dbg !3901
  %128 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3902
  %129 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %128, i32 0, i32 10, !dbg !3903
  store i32 %127, i32* %129, align 8, !dbg !3904
  %130 = load i8*, i8** %4, align 8, !dbg !3905
  %131 = getelementptr inbounds i8, i8* %130, i64 4, !dbg !3905
  store i8* %131, i8** %4, align 8, !dbg !3905
  %132 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3906
  %133 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %132, i32 0, i32 10, !dbg !3907
  %134 = load i32, i32* %133, align 8, !dbg !3907
  %135 = call i32 @_ZL6tobe32j(i32 %134), !dbg !3908
  %136 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3909
  %137 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %136, i32 0, i32 10, !dbg !3910
  store i32 %135, i32* %137, align 8, !dbg !3911
  %138 = load i8*, i8** %4, align 8, !dbg !3912
  %139 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3913
  %140 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %139, i32 0, i32 9, !dbg !3914
  store i8* %138, i8** %140, align 8, !dbg !3915
  br label %182, !dbg !3916

141:                                              ; preds = %46
  %142 = load i8*, i8** %10, align 8, !dbg !3917
  %143 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3918
  %144 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %143, i32 0, i32 9, !dbg !3919
  store i8* %142, i8** %144, align 8, !dbg !3920
  %145 = load i8*, i8** %10, align 8, !dbg !3921
  %146 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3923
  %147 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %146, i32 0, i32 11, !dbg !3924
  %148 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3925
  %149 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %148, i32 0, i32 10, !dbg !3926
  %150 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %145, i32* null, i32* %147, i32* %149, i32* null), !dbg !3927
  %151 = icmp eq i32 %150, 0, !dbg !3928
  br i1 %151, label %152, label %153, !dbg !3929

152:                                              ; preds = %141
  store i32 0, i32* %3, align 4, !dbg !3930
  br label %211, !dbg !3930

153:                                              ; preds = %141
  br label %182, !dbg !3931

154:                                              ; preds = %46
  %155 = load i8*, i8** %4, align 8, !dbg !3932
  %156 = load i8, i8* %155, align 1, !dbg !3933
  %157 = zext i8 %156 to i32, !dbg !3933
  store i32 %157, i32* %9, align 4, !dbg !3934
  %158 = load i32, i32* %9, align 4, !dbg !3935
  %159 = and i32 %158, 128, !dbg !3937
  %160 = icmp ne i32 %159, 0, !dbg !3935
  br i1 %160, label %161, label %171, !dbg !3938

161:                                              ; preds = %154
  %162 = load i8*, i8** %4, align 8, !dbg !3939
  %163 = bitcast i8* %162 to i32*, !dbg !3941
  %164 = load i32, i32* %163, align 4, !dbg !3941
  store i32 %164, i32* %9, align 4, !dbg !3942
  %165 = load i8*, i8** %4, align 8, !dbg !3943
  %166 = getelementptr inbounds i8, i8* %165, i64 4, !dbg !3943
  store i8* %166, i8** %4, align 8, !dbg !3943
  %167 = load i32, i32* %9, align 4, !dbg !3944
  %168 = call i32 @_ZL6tobe32j(i32 %167), !dbg !3945
  store i32 %168, i32* %9, align 4, !dbg !3946
  %169 = load i32, i32* %9, align 4, !dbg !3947
  %170 = and i32 %169, 2147483647, !dbg !3947
  store i32 %170, i32* %9, align 4, !dbg !3947
  br label %174, !dbg !3948

171:                                              ; preds = %154
  %172 = load i8*, i8** %4, align 8, !dbg !3949
  %173 = getelementptr inbounds i8, i8* %172, i32 1, !dbg !3949
  store i8* %173, i8** %4, align 8, !dbg !3949
  br label %174

174:                                              ; preds = %171, %161
  %175 = load i32, i32* %9, align 4, !dbg !3951
  %176 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3952
  %177 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %176, i32 0, i32 10, !dbg !3953
  store i32 %175, i32* %177, align 8, !dbg !3954
  %178 = load i8*, i8** %4, align 8, !dbg !3955
  %179 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3956
  %180 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %179, i32 0, i32 9, !dbg !3957
  store i8* %178, i8** %180, align 8, !dbg !3958
  br label %182, !dbg !3959

181:                                              ; preds = %46
  store i32 0, i32* %3, align 4, !dbg !3960
  br label %211, !dbg !3960

182:                                              ; preds = %174, %153, %124, %103, %82, %61, %52, %51
  %183 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3961
  %184 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %183, i32 0, i32 8, !dbg !3962
  %185 = load i32, i32* %184, align 4, !dbg !3962
  switch i32 %185, label %210 [
    i32 1, label %186
    i32 2, label %198
  ], !dbg !3963

186:                                              ; preds = %182
  %187 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3964
  %188 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %187, i32 0, i32 8, !dbg !3966
  store i32 524385, i32* %188, align 4, !dbg !3967
  %189 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3968
  %190 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %189, i32 0, i32 13, !dbg !3969
  %191 = bitcast %union.anon* %190 to i32*, !dbg !3969
  store i32 1, i32* %191, align 8, !dbg !3970
  %192 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3971
  %193 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %192, i32 0, i32 13, !dbg !3972
  %194 = bitcast %union.anon* %193 to i32*, !dbg !3972
  %195 = bitcast i32* %194 to i8*, !dbg !3973
  %196 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3974
  %197 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %196, i32 0, i32 9, !dbg !3975
  store i8* %195, i8** %197, align 8, !dbg !3976
  br label %210, !dbg !3977

198:                                              ; preds = %182
  %199 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3978
  %200 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %199, i32 0, i32 8, !dbg !3979
  store i32 524385, i32* %200, align 4, !dbg !3980
  %201 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3981
  %202 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %201, i32 0, i32 13, !dbg !3982
  %203 = bitcast %union.anon* %202 to i32*, !dbg !3982
  store i32 0, i32* %203, align 8, !dbg !3983
  %204 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3984
  %205 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %204, i32 0, i32 13, !dbg !3985
  %206 = bitcast %union.anon* %205 to i32*, !dbg !3985
  %207 = bitcast i32* %206 to i8*, !dbg !3986
  %208 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !3987
  %209 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %208, i32 0, i32 9, !dbg !3988
  store i8* %207, i8** %209, align 8, !dbg !3989
  br label %210, !dbg !3990

210:                                              ; preds = %182, %198, %186
  store i32 1, i32* %3, align 4, !dbg !3991
  br label %211, !dbg !3991

211:                                              ; preds = %210, %181, %152, %13
  %212 = load i32, i32* %3, align 4, !dbg !3992
  ret i32 %212, !dbg !3992
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal zeroext i16 @_ZL6tobe16t(i16 zeroext %0) #0 !dbg !3993 {
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !3996, metadata !DIExpression()), !dbg !3997
  call void @llvm.dbg.declare(metadata i16* %3, metadata !3998, metadata !DIExpression()), !dbg !3999
  call void @llvm.dbg.declare(metadata i8** %4, metadata !4000, metadata !DIExpression()), !dbg !4001
  %6 = bitcast i16* %2 to i8*, !dbg !4002
  store i8* %6, i8** %4, align 8, !dbg !4001
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4003, metadata !DIExpression()), !dbg !4004
  %7 = bitcast i16* %3 to i8*, !dbg !4005
  store i8* %7, i8** %5, align 8, !dbg !4004
  %8 = load i8*, i8** %4, align 8, !dbg !4006
  %9 = getelementptr inbounds i8, i8* %8, i64 1, !dbg !4006
  %10 = load i8, i8* %9, align 1, !dbg !4006
  %11 = load i8*, i8** %5, align 8, !dbg !4007
  %12 = getelementptr inbounds i8, i8* %11, i64 0, !dbg !4007
  store i8 %10, i8* %12, align 1, !dbg !4008
  %13 = load i8*, i8** %4, align 8, !dbg !4009
  %14 = getelementptr inbounds i8, i8* %13, i64 0, !dbg !4009
  %15 = load i8, i8* %14, align 1, !dbg !4009
  %16 = load i8*, i8** %5, align 8, !dbg !4010
  %17 = getelementptr inbounds i8, i8* %16, i64 1, !dbg !4010
  store i8 %15, i8* %17, align 1, !dbg !4011
  %18 = load i16, i16* %3, align 2, !dbg !4012
  ret i16 %18, !dbg !4013
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i64 @_ZL6tobe64y(i64 %0) #0 !dbg !4014 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !4017, metadata !DIExpression()), !dbg !4018
  call void @llvm.dbg.declare(metadata i64* %3, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata i8** %4, metadata !4021, metadata !DIExpression()), !dbg !4022
  %7 = bitcast i64* %2 to i8*, !dbg !4023
  store i8* %7, i8** %4, align 8, !dbg !4022
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4024, metadata !DIExpression()), !dbg !4025
  %8 = bitcast i64* %3 to i8*, !dbg !4026
  store i8* %8, i8** %5, align 8, !dbg !4025
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4027, metadata !DIExpression()), !dbg !4028
  store i32 0, i32* %6, align 4, !dbg !4029
  br label %9, !dbg !4031

9:                                                ; preds = %23, %1
  %10 = load i32, i32* %6, align 4, !dbg !4032
  %11 = icmp slt i32 %10, 8, !dbg !4034
  br i1 %11, label %12, label %26, !dbg !4035

12:                                               ; preds = %9
  %13 = load i8*, i8** %4, align 8, !dbg !4036
  %14 = load i32, i32* %6, align 4, !dbg !4038
  %15 = sub nsw i32 7, %14, !dbg !4039
  %16 = sext i32 %15 to i64, !dbg !4036
  %17 = getelementptr inbounds i8, i8* %13, i64 %16, !dbg !4036
  %18 = load i8, i8* %17, align 1, !dbg !4036
  %19 = load i8*, i8** %5, align 8, !dbg !4040
  %20 = load i32, i32* %6, align 4, !dbg !4041
  %21 = sext i32 %20 to i64, !dbg !4040
  %22 = getelementptr inbounds i8, i8* %19, i64 %21, !dbg !4040
  store i8 %18, i8* %22, align 1, !dbg !4042
  br label %23, !dbg !4043

23:                                               ; preds = %12
  %24 = load i32, i32* %6, align 4, !dbg !4044
  %25 = add nsw i32 %24, 1, !dbg !4044
  store i32 %25, i32* %6, align 4, !dbg !4044
  br label %9, !dbg !4045, !llvm.loop !4046

26:                                               ; preds = %9
  %27 = load i64, i64* %3, align 8, !dbg !4048
  ret i64 %27, !dbg !4049
}

declare i32 @strncasecmp(i8*, i8*, i64) #2

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_get_value(i8* %0, i32 %1, %struct.binn_struct* %2) #6 !dbg !4050 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4053, metadata !DIExpression()), !dbg !4054
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4055, metadata !DIExpression()), !dbg !4056
  store %struct.binn_struct* %2, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !4057, metadata !DIExpression()), !dbg !4058
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4059, metadata !DIExpression()), !dbg !4060
  call void @llvm.dbg.declare(metadata i32* %9, metadata !4061, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4063, metadata !DIExpression()), !dbg !4064
  store i32 0, i32* %10, align 4, !dbg !4064
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4065, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4067, metadata !DIExpression()), !dbg !4068
  %13 = load i8*, i8** %5, align 8, !dbg !4069
  %14 = call i8* @binn_ptr(i8* %13), !dbg !4070
  store i8* %14, i8** %5, align 8, !dbg !4071
  %15 = load i8*, i8** %5, align 8, !dbg !4072
  %16 = icmp eq i8* %15, null, !dbg !4074
  br i1 %16, label %20, label %17, !dbg !4075

17:                                               ; preds = %3
  %18 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !4076
  %19 = icmp eq %struct.binn_struct* %18, null, !dbg !4077
  br i1 %19, label %20, label %21, !dbg !4078

20:                                               ; preds = %17, %3
  store i32 0, i32* %4, align 4, !dbg !4079
  br label %49, !dbg !4079

21:                                               ; preds = %17
  %22 = load i8*, i8** %5, align 8, !dbg !4080
  %23 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %22, i32* %8, i32* %9, i32* %10, i32* %11), !dbg !4082
  %24 = icmp eq i32 %23, 0, !dbg !4083
  br i1 %24, label %25, label %26, !dbg !4084

25:                                               ; preds = %21
  store i32 0, i32* %4, align 4, !dbg !4085
  br label %49, !dbg !4085

26:                                               ; preds = %21
  %27 = load i32, i32* %8, align 4, !dbg !4086
  %28 = icmp ne i32 %27, 225, !dbg !4088
  br i1 %28, label %29, label %30, !dbg !4089

29:                                               ; preds = %26
  store i32 0, i32* %4, align 4, !dbg !4090
  br label %49, !dbg !4090

30:                                               ; preds = %26
  %31 = load i32, i32* %9, align 4, !dbg !4091
  %32 = icmp eq i32 %31, 0, !dbg !4093
  br i1 %32, label %33, label %34, !dbg !4094

33:                                               ; preds = %30
  store i32 0, i32* %4, align 4, !dbg !4095
  br label %49, !dbg !4095

34:                                               ; preds = %30
  %35 = load i8*, i8** %5, align 8, !dbg !4096
  store i8* %35, i8** %12, align 8, !dbg !4097
  %36 = load i8*, i8** %12, align 8, !dbg !4098
  %37 = load i32, i32* %11, align 4, !dbg !4099
  %38 = load i32, i32* %10, align 4, !dbg !4100
  %39 = load i32, i32* %9, align 4, !dbg !4101
  %40 = load i32, i32* %6, align 4, !dbg !4102
  %41 = call i8* @_ZL11SearchForIDPhiiii(i8* %36, i32 %37, i32 %38, i32 %39, i32 %40), !dbg !4103
  store i8* %41, i8** %12, align 8, !dbg !4104
  %42 = load i8*, i8** %12, align 8, !dbg !4105
  %43 = icmp eq i8* %42, null, !dbg !4107
  br i1 %43, label %44, label %45, !dbg !4108

44:                                               ; preds = %34
  store i32 0, i32* %4, align 4, !dbg !4109
  br label %49, !dbg !4109

45:                                               ; preds = %34
  %46 = load i8*, i8** %12, align 8, !dbg !4110
  %47 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !4111
  %48 = call i32 @_ZL8GetValuePhP11binn_struct(i8* %46, %struct.binn_struct* %47), !dbg !4112
  store i32 %48, i32* %4, align 4, !dbg !4113
  br label %49, !dbg !4113

49:                                               ; preds = %45, %44, %33, %29, %25, %20
  %50 = load i32, i32* %4, align 4, !dbg !4114
  ret i32 %50, !dbg !4114
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @_ZL11SearchForIDPhiiii(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4) #0 !dbg !4115 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4118, metadata !DIExpression()), !dbg !4119
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4120, metadata !DIExpression()), !dbg !4121
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !4122, metadata !DIExpression()), !dbg !4123
  store i32 %3, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4124, metadata !DIExpression()), !dbg !4125
  store i32 %4, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4126, metadata !DIExpression()), !dbg !4127
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4128, metadata !DIExpression()), !dbg !4129
  call void @llvm.dbg.declare(metadata i8** %13, metadata !4130, metadata !DIExpression()), !dbg !4131
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4132, metadata !DIExpression()), !dbg !4133
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4134, metadata !DIExpression()), !dbg !4135
  %16 = load i8*, i8** %7, align 8, !dbg !4136
  store i8* %16, i8** %13, align 8, !dbg !4137
  %17 = load i8*, i8** %7, align 8, !dbg !4138
  %18 = load i32, i32* %9, align 4, !dbg !4139
  %19 = sext i32 %18 to i64, !dbg !4140
  %20 = getelementptr inbounds i8, i8* %17, i64 %19, !dbg !4140
  %21 = getelementptr inbounds i8, i8* %20, i64 -1, !dbg !4141
  store i8* %21, i8** %12, align 8, !dbg !4142
  %22 = load i32, i32* %8, align 4, !dbg !4143
  %23 = load i8*, i8** %7, align 8, !dbg !4144
  %24 = sext i32 %22 to i64, !dbg !4144
  %25 = getelementptr inbounds i8, i8* %23, i64 %24, !dbg !4144
  store i8* %25, i8** %7, align 8, !dbg !4144
  store i32 0, i32* %14, align 4, !dbg !4145
  br label %26, !dbg !4147

26:                                               ; preds = %60, %5
  %27 = load i32, i32* %14, align 4, !dbg !4148
  %28 = load i32, i32* %10, align 4, !dbg !4150
  %29 = icmp slt i32 %27, %28, !dbg !4151
  br i1 %29, label %30, label %63, !dbg !4152

30:                                               ; preds = %26
  %31 = load i8*, i8** %7, align 8, !dbg !4153
  %32 = bitcast i8* %31 to i32*, !dbg !4155
  %33 = load i32, i32* %32, align 4, !dbg !4155
  store i32 %33, i32* %15, align 4, !dbg !4156
  %34 = load i8*, i8** %7, align 8, !dbg !4157
  %35 = getelementptr inbounds i8, i8* %34, i64 4, !dbg !4157
  store i8* %35, i8** %7, align 8, !dbg !4157
  %36 = load i32, i32* %15, align 4, !dbg !4158
  %37 = call i32 @_ZL6tobe32j(i32 %36), !dbg !4159
  store i32 %37, i32* %15, align 4, !dbg !4160
  %38 = load i8*, i8** %7, align 8, !dbg !4161
  %39 = load i8*, i8** %12, align 8, !dbg !4163
  %40 = icmp ugt i8* %38, %39, !dbg !4164
  br i1 %40, label %41, label %42, !dbg !4165

41:                                               ; preds = %30
  br label %63, !dbg !4166

42:                                               ; preds = %30
  %43 = load i32, i32* %15, align 4, !dbg !4167
  %44 = load i32, i32* %11, align 4, !dbg !4169
  %45 = icmp eq i32 %43, %44, !dbg !4170
  br i1 %45, label %46, label %48, !dbg !4171

46:                                               ; preds = %42
  %47 = load i8*, i8** %7, align 8, !dbg !4172
  store i8* %47, i8** %6, align 8, !dbg !4173
  br label %64, !dbg !4173

48:                                               ; preds = %42
  %49 = load i8*, i8** %7, align 8, !dbg !4174
  %50 = load i8*, i8** %12, align 8, !dbg !4175
  %51 = call i8* @_ZL14AdvanceDataPosPhS_(i8* %49, i8* %50), !dbg !4176
  store i8* %51, i8** %7, align 8, !dbg !4177
  %52 = load i8*, i8** %7, align 8, !dbg !4178
  %53 = icmp eq i8* %52, null, !dbg !4180
  br i1 %53, label %58, label %54, !dbg !4181

54:                                               ; preds = %48
  %55 = load i8*, i8** %7, align 8, !dbg !4182
  %56 = load i8*, i8** %13, align 8, !dbg !4183
  %57 = icmp ult i8* %55, %56, !dbg !4184
  br i1 %57, label %58, label %59, !dbg !4185

58:                                               ; preds = %54, %48
  br label %63, !dbg !4186

59:                                               ; preds = %54
  br label %60, !dbg !4187

60:                                               ; preds = %59
  %61 = load i32, i32* %14, align 4, !dbg !4188
  %62 = add nsw i32 %61, 1, !dbg !4188
  store i32 %62, i32* %14, align 4, !dbg !4188
  br label %26, !dbg !4189, !llvm.loop !4190

63:                                               ; preds = %58, %41, %26
  store i8* null, i8** %6, align 8, !dbg !4192
  br label %64, !dbg !4192

64:                                               ; preds = %63, %46
  %65 = load i8*, i8** %6, align 8, !dbg !4193
  ret i8* %65, !dbg !4193
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_get_value(i8* %0, i32 %1, %struct.binn_struct* %2) #6 !dbg !4194 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4195, metadata !DIExpression()), !dbg !4196
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4197, metadata !DIExpression()), !dbg !4198
  store %struct.binn_struct* %2, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !4199, metadata !DIExpression()), !dbg !4200
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4201, metadata !DIExpression()), !dbg !4202
  call void @llvm.dbg.declare(metadata i32* %9, metadata !4203, metadata !DIExpression()), !dbg !4204
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4205, metadata !DIExpression()), !dbg !4206
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4207, metadata !DIExpression()), !dbg !4208
  store i32 0, i32* %11, align 4, !dbg !4208
  call void @llvm.dbg.declare(metadata i32* %12, metadata !4209, metadata !DIExpression()), !dbg !4210
  call void @llvm.dbg.declare(metadata i8** %13, metadata !4211, metadata !DIExpression()), !dbg !4212
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4213, metadata !DIExpression()), !dbg !4214
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4215, metadata !DIExpression()), !dbg !4216
  %16 = load i8*, i8** %5, align 8, !dbg !4217
  %17 = call i8* @binn_ptr(i8* %16), !dbg !4218
  store i8* %17, i8** %5, align 8, !dbg !4219
  %18 = load i8*, i8** %5, align 8, !dbg !4220
  %19 = icmp eq i8* %18, null, !dbg !4222
  br i1 %19, label %23, label %20, !dbg !4223

20:                                               ; preds = %3
  %21 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !4224
  %22 = icmp eq %struct.binn_struct* %21, null, !dbg !4225
  br i1 %22, label %23, label %24, !dbg !4226

23:                                               ; preds = %20, %3
  store i32 0, i32* %4, align 4, !dbg !4227
  br label %84, !dbg !4227

24:                                               ; preds = %20
  %25 = load i8*, i8** %5, align 8, !dbg !4228
  %26 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %25, i32* %9, i32* %10, i32* %11, i32* %12), !dbg !4230
  %27 = icmp eq i32 %26, 0, !dbg !4231
  br i1 %27, label %28, label %29, !dbg !4232

28:                                               ; preds = %24
  store i32 0, i32* %4, align 4, !dbg !4233
  br label %84, !dbg !4233

29:                                               ; preds = %24
  %30 = load i32, i32* %9, align 4, !dbg !4234
  %31 = icmp ne i32 %30, 224, !dbg !4236
  br i1 %31, label %32, label %33, !dbg !4237

32:                                               ; preds = %29
  store i32 0, i32* %4, align 4, !dbg !4238
  br label %84, !dbg !4238

33:                                               ; preds = %29
  %34 = load i32, i32* %10, align 4, !dbg !4239
  %35 = icmp eq i32 %34, 0, !dbg !4241
  br i1 %35, label %36, label %37, !dbg !4242

36:                                               ; preds = %33
  store i32 0, i32* %4, align 4, !dbg !4243
  br label %84, !dbg !4243

37:                                               ; preds = %33
  %38 = load i32, i32* %6, align 4, !dbg !4244
  %39 = icmp sle i32 %38, 0, !dbg !4246
  %40 = zext i1 %39 to i32, !dbg !4247
  %41 = load i32, i32* %6, align 4, !dbg !4248
  %42 = load i32, i32* %10, align 4, !dbg !4249
  %43 = icmp sgt i32 %41, %42, !dbg !4250
  %44 = zext i1 %43 to i32, !dbg !4251
  %45 = or i32 %40, %44, !dbg !4252
  %46 = icmp ne i32 %45, 0, !dbg !4247
  br i1 %46, label %47, label %48, !dbg !4253

47:                                               ; preds = %37
  store i32 0, i32* %4, align 4, !dbg !4254
  br label %84, !dbg !4254

48:                                               ; preds = %37
  %49 = load i32, i32* %6, align 4, !dbg !4255
  %50 = add nsw i32 %49, -1, !dbg !4255
  store i32 %50, i32* %6, align 4, !dbg !4255
  %51 = load i8*, i8** %5, align 8, !dbg !4256
  store i8* %51, i8** %13, align 8, !dbg !4257
  %52 = load i8*, i8** %13, align 8, !dbg !4258
  store i8* %52, i8** %15, align 8, !dbg !4259
  %53 = load i8*, i8** %13, align 8, !dbg !4260
  %54 = load i32, i32* %11, align 4, !dbg !4261
  %55 = sext i32 %54 to i64, !dbg !4262
  %56 = getelementptr inbounds i8, i8* %53, i64 %55, !dbg !4262
  store i8* %56, i8** %14, align 8, !dbg !4263
  %57 = load i32, i32* %12, align 4, !dbg !4264
  %58 = load i8*, i8** %13, align 8, !dbg !4265
  %59 = sext i32 %57 to i64, !dbg !4265
  %60 = getelementptr inbounds i8, i8* %58, i64 %59, !dbg !4265
  store i8* %60, i8** %13, align 8, !dbg !4265
  store i32 0, i32* %8, align 4, !dbg !4266
  br label %61, !dbg !4268

61:                                               ; preds = %77, %48
  %62 = load i32, i32* %8, align 4, !dbg !4269
  %63 = load i32, i32* %6, align 4, !dbg !4271
  %64 = icmp slt i32 %62, %63, !dbg !4272
  br i1 %64, label %65, label %80, !dbg !4273

65:                                               ; preds = %61
  %66 = load i8*, i8** %13, align 8, !dbg !4274
  %67 = load i8*, i8** %14, align 8, !dbg !4276
  %68 = call i8* @_ZL14AdvanceDataPosPhS_(i8* %66, i8* %67), !dbg !4277
  store i8* %68, i8** %13, align 8, !dbg !4278
  %69 = load i8*, i8** %13, align 8, !dbg !4279
  %70 = icmp eq i8* %69, null, !dbg !4281
  br i1 %70, label %75, label %71, !dbg !4282

71:                                               ; preds = %65
  %72 = load i8*, i8** %13, align 8, !dbg !4283
  %73 = load i8*, i8** %15, align 8, !dbg !4284
  %74 = icmp ult i8* %72, %73, !dbg !4285
  br i1 %74, label %75, label %76, !dbg !4286

75:                                               ; preds = %71, %65
  store i32 0, i32* %4, align 4, !dbg !4287
  br label %84, !dbg !4287

76:                                               ; preds = %71
  br label %77, !dbg !4288

77:                                               ; preds = %76
  %78 = load i32, i32* %8, align 4, !dbg !4289
  %79 = add nsw i32 %78, 1, !dbg !4289
  store i32 %79, i32* %8, align 4, !dbg !4289
  br label %61, !dbg !4290, !llvm.loop !4291

80:                                               ; preds = %61
  %81 = load i8*, i8** %13, align 8, !dbg !4293
  %82 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !4294
  %83 = call i32 @_ZL8GetValuePhP11binn_struct(i8* %81, %struct.binn_struct* %82), !dbg !4295
  store i32 %83, i32* %4, align 4, !dbg !4296
  br label %84, !dbg !4296

84:                                               ; preds = %80, %75, %47, %36, %32, %28, %23
  %85 = load i32, i32* %4, align 4, !dbg !4297
  ret i32 %85, !dbg !4297
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_get_pair(i8* %0, i32 %1, i32* %2, %struct.binn_struct* %3) #6 !dbg !4298 {
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4301, metadata !DIExpression()), !dbg !4302
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4303, metadata !DIExpression()), !dbg !4304
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !4305, metadata !DIExpression()), !dbg !4306
  store %struct.binn_struct* %3, %struct.binn_struct** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %8, metadata !4307, metadata !DIExpression()), !dbg !4308
  %9 = load i8*, i8** %5, align 8, !dbg !4309
  %10 = load i32, i32* %6, align 4, !dbg !4310
  %11 = load i32*, i32** %7, align 8, !dbg !4311
  %12 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4312
  %13 = call i32 @_ZL14binn_read_pairiPviPiPcP11binn_struct(i32 225, i8* %9, i32 %10, i32* %11, i8* null, %struct.binn_struct* %12), !dbg !4313
  ret i32 %13, !dbg !4314
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL14binn_read_pairiPviPiPcP11binn_struct(i32 %0, i8* %1, i32 %2, i32* %3, i8* %4, %struct.binn_struct* %5) #6 !dbg !4315 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca %struct.binn_struct*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i8, align 1
  store i32 %0, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4318, metadata !DIExpression()), !dbg !4319
  store i8* %1, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !4320, metadata !DIExpression()), !dbg !4321
  store i32 %2, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4322, metadata !DIExpression()), !dbg !4323
  store i32* %3, i32** %11, align 8
  call void @llvm.dbg.declare(metadata i32** %11, metadata !4324, metadata !DIExpression()), !dbg !4325
  store i8* %4, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4326, metadata !DIExpression()), !dbg !4327
  store %struct.binn_struct* %5, %struct.binn_struct** %13, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %13, metadata !4328, metadata !DIExpression()), !dbg !4329
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4330, metadata !DIExpression()), !dbg !4331
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4332, metadata !DIExpression()), !dbg !4333
  call void @llvm.dbg.declare(metadata i32* %16, metadata !4334, metadata !DIExpression()), !dbg !4335
  store i32 0, i32* %16, align 4, !dbg !4335
  call void @llvm.dbg.declare(metadata i32* %17, metadata !4336, metadata !DIExpression()), !dbg !4337
  call void @llvm.dbg.declare(metadata i32* %18, metadata !4338, metadata !DIExpression()), !dbg !4339
  call void @llvm.dbg.declare(metadata i32* %19, metadata !4340, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.declare(metadata i32* %20, metadata !4342, metadata !DIExpression()), !dbg !4343
  call void @llvm.dbg.declare(metadata i32* %21, metadata !4344, metadata !DIExpression()), !dbg !4345
  store i32 0, i32* %21, align 4, !dbg !4345
  call void @llvm.dbg.declare(metadata i8** %22, metadata !4346, metadata !DIExpression()), !dbg !4347
  call void @llvm.dbg.declare(metadata i8** %23, metadata !4348, metadata !DIExpression()), !dbg !4349
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4350, metadata !DIExpression()), !dbg !4351
  call void @llvm.dbg.declare(metadata i8** %25, metadata !4352, metadata !DIExpression()), !dbg !4353
  call void @llvm.dbg.declare(metadata i8* %26, metadata !4354, metadata !DIExpression()), !dbg !4355
  %27 = load i8*, i8** %9, align 8, !dbg !4356
  %28 = call i8* @binn_ptr(i8* %27), !dbg !4357
  store i8* %28, i8** %9, align 8, !dbg !4358
  %29 = load i8*, i8** %9, align 8, !dbg !4359
  %30 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %29, i32* %14, i32* %15, i32* %16, i32* %17), !dbg !4361
  %31 = icmp eq i32 %30, 0, !dbg !4362
  br i1 %31, label %32, label %33, !dbg !4363

32:                                               ; preds = %6
  store i32 0, i32* %7, align 4, !dbg !4364
  br label %150, !dbg !4364

33:                                               ; preds = %6
  %34 = load i32, i32* %14, align 4, !dbg !4365
  %35 = load i32, i32* %8, align 4, !dbg !4367
  %36 = icmp ne i32 %34, %35, !dbg !4368
  br i1 %36, label %47, label %37, !dbg !4369

37:                                               ; preds = %33
  %38 = load i32, i32* %15, align 4, !dbg !4370
  %39 = icmp eq i32 %38, 0, !dbg !4371
  br i1 %39, label %47, label %40, !dbg !4372

40:                                               ; preds = %37
  %41 = load i32, i32* %10, align 4, !dbg !4373
  %42 = icmp slt i32 %41, 1, !dbg !4374
  br i1 %42, label %47, label %43, !dbg !4375

43:                                               ; preds = %40
  %44 = load i32, i32* %10, align 4, !dbg !4376
  %45 = load i32, i32* %15, align 4, !dbg !4377
  %46 = icmp sgt i32 %44, %45, !dbg !4378
  br i1 %46, label %47, label %48, !dbg !4379

47:                                               ; preds = %43, %40, %37, %33
  store i32 0, i32* %7, align 4, !dbg !4380
  br label %150, !dbg !4380

48:                                               ; preds = %43
  %49 = load i8*, i8** %9, align 8, !dbg !4381
  store i8* %49, i8** %22, align 8, !dbg !4382
  %50 = load i8*, i8** %22, align 8, !dbg !4383
  store i8* %50, i8** %24, align 8, !dbg !4384
  %51 = load i8*, i8** %22, align 8, !dbg !4385
  %52 = load i32, i32* %16, align 4, !dbg !4386
  %53 = sext i32 %52 to i64, !dbg !4387
  %54 = getelementptr inbounds i8, i8* %51, i64 %53, !dbg !4387
  %55 = getelementptr inbounds i8, i8* %54, i64 -1, !dbg !4388
  store i8* %55, i8** %23, align 8, !dbg !4389
  %56 = load i32, i32* %17, align 4, !dbg !4390
  %57 = load i8*, i8** %22, align 8, !dbg !4391
  %58 = sext i32 %56 to i64, !dbg !4391
  %59 = getelementptr inbounds i8, i8* %57, i64 %58, !dbg !4391
  store i8* %59, i8** %22, align 8, !dbg !4391
  store i32 0, i32* %18, align 4, !dbg !4392
  br label %60, !dbg !4394

60:                                               ; preds = %120, %48
  %61 = load i32, i32* %18, align 4, !dbg !4395
  %62 = load i32, i32* %15, align 4, !dbg !4397
  %63 = icmp slt i32 %61, %62, !dbg !4398
  br i1 %63, label %64, label %123, !dbg !4399

64:                                               ; preds = %60
  %65 = load i32, i32* %14, align 4, !dbg !4400
  switch i32 %65, label %101 [
    i32 225, label %66
    i32 226, label %80
  ], !dbg !4402

66:                                               ; preds = %64
  %67 = load i8*, i8** %22, align 8, !dbg !4403
  %68 = bitcast i8* %67 to i32*, !dbg !4405
  %69 = load i32, i32* %68, align 4, !dbg !4405
  store i32 %69, i32* %19, align 4, !dbg !4406
  %70 = load i8*, i8** %22, align 8, !dbg !4407
  %71 = getelementptr inbounds i8, i8* %70, i64 4, !dbg !4407
  store i8* %71, i8** %22, align 8, !dbg !4407
  %72 = load i32, i32* %19, align 4, !dbg !4408
  %73 = call i32 @_ZL6tobe32j(i32 %72), !dbg !4409
  store i32 %73, i32* %19, align 4, !dbg !4410
  %74 = load i8*, i8** %22, align 8, !dbg !4411
  %75 = load i8*, i8** %23, align 8, !dbg !4413
  %76 = icmp ugt i8* %74, %75, !dbg !4414
  br i1 %76, label %77, label %78, !dbg !4415

77:                                               ; preds = %66
  store i32 0, i32* %7, align 4, !dbg !4416
  br label %150, !dbg !4416

78:                                               ; preds = %66
  %79 = load i32, i32* %19, align 4, !dbg !4417
  store i32 %79, i32* %20, align 4, !dbg !4418
  br label %101, !dbg !4419

80:                                               ; preds = %64
  %81 = load i8*, i8** %22, align 8, !dbg !4420
  %82 = load i8, i8* %81, align 1, !dbg !4421
  store i8 %82, i8* %26, align 1, !dbg !4422
  %83 = load i8*, i8** %22, align 8, !dbg !4423
  %84 = getelementptr inbounds i8, i8* %83, i32 1, !dbg !4423
  store i8* %84, i8** %22, align 8, !dbg !4423
  %85 = load i8*, i8** %22, align 8, !dbg !4424
  %86 = load i8*, i8** %23, align 8, !dbg !4426
  %87 = icmp ugt i8* %85, %86, !dbg !4427
  br i1 %87, label %88, label %89, !dbg !4428

88:                                               ; preds = %80
  store i32 0, i32* %7, align 4, !dbg !4429
  br label %150, !dbg !4429

89:                                               ; preds = %80
  %90 = load i8*, i8** %22, align 8, !dbg !4430
  store i8* %90, i8** %25, align 8, !dbg !4431
  %91 = load i8, i8* %26, align 1, !dbg !4432
  %92 = zext i8 %91 to i32, !dbg !4432
  %93 = load i8*, i8** %22, align 8, !dbg !4433
  %94 = sext i32 %92 to i64, !dbg !4433
  %95 = getelementptr inbounds i8, i8* %93, i64 %94, !dbg !4433
  store i8* %95, i8** %22, align 8, !dbg !4433
  %96 = load i8*, i8** %22, align 8, !dbg !4434
  %97 = load i8*, i8** %23, align 8, !dbg !4436
  %98 = icmp ugt i8* %96, %97, !dbg !4437
  br i1 %98, label %99, label %100, !dbg !4438

99:                                               ; preds = %89
  store i32 0, i32* %7, align 4, !dbg !4439
  br label %150, !dbg !4439

100:                                              ; preds = %89
  br label %101, !dbg !4440

101:                                              ; preds = %64, %100, %78
  %102 = load i32, i32* %21, align 4, !dbg !4441
  %103 = add nsw i32 %102, 1, !dbg !4441
  store i32 %103, i32* %21, align 4, !dbg !4441
  %104 = load i32, i32* %21, align 4, !dbg !4442
  %105 = load i32, i32* %10, align 4, !dbg !4444
  %106 = icmp eq i32 %104, %105, !dbg !4445
  br i1 %106, label %107, label %108, !dbg !4446

107:                                              ; preds = %101
  br label %124, !dbg !4447

108:                                              ; preds = %101
  %109 = load i8*, i8** %22, align 8, !dbg !4448
  %110 = load i8*, i8** %23, align 8, !dbg !4449
  %111 = call i8* @_ZL14AdvanceDataPosPhS_(i8* %109, i8* %110), !dbg !4450
  store i8* %111, i8** %22, align 8, !dbg !4451
  %112 = load i8*, i8** %22, align 8, !dbg !4452
  %113 = icmp eq i8* %112, null, !dbg !4454
  br i1 %113, label %118, label %114, !dbg !4455

114:                                              ; preds = %108
  %115 = load i8*, i8** %22, align 8, !dbg !4456
  %116 = load i8*, i8** %24, align 8, !dbg !4457
  %117 = icmp ult i8* %115, %116, !dbg !4458
  br i1 %117, label %118, label %119, !dbg !4459

118:                                              ; preds = %114, %108
  store i32 0, i32* %7, align 4, !dbg !4460
  br label %150, !dbg !4460

119:                                              ; preds = %114
  br label %120, !dbg !4461

120:                                              ; preds = %119
  %121 = load i32, i32* %18, align 4, !dbg !4462
  %122 = add nsw i32 %121, 1, !dbg !4462
  store i32 %122, i32* %18, align 4, !dbg !4462
  br label %60, !dbg !4463, !llvm.loop !4464

123:                                              ; preds = %60
  store i32 0, i32* %7, align 4, !dbg !4466
  br label %150, !dbg !4466

124:                                              ; preds = %107
  call void @llvm.dbg.label(metadata !4467), !dbg !4468
  %125 = load i32, i32* %14, align 4, !dbg !4469
  switch i32 %125, label %146 [
    i32 225, label %126
    i32 226, label %133
  ], !dbg !4470

126:                                              ; preds = %124
  %127 = load i32*, i32** %11, align 8, !dbg !4471
  %128 = icmp ne i32* %127, null, !dbg !4471
  br i1 %128, label %129, label %132, !dbg !4474

129:                                              ; preds = %126
  %130 = load i32, i32* %20, align 4, !dbg !4475
  %131 = load i32*, i32** %11, align 8, !dbg !4476
  store i32 %130, i32* %131, align 4, !dbg !4477
  br label %132, !dbg !4478

132:                                              ; preds = %129, %126
  br label %146, !dbg !4479

133:                                              ; preds = %124
  %134 = load i8*, i8** %12, align 8, !dbg !4480
  %135 = icmp ne i8* %134, null, !dbg !4480
  br i1 %135, label %136, label %145, !dbg !4482

136:                                              ; preds = %133
  %137 = load i8*, i8** %12, align 8, !dbg !4483
  %138 = load i8*, i8** %25, align 8, !dbg !4485
  %139 = load i8, i8* %26, align 1, !dbg !4486
  %140 = zext i8 %139 to i64, !dbg !4486
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 %138, i64 %140, i1 false), !dbg !4487
  %141 = load i8*, i8** %12, align 8, !dbg !4488
  %142 = load i8, i8* %26, align 1, !dbg !4489
  %143 = zext i8 %142 to i64, !dbg !4488
  %144 = getelementptr inbounds i8, i8* %141, i64 %143, !dbg !4488
  store i8 0, i8* %144, align 1, !dbg !4490
  br label %145, !dbg !4491

145:                                              ; preds = %136, %133
  br label %146, !dbg !4492

146:                                              ; preds = %124, %145, %132
  %147 = load i8*, i8** %22, align 8, !dbg !4493
  %148 = load %struct.binn_struct*, %struct.binn_struct** %13, align 8, !dbg !4494
  %149 = call i32 @_ZL8GetValuePhP11binn_struct(i8* %147, %struct.binn_struct* %148), !dbg !4495
  store i32 %149, i32* %7, align 4, !dbg !4496
  br label %150, !dbg !4496

150:                                              ; preds = %146, %123, %118, %99, %88, %77, %47, %32
  %151 = load i32, i32* %7, align 4, !dbg !4497
  ret i32 %151, !dbg !4497
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_get_pair(i8* %0, i32 %1, i8* %2, %struct.binn_struct* %3) #6 !dbg !4498 {
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4501, metadata !DIExpression()), !dbg !4502
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4503, metadata !DIExpression()), !dbg !4504
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4505, metadata !DIExpression()), !dbg !4506
  store %struct.binn_struct* %3, %struct.binn_struct** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %8, metadata !4507, metadata !DIExpression()), !dbg !4508
  %9 = load i8*, i8** %5, align 8, !dbg !4509
  %10 = load i32, i32* %6, align 4, !dbg !4510
  %11 = load i8*, i8** %7, align 8, !dbg !4511
  %12 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4512
  %13 = call i32 @_ZL14binn_read_pairiPviPiPcP11binn_struct(i32 226, i8* %9, i32 %10, i32* null, i8* %11, %struct.binn_struct* %12), !dbg !4513
  ret i32 %13, !dbg !4514
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_map_pair(i8* %0, i32 %1, i32* %2) #6 !dbg !4515 {
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4518, metadata !DIExpression()), !dbg !4519
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4520, metadata !DIExpression()), !dbg !4521
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !4522, metadata !DIExpression()), !dbg !4523
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %8, metadata !4524, metadata !DIExpression()), !dbg !4525
  %9 = call i8* @_ZL11binn_malloci(i32 80), !dbg !4526
  %10 = bitcast i8* %9 to %struct.binn_struct*, !dbg !4527
  store %struct.binn_struct* %10, %struct.binn_struct** %8, align 8, !dbg !4528
  %11 = load i8*, i8** %5, align 8, !dbg !4529
  %12 = load i32, i32* %6, align 4, !dbg !4531
  %13 = load i32*, i32** %7, align 8, !dbg !4532
  %14 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4533
  %15 = call i32 @_ZL14binn_read_pairiPviPiPcP11binn_struct(i32 225, i8* %11, i32 %12, i32* %13, i8* null, %struct.binn_struct* %14), !dbg !4534
  %16 = icmp eq i32 %15, 0, !dbg !4535
  br i1 %16, label %17, label %21, !dbg !4536

17:                                               ; preds = %3
  %18 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !4537
  %19 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4539
  %20 = bitcast %struct.binn_struct* %19 to i8*, !dbg !4539
  call void %18(i8* %20), !dbg !4537
  store %struct.binn_struct* null, %struct.binn_struct** %4, align 8, !dbg !4540
  br label %25, !dbg !4540

21:                                               ; preds = %3
  %22 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4541
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %22, i32 0, i32 1, !dbg !4542
  store i32 1, i32* %23, align 4, !dbg !4543
  %24 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4544
  store %struct.binn_struct* %24, %struct.binn_struct** %4, align 8, !dbg !4545
  br label %25, !dbg !4545

25:                                               ; preds = %21, %17
  %26 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !4546
  ret %struct.binn_struct* %26, !dbg !4546
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_object_pair(i8* %0, i32 %1, i8* %2) #6 !dbg !4547 {
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4550, metadata !DIExpression()), !dbg !4551
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4552, metadata !DIExpression()), !dbg !4553
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4554, metadata !DIExpression()), !dbg !4555
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %8, metadata !4556, metadata !DIExpression()), !dbg !4557
  %9 = call i8* @_ZL11binn_malloci(i32 80), !dbg !4558
  %10 = bitcast i8* %9 to %struct.binn_struct*, !dbg !4559
  store %struct.binn_struct* %10, %struct.binn_struct** %8, align 8, !dbg !4560
  %11 = load i8*, i8** %5, align 8, !dbg !4561
  %12 = load i32, i32* %6, align 4, !dbg !4563
  %13 = load i8*, i8** %7, align 8, !dbg !4564
  %14 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4565
  %15 = call i32 @_ZL14binn_read_pairiPviPiPcP11binn_struct(i32 226, i8* %11, i32 %12, i32* null, i8* %13, %struct.binn_struct* %14), !dbg !4566
  %16 = icmp eq i32 %15, 0, !dbg !4567
  br i1 %16, label %17, label %21, !dbg !4568

17:                                               ; preds = %3
  %18 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !4569
  %19 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4571
  %20 = bitcast %struct.binn_struct* %19 to i8*, !dbg !4571
  call void %18(i8* %20), !dbg !4569
  store %struct.binn_struct* null, %struct.binn_struct** %4, align 8, !dbg !4572
  br label %25, !dbg !4572

21:                                               ; preds = %3
  %22 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4573
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %22, i32 0, i32 1, !dbg !4574
  store i32 1, i32* %23, align 4, !dbg !4575
  %24 = load %struct.binn_struct*, %struct.binn_struct** %8, align 8, !dbg !4576
  store %struct.binn_struct* %24, %struct.binn_struct** %4, align 8, !dbg !4577
  br label %25, !dbg !4577

25:                                               ; preds = %21, %17
  %26 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !4578
  ret %struct.binn_struct* %26, !dbg !4578
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_map_read_pair(i8* %0, i32 %1, i32* %2, i32* %3, i32* %4) #6 !dbg !4579 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca %struct.binn_struct, align 8
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4582, metadata !DIExpression()), !dbg !4583
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4584, metadata !DIExpression()), !dbg !4585
  store i32* %2, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !4586, metadata !DIExpression()), !dbg !4587
  store i32* %3, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !4588, metadata !DIExpression()), !dbg !4589
  store i32* %4, i32** %11, align 8
  call void @llvm.dbg.declare(metadata i32** %11, metadata !4590, metadata !DIExpression()), !dbg !4591
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %12, metadata !4592, metadata !DIExpression()), !dbg !4593
  %13 = load i8*, i8** %7, align 8, !dbg !4594
  %14 = load i32, i32* %8, align 4, !dbg !4596
  %15 = load i32*, i32** %9, align 8, !dbg !4597
  %16 = call i32 @binn_map_get_pair(i8* %13, i32 %14, i32* %15, %struct.binn_struct* %12), !dbg !4598
  %17 = icmp eq i32 %16, 0, !dbg !4599
  br i1 %17, label %18, label %19, !dbg !4600

18:                                               ; preds = %5
  store i8* null, i8** %6, align 8, !dbg !4601
  br label %35, !dbg !4601

19:                                               ; preds = %5
  %20 = load i32*, i32** %10, align 8, !dbg !4602
  %21 = icmp ne i32* %20, null, !dbg !4602
  br i1 %21, label %22, label %26, !dbg !4604

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 8, !dbg !4605
  %24 = load i32, i32* %23, align 4, !dbg !4605
  %25 = load i32*, i32** %10, align 8, !dbg !4606
  store i32 %24, i32* %25, align 4, !dbg !4607
  br label %26, !dbg !4608

26:                                               ; preds = %22, %19
  %27 = load i32*, i32** %11, align 8, !dbg !4609
  %28 = icmp ne i32* %27, null, !dbg !4609
  br i1 %28, label %29, label %33, !dbg !4611

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 10, !dbg !4612
  %31 = load i32, i32* %30, align 8, !dbg !4612
  %32 = load i32*, i32** %11, align 8, !dbg !4613
  store i32 %31, i32* %32, align 4, !dbg !4614
  br label %33, !dbg !4615

33:                                               ; preds = %29, %26
  %34 = call i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %12), !dbg !4616
  store i8* %34, i8** %6, align 8, !dbg !4617
  br label %35, !dbg !4617

35:                                               ; preds = %33, %18
  %36 = load i8*, i8** %6, align 8, !dbg !4618
  ret i8* %36, !dbg !4618
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %0) #0 !dbg !4619 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.binn_struct*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %3, metadata !4620, metadata !DIExpression()), !dbg !4621
  %4 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !4622
  %5 = bitcast %struct.binn_struct* %4 to i8*, !dbg !4623
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.binn_struct* @local_value to i8*), i8* align 8 %5, i64 80, i1 false), !dbg !4623
  %6 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !4624
  %7 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %6, i32 0, i32 8, !dbg !4625
  %8 = load i32, i32* %7, align 4, !dbg !4625
  %9 = call i32 @binn_get_read_storage(i32 %8), !dbg !4626
  switch i32 %9, label %11 [
    i32 0, label %10
    i32 64, label %10
    i32 96, label %10
    i32 128, label %10
  ], !dbg !4627

10:                                               ; preds = %1, %1, %1, %1
  store i8* bitcast (%union.anon* getelementptr inbounds (%struct.binn_struct, %struct.binn_struct* @local_value, i32 0, i32 13) to i8*), i8** %2, align 8, !dbg !4628
  br label %15, !dbg !4628

11:                                               ; preds = %1
  %12 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !4630
  %13 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 9, !dbg !4631
  %14 = load i8*, i8** %13, align 8, !dbg !4631
  store i8* %14, i8** %2, align 8, !dbg !4632
  br label %15, !dbg !4632

15:                                               ; preds = %11, %10
  %16 = load i8*, i8** %2, align 8, !dbg !4633
  ret i8* %16, !dbg !4633
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @binn_get_read_storage(i32 %0) #0 !dbg !4634 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !4637, metadata !DIExpression()), !dbg !4638
  call void @llvm.dbg.declare(metadata i32* %4, metadata !4639, metadata !DIExpression()), !dbg !4640
  %5 = load i32, i32* %3, align 4, !dbg !4641
  switch i32 %5, label %7 [
    i32 524385, label %6
    i32 1, label %6
    i32 2, label %6
  ], !dbg !4642

6:                                                ; preds = %1, %1, %1
  store i32 96, i32* %2, align 4, !dbg !4643
  br label %11, !dbg !4643

7:                                                ; preds = %1
  %8 = load i32, i32* %3, align 4, !dbg !4645
  %9 = call i32 @binn_get_type_info(i32 %8, i32* %4, i32* null), !dbg !4646
  %10 = load i32, i32* %4, align 4, !dbg !4647
  store i32 %10, i32* %2, align 4, !dbg !4648
  br label %11, !dbg !4648

11:                                               ; preds = %7, %6
  %12 = load i32, i32* %2, align 4, !dbg !4649
  ret i32 %12, !dbg !4649
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_object_read_pair(i8* %0, i32 %1, i8* %2, i32* %3, i32* %4) #6 !dbg !4650 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca %struct.binn_struct, align 8
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4653, metadata !DIExpression()), !dbg !4654
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4655, metadata !DIExpression()), !dbg !4656
  store i8* %2, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !4657, metadata !DIExpression()), !dbg !4658
  store i32* %3, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !4659, metadata !DIExpression()), !dbg !4660
  store i32* %4, i32** %11, align 8
  call void @llvm.dbg.declare(metadata i32** %11, metadata !4661, metadata !DIExpression()), !dbg !4662
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %12, metadata !4663, metadata !DIExpression()), !dbg !4664
  %13 = load i8*, i8** %7, align 8, !dbg !4665
  %14 = load i32, i32* %8, align 4, !dbg !4667
  %15 = load i8*, i8** %9, align 8, !dbg !4668
  %16 = call i32 @binn_object_get_pair(i8* %13, i32 %14, i8* %15, %struct.binn_struct* %12), !dbg !4669
  %17 = icmp eq i32 %16, 0, !dbg !4670
  br i1 %17, label %18, label %19, !dbg !4671

18:                                               ; preds = %5
  store i8* null, i8** %6, align 8, !dbg !4672
  br label %35, !dbg !4672

19:                                               ; preds = %5
  %20 = load i32*, i32** %10, align 8, !dbg !4673
  %21 = icmp ne i32* %20, null, !dbg !4673
  br i1 %21, label %22, label %26, !dbg !4675

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 8, !dbg !4676
  %24 = load i32, i32* %23, align 4, !dbg !4676
  %25 = load i32*, i32** %10, align 8, !dbg !4677
  store i32 %24, i32* %25, align 4, !dbg !4678
  br label %26, !dbg !4679

26:                                               ; preds = %22, %19
  %27 = load i32*, i32** %11, align 8, !dbg !4680
  %28 = icmp ne i32* %27, null, !dbg !4680
  br i1 %28, label %29, label %33, !dbg !4682

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 10, !dbg !4683
  %31 = load i32, i32* %30, align 8, !dbg !4683
  %32 = load i32*, i32** %11, align 8, !dbg !4684
  store i32 %31, i32* %32, align 4, !dbg !4685
  br label %33, !dbg !4686

33:                                               ; preds = %29, %26
  %34 = call i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %12), !dbg !4687
  store i8* %34, i8** %6, align 8, !dbg !4688
  br label %35, !dbg !4688

35:                                               ; preds = %33, %18
  %36 = load i8*, i8** %6, align 8, !dbg !4689
  ret i8* %36, !dbg !4689
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_iter_init(%struct.binn_iter_struct* %0, i8* %1, i32 %2) #6 !dbg !4690 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.binn_iter_struct*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %5, metadata !4702, metadata !DIExpression()), !dbg !4703
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !4704, metadata !DIExpression()), !dbg !4705
  store i32 %2, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !4706, metadata !DIExpression()), !dbg !4707
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4708, metadata !DIExpression()), !dbg !4709
  call void @llvm.dbg.declare(metadata i32* %9, metadata !4710, metadata !DIExpression()), !dbg !4711
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4712, metadata !DIExpression()), !dbg !4713
  store i32 0, i32* %10, align 4, !dbg !4713
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4714, metadata !DIExpression()), !dbg !4715
  %12 = load i8*, i8** %6, align 8, !dbg !4716
  %13 = call i8* @binn_ptr(i8* %12), !dbg !4717
  store i8* %13, i8** %6, align 8, !dbg !4718
  %14 = load i8*, i8** %6, align 8, !dbg !4719
  %15 = icmp eq i8* %14, null, !dbg !4721
  br i1 %15, label %19, label %16, !dbg !4722

16:                                               ; preds = %3
  %17 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %5, align 8, !dbg !4723
  %18 = icmp eq %struct.binn_iter_struct* %17, null, !dbg !4724
  br i1 %18, label %19, label %20, !dbg !4725

19:                                               ; preds = %16, %3
  store i32 0, i32* %4, align 4, !dbg !4726
  br label %54, !dbg !4726

20:                                               ; preds = %16
  %21 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %5, align 8, !dbg !4727
  %22 = bitcast %struct.binn_iter_struct* %21 to i8*, !dbg !4728
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 32, i1 false), !dbg !4728
  %23 = load i8*, i8** %6, align 8, !dbg !4729
  %24 = call i32 @_ZL17IsValidBinnHeaderPvPiS0_S0_S0_(i8* %23, i32* %8, i32* %9, i32* %10, i32* %11), !dbg !4731
  %25 = icmp eq i32 %24, 0, !dbg !4732
  br i1 %25, label %26, label %27, !dbg !4733

26:                                               ; preds = %20
  store i32 0, i32* %4, align 4, !dbg !4734
  br label %54, !dbg !4734

27:                                               ; preds = %20
  %28 = load i32, i32* %8, align 4, !dbg !4735
  %29 = load i32, i32* %7, align 4, !dbg !4737
  %30 = icmp ne i32 %28, %29, !dbg !4738
  br i1 %30, label %31, label %32, !dbg !4739

31:                                               ; preds = %27
  store i32 0, i32* %4, align 4, !dbg !4740
  br label %54, !dbg !4740

32:                                               ; preds = %27
  %33 = load i8*, i8** %6, align 8, !dbg !4741
  %34 = load i32, i32* %10, align 4, !dbg !4742
  %35 = sext i32 %34 to i64, !dbg !4743
  %36 = getelementptr inbounds i8, i8* %33, i64 %35, !dbg !4743
  %37 = getelementptr inbounds i8, i8* %36, i64 -1, !dbg !4744
  %38 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %5, align 8, !dbg !4745
  %39 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %38, i32 0, i32 1, !dbg !4746
  store i8* %37, i8** %39, align 8, !dbg !4747
  %40 = load i8*, i8** %6, align 8, !dbg !4748
  %41 = load i32, i32* %11, align 4, !dbg !4749
  %42 = sext i32 %41 to i64, !dbg !4750
  %43 = getelementptr inbounds i8, i8* %40, i64 %42, !dbg !4750
  %44 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %5, align 8, !dbg !4751
  %45 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %44, i32 0, i32 0, !dbg !4752
  store i8* %43, i8** %45, align 8, !dbg !4753
  %46 = load i32, i32* %9, align 4, !dbg !4754
  %47 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %5, align 8, !dbg !4755
  %48 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %47, i32 0, i32 3, !dbg !4756
  store i32 %46, i32* %48, align 4, !dbg !4757
  %49 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %5, align 8, !dbg !4758
  %50 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %49, i32 0, i32 4, !dbg !4759
  store i32 0, i32* %50, align 8, !dbg !4760
  %51 = load i32, i32* %8, align 4, !dbg !4761
  %52 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %5, align 8, !dbg !4762
  %53 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %52, i32 0, i32 2, !dbg !4763
  store i32 %51, i32* %53, align 8, !dbg !4764
  store i32 1, i32* %4, align 4, !dbg !4765
  br label %54, !dbg !4765

54:                                               ; preds = %32, %31, %26, %19
  %55 = load i32, i32* %4, align 4, !dbg !4766
  ret i32 %55, !dbg !4766
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_next(%struct.binn_iter_struct* %0, %struct.binn_struct* %1) #6 !dbg !4767 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.binn_iter_struct*, align 8
  %5 = alloca %struct.binn_struct*, align 8
  %6 = alloca i8*, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %4, metadata !4770, metadata !DIExpression()), !dbg !4771
  store %struct.binn_struct* %1, %struct.binn_struct** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %5, metadata !4772, metadata !DIExpression()), !dbg !4773
  call void @llvm.dbg.declare(metadata i8** %6, metadata !4774, metadata !DIExpression()), !dbg !4775
  %7 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4776
  %8 = icmp eq %struct.binn_iter_struct* %7, null, !dbg !4778
  br i1 %8, label %35, label %9, !dbg !4779

9:                                                ; preds = %2
  %10 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4780
  %11 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %10, i32 0, i32 0, !dbg !4781
  %12 = load i8*, i8** %11, align 8, !dbg !4781
  %13 = icmp eq i8* %12, null, !dbg !4782
  br i1 %13, label %35, label %14, !dbg !4783

14:                                               ; preds = %9
  %15 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4784
  %16 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %15, i32 0, i32 0, !dbg !4785
  %17 = load i8*, i8** %16, align 8, !dbg !4785
  %18 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4786
  %19 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %18, i32 0, i32 1, !dbg !4787
  %20 = load i8*, i8** %19, align 8, !dbg !4787
  %21 = icmp ugt i8* %17, %20, !dbg !4788
  br i1 %21, label %35, label %22, !dbg !4789

22:                                               ; preds = %14
  %23 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4790
  %24 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %23, i32 0, i32 4, !dbg !4791
  %25 = load i32, i32* %24, align 8, !dbg !4791
  %26 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4792
  %27 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %26, i32 0, i32 3, !dbg !4793
  %28 = load i32, i32* %27, align 4, !dbg !4793
  %29 = icmp sgt i32 %25, %28, !dbg !4794
  br i1 %29, label %35, label %30, !dbg !4795

30:                                               ; preds = %22
  %31 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4796
  %32 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %31, i32 0, i32 2, !dbg !4797
  %33 = load i32, i32* %32, align 8, !dbg !4797
  %34 = icmp ne i32 %33, 224, !dbg !4798
  br i1 %34, label %35, label %36, !dbg !4799

35:                                               ; preds = %30, %22, %14, %9, %2
  store i32 0, i32* %3, align 4, !dbg !4800
  br label %75, !dbg !4800

36:                                               ; preds = %30
  %37 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4801
  %38 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %37, i32 0, i32 4, !dbg !4802
  %39 = load i32, i32* %38, align 8, !dbg !4803
  %40 = add nsw i32 %39, 1, !dbg !4803
  store i32 %40, i32* %38, align 8, !dbg !4803
  %41 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4804
  %42 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %41, i32 0, i32 4, !dbg !4806
  %43 = load i32, i32* %42, align 8, !dbg !4806
  %44 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4807
  %45 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %44, i32 0, i32 3, !dbg !4808
  %46 = load i32, i32* %45, align 4, !dbg !4808
  %47 = icmp sgt i32 %43, %46, !dbg !4809
  br i1 %47, label %48, label %49, !dbg !4810

48:                                               ; preds = %36
  store i32 0, i32* %3, align 4, !dbg !4811
  br label %75, !dbg !4811

49:                                               ; preds = %36
  %50 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4812
  %51 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %50, i32 0, i32 0, !dbg !4813
  %52 = load i8*, i8** %51, align 8, !dbg !4813
  store i8* %52, i8** %6, align 8, !dbg !4814
  %53 = load i8*, i8** %6, align 8, !dbg !4815
  %54 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4816
  %55 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %54, i32 0, i32 1, !dbg !4817
  %56 = load i8*, i8** %55, align 8, !dbg !4817
  %57 = call i8* @_ZL14AdvanceDataPosPhS_(i8* %53, i8* %56), !dbg !4818
  %58 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4819
  %59 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %58, i32 0, i32 0, !dbg !4820
  store i8* %57, i8** %59, align 8, !dbg !4821
  %60 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4822
  %61 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %60, i32 0, i32 0, !dbg !4824
  %62 = load i8*, i8** %61, align 8, !dbg !4824
  %63 = icmp ne i8* %62, null, !dbg !4825
  br i1 %63, label %64, label %71, !dbg !4826

64:                                               ; preds = %49
  %65 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4827
  %66 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %65, i32 0, i32 0, !dbg !4828
  %67 = load i8*, i8** %66, align 8, !dbg !4828
  %68 = load i8*, i8** %6, align 8, !dbg !4829
  %69 = icmp ult i8* %67, %68, !dbg !4830
  br i1 %69, label %70, label %71, !dbg !4831

70:                                               ; preds = %64
  store i32 0, i32* %3, align 4, !dbg !4832
  br label %75, !dbg !4832

71:                                               ; preds = %64, %49
  %72 = load i8*, i8** %6, align 8, !dbg !4833
  %73 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !4834
  %74 = call i32 @_ZL8GetValuePhP11binn_struct(i8* %72, %struct.binn_struct* %73), !dbg !4835
  store i32 %74, i32* %3, align 4, !dbg !4836
  br label %75, !dbg !4836

75:                                               ; preds = %71, %70, %48, %35
  %76 = load i32, i32* %3, align 4, !dbg !4837
  ret i32 %76, !dbg !4837
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_next(%struct.binn_iter_struct* %0, i32* %1, %struct.binn_struct* %2) #6 !dbg !4838 {
  %4 = alloca %struct.binn_iter_struct*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca %struct.binn_struct*, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %4, metadata !4841, metadata !DIExpression()), !dbg !4842
  store i32* %1, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !4843, metadata !DIExpression()), !dbg !4844
  store %struct.binn_struct* %2, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !4845, metadata !DIExpression()), !dbg !4846
  %7 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !4847
  %8 = load i32*, i32** %5, align 8, !dbg !4848
  %9 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !4849
  %10 = call i32 @_ZL19binn_read_next_pairiP16binn_iter_structPiPcP11binn_struct(i32 225, %struct.binn_iter_struct* %7, i32* %8, i8* null, %struct.binn_struct* %9), !dbg !4850
  ret i32 %10, !dbg !4851
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL19binn_read_next_pairiP16binn_iter_structPiPcP11binn_struct(i32 %0, %struct.binn_iter_struct* %1, i32* %2, i8* %3, %struct.binn_struct* %4) #6 !dbg !4852 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.binn_iter_struct*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca %struct.binn_struct*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i16, align 2
  store i32 %0, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !4855, metadata !DIExpression()), !dbg !4856
  store %struct.binn_iter_struct* %1, %struct.binn_iter_struct** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %8, metadata !4857, metadata !DIExpression()), !dbg !4858
  store i32* %2, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !4859, metadata !DIExpression()), !dbg !4860
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !4861, metadata !DIExpression()), !dbg !4862
  store %struct.binn_struct* %4, %struct.binn_struct** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %11, metadata !4863, metadata !DIExpression()), !dbg !4864
  call void @llvm.dbg.declare(metadata i32* %12, metadata !4865, metadata !DIExpression()), !dbg !4866
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4867, metadata !DIExpression()), !dbg !4868
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4871, metadata !DIExpression()), !dbg !4872
  call void @llvm.dbg.declare(metadata i16* %16, metadata !4873, metadata !DIExpression()), !dbg !4874
  %17 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4875
  %18 = icmp eq %struct.binn_iter_struct* %17, null, !dbg !4877
  br i1 %18, label %46, label %19, !dbg !4878

19:                                               ; preds = %5
  %20 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4879
  %21 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %20, i32 0, i32 0, !dbg !4880
  %22 = load i8*, i8** %21, align 8, !dbg !4880
  %23 = icmp eq i8* %22, null, !dbg !4881
  br i1 %23, label %46, label %24, !dbg !4882

24:                                               ; preds = %19
  %25 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4883
  %26 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %25, i32 0, i32 0, !dbg !4884
  %27 = load i8*, i8** %26, align 8, !dbg !4884
  %28 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4885
  %29 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %28, i32 0, i32 1, !dbg !4886
  %30 = load i8*, i8** %29, align 8, !dbg !4886
  %31 = icmp ugt i8* %27, %30, !dbg !4887
  br i1 %31, label %46, label %32, !dbg !4888

32:                                               ; preds = %24
  %33 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4889
  %34 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %33, i32 0, i32 4, !dbg !4890
  %35 = load i32, i32* %34, align 8, !dbg !4890
  %36 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4891
  %37 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %36, i32 0, i32 3, !dbg !4892
  %38 = load i32, i32* %37, align 4, !dbg !4892
  %39 = icmp sgt i32 %35, %38, !dbg !4893
  br i1 %39, label %46, label %40, !dbg !4894

40:                                               ; preds = %32
  %41 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4895
  %42 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %41, i32 0, i32 2, !dbg !4896
  %43 = load i32, i32* %42, align 8, !dbg !4896
  %44 = load i32, i32* %7, align 4, !dbg !4897
  %45 = icmp ne i32 %43, %44, !dbg !4898
  br i1 %45, label %46, label %47, !dbg !4899

46:                                               ; preds = %40, %32, %24, %19, %5
  store i32 0, i32* %6, align 4, !dbg !4900
  br label %141, !dbg !4900

47:                                               ; preds = %40
  %48 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4901
  %49 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %48, i32 0, i32 4, !dbg !4902
  %50 = load i32, i32* %49, align 8, !dbg !4903
  %51 = add nsw i32 %50, 1, !dbg !4903
  store i32 %51, i32* %49, align 8, !dbg !4903
  %52 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4904
  %53 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %52, i32 0, i32 4, !dbg !4906
  %54 = load i32, i32* %53, align 8, !dbg !4906
  %55 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4907
  %56 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %55, i32 0, i32 3, !dbg !4908
  %57 = load i32, i32* %56, align 4, !dbg !4908
  %58 = icmp sgt i32 %54, %57, !dbg !4909
  br i1 %58, label %59, label %60, !dbg !4910

59:                                               ; preds = %47
  store i32 0, i32* %6, align 4, !dbg !4911
  br label %141, !dbg !4911

60:                                               ; preds = %47
  %61 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4912
  %62 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %61, i32 0, i32 0, !dbg !4913
  %63 = load i8*, i8** %62, align 8, !dbg !4913
  store i8* %63, i8** %14, align 8, !dbg !4914
  %64 = load i32, i32* %7, align 4, !dbg !4915
  switch i32 %64, label %118 [
    i32 225, label %65
    i32 226, label %87
  ], !dbg !4916

65:                                               ; preds = %60
  %66 = load i8*, i8** %14, align 8, !dbg !4917
  %67 = bitcast i8* %66 to i32*, !dbg !4919
  %68 = load i32, i32* %67, align 4, !dbg !4919
  store i32 %68, i32* %12, align 4, !dbg !4920
  %69 = load i8*, i8** %14, align 8, !dbg !4921
  %70 = getelementptr inbounds i8, i8* %69, i64 4, !dbg !4921
  store i8* %70, i8** %14, align 8, !dbg !4921
  %71 = load i32, i32* %12, align 4, !dbg !4922
  %72 = call i32 @_ZL6tobe32j(i32 %71), !dbg !4923
  store i32 %72, i32* %12, align 4, !dbg !4924
  %73 = load i8*, i8** %14, align 8, !dbg !4925
  %74 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4927
  %75 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %74, i32 0, i32 1, !dbg !4928
  %76 = load i8*, i8** %75, align 8, !dbg !4928
  %77 = icmp ugt i8* %73, %76, !dbg !4929
  br i1 %77, label %78, label %79, !dbg !4930

78:                                               ; preds = %65
  store i32 0, i32* %6, align 4, !dbg !4931
  br label %141, !dbg !4931

79:                                               ; preds = %65
  %80 = load i32, i32* %12, align 4, !dbg !4932
  store i32 %80, i32* %13, align 4, !dbg !4933
  %81 = load i32*, i32** %9, align 8, !dbg !4934
  %82 = icmp ne i32* %81, null, !dbg !4934
  br i1 %82, label %83, label %86, !dbg !4936

83:                                               ; preds = %79
  %84 = load i32, i32* %13, align 4, !dbg !4937
  %85 = load i32*, i32** %9, align 8, !dbg !4938
  store i32 %84, i32* %85, align 4, !dbg !4939
  br label %86, !dbg !4940

86:                                               ; preds = %83, %79
  br label %118, !dbg !4941

87:                                               ; preds = %60
  %88 = load i8*, i8** %14, align 8, !dbg !4942
  %89 = load i8, i8* %88, align 1, !dbg !4943
  %90 = zext i8 %89 to i16, !dbg !4943
  store i16 %90, i16* %16, align 2, !dbg !4944
  %91 = load i8*, i8** %14, align 8, !dbg !4945
  %92 = getelementptr inbounds i8, i8* %91, i32 1, !dbg !4945
  store i8* %92, i8** %14, align 8, !dbg !4945
  %93 = load i8*, i8** %14, align 8, !dbg !4946
  store i8* %93, i8** %15, align 8, !dbg !4947
  %94 = load i16, i16* %16, align 2, !dbg !4948
  %95 = zext i16 %94 to i32, !dbg !4948
  %96 = load i8*, i8** %14, align 8, !dbg !4949
  %97 = sext i32 %95 to i64, !dbg !4949
  %98 = getelementptr inbounds i8, i8* %96, i64 %97, !dbg !4949
  store i8* %98, i8** %14, align 8, !dbg !4949
  %99 = load i8*, i8** %14, align 8, !dbg !4950
  %100 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4952
  %101 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %100, i32 0, i32 1, !dbg !4953
  %102 = load i8*, i8** %101, align 8, !dbg !4953
  %103 = icmp ugt i8* %99, %102, !dbg !4954
  br i1 %103, label %104, label %105, !dbg !4955

104:                                              ; preds = %87
  store i32 0, i32* %6, align 4, !dbg !4956
  br label %141, !dbg !4956

105:                                              ; preds = %87
  %106 = load i8*, i8** %10, align 8, !dbg !4957
  %107 = icmp ne i8* %106, null, !dbg !4957
  br i1 %107, label %108, label %117, !dbg !4959

108:                                              ; preds = %105
  %109 = load i8*, i8** %10, align 8, !dbg !4960
  %110 = load i8*, i8** %15, align 8, !dbg !4962
  %111 = load i16, i16* %16, align 2, !dbg !4963
  %112 = zext i16 %111 to i64, !dbg !4963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %109, i8* align 1 %110, i64 %112, i1 false), !dbg !4964
  %113 = load i8*, i8** %10, align 8, !dbg !4965
  %114 = load i16, i16* %16, align 2, !dbg !4966
  %115 = zext i16 %114 to i64, !dbg !4965
  %116 = getelementptr inbounds i8, i8* %113, i64 %115, !dbg !4965
  store i8 0, i8* %116, align 1, !dbg !4967
  br label %117, !dbg !4968

117:                                              ; preds = %108, %105
  br label %118, !dbg !4969

118:                                              ; preds = %60, %117, %86
  %119 = load i8*, i8** %14, align 8, !dbg !4970
  %120 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4971
  %121 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %120, i32 0, i32 1, !dbg !4972
  %122 = load i8*, i8** %121, align 8, !dbg !4972
  %123 = call i8* @_ZL14AdvanceDataPosPhS_(i8* %119, i8* %122), !dbg !4973
  %124 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4974
  %125 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %124, i32 0, i32 0, !dbg !4975
  store i8* %123, i8** %125, align 8, !dbg !4976
  %126 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4977
  %127 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %126, i32 0, i32 0, !dbg !4979
  %128 = load i8*, i8** %127, align 8, !dbg !4979
  %129 = icmp ne i8* %128, null, !dbg !4980
  br i1 %129, label %130, label %137, !dbg !4981

130:                                              ; preds = %118
  %131 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %8, align 8, !dbg !4982
  %132 = getelementptr inbounds %struct.binn_iter_struct, %struct.binn_iter_struct* %131, i32 0, i32 0, !dbg !4983
  %133 = load i8*, i8** %132, align 8, !dbg !4983
  %134 = load i8*, i8** %14, align 8, !dbg !4984
  %135 = icmp ult i8* %133, %134, !dbg !4985
  br i1 %135, label %136, label %137, !dbg !4986

136:                                              ; preds = %130
  store i32 0, i32* %6, align 4, !dbg !4987
  br label %141, !dbg !4987

137:                                              ; preds = %130, %118
  %138 = load i8*, i8** %14, align 8, !dbg !4988
  %139 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !4989
  %140 = call i32 @_ZL8GetValuePhP11binn_struct(i8* %138, %struct.binn_struct* %139), !dbg !4990
  store i32 %140, i32* %6, align 4, !dbg !4991
  br label %141, !dbg !4991

141:                                              ; preds = %137, %136, %104, %78, %59, %46
  %142 = load i32, i32* %6, align 4, !dbg !4992
  ret i32 %142, !dbg !4992
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_next(%struct.binn_iter_struct* %0, i8* %1, %struct.binn_struct* %2) #6 !dbg !4993 {
  %4 = alloca %struct.binn_iter_struct*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.binn_struct*, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %4, metadata !4996, metadata !DIExpression()), !dbg !4997
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4998, metadata !DIExpression()), !dbg !4999
  store %struct.binn_struct* %2, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !5000, metadata !DIExpression()), !dbg !5001
  %7 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !5002
  %8 = load i8*, i8** %5, align 8, !dbg !5003
  %9 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5004
  %10 = call i32 @_ZL19binn_read_next_pairiP16binn_iter_structPiPcP11binn_struct(i32 226, %struct.binn_iter_struct* %7, i32* null, i8* %8, %struct.binn_struct* %9), !dbg !5005
  ret i32 %10, !dbg !5006
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_list_next_value(%struct.binn_iter_struct* %0) #6 !dbg !5007 {
  %2 = alloca %struct.binn_struct*, align 8
  %3 = alloca %struct.binn_iter_struct*, align 8
  %4 = alloca %struct.binn_struct*, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %3, metadata !5010, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !5012, metadata !DIExpression()), !dbg !5013
  %5 = call i8* @_ZL11binn_malloci(i32 80), !dbg !5014
  %6 = bitcast i8* %5 to %struct.binn_struct*, !dbg !5015
  store %struct.binn_struct* %6, %struct.binn_struct** %4, align 8, !dbg !5016
  %7 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %3, align 8, !dbg !5017
  %8 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5019
  %9 = call i32 @binn_list_next(%struct.binn_iter_struct* %7, %struct.binn_struct* %8), !dbg !5020
  %10 = icmp eq i32 %9, 0, !dbg !5021
  br i1 %10, label %11, label %15, !dbg !5022

11:                                               ; preds = %1
  %12 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !5023
  %13 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5025
  %14 = bitcast %struct.binn_struct* %13 to i8*, !dbg !5025
  call void %12(i8* %14), !dbg !5023
  store %struct.binn_struct* null, %struct.binn_struct** %2, align 8, !dbg !5026
  br label %19, !dbg !5026

15:                                               ; preds = %1
  %16 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5027
  %17 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %16, i32 0, i32 1, !dbg !5028
  store i32 1, i32* %17, align 4, !dbg !5029
  %18 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5030
  store %struct.binn_struct* %18, %struct.binn_struct** %2, align 8, !dbg !5031
  br label %19, !dbg !5031

19:                                               ; preds = %15, %11
  %20 = load %struct.binn_struct*, %struct.binn_struct** %2, align 8, !dbg !5032
  ret %struct.binn_struct* %20, !dbg !5032
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_map_next_value(%struct.binn_iter_struct* %0, i32* %1) #6 !dbg !5033 {
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca %struct.binn_iter_struct*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca %struct.binn_struct*, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %4, metadata !5036, metadata !DIExpression()), !dbg !5037
  store i32* %1, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !5038, metadata !DIExpression()), !dbg !5039
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !5040, metadata !DIExpression()), !dbg !5041
  %7 = call i8* @_ZL11binn_malloci(i32 80), !dbg !5042
  %8 = bitcast i8* %7 to %struct.binn_struct*, !dbg !5043
  store %struct.binn_struct* %8, %struct.binn_struct** %6, align 8, !dbg !5044
  %9 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !5045
  %10 = load i32*, i32** %5, align 8, !dbg !5047
  %11 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5048
  %12 = call i32 @binn_map_next(%struct.binn_iter_struct* %9, i32* %10, %struct.binn_struct* %11), !dbg !5049
  %13 = icmp eq i32 %12, 0, !dbg !5050
  br i1 %13, label %14, label %18, !dbg !5051

14:                                               ; preds = %2
  %15 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !5052
  %16 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5054
  %17 = bitcast %struct.binn_struct* %16 to i8*, !dbg !5054
  call void %15(i8* %17), !dbg !5052
  store %struct.binn_struct* null, %struct.binn_struct** %3, align 8, !dbg !5055
  br label %22, !dbg !5055

18:                                               ; preds = %2
  %19 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5056
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %19, i32 0, i32 1, !dbg !5057
  store i32 1, i32* %20, align 4, !dbg !5058
  %21 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5059
  store %struct.binn_struct* %21, %struct.binn_struct** %3, align 8, !dbg !5060
  br label %22, !dbg !5060

22:                                               ; preds = %18, %14
  %23 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !5061
  ret %struct.binn_struct* %23, !dbg !5061
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_object_next_value(%struct.binn_iter_struct* %0, i8* %1) #6 !dbg !5062 {
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca %struct.binn_iter_struct*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.binn_struct*, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %4, metadata !5065, metadata !DIExpression()), !dbg !5066
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !5067, metadata !DIExpression()), !dbg !5068
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !5069, metadata !DIExpression()), !dbg !5070
  %7 = call i8* @_ZL11binn_malloci(i32 80), !dbg !5071
  %8 = bitcast i8* %7 to %struct.binn_struct*, !dbg !5072
  store %struct.binn_struct* %8, %struct.binn_struct** %6, align 8, !dbg !5073
  %9 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %4, align 8, !dbg !5074
  %10 = load i8*, i8** %5, align 8, !dbg !5076
  %11 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5077
  %12 = call i32 @binn_object_next(%struct.binn_iter_struct* %9, i8* %10, %struct.binn_struct* %11), !dbg !5078
  %13 = icmp eq i32 %12, 0, !dbg !5079
  br i1 %13, label %14, label %18, !dbg !5080

14:                                               ; preds = %2
  %15 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !5081
  %16 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5083
  %17 = bitcast %struct.binn_struct* %16 to i8*, !dbg !5083
  call void %15(i8* %17), !dbg !5081
  store %struct.binn_struct* null, %struct.binn_struct** %3, align 8, !dbg !5084
  br label %22, !dbg !5084

18:                                               ; preds = %2
  %19 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5085
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %19, i32 0, i32 1, !dbg !5086
  store i32 1, i32* %20, align 4, !dbg !5087
  %21 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5088
  store %struct.binn_struct* %21, %struct.binn_struct** %3, align 8, !dbg !5089
  br label %22, !dbg !5089

22:                                               ; preds = %18, %14
  %23 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !5090
  ret %struct.binn_struct* %23, !dbg !5090
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_list_read_next(%struct.binn_iter_struct* %0, i32* %1, i32* %2) #6 !dbg !5091 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.binn_iter_struct*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca %struct.binn_struct, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %5, metadata !5094, metadata !DIExpression()), !dbg !5095
  store i32* %1, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !5096, metadata !DIExpression()), !dbg !5097
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !5098, metadata !DIExpression()), !dbg !5099
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %8, metadata !5100, metadata !DIExpression()), !dbg !5101
  %9 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %5, align 8, !dbg !5102
  %10 = call i32 @binn_list_next(%struct.binn_iter_struct* %9, %struct.binn_struct* %8), !dbg !5104
  %11 = icmp eq i32 %10, 0, !dbg !5105
  br i1 %11, label %12, label %13, !dbg !5106

12:                                               ; preds = %3
  store i8* null, i8** %4, align 8, !dbg !5107
  br label %29, !dbg !5107

13:                                               ; preds = %3
  %14 = load i32*, i32** %6, align 8, !dbg !5108
  %15 = icmp ne i32* %14, null, !dbg !5108
  br i1 %15, label %16, label %20, !dbg !5110

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %8, i32 0, i32 8, !dbg !5111
  %18 = load i32, i32* %17, align 4, !dbg !5111
  %19 = load i32*, i32** %6, align 8, !dbg !5112
  store i32 %18, i32* %19, align 4, !dbg !5113
  br label %20, !dbg !5114

20:                                               ; preds = %16, %13
  %21 = load i32*, i32** %7, align 8, !dbg !5115
  %22 = icmp ne i32* %21, null, !dbg !5115
  br i1 %22, label %23, label %27, !dbg !5117

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %8, i32 0, i32 10, !dbg !5118
  %25 = load i32, i32* %24, align 8, !dbg !5118
  %26 = load i32*, i32** %7, align 8, !dbg !5119
  store i32 %25, i32* %26, align 4, !dbg !5120
  br label %27, !dbg !5121

27:                                               ; preds = %23, %20
  %28 = call i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %8), !dbg !5122
  store i8* %28, i8** %4, align 8, !dbg !5123
  br label %29, !dbg !5123

29:                                               ; preds = %27, %12
  %30 = load i8*, i8** %4, align 8, !dbg !5124
  ret i8* %30, !dbg !5124
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_map_read_next(%struct.binn_iter_struct* %0, i32* %1, i32* %2, i32* %3) #6 !dbg !5125 {
  %5 = alloca i8*, align 8
  %6 = alloca %struct.binn_iter_struct*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca %struct.binn_struct, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %6, metadata !5128, metadata !DIExpression()), !dbg !5129
  store i32* %1, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !5130, metadata !DIExpression()), !dbg !5131
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !5132, metadata !DIExpression()), !dbg !5133
  store i32* %3, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !5134, metadata !DIExpression()), !dbg !5135
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %10, metadata !5136, metadata !DIExpression()), !dbg !5137
  %11 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %6, align 8, !dbg !5138
  %12 = load i32*, i32** %7, align 8, !dbg !5140
  %13 = call i32 @binn_map_next(%struct.binn_iter_struct* %11, i32* %12, %struct.binn_struct* %10), !dbg !5141
  %14 = icmp eq i32 %13, 0, !dbg !5142
  br i1 %14, label %15, label %16, !dbg !5143

15:                                               ; preds = %4
  store i8* null, i8** %5, align 8, !dbg !5144
  br label %32, !dbg !5144

16:                                               ; preds = %4
  %17 = load i32*, i32** %8, align 8, !dbg !5145
  %18 = icmp ne i32* %17, null, !dbg !5145
  br i1 %18, label %19, label %23, !dbg !5147

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 8, !dbg !5148
  %21 = load i32, i32* %20, align 4, !dbg !5148
  %22 = load i32*, i32** %8, align 8, !dbg !5149
  store i32 %21, i32* %22, align 4, !dbg !5150
  br label %23, !dbg !5151

23:                                               ; preds = %19, %16
  %24 = load i32*, i32** %9, align 8, !dbg !5152
  %25 = icmp ne i32* %24, null, !dbg !5152
  br i1 %25, label %26, label %30, !dbg !5154

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 10, !dbg !5155
  %28 = load i32, i32* %27, align 8, !dbg !5155
  %29 = load i32*, i32** %9, align 8, !dbg !5156
  store i32 %28, i32* %29, align 4, !dbg !5157
  br label %30, !dbg !5158

30:                                               ; preds = %26, %23
  %31 = call i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %10), !dbg !5159
  store i8* %31, i8** %5, align 8, !dbg !5160
  br label %32, !dbg !5160

32:                                               ; preds = %30, %15
  %33 = load i8*, i8** %5, align 8, !dbg !5161
  ret i8* %33, !dbg !5161
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_object_read_next(%struct.binn_iter_struct* %0, i8* %1, i32* %2, i32* %3) #6 !dbg !5162 {
  %5 = alloca i8*, align 8
  %6 = alloca %struct.binn_iter_struct*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca %struct.binn_struct, align 8
  store %struct.binn_iter_struct* %0, %struct.binn_iter_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_iter_struct** %6, metadata !5165, metadata !DIExpression()), !dbg !5166
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !5167, metadata !DIExpression()), !dbg !5168
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !5169, metadata !DIExpression()), !dbg !5170
  store i32* %3, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !5171, metadata !DIExpression()), !dbg !5172
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %10, metadata !5173, metadata !DIExpression()), !dbg !5174
  %11 = load %struct.binn_iter_struct*, %struct.binn_iter_struct** %6, align 8, !dbg !5175
  %12 = load i8*, i8** %7, align 8, !dbg !5177
  %13 = call i32 @binn_object_next(%struct.binn_iter_struct* %11, i8* %12, %struct.binn_struct* %10), !dbg !5178
  %14 = icmp eq i32 %13, 0, !dbg !5179
  br i1 %14, label %15, label %16, !dbg !5180

15:                                               ; preds = %4
  store i8* null, i8** %5, align 8, !dbg !5181
  br label %32, !dbg !5181

16:                                               ; preds = %4
  %17 = load i32*, i32** %8, align 8, !dbg !5182
  %18 = icmp ne i32* %17, null, !dbg !5182
  br i1 %18, label %19, label %23, !dbg !5184

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 8, !dbg !5185
  %21 = load i32, i32* %20, align 4, !dbg !5185
  %22 = load i32*, i32** %8, align 8, !dbg !5186
  store i32 %21, i32* %22, align 4, !dbg !5187
  br label %23, !dbg !5188

23:                                               ; preds = %19, %16
  %24 = load i32*, i32** %9, align 8, !dbg !5189
  %25 = icmp ne i32* %24, null, !dbg !5189
  br i1 %25, label %26, label %30, !dbg !5191

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 10, !dbg !5192
  %28 = load i32, i32* %27, align 8, !dbg !5192
  %29 = load i32*, i32** %9, align 8, !dbg !5193
  store i32 %28, i32* %29, align 4, !dbg !5194
  br label %30, !dbg !5195

30:                                               ; preds = %26, %23
  %31 = call i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %10), !dbg !5196
  store i8* %31, i8** %5, align 8, !dbg !5197
  br label %32, !dbg !5197

32:                                               ; preds = %30, %15
  %33 = load i8*, i8** %5, align 8, !dbg !5198
  ret i8* %33, !dbg !5198
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @binn_get_write_storage(i32 %0) #0 !dbg !5199 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !5200, metadata !DIExpression()), !dbg !5201
  call void @llvm.dbg.declare(metadata i32* %4, metadata !5202, metadata !DIExpression()), !dbg !5203
  %5 = load i32, i32* %3, align 4, !dbg !5204
  switch i32 %5, label %8 [
    i32 166, label %6
    i32 167, label %6
    i32 524385, label %7
  ], !dbg !5205

6:                                                ; preds = %1, %1
  store i32 160, i32* %2, align 4, !dbg !5206
  br label %12, !dbg !5206

7:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !5208
  br label %12, !dbg !5208

8:                                                ; preds = %1
  %9 = load i32, i32* %3, align 4, !dbg !5209
  %10 = call i32 @binn_get_type_info(i32 %9, i32* %4, i32* null), !dbg !5210
  %11 = load i32, i32* %4, align 4, !dbg !5211
  store i32 %11, i32* %2, align 4, !dbg !5212
  br label %12, !dbg !5212

12:                                               ; preds = %8, %7, %6
  %13 = load i32, i32* %2, align 4, !dbg !5213
  ret i32 %13, !dbg !5213
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_add(%struct.binn_struct* %0, i32 %1, i8* %2, i32 %3) #6 !dbg !5214 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.binn_struct*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !5217, metadata !DIExpression()), !dbg !5218
  store i32 %1, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !5219, metadata !DIExpression()), !dbg !5220
  store i8* %2, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !5221, metadata !DIExpression()), !dbg !5222
  store i32 %3, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !5223, metadata !DIExpression()), !dbg !5224
  %10 = call i32 @_ZL21GetWriteConvertedDataPiPPvS_(i32* %7, i8** %8, i32* %9), !dbg !5225
  %11 = icmp eq i32 %10, 0, !dbg !5227
  br i1 %11, label %12, label %13, !dbg !5228

12:                                               ; preds = %4
  store i32 0, i32* %5, align 4, !dbg !5229
  br label %19, !dbg !5229

13:                                               ; preds = %4
  %14 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5230
  %15 = load i32, i32* %7, align 4, !dbg !5231
  %16 = load i8*, i8** %8, align 8, !dbg !5232
  %17 = load i32, i32* %9, align 4, !dbg !5233
  %18 = call i32 @_ZL17binn_list_add_rawP11binn_structiPvi(%struct.binn_struct* %14, i32 %15, i8* %16, i32 %17), !dbg !5234
  store i32 %18, i32* %5, align 4, !dbg !5235
  br label %19, !dbg !5235

19:                                               ; preds = %13, %12
  %20 = load i32, i32* %5, align 4, !dbg !5236
  ret i32 %20, !dbg !5236
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL21GetWriteConvertedDataPiPPvS_(i32* %0, i8** %1, i32* %2) #0 !dbg !5237 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i8**, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = alloca double, align 8
  %11 = alloca [128 x i8], align 16
  store i32* %0, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !5241, metadata !DIExpression()), !dbg !5242
  store i8** %1, i8*** %6, align 8
  call void @llvm.dbg.declare(metadata i8*** %6, metadata !5243, metadata !DIExpression()), !dbg !5244
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !5245, metadata !DIExpression()), !dbg !5246
  call void @llvm.dbg.declare(metadata i32* %8, metadata !5247, metadata !DIExpression()), !dbg !5248
  call void @llvm.dbg.declare(metadata float* %9, metadata !5249, metadata !DIExpression()), !dbg !5250
  call void @llvm.dbg.declare(metadata double* %10, metadata !5251, metadata !DIExpression()), !dbg !5252
  call void @llvm.dbg.declare(metadata [128 x i8]* %11, metadata !5253, metadata !DIExpression()), !dbg !5257
  %12 = load i32*, i32** %5, align 8, !dbg !5258
  %13 = load i32, i32* %12, align 4, !dbg !5259
  store i32 %13, i32* %8, align 4, !dbg !5260
  %14 = load i8**, i8*** %6, align 8, !dbg !5261
  %15 = load i8*, i8** %14, align 8, !dbg !5263
  %16 = icmp eq i8* %15, null, !dbg !5264
  br i1 %16, label %17, label %28, !dbg !5265

17:                                               ; preds = %3
  %18 = load i32, i32* %8, align 4, !dbg !5266
  switch i32 %18, label %26 [
    i32 0, label %19
    i32 1, label %19
    i32 2, label %19
    i32 160, label %20
    i32 192, label %20
  ], !dbg !5268

19:                                               ; preds = %17, %17, %17
  br label %27, !dbg !5269

20:                                               ; preds = %17, %17
  %21 = load i32*, i32** %7, align 8, !dbg !5271
  %22 = load i32, i32* %21, align 4, !dbg !5273
  %23 = icmp eq i32 %22, 0, !dbg !5274
  br i1 %23, label %24, label %25, !dbg !5275

24:                                               ; preds = %20
  br label %27, !dbg !5276

25:                                               ; preds = %20
  br label %26, !dbg !5277

26:                                               ; preds = %17, %25
  store i32 0, i32* %4, align 4, !dbg !5278
  br label %44, !dbg !5278

27:                                               ; preds = %24, %19
  br label %28, !dbg !5279

28:                                               ; preds = %27, %3
  %29 = load i32, i32* %8, align 4, !dbg !5280
  switch i32 %29, label %43 [
    i32 164, label %30
    i32 165, label %30
    i32 162, label %31
    i32 161, label %31
    i32 163, label %31
    i32 524385, label %32
  ], !dbg !5281

30:                                               ; preds = %28, %28
  store i32 1, i32* %4, align 4, !dbg !5282
  br label %44, !dbg !5282

31:                                               ; preds = %28, %28, %28
  store i32 1, i32* %4, align 4, !dbg !5284
  br label %44, !dbg !5284

32:                                               ; preds = %28
  %33 = load i8**, i8*** %6, align 8, !dbg !5285
  %34 = bitcast i8** %33 to i32**, !dbg !5287
  %35 = load i32*, i32** %34, align 8, !dbg !5287
  %36 = load i32, i32* %35, align 4, !dbg !5288
  %37 = icmp eq i32 %36, 0, !dbg !5289
  br i1 %37, label %38, label %39, !dbg !5290

38:                                               ; preds = %32
  store i32 2, i32* %8, align 4, !dbg !5291
  br label %40, !dbg !5293

39:                                               ; preds = %32
  store i32 1, i32* %8, align 4, !dbg !5294
  br label %40

40:                                               ; preds = %39, %38
  %41 = load i32, i32* %8, align 4, !dbg !5296
  %42 = load i32*, i32** %5, align 8, !dbg !5297
  store i32 %41, i32* %42, align 4, !dbg !5298
  br label %43, !dbg !5299

43:                                               ; preds = %28, %40
  store i32 1, i32* %4, align 4, !dbg !5300
  br label %44, !dbg !5300

44:                                               ; preds = %43, %31, %30, %26
  %45 = load i32, i32* %4, align 4, !dbg !5301
  ret i32 %45, !dbg !5301
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL17binn_list_add_rawP11binn_structiPvi(%struct.binn_struct* %0, i32 %1, i8* %2, i32 %3) #6 !dbg !5302 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.binn_struct*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !5303, metadata !DIExpression()), !dbg !5304
  store i32 %1, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !5305, metadata !DIExpression()), !dbg !5306
  store i8* %2, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !5307, metadata !DIExpression()), !dbg !5308
  store i32 %3, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !5309, metadata !DIExpression()), !dbg !5310
  %10 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5311
  %11 = icmp eq %struct.binn_struct* %10, null, !dbg !5313
  br i1 %11, label %22, label %12, !dbg !5314

12:                                               ; preds = %4
  %13 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5315
  %14 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %13, i32 0, i32 8, !dbg !5316
  %15 = load i32, i32* %14, align 4, !dbg !5316
  %16 = icmp ne i32 %15, 224, !dbg !5317
  br i1 %16, label %22, label %17, !dbg !5318

17:                                               ; preds = %12
  %18 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5319
  %19 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %18, i32 0, i32 2, !dbg !5320
  %20 = load i32, i32* %19, align 8, !dbg !5320
  %21 = icmp eq i32 %20, 0, !dbg !5321
  br i1 %21, label %22, label %23, !dbg !5322

22:                                               ; preds = %17, %12, %4
  store i32 0, i32* %5, align 4, !dbg !5323
  br label %36, !dbg !5323

23:                                               ; preds = %17
  %24 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5324
  %25 = load i32, i32* %7, align 4, !dbg !5326
  %26 = load i8*, i8** %8, align 8, !dbg !5327
  %27 = load i32, i32* %9, align 4, !dbg !5328
  %28 = call i32 @_ZL8AddValueP11binn_structiPvi(%struct.binn_struct* %24, i32 %25, i8* %26, i32 %27), !dbg !5329
  %29 = icmp eq i32 %28, 0, !dbg !5330
  br i1 %29, label %30, label %31, !dbg !5331

30:                                               ; preds = %23
  store i32 0, i32* %5, align 4, !dbg !5332
  br label %36, !dbg !5332

31:                                               ; preds = %23
  %32 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5333
  %33 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %32, i32 0, i32 11, !dbg !5334
  %34 = load i32, i32* %33, align 4, !dbg !5335
  %35 = add nsw i32 %34, 1, !dbg !5335
  store i32 %35, i32* %33, align 4, !dbg !5335
  store i32 1, i32* %5, align 4, !dbg !5336
  br label %36, !dbg !5336

36:                                               ; preds = %31, %30, %22
  %37 = load i32, i32* %5, align 4, !dbg !5337
  ret i32 %37, !dbg !5337
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL8AddValueP11binn_structiPvi(%struct.binn_struct* %0, i32 %1, i8* %2, i32 %3) #6 !dbg !5338 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.binn_struct*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i16, align 2
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !5339, metadata !DIExpression()), !dbg !5340
  store i32 %1, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !5341, metadata !DIExpression()), !dbg !5342
  store i8* %2, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !5343, metadata !DIExpression()), !dbg !5344
  store i32 %3, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !5345, metadata !DIExpression()), !dbg !5346
  call void @llvm.dbg.declare(metadata i32* %10, metadata !5347, metadata !DIExpression()), !dbg !5348
  call void @llvm.dbg.declare(metadata i32* %11, metadata !5349, metadata !DIExpression()), !dbg !5350
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5351, metadata !DIExpression()), !dbg !5352
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5353, metadata !DIExpression()), !dbg !5354
  call void @llvm.dbg.declare(metadata i16* %14, metadata !5355, metadata !DIExpression()), !dbg !5356
  call void @llvm.dbg.declare(metadata i64* %15, metadata !5357, metadata !DIExpression()), !dbg !5358
  call void @llvm.dbg.declare(metadata i8** %16, metadata !5359, metadata !DIExpression()), !dbg !5360
  call void @llvm.dbg.declare(metadata i8** %17, metadata !5361, metadata !DIExpression()), !dbg !5362
  %18 = load i32, i32* %7, align 4, !dbg !5363
  %19 = call i32 @binn_get_type_info(i32 %18, i32* %12, i32* %13), !dbg !5364
  %20 = load i8*, i8** %8, align 8, !dbg !5365
  %21 = icmp eq i8* %20, null, !dbg !5367
  br i1 %21, label %22, label %32, !dbg !5368

22:                                               ; preds = %4
  %23 = load i32, i32* %12, align 4, !dbg !5369
  switch i32 %23, label %30 [
    i32 0, label %24
    i32 192, label %25
    i32 160, label %25
  ], !dbg !5371

24:                                               ; preds = %22
  br label %31, !dbg !5372

25:                                               ; preds = %22, %22
  %26 = load i32, i32* %9, align 4, !dbg !5374
  %27 = icmp eq i32 %26, 0, !dbg !5376
  br i1 %27, label %28, label %29, !dbg !5377

28:                                               ; preds = %25
  br label %31, !dbg !5378

29:                                               ; preds = %25
  br label %30, !dbg !5379

30:                                               ; preds = %22, %29
  store i32 0, i32* %5, align 4, !dbg !5380
  br label %258, !dbg !5380

31:                                               ; preds = %28, %24
  br label %32, !dbg !5381

32:                                               ; preds = %31, %4
  %33 = load i32, i32* %7, align 4, !dbg !5382
  %34 = call i32 @_ZL11type_familyi(i32 %33), !dbg !5384
  %35 = icmp eq i32 %34, 242, !dbg !5385
  br i1 %35, label %36, label %44, !dbg !5386

36:                                               ; preds = %32
  %37 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5387
  %38 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %37, i32 0, i32 14, !dbg !5388
  %39 = load i32, i32* %38, align 8, !dbg !5388
  %40 = icmp eq i32 %39, 0, !dbg !5389
  br i1 %40, label %41, label %44, !dbg !5390

41:                                               ; preds = %36
  %42 = load i8*, i8** %8, align 8, !dbg !5391
  %43 = call i8* @_ZL12compress_intPiS_Pv(i32* %12, i32* %7, i8* %42), !dbg !5392
  store i8* %43, i8** %8, align 8, !dbg !5393
  br label %44, !dbg !5394

44:                                               ; preds = %41, %36, %32
  %45 = load i32, i32* %12, align 4, !dbg !5395
  switch i32 %45, label %83 [
    i32 0, label %46
    i32 32, label %48
    i32 64, label %50
    i32 96, label %52
    i32 128, label %54
    i32 192, label %56
    i32 160, label %63
    i32 224, label %77
  ], !dbg !5396

46:                                               ; preds = %44
  store i32 0, i32* %9, align 4, !dbg !5397
  %47 = load i32, i32* %9, align 4, !dbg !5399
  store i32 %47, i32* %11, align 4, !dbg !5400
  br label %84, !dbg !5401

48:                                               ; preds = %44
  store i32 1, i32* %9, align 4, !dbg !5402
  %49 = load i32, i32* %9, align 4, !dbg !5403
  store i32 %49, i32* %11, align 4, !dbg !5404
  br label %84, !dbg !5405

50:                                               ; preds = %44
  store i32 2, i32* %9, align 4, !dbg !5406
  %51 = load i32, i32* %9, align 4, !dbg !5407
  store i32 %51, i32* %11, align 4, !dbg !5408
  br label %84, !dbg !5409

52:                                               ; preds = %44
  store i32 4, i32* %9, align 4, !dbg !5410
  %53 = load i32, i32* %9, align 4, !dbg !5411
  store i32 %53, i32* %11, align 4, !dbg !5412
  br label %84, !dbg !5413

54:                                               ; preds = %44
  store i32 8, i32* %9, align 4, !dbg !5414
  %55 = load i32, i32* %9, align 4, !dbg !5415
  store i32 %55, i32* %11, align 4, !dbg !5416
  br label %84, !dbg !5417

56:                                               ; preds = %44
  %57 = load i32, i32* %9, align 4, !dbg !5418
  %58 = icmp slt i32 %57, 0, !dbg !5420
  br i1 %58, label %59, label %60, !dbg !5421

59:                                               ; preds = %56
  store i32 0, i32* %5, align 4, !dbg !5422
  br label %258, !dbg !5422

60:                                               ; preds = %56
  %61 = load i32, i32* %9, align 4, !dbg !5423
  %62 = add nsw i32 %61, 4, !dbg !5424
  store i32 %62, i32* %11, align 4, !dbg !5425
  br label %84, !dbg !5426

63:                                               ; preds = %44
  %64 = load i32, i32* %9, align 4, !dbg !5427
  %65 = icmp slt i32 %64, 0, !dbg !5429
  br i1 %65, label %66, label %67, !dbg !5430

66:                                               ; preds = %63
  store i32 0, i32* %5, align 4, !dbg !5431
  br label %258, !dbg !5431

67:                                               ; preds = %63
  %68 = load i32, i32* %9, align 4, !dbg !5432
  %69 = icmp eq i32 %68, 0, !dbg !5434
  br i1 %69, label %70, label %74, !dbg !5435

70:                                               ; preds = %67
  %71 = load i8*, i8** %8, align 8, !dbg !5436
  %72 = call i64 @_ZL7strlen2Pc(i8* %71), !dbg !5437
  %73 = trunc i64 %72 to i32, !dbg !5437
  store i32 %73, i32* %9, align 4, !dbg !5438
  br label %74, !dbg !5439

74:                                               ; preds = %70, %67
  %75 = load i32, i32* %9, align 4, !dbg !5440
  %76 = add nsw i32 %75, 5, !dbg !5441
  store i32 %76, i32* %11, align 4, !dbg !5442
  br label %84, !dbg !5443

77:                                               ; preds = %44
  %78 = load i32, i32* %9, align 4, !dbg !5444
  %79 = icmp sle i32 %78, 0, !dbg !5446
  br i1 %79, label %80, label %81, !dbg !5447

80:                                               ; preds = %77
  store i32 0, i32* %5, align 4, !dbg !5448
  br label %258, !dbg !5448

81:                                               ; preds = %77
  %82 = load i32, i32* %9, align 4, !dbg !5449
  store i32 %82, i32* %11, align 4, !dbg !5450
  br label %84, !dbg !5451

83:                                               ; preds = %44
  store i32 0, i32* %5, align 4, !dbg !5452
  br label %258, !dbg !5452

84:                                               ; preds = %81, %74, %60, %54, %52, %50, %48, %46
  %85 = load i32, i32* %11, align 4, !dbg !5453
  %86 = add nsw i32 %85, 2, !dbg !5453
  store i32 %86, i32* %11, align 4, !dbg !5453
  %87 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5454
  %88 = load i32, i32* %11, align 4, !dbg !5456
  %89 = call i32 @_ZL15CheckAllocationP11binn_structi(%struct.binn_struct* %87, i32 %88), !dbg !5457
  %90 = icmp eq i32 %89, 0, !dbg !5458
  br i1 %90, label %91, label %92, !dbg !5459

91:                                               ; preds = %84
  store i32 0, i32* %5, align 4, !dbg !5460
  br label %258, !dbg !5460

92:                                               ; preds = %84
  %93 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5461
  %94 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %93, i32 0, i32 4, !dbg !5462
  %95 = load i8*, i8** %94, align 8, !dbg !5462
  %96 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5463
  %97 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %96, i32 0, i32 7, !dbg !5464
  %98 = load i32, i32* %97, align 8, !dbg !5464
  %99 = sext i32 %98 to i64, !dbg !5465
  %100 = getelementptr inbounds i8, i8* %95, i64 %99, !dbg !5465
  store i8* %100, i8** %16, align 8, !dbg !5466
  %101 = load i32, i32* %12, align 4, !dbg !5467
  %102 = icmp ne i32 %101, 224, !dbg !5469
  br i1 %102, label %103, label %133, !dbg !5470

103:                                              ; preds = %92
  %104 = bitcast i32* %7 to i8*, !dbg !5471
  store i8* %104, i8** %17, align 8, !dbg !5473
  %105 = load i32, i32* %7, align 4, !dbg !5474
  %106 = icmp sgt i32 %105, 255, !dbg !5476
  br i1 %106, label %107, label %123, !dbg !5477

107:                                              ; preds = %103
  %108 = load i32, i32* %7, align 4, !dbg !5478
  %109 = trunc i32 %108 to i16, !dbg !5478
  %110 = call zeroext i16 @_ZL6tobe16t(i16 zeroext %109), !dbg !5480
  %111 = zext i16 %110 to i32, !dbg !5480
  store i32 %111, i32* %7, align 4, !dbg !5481
  %112 = load i8*, i8** %17, align 8, !dbg !5482
  %113 = load i8, i8* %112, align 1, !dbg !5483
  %114 = load i8*, i8** %16, align 8, !dbg !5484
  store i8 %113, i8* %114, align 1, !dbg !5485
  %115 = load i8*, i8** %16, align 8, !dbg !5486
  %116 = getelementptr inbounds i8, i8* %115, i32 1, !dbg !5486
  store i8* %116, i8** %16, align 8, !dbg !5486
  %117 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5487
  %118 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %117, i32 0, i32 7, !dbg !5488
  %119 = load i32, i32* %118, align 8, !dbg !5489
  %120 = add nsw i32 %119, 1, !dbg !5489
  store i32 %120, i32* %118, align 8, !dbg !5489
  %121 = load i8*, i8** %17, align 8, !dbg !5490
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !5490
  store i8* %122, i8** %17, align 8, !dbg !5490
  br label %123, !dbg !5491

123:                                              ; preds = %107, %103
  %124 = load i8*, i8** %17, align 8, !dbg !5492
  %125 = load i8, i8* %124, align 1, !dbg !5493
  %126 = load i8*, i8** %16, align 8, !dbg !5494
  store i8 %125, i8* %126, align 1, !dbg !5495
  %127 = load i8*, i8** %16, align 8, !dbg !5496
  %128 = getelementptr inbounds i8, i8* %127, i32 1, !dbg !5496
  store i8* %128, i8** %16, align 8, !dbg !5496
  %129 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5497
  %130 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %129, i32 0, i32 7, !dbg !5498
  %131 = load i32, i32* %130, align 8, !dbg !5499
  %132 = add nsw i32 %131, 1, !dbg !5499
  store i32 %132, i32* %130, align 8, !dbg !5499
  br label %133, !dbg !5500

133:                                              ; preds = %123, %92
  %134 = load i32, i32* %12, align 4, !dbg !5501
  switch i32 %134, label %255 [
    i32 0, label %135
    i32 32, label %136
    i32 64, label %144
    i32 96, label %157
    i32 128, label %170
    i32 192, label %183
    i32 160, label %201
    i32 224, label %245
  ], !dbg !5502

135:                                              ; preds = %133
  br label %255, !dbg !5503

136:                                              ; preds = %133
  %137 = load i8*, i8** %8, align 8, !dbg !5505
  %138 = load i8, i8* %137, align 1, !dbg !5506
  %139 = load i8*, i8** %16, align 8, !dbg !5507
  store i8 %138, i8* %139, align 1, !dbg !5508
  %140 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5509
  %141 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %140, i32 0, i32 7, !dbg !5510
  %142 = load i32, i32* %141, align 8, !dbg !5511
  %143 = add nsw i32 %142, 1, !dbg !5511
  store i32 %143, i32* %141, align 8, !dbg !5511
  br label %255, !dbg !5512

144:                                              ; preds = %133
  %145 = load i8*, i8** %8, align 8, !dbg !5513
  %146 = bitcast i8* %145 to i16*, !dbg !5514
  %147 = load i16, i16* %146, align 2, !dbg !5515
  store i16 %147, i16* %14, align 2, !dbg !5516
  %148 = load i16, i16* %14, align 2, !dbg !5517
  %149 = call zeroext i16 @_ZL6tobe16t(i16 zeroext %148), !dbg !5518
  store i16 %149, i16* %14, align 2, !dbg !5519
  %150 = load i16, i16* %14, align 2, !dbg !5520
  %151 = load i8*, i8** %16, align 8, !dbg !5521
  %152 = bitcast i8* %151 to i16*, !dbg !5522
  store i16 %150, i16* %152, align 2, !dbg !5523
  %153 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5524
  %154 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %153, i32 0, i32 7, !dbg !5525
  %155 = load i32, i32* %154, align 8, !dbg !5526
  %156 = add nsw i32 %155, 2, !dbg !5526
  store i32 %156, i32* %154, align 8, !dbg !5526
  br label %255, !dbg !5527

157:                                              ; preds = %133
  %158 = load i8*, i8** %8, align 8, !dbg !5528
  %159 = bitcast i8* %158 to i32*, !dbg !5529
  %160 = load i32, i32* %159, align 4, !dbg !5530
  store i32 %160, i32* %10, align 4, !dbg !5531
  %161 = load i32, i32* %10, align 4, !dbg !5532
  %162 = call i32 @_ZL6tobe32j(i32 %161), !dbg !5533
  store i32 %162, i32* %10, align 4, !dbg !5534
  %163 = load i32, i32* %10, align 4, !dbg !5535
  %164 = load i8*, i8** %16, align 8, !dbg !5536
  %165 = bitcast i8* %164 to i32*, !dbg !5537
  store i32 %163, i32* %165, align 4, !dbg !5538
  %166 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5539
  %167 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %166, i32 0, i32 7, !dbg !5540
  %168 = load i32, i32* %167, align 8, !dbg !5541
  %169 = add nsw i32 %168, 4, !dbg !5541
  store i32 %169, i32* %167, align 8, !dbg !5541
  br label %255, !dbg !5542

170:                                              ; preds = %133
  %171 = load i8*, i8** %8, align 8, !dbg !5543
  %172 = bitcast i8* %171 to i64*, !dbg !5544
  %173 = load i64, i64* %172, align 8, !dbg !5545
  store i64 %173, i64* %15, align 8, !dbg !5546
  %174 = load i64, i64* %15, align 8, !dbg !5547
  %175 = call i64 @_ZL6tobe64y(i64 %174), !dbg !5548
  store i64 %175, i64* %15, align 8, !dbg !5549
  %176 = load i64, i64* %15, align 8, !dbg !5550
  %177 = load i8*, i8** %16, align 8, !dbg !5551
  %178 = bitcast i8* %177 to i64*, !dbg !5552
  store i64 %176, i64* %178, align 8, !dbg !5553
  %179 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5554
  %180 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %179, i32 0, i32 7, !dbg !5555
  %181 = load i32, i32* %180, align 8, !dbg !5556
  %182 = add nsw i32 %181, 8, !dbg !5556
  store i32 %182, i32* %180, align 8, !dbg !5556
  br label %255, !dbg !5557

183:                                              ; preds = %133
  %184 = load i32, i32* %9, align 4, !dbg !5558
  %185 = call i32 @_ZL6tobe32j(i32 %184), !dbg !5559
  store i32 %185, i32* %10, align 4, !dbg !5560
  %186 = load i32, i32* %10, align 4, !dbg !5561
  %187 = load i8*, i8** %16, align 8, !dbg !5562
  %188 = bitcast i8* %187 to i32*, !dbg !5563
  store i32 %186, i32* %188, align 4, !dbg !5564
  %189 = load i8*, i8** %16, align 8, !dbg !5565
  %190 = getelementptr inbounds i8, i8* %189, i64 4, !dbg !5565
  store i8* %190, i8** %16, align 8, !dbg !5565
  %191 = load i8*, i8** %16, align 8, !dbg !5566
  %192 = load i8*, i8** %8, align 8, !dbg !5567
  %193 = load i32, i32* %9, align 4, !dbg !5568
  %194 = sext i32 %193 to i64, !dbg !5568
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 1 %192, i64 %194, i1 false), !dbg !5569
  %195 = load i32, i32* %9, align 4, !dbg !5570
  %196 = add nsw i32 4, %195, !dbg !5571
  %197 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5572
  %198 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %197, i32 0, i32 7, !dbg !5573
  %199 = load i32, i32* %198, align 8, !dbg !5574
  %200 = add nsw i32 %199, %196, !dbg !5574
  store i32 %200, i32* %198, align 8, !dbg !5574
  br label %255, !dbg !5575

201:                                              ; preds = %133
  %202 = load i32, i32* %9, align 4, !dbg !5576
  %203 = icmp sgt i32 %202, 127, !dbg !5578
  br i1 %203, label %204, label %218, !dbg !5579

204:                                              ; preds = %201
  %205 = load i32, i32* %9, align 4, !dbg !5580
  %206 = or i32 %205, -2147483648, !dbg !5582
  store i32 %206, i32* %10, align 4, !dbg !5583
  %207 = load i32, i32* %10, align 4, !dbg !5584
  %208 = call i32 @_ZL6tobe32j(i32 %207), !dbg !5585
  store i32 %208, i32* %10, align 4, !dbg !5586
  %209 = load i32, i32* %10, align 4, !dbg !5587
  %210 = load i8*, i8** %16, align 8, !dbg !5588
  %211 = bitcast i8* %210 to i32*, !dbg !5589
  store i32 %209, i32* %211, align 4, !dbg !5590
  %212 = load i8*, i8** %16, align 8, !dbg !5591
  %213 = getelementptr inbounds i8, i8* %212, i64 4, !dbg !5591
  store i8* %213, i8** %16, align 8, !dbg !5591
  %214 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5592
  %215 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %214, i32 0, i32 7, !dbg !5593
  %216 = load i32, i32* %215, align 8, !dbg !5594
  %217 = add nsw i32 %216, 4, !dbg !5594
  store i32 %217, i32* %215, align 8, !dbg !5594
  br label %228, !dbg !5595

218:                                              ; preds = %201
  %219 = load i32, i32* %9, align 4, !dbg !5596
  %220 = trunc i32 %219 to i8, !dbg !5596
  %221 = load i8*, i8** %16, align 8, !dbg !5598
  store i8 %220, i8* %221, align 1, !dbg !5599
  %222 = load i8*, i8** %16, align 8, !dbg !5600
  %223 = getelementptr inbounds i8, i8* %222, i32 1, !dbg !5600
  store i8* %223, i8** %16, align 8, !dbg !5600
  %224 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5601
  %225 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %224, i32 0, i32 7, !dbg !5602
  %226 = load i32, i32* %225, align 8, !dbg !5603
  %227 = add nsw i32 %226, 1, !dbg !5603
  store i32 %227, i32* %225, align 8, !dbg !5603
  br label %228

228:                                              ; preds = %218, %204
  %229 = load i8*, i8** %16, align 8, !dbg !5604
  %230 = load i8*, i8** %8, align 8, !dbg !5605
  %231 = load i32, i32* %9, align 4, !dbg !5606
  %232 = sext i32 %231 to i64, !dbg !5606
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %229, i8* align 1 %230, i64 %232, i1 false), !dbg !5607
  %233 = load i32, i32* %9, align 4, !dbg !5608
  %234 = load i8*, i8** %16, align 8, !dbg !5609
  %235 = sext i32 %233 to i64, !dbg !5609
  %236 = getelementptr inbounds i8, i8* %234, i64 %235, !dbg !5609
  store i8* %236, i8** %16, align 8, !dbg !5609
  %237 = load i8*, i8** %16, align 8, !dbg !5610
  store i8 0, i8* %237, align 1, !dbg !5611
  %238 = load i32, i32* %9, align 4, !dbg !5612
  %239 = add nsw i32 %238, 1, !dbg !5612
  store i32 %239, i32* %9, align 4, !dbg !5612
  %240 = load i32, i32* %9, align 4, !dbg !5613
  %241 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5614
  %242 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %241, i32 0, i32 7, !dbg !5615
  %243 = load i32, i32* %242, align 8, !dbg !5616
  %244 = add nsw i32 %243, %240, !dbg !5616
  store i32 %244, i32* %242, align 8, !dbg !5616
  br label %255, !dbg !5617

245:                                              ; preds = %133
  %246 = load i8*, i8** %16, align 8, !dbg !5618
  %247 = load i8*, i8** %8, align 8, !dbg !5619
  %248 = load i32, i32* %9, align 4, !dbg !5620
  %249 = sext i32 %248 to i64, !dbg !5620
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %246, i8* align 1 %247, i64 %249, i1 false), !dbg !5621
  %250 = load i32, i32* %9, align 4, !dbg !5622
  %251 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5623
  %252 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %251, i32 0, i32 7, !dbg !5624
  %253 = load i32, i32* %252, align 8, !dbg !5625
  %254 = add nsw i32 %253, %250, !dbg !5625
  store i32 %254, i32* %252, align 8, !dbg !5625
  br label %255, !dbg !5626

255:                                              ; preds = %133, %245, %228, %183, %170, %157, %144, %136, %135
  %256 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !5627
  %257 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %256, i32 0, i32 3, !dbg !5628
  store i32 1, i32* %257, align 4, !dbg !5629
  store i32 1, i32* %5, align 4, !dbg !5630
  br label %258, !dbg !5630

258:                                              ; preds = %255, %91, %83, %80, %66, %59, %30
  %259 = load i32, i32* %5, align 4, !dbg !5631
  ret i32 %259, !dbg !5631
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL11type_familyi(i32 %0) #0 !dbg !5632 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !5633, metadata !DIExpression()), !dbg !5634
  %4 = load i32, i32* %3, align 4, !dbg !5635
  switch i32 %4, label %13 [
    i32 224, label %5
    i32 225, label %5
    i32 226, label %5
    i32 33, label %6
    i32 65, label %6
    i32 97, label %6
    i32 129, label %6
    i32 32, label %6
    i32 64, label %6
    i32 96, label %6
    i32 128, label %6
    i32 98, label %7
    i32 130, label %7
    i32 166, label %7
    i32 167, label %7
    i32 160, label %8
    i32 45057, label %8
    i32 45061, label %8
    i32 45058, label %8
    i32 45059, label %8
    i32 45060, label %8
    i32 192, label %9
    i32 53249, label %9
    i32 53250, label %9
    i32 53251, label %9
    i32 53252, label %9
    i32 164, label %10
    i32 131, label %10
    i32 162, label %10
    i32 163, label %10
    i32 161, label %10
    i32 524385, label %11
    i32 0, label %12
  ], !dbg !5636

5:                                                ; preds = %1, %1, %1
  store i32 247, i32* %2, align 4, !dbg !5637
  br label %14, !dbg !5637

6:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  store i32 242, i32* %2, align 4, !dbg !5639
  br label %14, !dbg !5639

7:                                                ; preds = %1, %1, %1, %1
  store i32 243, i32* %2, align 4, !dbg !5640
  br label %14, !dbg !5640

8:                                                ; preds = %1, %1, %1, %1, %1, %1
  store i32 244, i32* %2, align 4, !dbg !5641
  br label %14, !dbg !5641

9:                                                ; preds = %1, %1, %1, %1, %1
  store i32 245, i32* %2, align 4, !dbg !5642
  br label %14, !dbg !5642

10:                                               ; preds = %1, %1, %1, %1, %1
  store i32 244, i32* %2, align 4, !dbg !5643
  br label %14, !dbg !5643

11:                                               ; preds = %1
  store i32 246, i32* %2, align 4, !dbg !5644
  br label %14, !dbg !5644

12:                                               ; preds = %1
  store i32 241, i32* %2, align 4, !dbg !5645
  br label %14, !dbg !5645

13:                                               ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !5646
  br label %14, !dbg !5646

14:                                               ; preds = %13, %12, %11, %10, %9, %8, %7, %6, %5
  %15 = load i32, i32* %2, align 4, !dbg !5647
  ret i32 %15, !dbg !5647
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @_ZL12compress_intPiS_Pv(i32* %0, i32* %1, i8* %2) #0 !dbg !5648 {
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  store i32* %0, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !5651, metadata !DIExpression()), !dbg !5652
  store i32* %1, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !5653, metadata !DIExpression()), !dbg !5654
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !5655, metadata !DIExpression()), !dbg !5656
  call void @llvm.dbg.declare(metadata i32* %8, metadata !5657, metadata !DIExpression()), !dbg !5658
  call void @llvm.dbg.declare(metadata i32* %9, metadata !5659, metadata !DIExpression()), !dbg !5660
  call void @llvm.dbg.declare(metadata i32* %10, metadata !5661, metadata !DIExpression()), !dbg !5662
  call void @llvm.dbg.declare(metadata i32* %11, metadata !5663, metadata !DIExpression()), !dbg !5664
  store i32 0, i32* %11, align 4, !dbg !5664
  call void @llvm.dbg.declare(metadata i64* %12, metadata !5665, metadata !DIExpression()), !dbg !5666
  call void @llvm.dbg.declare(metadata i64* %13, metadata !5667, metadata !DIExpression()), !dbg !5668
  call void @llvm.dbg.declare(metadata i8** %14, metadata !5669, metadata !DIExpression()), !dbg !5670
  %15 = load i32*, i32** %5, align 8, !dbg !5671
  %16 = load i32, i32* %15, align 4, !dbg !5672
  store i32 %16, i32* %8, align 4, !dbg !5673
  %17 = load i32, i32* %8, align 4, !dbg !5674
  %18 = icmp eq i32 %17, 32, !dbg !5676
  br i1 %18, label %19, label %21, !dbg !5677

19:                                               ; preds = %3
  %20 = load i8*, i8** %7, align 8, !dbg !5678
  store i8* %20, i8** %4, align 8, !dbg !5679
  br label %106, !dbg !5679

21:                                               ; preds = %3
  %22 = load i32*, i32** %6, align 8, !dbg !5680
  %23 = load i32, i32* %22, align 4, !dbg !5681
  store i32 %23, i32* %10, align 4, !dbg !5682
  %24 = load i32, i32* %10, align 4, !dbg !5683
  switch i32 %24, label %53 [
    i32 129, label %25
    i32 97, label %29
    i32 65, label %34
    i32 128, label %39
    i32 96, label %43
    i32 64, label %48
  ], !dbg !5684

25:                                               ; preds = %21
  %26 = load i8*, i8** %7, align 8, !dbg !5685
  %27 = bitcast i8* %26 to i64*, !dbg !5687
  %28 = load i64, i64* %27, align 8, !dbg !5688
  store i64 %28, i64* %12, align 8, !dbg !5689
  br label %54, !dbg !5690

29:                                               ; preds = %21
  %30 = load i8*, i8** %7, align 8, !dbg !5691
  %31 = bitcast i8* %30 to i32*, !dbg !5692
  %32 = load i32, i32* %31, align 4, !dbg !5693
  %33 = sext i32 %32 to i64, !dbg !5693
  store i64 %33, i64* %12, align 8, !dbg !5694
  br label %54, !dbg !5695

34:                                               ; preds = %21
  %35 = load i8*, i8** %7, align 8, !dbg !5696
  %36 = bitcast i8* %35 to i16*, !dbg !5697
  %37 = load i16, i16* %36, align 2, !dbg !5698
  %38 = sext i16 %37 to i64, !dbg !5698
  store i64 %38, i64* %12, align 8, !dbg !5699
  br label %54, !dbg !5700

39:                                               ; preds = %21
  %40 = load i8*, i8** %7, align 8, !dbg !5701
  %41 = bitcast i8* %40 to i64*, !dbg !5702
  %42 = load i64, i64* %41, align 8, !dbg !5703
  store i64 %42, i64* %13, align 8, !dbg !5704
  br label %74, !dbg !5705

43:                                               ; preds = %21
  %44 = load i8*, i8** %7, align 8, !dbg !5706
  %45 = bitcast i8* %44 to i32*, !dbg !5707
  %46 = load i32, i32* %45, align 4, !dbg !5708
  %47 = zext i32 %46 to i64, !dbg !5708
  store i64 %47, i64* %13, align 8, !dbg !5709
  br label %74, !dbg !5710

48:                                               ; preds = %21
  %49 = load i8*, i8** %7, align 8, !dbg !5711
  %50 = bitcast i8* %49 to i16*, !dbg !5712
  %51 = load i16, i16* %50, align 2, !dbg !5713
  %52 = zext i16 %51 to i64, !dbg !5713
  store i64 %52, i64* %13, align 8, !dbg !5714
  br label %74, !dbg !5715

53:                                               ; preds = %21
  br label %54, !dbg !5716

54:                                               ; preds = %53, %34, %29, %25
  call void @llvm.dbg.label(metadata !5717), !dbg !5718
  %55 = load i64, i64* %12, align 8, !dbg !5719
  %56 = icmp sge i64 %55, 0, !dbg !5721
  br i1 %56, label %57, label %59, !dbg !5722

57:                                               ; preds = %54
  %58 = load i64, i64* %12, align 8, !dbg !5723
  store i64 %58, i64* %13, align 8, !dbg !5725
  br label %74, !dbg !5726

59:                                               ; preds = %54
  %60 = load i64, i64* %12, align 8, !dbg !5727
  %61 = icmp sge i64 %60, -128, !dbg !5729
  br i1 %61, label %62, label %63, !dbg !5730

62:                                               ; preds = %59
  store i32 33, i32* %11, align 4, !dbg !5731
  br label %73, !dbg !5733

63:                                               ; preds = %59
  %64 = load i64, i64* %12, align 8, !dbg !5734
  %65 = icmp sge i64 %64, -32768, !dbg !5736
  br i1 %65, label %66, label %67, !dbg !5737

66:                                               ; preds = %63
  store i32 65, i32* %11, align 4, !dbg !5738
  br label %72, !dbg !5740

67:                                               ; preds = %63
  %68 = load i64, i64* %12, align 8, !dbg !5741
  %69 = icmp sge i64 %68, -2147483648, !dbg !5743
  br i1 %69, label %70, label %71, !dbg !5744

70:                                               ; preds = %67
  store i32 97, i32* %11, align 4, !dbg !5745
  br label %71, !dbg !5747

71:                                               ; preds = %70, %67
  br label %72

72:                                               ; preds = %71, %66
  br label %73

73:                                               ; preds = %72, %62
  br label %89, !dbg !5748

74:                                               ; preds = %57, %48, %43, %39
  call void @llvm.dbg.label(metadata !5749), !dbg !5750
  %75 = load i64, i64* %13, align 8, !dbg !5751
  %76 = icmp ule i64 %75, 255, !dbg !5753
  br i1 %76, label %77, label %78, !dbg !5754

77:                                               ; preds = %74
  store i32 32, i32* %11, align 4, !dbg !5755
  br label %88, !dbg !5757

78:                                               ; preds = %74
  %79 = load i64, i64* %13, align 8, !dbg !5758
  %80 = icmp ule i64 %79, 65535, !dbg !5760
  br i1 %80, label %81, label %82, !dbg !5761

81:                                               ; preds = %78
  store i32 64, i32* %11, align 4, !dbg !5762
  br label %87, !dbg !5764

82:                                               ; preds = %78
  %83 = load i64, i64* %13, align 8, !dbg !5765
  %84 = icmp ule i64 %83, 4294967295, !dbg !5767
  br i1 %84, label %85, label %86, !dbg !5768

85:                                               ; preds = %82
  store i32 96, i32* %11, align 4, !dbg !5769
  br label %86, !dbg !5771

86:                                               ; preds = %85, %82
  br label %87

87:                                               ; preds = %86, %81
  br label %88

88:                                               ; preds = %87, %77
  br label %89, !dbg !5772

89:                                               ; preds = %88, %73
  call void @llvm.dbg.label(metadata !5773), !dbg !5774
  %90 = load i8*, i8** %7, align 8, !dbg !5775
  store i8* %90, i8** %14, align 8, !dbg !5776
  %91 = load i32, i32* %11, align 4, !dbg !5777
  %92 = icmp ne i32 %91, 0, !dbg !5779
  br i1 %92, label %93, label %104, !dbg !5780

93:                                               ; preds = %89
  %94 = load i32, i32* %11, align 4, !dbg !5781
  %95 = load i32, i32* %10, align 4, !dbg !5782
  %96 = icmp ne i32 %94, %95, !dbg !5783
  br i1 %96, label %97, label %104, !dbg !5784

97:                                               ; preds = %93
  %98 = load i32, i32* %11, align 4, !dbg !5785
  %99 = load i32*, i32** %6, align 8, !dbg !5787
  store i32 %98, i32* %99, align 4, !dbg !5788
  %100 = load i32, i32* %11, align 4, !dbg !5789
  %101 = call i32 @binn_get_write_storage(i32 %100), !dbg !5790
  store i32 %101, i32* %9, align 4, !dbg !5791
  %102 = load i32, i32* %9, align 4, !dbg !5792
  %103 = load i32*, i32** %5, align 8, !dbg !5793
  store i32 %102, i32* %103, align 4, !dbg !5794
  br label %104, !dbg !5795

104:                                              ; preds = %97, %93, %89
  %105 = load i8*, i8** %14, align 8, !dbg !5796
  store i8* %105, i8** %4, align 8, !dbg !5797
  br label %106, !dbg !5797

106:                                              ; preds = %104, %19
  %107 = load i8*, i8** %4, align 8, !dbg !5798
  ret i8* %107, !dbg !5798
}

; Function Attrs: noinline optnone ssp uwtable
define internal i64 @_ZL7strlen2Pc(i8* %0) #6 !dbg !5799 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !5802, metadata !DIExpression()), !dbg !5803
  %4 = load i8*, i8** %3, align 8, !dbg !5804
  %5 = icmp eq i8* %4, null, !dbg !5806
  br i1 %5, label %6, label %7, !dbg !5807

6:                                                ; preds = %1
  store i64 0, i64* %2, align 8, !dbg !5808
  br label %10, !dbg !5808

7:                                                ; preds = %1
  %8 = load i8*, i8** %3, align 8, !dbg !5809
  %9 = call i64 @strlen(i8* %8), !dbg !5810
  store i64 %9, i64* %2, align 8, !dbg !5811
  br label %10, !dbg !5811

10:                                               ; preds = %7, %6
  %11 = load i64, i64* %2, align 8, !dbg !5812
  ret i64 %11, !dbg !5812
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL15CheckAllocationP11binn_structi(%struct.binn_struct* %0, i32 %1) #6 !dbg !5813 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !5816, metadata !DIExpression()), !dbg !5817
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !5818, metadata !DIExpression()), !dbg !5819
  call void @llvm.dbg.declare(metadata i32* %6, metadata !5820, metadata !DIExpression()), !dbg !5821
  call void @llvm.dbg.declare(metadata i8** %7, metadata !5822, metadata !DIExpression()), !dbg !5823
  %8 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5824
  %9 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %8, i32 0, i32 7, !dbg !5826
  %10 = load i32, i32* %9, align 8, !dbg !5826
  %11 = load i32, i32* %5, align 4, !dbg !5827
  %12 = add nsw i32 %10, %11, !dbg !5828
  %13 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5829
  %14 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %13, i32 0, i32 6, !dbg !5830
  %15 = load i32, i32* %14, align 4, !dbg !5830
  %16 = icmp sgt i32 %12, %15, !dbg !5831
  br i1 %16, label %17, label %50, !dbg !5832

17:                                               ; preds = %2
  %18 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5833
  %19 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %18, i32 0, i32 5, !dbg !5836
  %20 = load i32, i32* %19, align 8, !dbg !5836
  %21 = icmp ne i32 %20, 0, !dbg !5833
  br i1 %21, label %22, label %23, !dbg !5837

22:                                               ; preds = %17
  store i32 0, i32* %3, align 4, !dbg !5838
  br label %51, !dbg !5838

23:                                               ; preds = %17
  %24 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5839
  %25 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %24, i32 0, i32 7, !dbg !5840
  %26 = load i32, i32* %25, align 8, !dbg !5840
  %27 = load i32, i32* %5, align 4, !dbg !5841
  %28 = add nsw i32 %26, %27, !dbg !5842
  %29 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5843
  %30 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %29, i32 0, i32 6, !dbg !5844
  %31 = load i32, i32* %30, align 4, !dbg !5844
  %32 = call i32 @_ZL14CalcAllocationii(i32 %28, i32 %31), !dbg !5845
  store i32 %32, i32* %6, align 4, !dbg !5846
  %33 = load i8* (i8*, i64)*, i8* (i8*, i64)** @realloc_fn, align 8, !dbg !5847
  %34 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5848
  %35 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %34, i32 0, i32 4, !dbg !5849
  %36 = load i8*, i8** %35, align 8, !dbg !5849
  %37 = load i32, i32* %6, align 4, !dbg !5850
  %38 = sext i32 %37 to i64, !dbg !5850
  %39 = call i8* %33(i8* %36, i64 %38), !dbg !5847
  store i8* %39, i8** %7, align 8, !dbg !5851
  %40 = load i8*, i8** %7, align 8, !dbg !5852
  %41 = icmp eq i8* %40, null, !dbg !5854
  br i1 %41, label %42, label %43, !dbg !5855

42:                                               ; preds = %23
  store i32 0, i32* %3, align 4, !dbg !5856
  br label %51, !dbg !5856

43:                                               ; preds = %23
  %44 = load i8*, i8** %7, align 8, !dbg !5857
  %45 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5858
  %46 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %45, i32 0, i32 4, !dbg !5859
  store i8* %44, i8** %46, align 8, !dbg !5860
  %47 = load i32, i32* %6, align 4, !dbg !5861
  %48 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !5862
  %49 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %48, i32 0, i32 6, !dbg !5863
  store i32 %47, i32* %49, align 4, !dbg !5864
  br label %50, !dbg !5865

50:                                               ; preds = %43, %2
  store i32 1, i32* %3, align 4, !dbg !5866
  br label %51, !dbg !5866

51:                                               ; preds = %50, %42, %22
  %52 = load i32, i32* %3, align 4, !dbg !5867
  ret i32 %52, !dbg !5867
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL14CalcAllocationii(i32 %0, i32 %1) #0 !dbg !5868 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !5869, metadata !DIExpression()), !dbg !5870
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !5871, metadata !DIExpression()), !dbg !5872
  call void @llvm.dbg.declare(metadata i32* %5, metadata !5873, metadata !DIExpression()), !dbg !5874
  %6 = load i32, i32* %4, align 4, !dbg !5875
  store i32 %6, i32* %5, align 4, !dbg !5876
  br label %7, !dbg !5877

7:                                                ; preds = %11, %2
  %8 = load i32, i32* %5, align 4, !dbg !5878
  %9 = load i32, i32* %3, align 4, !dbg !5879
  %10 = icmp slt i32 %8, %9, !dbg !5880
  br i1 %10, label %11, label %14, !dbg !5877

11:                                               ; preds = %7
  %12 = load i32, i32* %5, align 4, !dbg !5881
  %13 = shl i32 %12, 1, !dbg !5881
  store i32 %13, i32* %5, align 4, !dbg !5881
  br label %7, !dbg !5877, !llvm.loop !5883

14:                                               ; preds = %7
  %15 = load i32, i32* %5, align 4, !dbg !5885
  ret i32 %15, !dbg !5886
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_set(%struct.binn_struct* %0, i32 %1, i32 %2, i8* %3, i32 %4) #6 !dbg !5887 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !5890, metadata !DIExpression()), !dbg !5891
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !5892, metadata !DIExpression()), !dbg !5893
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !5894, metadata !DIExpression()), !dbg !5895
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !5896, metadata !DIExpression()), !dbg !5897
  store i32 %4, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !5898, metadata !DIExpression()), !dbg !5899
  %12 = call i32 @_ZL21GetWriteConvertedDataPiPPvS_(i32* %9, i8** %10, i32* %11), !dbg !5900
  %13 = icmp eq i32 %12, 0, !dbg !5902
  br i1 %13, label %14, label %15, !dbg !5903

14:                                               ; preds = %5
  store i32 0, i32* %6, align 4, !dbg !5904
  br label %22, !dbg !5904

15:                                               ; preds = %5
  %16 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5905
  %17 = load i32, i32* %8, align 4, !dbg !5906
  %18 = load i32, i32* %9, align 4, !dbg !5907
  %19 = load i8*, i8** %10, align 8, !dbg !5908
  %20 = load i32, i32* %11, align 4, !dbg !5909
  %21 = call i32 @_ZL16binn_map_set_rawP11binn_structiiPvi(%struct.binn_struct* %16, i32 %17, i32 %18, i8* %19, i32 %20), !dbg !5910
  store i32 %21, i32* %6, align 4, !dbg !5911
  br label %22, !dbg !5911

22:                                               ; preds = %15, %14
  %23 = load i32, i32* %6, align 4, !dbg !5912
  ret i32 %23, !dbg !5912
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL16binn_map_set_rawP11binn_structiiPvi(%struct.binn_struct* %0, i32 %1, i32 %2, i8* %3, i32 %4) #6 !dbg !5913 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !5914, metadata !DIExpression()), !dbg !5915
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !5916, metadata !DIExpression()), !dbg !5917
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !5918, metadata !DIExpression()), !dbg !5919
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !5920, metadata !DIExpression()), !dbg !5921
  store i32 %4, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !5922, metadata !DIExpression()), !dbg !5923
  call void @llvm.dbg.declare(metadata i8** %12, metadata !5924, metadata !DIExpression()), !dbg !5925
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5926, metadata !DIExpression()), !dbg !5927
  %14 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5928
  %15 = icmp eq %struct.binn_struct* %14, null, !dbg !5930
  br i1 %15, label %26, label %16, !dbg !5931

16:                                               ; preds = %5
  %17 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5932
  %18 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %17, i32 0, i32 8, !dbg !5933
  %19 = load i32, i32* %18, align 4, !dbg !5933
  %20 = icmp ne i32 %19, 225, !dbg !5934
  br i1 %20, label %26, label %21, !dbg !5935

21:                                               ; preds = %16
  %22 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5936
  %23 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %22, i32 0, i32 2, !dbg !5937
  %24 = load i32, i32* %23, align 8, !dbg !5937
  %25 = icmp eq i32 %24, 0, !dbg !5938
  br i1 %25, label %26, label %27, !dbg !5939

26:                                               ; preds = %21, %16, %5
  store i32 0, i32* %6, align 4, !dbg !5940
  br label %81, !dbg !5940

27:                                               ; preds = %21
  %28 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5941
  %29 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %28, i32 0, i32 4, !dbg !5942
  %30 = load i8*, i8** %29, align 8, !dbg !5942
  %31 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5943
  %32 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %31, i32 0, i32 7, !dbg !5944
  %33 = load i32, i32* %32, align 8, !dbg !5944
  %34 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5945
  %35 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %34, i32 0, i32 11, !dbg !5946
  %36 = load i32, i32* %35, align 4, !dbg !5946
  %37 = load i32, i32* %8, align 4, !dbg !5947
  %38 = call i8* @_ZL11SearchForIDPhiiii(i8* %30, i32 9, i32 %33, i32 %36, i32 %37), !dbg !5948
  store i8* %38, i8** %12, align 8, !dbg !5949
  %39 = load i8*, i8** %12, align 8, !dbg !5950
  %40 = icmp ne i8* %39, null, !dbg !5950
  br i1 %40, label %41, label %42, !dbg !5952

41:                                               ; preds = %27
  store i32 0, i32* %6, align 4, !dbg !5953
  br label %81, !dbg !5953

42:                                               ; preds = %27
  %43 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5954
  %44 = call i32 @_ZL15CheckAllocationP11binn_structi(%struct.binn_struct* %43, i32 4), !dbg !5956
  %45 = icmp eq i32 %44, 0, !dbg !5957
  br i1 %45, label %46, label %47, !dbg !5958

46:                                               ; preds = %42
  store i32 0, i32* %6, align 4, !dbg !5959
  br label %81, !dbg !5959

47:                                               ; preds = %42
  %48 = load i32, i32* %8, align 4, !dbg !5960
  %49 = call i32 @_ZL6tobe32j(i32 %48), !dbg !5961
  store i32 %49, i32* %13, align 4, !dbg !5962
  %50 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5963
  %51 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %50, i32 0, i32 4, !dbg !5964
  %52 = load i8*, i8** %51, align 8, !dbg !5964
  %53 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5965
  %54 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %53, i32 0, i32 7, !dbg !5966
  %55 = load i32, i32* %54, align 8, !dbg !5966
  %56 = sext i32 %55 to i64, !dbg !5967
  %57 = getelementptr inbounds i8, i8* %52, i64 %56, !dbg !5967
  store i8* %57, i8** %12, align 8, !dbg !5968
  %58 = load i32, i32* %13, align 4, !dbg !5969
  %59 = load i8*, i8** %12, align 8, !dbg !5970
  %60 = bitcast i8* %59 to i32*, !dbg !5971
  store i32 %58, i32* %60, align 4, !dbg !5972
  %61 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5973
  %62 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %61, i32 0, i32 7, !dbg !5974
  %63 = load i32, i32* %62, align 8, !dbg !5975
  %64 = add nsw i32 %63, 4, !dbg !5975
  store i32 %64, i32* %62, align 8, !dbg !5975
  %65 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5976
  %66 = load i32, i32* %9, align 4, !dbg !5978
  %67 = load i8*, i8** %10, align 8, !dbg !5979
  %68 = load i32, i32* %11, align 4, !dbg !5980
  %69 = call i32 @_ZL8AddValueP11binn_structiPvi(%struct.binn_struct* %65, i32 %66, i8* %67, i32 %68), !dbg !5981
  %70 = icmp eq i32 %69, 0, !dbg !5982
  br i1 %70, label %71, label %76, !dbg !5983

71:                                               ; preds = %47
  %72 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5984
  %73 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %72, i32 0, i32 7, !dbg !5986
  %74 = load i32, i32* %73, align 8, !dbg !5987
  %75 = sub nsw i32 %74, 4, !dbg !5987
  store i32 %75, i32* %73, align 8, !dbg !5987
  store i32 0, i32* %6, align 4, !dbg !5988
  br label %81, !dbg !5988

76:                                               ; preds = %47
  %77 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !5989
  %78 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %77, i32 0, i32 11, !dbg !5990
  %79 = load i32, i32* %78, align 4, !dbg !5991
  %80 = add nsw i32 %79, 1, !dbg !5991
  store i32 %80, i32* %78, align 4, !dbg !5991
  store i32 1, i32* %6, align 4, !dbg !5992
  br label %81, !dbg !5992

81:                                               ; preds = %76, %71, %46, %41, %26
  %82 = load i32, i32* %6, align 4, !dbg !5993
  ret i32 %82, !dbg !5993
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_set(%struct.binn_struct* %0, i8* %1, i32 %2, i8* %3, i32 %4) #6 !dbg !5994 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !5997, metadata !DIExpression()), !dbg !5998
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !5999, metadata !DIExpression()), !dbg !6000
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !6001, metadata !DIExpression()), !dbg !6002
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !6003, metadata !DIExpression()), !dbg !6004
  store i32 %4, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !6005, metadata !DIExpression()), !dbg !6006
  %12 = call i32 @_ZL21GetWriteConvertedDataPiPPvS_(i32* %9, i8** %10, i32* %11), !dbg !6007
  %13 = icmp eq i32 %12, 0, !dbg !6009
  br i1 %13, label %14, label %15, !dbg !6010

14:                                               ; preds = %5
  store i32 0, i32* %6, align 4, !dbg !6011
  br label %22, !dbg !6011

15:                                               ; preds = %5
  %16 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6012
  %17 = load i8*, i8** %8, align 8, !dbg !6013
  %18 = load i32, i32* %9, align 4, !dbg !6014
  %19 = load i8*, i8** %10, align 8, !dbg !6015
  %20 = load i32, i32* %11, align 4, !dbg !6016
  %21 = call i32 @_ZL19binn_object_set_rawP11binn_structPciPvi(%struct.binn_struct* %16, i8* %17, i32 %18, i8* %19, i32 %20), !dbg !6017
  store i32 %21, i32* %6, align 4, !dbg !6018
  br label %22, !dbg !6018

22:                                               ; preds = %15, %14
  %23 = load i32, i32* %6, align 4, !dbg !6019
  ret i32 %23, !dbg !6019
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL19binn_object_set_rawP11binn_structPciPvi(%struct.binn_struct* %0, i8* %1, i32 %2, i8* %3, i32 %4) #6 !dbg !6020 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !6021, metadata !DIExpression()), !dbg !6022
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !6023, metadata !DIExpression()), !dbg !6024
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !6025, metadata !DIExpression()), !dbg !6026
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !6027, metadata !DIExpression()), !dbg !6028
  store i32 %4, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !6029, metadata !DIExpression()), !dbg !6030
  call void @llvm.dbg.declare(metadata i8** %12, metadata !6031, metadata !DIExpression()), !dbg !6032
  call void @llvm.dbg.declare(metadata i8* %13, metadata !6033, metadata !DIExpression()), !dbg !6034
  call void @llvm.dbg.declare(metadata i32* %14, metadata !6035, metadata !DIExpression()), !dbg !6036
  %15 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6037
  %16 = icmp eq %struct.binn_struct* %15, null, !dbg !6039
  br i1 %16, label %27, label %17, !dbg !6040

17:                                               ; preds = %5
  %18 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6041
  %19 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %18, i32 0, i32 8, !dbg !6042
  %20 = load i32, i32* %19, align 4, !dbg !6042
  %21 = icmp ne i32 %20, 226, !dbg !6043
  br i1 %21, label %27, label %22, !dbg !6044

22:                                               ; preds = %17
  %23 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6045
  %24 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %23, i32 0, i32 2, !dbg !6046
  %25 = load i32, i32* %24, align 8, !dbg !6046
  %26 = icmp eq i32 %25, 0, !dbg !6047
  br i1 %26, label %27, label %28, !dbg !6048

27:                                               ; preds = %22, %17, %5
  store i32 0, i32* %6, align 4, !dbg !6049
  br label %104, !dbg !6049

28:                                               ; preds = %22
  %29 = load i8*, i8** %8, align 8, !dbg !6050
  %30 = icmp eq i8* %29, null, !dbg !6052
  br i1 %30, label %31, label %32, !dbg !6053

31:                                               ; preds = %28
  store i32 0, i32* %6, align 4, !dbg !6054
  br label %104, !dbg !6054

32:                                               ; preds = %28
  %33 = load i8*, i8** %8, align 8, !dbg !6055
  %34 = call i64 @strlen(i8* %33), !dbg !6056
  %35 = trunc i64 %34 to i32, !dbg !6056
  store i32 %35, i32* %14, align 4, !dbg !6057
  %36 = load i32, i32* %14, align 4, !dbg !6058
  %37 = icmp sgt i32 %36, 255, !dbg !6060
  br i1 %37, label %38, label %39, !dbg !6061

38:                                               ; preds = %32
  store i32 0, i32* %6, align 4, !dbg !6062
  br label %104, !dbg !6062

39:                                               ; preds = %32
  %40 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6063
  %41 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %40, i32 0, i32 4, !dbg !6064
  %42 = load i8*, i8** %41, align 8, !dbg !6064
  %43 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6065
  %44 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %43, i32 0, i32 7, !dbg !6066
  %45 = load i32, i32* %44, align 8, !dbg !6066
  %46 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6067
  %47 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %46, i32 0, i32 11, !dbg !6068
  %48 = load i32, i32* %47, align 4, !dbg !6068
  %49 = load i8*, i8** %8, align 8, !dbg !6069
  %50 = call i8* @_ZL12SearchForKeyPhiiiPc(i8* %42, i32 9, i32 %45, i32 %48, i8* %49), !dbg !6070
  store i8* %50, i8** %12, align 8, !dbg !6071
  %51 = load i8*, i8** %12, align 8, !dbg !6072
  %52 = icmp ne i8* %51, null, !dbg !6072
  br i1 %52, label %53, label %54, !dbg !6074

53:                                               ; preds = %39
  store i32 0, i32* %6, align 4, !dbg !6075
  br label %104, !dbg !6075

54:                                               ; preds = %39
  %55 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6076
  %56 = load i32, i32* %14, align 4, !dbg !6078
  %57 = add nsw i32 1, %56, !dbg !6079
  %58 = call i32 @_ZL15CheckAllocationP11binn_structi(%struct.binn_struct* %55, i32 %57), !dbg !6080
  %59 = icmp eq i32 %58, 0, !dbg !6081
  br i1 %59, label %60, label %61, !dbg !6082

60:                                               ; preds = %54
  store i32 0, i32* %6, align 4, !dbg !6083
  br label %104, !dbg !6083

61:                                               ; preds = %54
  %62 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6084
  %63 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %62, i32 0, i32 4, !dbg !6085
  %64 = load i8*, i8** %63, align 8, !dbg !6085
  %65 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6086
  %66 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %65, i32 0, i32 7, !dbg !6087
  %67 = load i32, i32* %66, align 8, !dbg !6087
  %68 = sext i32 %67 to i64, !dbg !6088
  %69 = getelementptr inbounds i8, i8* %64, i64 %68, !dbg !6088
  store i8* %69, i8** %12, align 8, !dbg !6089
  %70 = load i32, i32* %14, align 4, !dbg !6090
  %71 = trunc i32 %70 to i8, !dbg !6090
  store i8 %71, i8* %13, align 1, !dbg !6091
  %72 = load i8, i8* %13, align 1, !dbg !6092
  %73 = load i8*, i8** %12, align 8, !dbg !6093
  store i8 %72, i8* %73, align 1, !dbg !6094
  %74 = load i8*, i8** %12, align 8, !dbg !6095
  %75 = getelementptr inbounds i8, i8* %74, i32 1, !dbg !6095
  store i8* %75, i8** %12, align 8, !dbg !6095
  %76 = load i8*, i8** %12, align 8, !dbg !6096
  %77 = load i8*, i8** %8, align 8, !dbg !6097
  %78 = load i32, i32* %14, align 4, !dbg !6098
  %79 = sext i32 %78 to i64, !dbg !6098
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 %79, i1 false), !dbg !6099
  %80 = load i32, i32* %14, align 4, !dbg !6100
  %81 = add nsw i32 %80, 1, !dbg !6100
  store i32 %81, i32* %14, align 4, !dbg !6100
  %82 = load i32, i32* %14, align 4, !dbg !6101
  %83 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6102
  %84 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %83, i32 0, i32 7, !dbg !6103
  %85 = load i32, i32* %84, align 8, !dbg !6104
  %86 = add nsw i32 %85, %82, !dbg !6104
  store i32 %86, i32* %84, align 8, !dbg !6104
  %87 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6105
  %88 = load i32, i32* %9, align 4, !dbg !6107
  %89 = load i8*, i8** %10, align 8, !dbg !6108
  %90 = load i32, i32* %11, align 4, !dbg !6109
  %91 = call i32 @_ZL8AddValueP11binn_structiPvi(%struct.binn_struct* %87, i32 %88, i8* %89, i32 %90), !dbg !6110
  %92 = icmp eq i32 %91, 0, !dbg !6111
  br i1 %92, label %93, label %99, !dbg !6112

93:                                               ; preds = %61
  %94 = load i32, i32* %14, align 4, !dbg !6113
  %95 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6115
  %96 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %95, i32 0, i32 7, !dbg !6116
  %97 = load i32, i32* %96, align 8, !dbg !6117
  %98 = sub nsw i32 %97, %94, !dbg !6117
  store i32 %98, i32* %96, align 8, !dbg !6117
  store i32 0, i32* %6, align 4, !dbg !6118
  br label %104, !dbg !6118

99:                                               ; preds = %61
  %100 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6119
  %101 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %100, i32 0, i32 11, !dbg !6120
  %102 = load i32, i32* %101, align 4, !dbg !6121
  %103 = add nsw i32 %102, 1, !dbg !6121
  store i32 %103, i32* %101, align 4, !dbg !6121
  store i32 1, i32* %6, align 4, !dbg !6122
  br label %104, !dbg !6122

104:                                              ; preds = %99, %93, %60, %53, %38, %31, %27
  %105 = load i32, i32* %6, align 4, !dbg !6123
  ret i32 %105, !dbg !6123
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @_Z14binn_add_valueP11binn_structiiPciPvi(%struct.binn_struct* %0, i32 %1, i32 %2, i8* %3, i32 %4, i8* %5, i32 %6) #6 !dbg !6124 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.binn_struct*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %9, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %9, metadata !6127, metadata !DIExpression()), !dbg !6128
  store i32 %1, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !6129, metadata !DIExpression()), !dbg !6130
  store i32 %2, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !6131, metadata !DIExpression()), !dbg !6132
  store i8* %3, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !6133, metadata !DIExpression()), !dbg !6134
  store i32 %4, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !6135, metadata !DIExpression()), !dbg !6136
  store i8* %5, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !6137, metadata !DIExpression()), !dbg !6138
  store i32 %6, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !6139, metadata !DIExpression()), !dbg !6140
  %16 = load i32, i32* %10, align 4, !dbg !6141
  switch i32 %16, label %37 [
    i32 224, label %17
    i32 225, label %23
    i32 226, label %30
  ], !dbg !6142

17:                                               ; preds = %7
  %18 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6143
  %19 = load i32, i32* %13, align 4, !dbg !6145
  %20 = load i8*, i8** %14, align 8, !dbg !6146
  %21 = load i32, i32* %15, align 4, !dbg !6147
  %22 = call i32 @binn_list_add(%struct.binn_struct* %18, i32 %19, i8* %20, i32 %21), !dbg !6148
  store i32 %22, i32* %8, align 4, !dbg !6149
  br label %38, !dbg !6149

23:                                               ; preds = %7
  %24 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6150
  %25 = load i32, i32* %11, align 4, !dbg !6151
  %26 = load i32, i32* %13, align 4, !dbg !6152
  %27 = load i8*, i8** %14, align 8, !dbg !6153
  %28 = load i32, i32* %15, align 4, !dbg !6154
  %29 = call i32 @binn_map_set(%struct.binn_struct* %24, i32 %25, i32 %26, i8* %27, i32 %28), !dbg !6155
  store i32 %29, i32* %8, align 4, !dbg !6156
  br label %38, !dbg !6156

30:                                               ; preds = %7
  %31 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6157
  %32 = load i8*, i8** %12, align 8, !dbg !6158
  %33 = load i32, i32* %13, align 4, !dbg !6159
  %34 = load i8*, i8** %14, align 8, !dbg !6160
  %35 = load i32, i32* %15, align 4, !dbg !6161
  %36 = call i32 @binn_object_set(%struct.binn_struct* %31, i8* %32, i32 %33, i8* %34, i32 %35), !dbg !6162
  store i32 %36, i32* %8, align 4, !dbg !6163
  br label %38, !dbg !6163

37:                                               ; preds = %7
  store i32 0, i32* %8, align 4, !dbg !6164
  br label %38, !dbg !6164

38:                                               ; preds = %37, %30, %23, %17
  %39 = load i32, i32* %8, align 4, !dbg !6165
  ret i32 %39, !dbg !6165
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_add_new(%struct.binn_struct* %0, %struct.binn_struct* %1) #6 !dbg !6166 {
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca %struct.binn_struct*, align 8
  %6 = alloca %struct.binn_struct*, align 8
  %7 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %5, metadata !6169, metadata !DIExpression()), !dbg !6170
  store %struct.binn_struct* %1, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !6171, metadata !DIExpression()), !dbg !6172
  call void @llvm.dbg.declare(metadata i32* %7, metadata !6173, metadata !DIExpression()), !dbg !6174
  %8 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !6175
  %9 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6176
  store %struct.binn_struct* %8, %struct.binn_struct** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %3, metadata !6177, metadata !DIExpression()), !dbg !6179
  store %struct.binn_struct* %9, %struct.binn_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !6181, metadata !DIExpression()), !dbg !6182
  %10 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !6183
  %11 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !6184
  %12 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %11, i32 0, i32 8, !dbg !6185
  %13 = load i32, i32* %12, align 4, !dbg !6185
  %14 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !6186
  %15 = bitcast %struct.binn_struct* %14 to i8*, !dbg !6186
  %16 = call i8* @binn_ptr(i8* %15), !dbg !6187
  %17 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !6188
  %18 = bitcast %struct.binn_struct* %17 to i8*, !dbg !6188
  %19 = call i32 @binn_size(i8* %18), !dbg !6189
  %20 = call i32 @binn_list_add(%struct.binn_struct* %10, i32 %13, i8* %16, i32 %19), !dbg !6190
  store i32 %20, i32* %7, align 4, !dbg !6191
  %21 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6192
  %22 = icmp ne %struct.binn_struct* %21, null, !dbg !6192
  br i1 %22, label %23, label %27, !dbg !6194

23:                                               ; preds = %2
  %24 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !6195
  %25 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6196
  %26 = bitcast %struct.binn_struct* %25 to i8*, !dbg !6196
  call void %24(i8* %26), !dbg !6195
  br label %27, !dbg !6195

27:                                               ; preds = %23, %2
  %28 = load i32, i32* %7, align 4, !dbg !6197
  ret i32 %28, !dbg !6198
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_set_new(%struct.binn_struct* %0, i32 %1, %struct.binn_struct* %2) #6 !dbg !6199 {
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.binn_struct*, align 8
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.binn_struct*, align 8
  %10 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !6202, metadata !DIExpression()), !dbg !6203
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !6204, metadata !DIExpression()), !dbg !6205
  store %struct.binn_struct* %2, %struct.binn_struct** %9, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %9, metadata !6206, metadata !DIExpression()), !dbg !6207
  call void @llvm.dbg.declare(metadata i32* %10, metadata !6208, metadata !DIExpression()), !dbg !6209
  %11 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6210
  %12 = load i32, i32* %8, align 4, !dbg !6211
  %13 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6212
  store %struct.binn_struct* %11, %struct.binn_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !6213, metadata !DIExpression()), !dbg !6215
  store i32 %12, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !6217, metadata !DIExpression()), !dbg !6218
  store %struct.binn_struct* %13, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !6219, metadata !DIExpression()), !dbg !6220
  %14 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !6221
  %15 = load i32, i32* %5, align 4, !dbg !6222
  %16 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6223
  %17 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %16, i32 0, i32 8, !dbg !6224
  %18 = load i32, i32* %17, align 4, !dbg !6224
  %19 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6225
  %20 = bitcast %struct.binn_struct* %19 to i8*, !dbg !6225
  %21 = call i8* @binn_ptr(i8* %20), !dbg !6226
  %22 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6227
  %23 = bitcast %struct.binn_struct* %22 to i8*, !dbg !6227
  %24 = call i32 @binn_size(i8* %23), !dbg !6228
  %25 = call i32 @binn_map_set(%struct.binn_struct* %14, i32 %15, i32 %18, i8* %21, i32 %24), !dbg !6229
  store i32 %25, i32* %10, align 4, !dbg !6230
  %26 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6231
  %27 = icmp ne %struct.binn_struct* %26, null, !dbg !6231
  br i1 %27, label %28, label %32, !dbg !6233

28:                                               ; preds = %3
  %29 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !6234
  %30 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6235
  %31 = bitcast %struct.binn_struct* %30 to i8*, !dbg !6235
  call void %29(i8* %31), !dbg !6234
  br label %32, !dbg !6234

32:                                               ; preds = %28, %3
  %33 = load i32, i32* %10, align 4, !dbg !6236
  ret i32 %33, !dbg !6237
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_set_new(%struct.binn_struct* %0, i8* %1, %struct.binn_struct* %2) #6 !dbg !6238 {
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.binn_struct*, align 8
  %7 = alloca %struct.binn_struct*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca %struct.binn_struct*, align 8
  %10 = alloca i32, align 4
  store %struct.binn_struct* %0, %struct.binn_struct** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %7, metadata !6241, metadata !DIExpression()), !dbg !6242
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !6243, metadata !DIExpression()), !dbg !6244
  store %struct.binn_struct* %2, %struct.binn_struct** %9, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %9, metadata !6245, metadata !DIExpression()), !dbg !6246
  call void @llvm.dbg.declare(metadata i32* %10, metadata !6247, metadata !DIExpression()), !dbg !6248
  %11 = load %struct.binn_struct*, %struct.binn_struct** %7, align 8, !dbg !6249
  %12 = load i8*, i8** %8, align 8, !dbg !6250
  %13 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6251
  store %struct.binn_struct* %11, %struct.binn_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !6252, metadata !DIExpression()), !dbg !6254
  store i8* %12, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !6256, metadata !DIExpression()), !dbg !6257
  store %struct.binn_struct* %13, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !6258, metadata !DIExpression()), !dbg !6259
  %14 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !6260
  %15 = load i8*, i8** %5, align 8, !dbg !6261
  %16 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6262
  %17 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %16, i32 0, i32 8, !dbg !6263
  %18 = load i32, i32* %17, align 4, !dbg !6263
  %19 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6264
  %20 = bitcast %struct.binn_struct* %19 to i8*, !dbg !6264
  %21 = call i8* @binn_ptr(i8* %20), !dbg !6265
  %22 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6266
  %23 = bitcast %struct.binn_struct* %22 to i8*, !dbg !6266
  %24 = call i32 @binn_size(i8* %23), !dbg !6267
  %25 = call i32 @binn_object_set(%struct.binn_struct* %14, i8* %15, i32 %18, i8* %21, i32 %24), !dbg !6268
  store i32 %25, i32* %10, align 4, !dbg !6269
  %26 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6270
  %27 = icmp ne %struct.binn_struct* %26, null, !dbg !6270
  br i1 %27, label %28, label %32, !dbg !6272

28:                                               ; preds = %3
  %29 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !6273
  %30 = load %struct.binn_struct*, %struct.binn_struct** %9, align 8, !dbg !6274
  %31 = bitcast %struct.binn_struct* %30 to i8*, !dbg !6274
  call void %29(i8* %31), !dbg !6273
  br label %32, !dbg !6273

32:                                               ; preds = %28, %3
  %33 = load i32, i32* %10, align 4, !dbg !6275
  ret i32 %33, !dbg !6276
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_list_value(i8* %0, i32 %1) #6 !dbg !6277 {
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !6280, metadata !DIExpression()), !dbg !6281
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !6282, metadata !DIExpression()), !dbg !6283
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !6284, metadata !DIExpression()), !dbg !6285
  %7 = call i8* @_ZL11binn_malloci(i32 80), !dbg !6286
  %8 = bitcast i8* %7 to %struct.binn_struct*, !dbg !6287
  store %struct.binn_struct* %8, %struct.binn_struct** %6, align 8, !dbg !6288
  %9 = load i8*, i8** %4, align 8, !dbg !6289
  %10 = load i32, i32* %5, align 4, !dbg !6291
  %11 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6292
  %12 = call i32 @binn_list_get_value(i8* %9, i32 %10, %struct.binn_struct* %11), !dbg !6293
  %13 = icmp eq i32 %12, 0, !dbg !6294
  br i1 %13, label %14, label %18, !dbg !6295

14:                                               ; preds = %2
  %15 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !6296
  %16 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6298
  %17 = bitcast %struct.binn_struct* %16 to i8*, !dbg !6298
  call void %15(i8* %17), !dbg !6296
  store %struct.binn_struct* null, %struct.binn_struct** %3, align 8, !dbg !6299
  br label %22, !dbg !6299

18:                                               ; preds = %2
  %19 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6300
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %19, i32 0, i32 1, !dbg !6301
  store i32 1, i32* %20, align 4, !dbg !6302
  %21 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6303
  store %struct.binn_struct* %21, %struct.binn_struct** %3, align 8, !dbg !6304
  br label %22, !dbg !6304

22:                                               ; preds = %18, %14
  %23 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !6305
  ret %struct.binn_struct* %23, !dbg !6305
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_map_value(i8* %0, i32 %1) #6 !dbg !6306 {
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !6307, metadata !DIExpression()), !dbg !6308
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !6309, metadata !DIExpression()), !dbg !6310
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !6311, metadata !DIExpression()), !dbg !6312
  %7 = call i8* @_ZL11binn_malloci(i32 80), !dbg !6313
  %8 = bitcast i8* %7 to %struct.binn_struct*, !dbg !6314
  store %struct.binn_struct* %8, %struct.binn_struct** %6, align 8, !dbg !6315
  %9 = load i8*, i8** %4, align 8, !dbg !6316
  %10 = load i32, i32* %5, align 4, !dbg !6318
  %11 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6319
  %12 = call i32 @binn_map_get_value(i8* %9, i32 %10, %struct.binn_struct* %11), !dbg !6320
  %13 = icmp eq i32 %12, 0, !dbg !6321
  br i1 %13, label %14, label %18, !dbg !6322

14:                                               ; preds = %2
  %15 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !6323
  %16 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6325
  %17 = bitcast %struct.binn_struct* %16 to i8*, !dbg !6325
  call void %15(i8* %17), !dbg !6323
  store %struct.binn_struct* null, %struct.binn_struct** %3, align 8, !dbg !6326
  br label %22, !dbg !6326

18:                                               ; preds = %2
  %19 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6327
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %19, i32 0, i32 1, !dbg !6328
  store i32 1, i32* %20, align 4, !dbg !6329
  %21 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6330
  store %struct.binn_struct* %21, %struct.binn_struct** %3, align 8, !dbg !6331
  br label %22, !dbg !6331

22:                                               ; preds = %18, %14
  %23 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !6332
  ret %struct.binn_struct* %23, !dbg !6332
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_object_value(i8* %0, i8* %1) #6 !dbg !6333 {
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.binn_struct*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !6336, metadata !DIExpression()), !dbg !6337
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !6338, metadata !DIExpression()), !dbg !6339
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !6340, metadata !DIExpression()), !dbg !6341
  %7 = call i8* @_ZL11binn_malloci(i32 80), !dbg !6342
  %8 = bitcast i8* %7 to %struct.binn_struct*, !dbg !6343
  store %struct.binn_struct* %8, %struct.binn_struct** %6, align 8, !dbg !6344
  %9 = load i8*, i8** %4, align 8, !dbg !6345
  %10 = load i8*, i8** %5, align 8, !dbg !6347
  %11 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6348
  %12 = call i32 @binn_object_get_value(i8* %9, i8* %10, %struct.binn_struct* %11), !dbg !6349
  %13 = icmp eq i32 %12, 0, !dbg !6350
  br i1 %13, label %14, label %18, !dbg !6351

14:                                               ; preds = %2
  %15 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !6352
  %16 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6354
  %17 = bitcast %struct.binn_struct* %16 to i8*, !dbg !6354
  call void %15(i8* %17), !dbg !6352
  store %struct.binn_struct* null, %struct.binn_struct** %3, align 8, !dbg !6355
  br label %22, !dbg !6355

18:                                               ; preds = %2
  %19 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6356
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %19, i32 0, i32 1, !dbg !6357
  store i32 1, i32* %20, align 4, !dbg !6358
  %21 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !6359
  store %struct.binn_struct* %21, %struct.binn_struct** %3, align 8, !dbg !6360
  br label %22, !dbg !6360

22:                                               ; preds = %18, %14
  %23 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !6361
  ret %struct.binn_struct* %23, !dbg !6361
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_list_read(i8* %0, i32 %1, i32* %2, i32* %3) #6 !dbg !6362 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca %struct.binn_struct, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !6365, metadata !DIExpression()), !dbg !6366
  store i32 %1, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !6367, metadata !DIExpression()), !dbg !6368
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !6369, metadata !DIExpression()), !dbg !6370
  store i32* %3, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !6371, metadata !DIExpression()), !dbg !6372
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %10, metadata !6373, metadata !DIExpression()), !dbg !6374
  %11 = load i8*, i8** %6, align 8, !dbg !6375
  %12 = load i32, i32* %7, align 4, !dbg !6377
  %13 = call i32 @binn_list_get_value(i8* %11, i32 %12, %struct.binn_struct* %10), !dbg !6378
  %14 = icmp eq i32 %13, 0, !dbg !6379
  br i1 %14, label %15, label %16, !dbg !6380

15:                                               ; preds = %4
  store i8* null, i8** %5, align 8, !dbg !6381
  br label %32, !dbg !6381

16:                                               ; preds = %4
  %17 = load i32*, i32** %8, align 8, !dbg !6382
  %18 = icmp ne i32* %17, null, !dbg !6382
  br i1 %18, label %19, label %23, !dbg !6384

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 8, !dbg !6385
  %21 = load i32, i32* %20, align 4, !dbg !6385
  %22 = load i32*, i32** %8, align 8, !dbg !6386
  store i32 %21, i32* %22, align 4, !dbg !6387
  br label %23, !dbg !6388

23:                                               ; preds = %19, %16
  %24 = load i32*, i32** %9, align 8, !dbg !6389
  %25 = icmp ne i32* %24, null, !dbg !6389
  br i1 %25, label %26, label %30, !dbg !6391

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 10, !dbg !6392
  %28 = load i32, i32* %27, align 8, !dbg !6392
  %29 = load i32*, i32** %9, align 8, !dbg !6393
  store i32 %28, i32* %29, align 4, !dbg !6394
  br label %30, !dbg !6395

30:                                               ; preds = %26, %23
  %31 = call i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %10), !dbg !6396
  store i8* %31, i8** %5, align 8, !dbg !6397
  br label %32, !dbg !6397

32:                                               ; preds = %30, %15
  %33 = load i8*, i8** %5, align 8, !dbg !6398
  ret i8* %33, !dbg !6398
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_map_read(i8* %0, i32 %1, i32* %2, i32* %3) #6 !dbg !6399 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca %struct.binn_struct, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !6400, metadata !DIExpression()), !dbg !6401
  store i32 %1, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !6402, metadata !DIExpression()), !dbg !6403
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !6404, metadata !DIExpression()), !dbg !6405
  store i32* %3, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !6406, metadata !DIExpression()), !dbg !6407
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %10, metadata !6408, metadata !DIExpression()), !dbg !6409
  %11 = load i8*, i8** %6, align 8, !dbg !6410
  %12 = load i32, i32* %7, align 4, !dbg !6412
  %13 = call i32 @binn_map_get_value(i8* %11, i32 %12, %struct.binn_struct* %10), !dbg !6413
  %14 = icmp eq i32 %13, 0, !dbg !6414
  br i1 %14, label %15, label %16, !dbg !6415

15:                                               ; preds = %4
  store i8* null, i8** %5, align 8, !dbg !6416
  br label %32, !dbg !6416

16:                                               ; preds = %4
  %17 = load i32*, i32** %8, align 8, !dbg !6417
  %18 = icmp ne i32* %17, null, !dbg !6417
  br i1 %18, label %19, label %23, !dbg !6419

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 8, !dbg !6420
  %21 = load i32, i32* %20, align 4, !dbg !6420
  %22 = load i32*, i32** %8, align 8, !dbg !6421
  store i32 %21, i32* %22, align 4, !dbg !6422
  br label %23, !dbg !6423

23:                                               ; preds = %19, %16
  %24 = load i32*, i32** %9, align 8, !dbg !6424
  %25 = icmp ne i32* %24, null, !dbg !6424
  br i1 %25, label %26, label %30, !dbg !6426

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 10, !dbg !6427
  %28 = load i32, i32* %27, align 8, !dbg !6427
  %29 = load i32*, i32** %9, align 8, !dbg !6428
  store i32 %28, i32* %29, align 4, !dbg !6429
  br label %30, !dbg !6430

30:                                               ; preds = %26, %23
  %31 = call i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %10), !dbg !6431
  store i8* %31, i8** %5, align 8, !dbg !6432
  br label %32, !dbg !6432

32:                                               ; preds = %30, %15
  %33 = load i8*, i8** %5, align 8, !dbg !6433
  ret i8* %33, !dbg !6433
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_object_read(i8* %0, i8* %1, i32* %2, i32* %3) #6 !dbg !6434 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca %struct.binn_struct, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !6437, metadata !DIExpression()), !dbg !6438
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !6439, metadata !DIExpression()), !dbg !6440
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !6441, metadata !DIExpression()), !dbg !6442
  store i32* %3, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !6443, metadata !DIExpression()), !dbg !6444
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %10, metadata !6445, metadata !DIExpression()), !dbg !6446
  %11 = load i8*, i8** %6, align 8, !dbg !6447
  %12 = load i8*, i8** %7, align 8, !dbg !6449
  %13 = call i32 @binn_object_get_value(i8* %11, i8* %12, %struct.binn_struct* %10), !dbg !6450
  %14 = icmp eq i32 %13, 0, !dbg !6451
  br i1 %14, label %15, label %16, !dbg !6452

15:                                               ; preds = %4
  store i8* null, i8** %5, align 8, !dbg !6453
  br label %32, !dbg !6453

16:                                               ; preds = %4
  %17 = load i32*, i32** %8, align 8, !dbg !6454
  %18 = icmp ne i32* %17, null, !dbg !6454
  br i1 %18, label %19, label %23, !dbg !6456

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 8, !dbg !6457
  %21 = load i32, i32* %20, align 4, !dbg !6457
  %22 = load i32*, i32** %8, align 8, !dbg !6458
  store i32 %21, i32* %22, align 4, !dbg !6459
  br label %23, !dbg !6460

23:                                               ; preds = %19, %16
  %24 = load i32*, i32** %9, align 8, !dbg !6461
  %25 = icmp ne i32* %24, null, !dbg !6461
  br i1 %25, label %26, label %30, !dbg !6463

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 10, !dbg !6464
  %28 = load i32, i32* %27, align 8, !dbg !6464
  %29 = load i32*, i32** %9, align 8, !dbg !6465
  store i32 %28, i32* %29, align 4, !dbg !6466
  br label %30, !dbg !6467

30:                                               ; preds = %26, %23
  %31 = call i8* @_ZL11store_valueP11binn_struct(%struct.binn_struct* %10), !dbg !6468
  store i8* %31, i8** %5, align 8, !dbg !6469
  br label %32, !dbg !6469

32:                                               ; preds = %30, %15
  %33 = load i8*, i8** %5, align 8, !dbg !6470
  ret i8* %33, !dbg !6470
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_get(i8* %0, i32 %1, i32 %2, i8* %3, i32* %4) #6 !dbg !6471 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca %struct.binn_struct, align 8
  %13 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !6474, metadata !DIExpression()), !dbg !6475
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !6476, metadata !DIExpression()), !dbg !6477
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !6478, metadata !DIExpression()), !dbg !6479
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !6480, metadata !DIExpression()), !dbg !6481
  store i32* %4, i32** %11, align 8
  call void @llvm.dbg.declare(metadata i32** %11, metadata !6482, metadata !DIExpression()), !dbg !6483
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %12, metadata !6484, metadata !DIExpression()), !dbg !6485
  call void @llvm.dbg.declare(metadata i32* %13, metadata !6486, metadata !DIExpression()), !dbg !6487
  %14 = load i32, i32* %9, align 4, !dbg !6488
  %15 = call i32 @binn_get_read_storage(i32 %14), !dbg !6489
  store i32 %15, i32* %13, align 4, !dbg !6490
  %16 = load i32, i32* %13, align 4, !dbg !6491
  %17 = icmp ne i32 %16, 0, !dbg !6493
  br i1 %17, label %18, label %22, !dbg !6494

18:                                               ; preds = %5
  %19 = load i8*, i8** %10, align 8, !dbg !6495
  %20 = icmp eq i8* %19, null, !dbg !6496
  br i1 %20, label %21, label %22, !dbg !6497

21:                                               ; preds = %18
  store i32 0, i32* %6, align 4, !dbg !6498
  br label %49, !dbg !6498

22:                                               ; preds = %18, %5
  %23 = load i8*, i8** %10, align 8, !dbg !6499
  %24 = load i32, i32* %9, align 4, !dbg !6500
  call void @_ZL10zero_valuePvi(i8* %23, i32 %24), !dbg !6501
  %25 = load i8*, i8** %7, align 8, !dbg !6502
  %26 = load i32, i32* %8, align 4, !dbg !6504
  %27 = call i32 @binn_list_get_value(i8* %25, i32 %26, %struct.binn_struct* %12), !dbg !6505
  %28 = icmp eq i32 %27, 0, !dbg !6506
  br i1 %28, label %29, label %30, !dbg !6507

29:                                               ; preds = %22
  store i32 0, i32* %6, align 4, !dbg !6508
  br label %49, !dbg !6508

30:                                               ; preds = %22
  %31 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 9, !dbg !6509
  %32 = load i8*, i8** %31, align 8, !dbg !6509
  %33 = load i8*, i8** %10, align 8, !dbg !6511
  %34 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 8, !dbg !6512
  %35 = load i32, i32* %34, align 4, !dbg !6512
  %36 = load i32, i32* %9, align 4, !dbg !6513
  %37 = load i32, i32* %13, align 4, !dbg !6514
  %38 = call i32 @_ZL10copy_valuePvS_iii(i8* %32, i8* %33, i32 %35, i32 %36, i32 %37), !dbg !6515
  %39 = icmp eq i32 %38, 0, !dbg !6516
  br i1 %39, label %40, label %41, !dbg !6517

40:                                               ; preds = %30
  store i32 0, i32* %6, align 4, !dbg !6518
  br label %49, !dbg !6518

41:                                               ; preds = %30
  %42 = load i32*, i32** %11, align 8, !dbg !6519
  %43 = icmp ne i32* %42, null, !dbg !6519
  br i1 %43, label %44, label %48, !dbg !6521

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 10, !dbg !6522
  %46 = load i32, i32* %45, align 8, !dbg !6522
  %47 = load i32*, i32** %11, align 8, !dbg !6523
  store i32 %46, i32* %47, align 4, !dbg !6524
  br label %48, !dbg !6525

48:                                               ; preds = %44, %41
  store i32 1, i32* %6, align 4, !dbg !6526
  br label %49, !dbg !6526

49:                                               ; preds = %48, %40, %29, %21
  %50 = load i32, i32* %6, align 4, !dbg !6527
  ret i32 %50, !dbg !6527
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL10zero_valuePvi(i8* %0, i32 %1) #0 !dbg !6528 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !6531, metadata !DIExpression()), !dbg !6532
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !6533, metadata !DIExpression()), !dbg !6534
  %5 = load i32, i32* %4, align 4, !dbg !6535
  %6 = call i32 @binn_get_read_storage(i32 %5), !dbg !6536
  switch i32 %6, label %22 [
    i32 0, label %7
    i32 32, label %8
    i32 64, label %10
    i32 96, label %13
    i32 128, label %16
    i32 192, label %19
    i32 160, label %19
    i32 224, label %19
  ], !dbg !6537

7:                                                ; preds = %2
  br label %22, !dbg !6538

8:                                                ; preds = %2
  %9 = load i8*, i8** %3, align 8, !dbg !6540
  store i8 0, i8* %9, align 1, !dbg !6541
  br label %22, !dbg !6542

10:                                               ; preds = %2
  %11 = load i8*, i8** %3, align 8, !dbg !6543
  %12 = bitcast i8* %11 to i16*, !dbg !6544
  store i16 0, i16* %12, align 2, !dbg !6545
  br label %22, !dbg !6546

13:                                               ; preds = %2
  %14 = load i8*, i8** %3, align 8, !dbg !6547
  %15 = bitcast i8* %14 to i32*, !dbg !6548
  store i32 0, i32* %15, align 4, !dbg !6549
  br label %22, !dbg !6550

16:                                               ; preds = %2
  %17 = load i8*, i8** %3, align 8, !dbg !6551
  %18 = bitcast i8* %17 to i64*, !dbg !6552
  store i64 0, i64* %18, align 8, !dbg !6553
  br label %22, !dbg !6554

19:                                               ; preds = %2, %2, %2
  %20 = load i8*, i8** %3, align 8, !dbg !6555
  %21 = bitcast i8* %20 to i8**, !dbg !6556
  store i8* null, i8** %21, align 8, !dbg !6557
  br label %22, !dbg !6558

22:                                               ; preds = %2, %19, %16, %13, %10, %8, %7
  ret void, !dbg !6559
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL10copy_valuePvS_iii(i8* %0, i8* %1, i32 %2, i32 %3, i32 %4) #6 !dbg !6560 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !6563, metadata !DIExpression()), !dbg !6564
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !6565, metadata !DIExpression()), !dbg !6566
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !6567, metadata !DIExpression()), !dbg !6568
  store i32 %3, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !6569, metadata !DIExpression()), !dbg !6570
  store i32 %4, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !6571, metadata !DIExpression()), !dbg !6572
  %12 = load i32, i32* %9, align 4, !dbg !6573
  %13 = call i32 @_ZL11type_familyi(i32 %12), !dbg !6575
  %14 = load i32, i32* %10, align 4, !dbg !6576
  %15 = call i32 @_ZL11type_familyi(i32 %14), !dbg !6577
  %16 = icmp ne i32 %13, %15, !dbg !6578
  br i1 %16, label %17, label %18, !dbg !6579

17:                                               ; preds = %5
  store i32 0, i32* %6, align 4, !dbg !6580
  br label %51, !dbg !6580

18:                                               ; preds = %5
  %19 = load i32, i32* %9, align 4, !dbg !6581
  %20 = call i32 @_ZL11type_familyi(i32 %19), !dbg !6583
  %21 = icmp eq i32 %20, 242, !dbg !6584
  br i1 %21, label %22, label %32, !dbg !6585

22:                                               ; preds = %18
  %23 = load i32, i32* %9, align 4, !dbg !6586
  %24 = load i32, i32* %10, align 4, !dbg !6587
  %25 = icmp ne i32 %23, %24, !dbg !6588
  br i1 %25, label %26, label %32, !dbg !6589

26:                                               ; preds = %22
  %27 = load i8*, i8** %7, align 8, !dbg !6590
  %28 = load i8*, i8** %8, align 8, !dbg !6592
  %29 = load i32, i32* %9, align 4, !dbg !6593
  %30 = load i32, i32* %10, align 4, !dbg !6594
  %31 = call i32 @_ZL14copy_int_valuePvS_ii(i8* %27, i8* %28, i32 %29, i32 %30), !dbg !6595
  store i32 %31, i32* %6, align 4, !dbg !6596
  br label %51, !dbg !6596

32:                                               ; preds = %22, %18
  %33 = load i32, i32* %9, align 4, !dbg !6597
  %34 = call i32 @_ZL11type_familyi(i32 %33), !dbg !6599
  %35 = icmp eq i32 %34, 243, !dbg !6600
  br i1 %35, label %36, label %46, !dbg !6601

36:                                               ; preds = %32
  %37 = load i32, i32* %9, align 4, !dbg !6602
  %38 = load i32, i32* %10, align 4, !dbg !6603
  %39 = icmp ne i32 %37, %38, !dbg !6604
  br i1 %39, label %40, label %46, !dbg !6605

40:                                               ; preds = %36
  %41 = load i8*, i8** %7, align 8, !dbg !6606
  %42 = load i8*, i8** %8, align 8, !dbg !6608
  %43 = load i32, i32* %9, align 4, !dbg !6609
  %44 = load i32, i32* %10, align 4, !dbg !6610
  %45 = call i32 @_ZL16copy_float_valuePvS_ii(i8* %41, i8* %42, i32 %43, i32 %44), !dbg !6611
  store i32 %45, i32* %6, align 4, !dbg !6612
  br label %51, !dbg !6612

46:                                               ; preds = %36, %32
  %47 = load i8*, i8** %7, align 8, !dbg !6613
  %48 = load i8*, i8** %8, align 8, !dbg !6615
  %49 = load i32, i32* %11, align 4, !dbg !6616
  %50 = call i32 @_ZL14copy_raw_valuePvS_i(i8* %47, i8* %48, i32 %49), !dbg !6617
  store i32 %50, i32* %6, align 4, !dbg !6618
  br label %51, !dbg !6618

51:                                               ; preds = %46, %40, %26, %17
  %52 = load i32, i32* %6, align 4, !dbg !6619
  ret i32 %52, !dbg !6619
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL14copy_int_valuePvS_ii(i8* %0, i8* %1, i32 %2, i32 %3) #6 !dbg !6620 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !6623, metadata !DIExpression()), !dbg !6624
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !6625, metadata !DIExpression()), !dbg !6626
  store i32 %2, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !6627, metadata !DIExpression()), !dbg !6628
  store i32 %3, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !6629, metadata !DIExpression()), !dbg !6630
  call void @llvm.dbg.declare(metadata i64* %10, metadata !6631, metadata !DIExpression()), !dbg !6632
  call void @llvm.dbg.declare(metadata i64* %11, metadata !6633, metadata !DIExpression()), !dbg !6634
  %12 = load i32, i32* %8, align 4, !dbg !6635
  switch i32 %12, label %49 [
    i32 33, label %13
    i32 65, label %17
    i32 97, label %22
    i32 129, label %27
    i32 32, label %31
    i32 64, label %35
    i32 96, label %40
    i32 128, label %45
  ], !dbg !6636

13:                                               ; preds = %4
  %14 = load i8*, i8** %6, align 8, !dbg !6637
  %15 = load i8, i8* %14, align 1, !dbg !6639
  %16 = sext i8 %15 to i64, !dbg !6639
  store i64 %16, i64* %11, align 8, !dbg !6640
  br label %50, !dbg !6641

17:                                               ; preds = %4
  %18 = load i8*, i8** %6, align 8, !dbg !6642
  %19 = bitcast i8* %18 to i16*, !dbg !6643
  %20 = load i16, i16* %19, align 2, !dbg !6644
  %21 = sext i16 %20 to i64, !dbg !6644
  store i64 %21, i64* %11, align 8, !dbg !6645
  br label %50, !dbg !6646

22:                                               ; preds = %4
  %23 = load i8*, i8** %6, align 8, !dbg !6647
  %24 = bitcast i8* %23 to i32*, !dbg !6648
  %25 = load i32, i32* %24, align 4, !dbg !6649
  %26 = sext i32 %25 to i64, !dbg !6649
  store i64 %26, i64* %11, align 8, !dbg !6650
  br label %50, !dbg !6651

27:                                               ; preds = %4
  %28 = load i8*, i8** %6, align 8, !dbg !6652
  %29 = bitcast i8* %28 to i64*, !dbg !6653
  %30 = load i64, i64* %29, align 8, !dbg !6654
  store i64 %30, i64* %11, align 8, !dbg !6655
  br label %50, !dbg !6656

31:                                               ; preds = %4
  %32 = load i8*, i8** %6, align 8, !dbg !6657
  %33 = load i8, i8* %32, align 1, !dbg !6658
  %34 = zext i8 %33 to i64, !dbg !6658
  store i64 %34, i64* %10, align 8, !dbg !6659
  br label %50, !dbg !6660

35:                                               ; preds = %4
  %36 = load i8*, i8** %6, align 8, !dbg !6661
  %37 = bitcast i8* %36 to i16*, !dbg !6662
  %38 = load i16, i16* %37, align 2, !dbg !6663
  %39 = zext i16 %38 to i64, !dbg !6663
  store i64 %39, i64* %10, align 8, !dbg !6664
  br label %50, !dbg !6665

40:                                               ; preds = %4
  %41 = load i8*, i8** %6, align 8, !dbg !6666
  %42 = bitcast i8* %41 to i32*, !dbg !6667
  %43 = load i32, i32* %42, align 4, !dbg !6668
  %44 = zext i32 %43 to i64, !dbg !6668
  store i64 %44, i64* %10, align 8, !dbg !6669
  br label %50, !dbg !6670

45:                                               ; preds = %4
  %46 = load i8*, i8** %6, align 8, !dbg !6671
  %47 = bitcast i8* %46 to i64*, !dbg !6672
  %48 = load i64, i64* %47, align 8, !dbg !6673
  store i64 %48, i64* %10, align 8, !dbg !6674
  br label %50, !dbg !6675

49:                                               ; preds = %4
  store i32 0, i32* %5, align 4, !dbg !6676
  br label %152, !dbg !6676

50:                                               ; preds = %45, %40, %35, %31, %27, %22, %17, %13
  %51 = load i32, i32* %8, align 4, !dbg !6677
  %52 = call i32 @_ZL8int_typei(i32 %51), !dbg !6679
  %53 = icmp eq i32 %52, 22, !dbg !6680
  br i1 %53, label %54, label %64, !dbg !6681

54:                                               ; preds = %50
  %55 = load i32, i32* %9, align 4, !dbg !6682
  %56 = call i32 @_ZL8int_typei(i32 %55), !dbg !6683
  %57 = icmp eq i32 %56, 11, !dbg !6684
  br i1 %57, label %58, label %64, !dbg !6685

58:                                               ; preds = %54
  %59 = load i64, i64* %10, align 8, !dbg !6686
  %60 = icmp ugt i64 %59, 9223372036854775807, !dbg !6689
  br i1 %60, label %61, label %62, !dbg !6690

61:                                               ; preds = %58
  store i32 0, i32* %5, align 4, !dbg !6691
  br label %152, !dbg !6691

62:                                               ; preds = %58
  %63 = load i64, i64* %10, align 8, !dbg !6692
  store i64 %63, i64* %11, align 8, !dbg !6693
  br label %79, !dbg !6694

64:                                               ; preds = %54, %50
  %65 = load i32, i32* %8, align 4, !dbg !6695
  %66 = call i32 @_ZL8int_typei(i32 %65), !dbg !6697
  %67 = icmp eq i32 %66, 11, !dbg !6698
  br i1 %67, label %68, label %78, !dbg !6699

68:                                               ; preds = %64
  %69 = load i32, i32* %9, align 4, !dbg !6700
  %70 = call i32 @_ZL8int_typei(i32 %69), !dbg !6701
  %71 = icmp eq i32 %70, 22, !dbg !6702
  br i1 %71, label %72, label %78, !dbg !6703

72:                                               ; preds = %68
  %73 = load i64, i64* %11, align 8, !dbg !6704
  %74 = icmp slt i64 %73, 0, !dbg !6707
  br i1 %74, label %75, label %76, !dbg !6708

75:                                               ; preds = %72
  store i32 0, i32* %5, align 4, !dbg !6709
  br label %152, !dbg !6709

76:                                               ; preds = %72
  %77 = load i64, i64* %11, align 8, !dbg !6710
  store i64 %77, i64* %10, align 8, !dbg !6711
  br label %78, !dbg !6712

78:                                               ; preds = %76, %68, %64
  br label %79

79:                                               ; preds = %78, %62
  %80 = load i32, i32* %9, align 4, !dbg !6713
  switch i32 %80, label %150 [
    i32 33, label %81
    i32 65, label %92
    i32 97, label %104
    i32 129, label %116
    i32 32, label %120
    i32 64, label %128
    i32 96, label %137
    i32 128, label %146
  ], !dbg !6714

81:                                               ; preds = %79
  %82 = load i64, i64* %11, align 8, !dbg !6715
  %83 = icmp slt i64 %82, -128, !dbg !6718
  br i1 %83, label %87, label %84, !dbg !6719

84:                                               ; preds = %81
  %85 = load i64, i64* %11, align 8, !dbg !6720
  %86 = icmp sgt i64 %85, 127, !dbg !6721
  br i1 %86, label %87, label %88, !dbg !6722

87:                                               ; preds = %84, %81
  store i32 0, i32* %5, align 4, !dbg !6723
  br label %152, !dbg !6723

88:                                               ; preds = %84
  %89 = load i64, i64* %11, align 8, !dbg !6724
  %90 = trunc i64 %89 to i8, !dbg !6724
  %91 = load i8*, i8** %7, align 8, !dbg !6725
  store i8 %90, i8* %91, align 1, !dbg !6726
  br label %151, !dbg !6727

92:                                               ; preds = %79
  %93 = load i64, i64* %11, align 8, !dbg !6728
  %94 = icmp slt i64 %93, -32768, !dbg !6730
  br i1 %94, label %98, label %95, !dbg !6731

95:                                               ; preds = %92
  %96 = load i64, i64* %11, align 8, !dbg !6732
  %97 = icmp sgt i64 %96, 32767, !dbg !6733
  br i1 %97, label %98, label %99, !dbg !6734

98:                                               ; preds = %95, %92
  store i32 0, i32* %5, align 4, !dbg !6735
  br label %152, !dbg !6735

99:                                               ; preds = %95
  %100 = load i64, i64* %11, align 8, !dbg !6736
  %101 = trunc i64 %100 to i16, !dbg !6736
  %102 = load i8*, i8** %7, align 8, !dbg !6737
  %103 = bitcast i8* %102 to i16*, !dbg !6738
  store i16 %101, i16* %103, align 2, !dbg !6739
  br label %151, !dbg !6740

104:                                              ; preds = %79
  %105 = load i64, i64* %11, align 8, !dbg !6741
  %106 = icmp slt i64 %105, -2147483648, !dbg !6743
  br i1 %106, label %110, label %107, !dbg !6744

107:                                              ; preds = %104
  %108 = load i64, i64* %11, align 8, !dbg !6745
  %109 = icmp sgt i64 %108, 2147483647, !dbg !6746
  br i1 %109, label %110, label %111, !dbg !6747

110:                                              ; preds = %107, %104
  store i32 0, i32* %5, align 4, !dbg !6748
  br label %152, !dbg !6748

111:                                              ; preds = %107
  %112 = load i64, i64* %11, align 8, !dbg !6749
  %113 = trunc i64 %112 to i32, !dbg !6749
  %114 = load i8*, i8** %7, align 8, !dbg !6750
  %115 = bitcast i8* %114 to i32*, !dbg !6751
  store i32 %113, i32* %115, align 4, !dbg !6752
  br label %151, !dbg !6753

116:                                              ; preds = %79
  %117 = load i64, i64* %11, align 8, !dbg !6754
  %118 = load i8*, i8** %7, align 8, !dbg !6755
  %119 = bitcast i8* %118 to i64*, !dbg !6756
  store i64 %117, i64* %119, align 8, !dbg !6757
  br label %151, !dbg !6758

120:                                              ; preds = %79
  %121 = load i64, i64* %10, align 8, !dbg !6759
  %122 = icmp ugt i64 %121, 255, !dbg !6761
  br i1 %122, label %123, label %124, !dbg !6762

123:                                              ; preds = %120
  store i32 0, i32* %5, align 4, !dbg !6763
  br label %152, !dbg !6763

124:                                              ; preds = %120
  %125 = load i64, i64* %10, align 8, !dbg !6764
  %126 = trunc i64 %125 to i8, !dbg !6764
  %127 = load i8*, i8** %7, align 8, !dbg !6765
  store i8 %126, i8* %127, align 1, !dbg !6766
  br label %151, !dbg !6767

128:                                              ; preds = %79
  %129 = load i64, i64* %10, align 8, !dbg !6768
  %130 = icmp ugt i64 %129, 65535, !dbg !6770
  br i1 %130, label %131, label %132, !dbg !6771

131:                                              ; preds = %128
  store i32 0, i32* %5, align 4, !dbg !6772
  br label %152, !dbg !6772

132:                                              ; preds = %128
  %133 = load i64, i64* %10, align 8, !dbg !6773
  %134 = trunc i64 %133 to i16, !dbg !6773
  %135 = load i8*, i8** %7, align 8, !dbg !6774
  %136 = bitcast i8* %135 to i16*, !dbg !6775
  store i16 %134, i16* %136, align 2, !dbg !6776
  br label %151, !dbg !6777

137:                                              ; preds = %79
  %138 = load i64, i64* %10, align 8, !dbg !6778
  %139 = icmp ugt i64 %138, 4294967295, !dbg !6780
  br i1 %139, label %140, label %141, !dbg !6781

140:                                              ; preds = %137
  store i32 0, i32* %5, align 4, !dbg !6782
  br label %152, !dbg !6782

141:                                              ; preds = %137
  %142 = load i64, i64* %10, align 8, !dbg !6783
  %143 = trunc i64 %142 to i32, !dbg !6783
  %144 = load i8*, i8** %7, align 8, !dbg !6784
  %145 = bitcast i8* %144 to i32*, !dbg !6785
  store i32 %143, i32* %145, align 4, !dbg !6786
  br label %151, !dbg !6787

146:                                              ; preds = %79
  %147 = load i64, i64* %10, align 8, !dbg !6788
  %148 = load i8*, i8** %7, align 8, !dbg !6789
  %149 = bitcast i8* %148 to i64*, !dbg !6790
  store i64 %147, i64* %149, align 8, !dbg !6791
  br label %151, !dbg !6792

150:                                              ; preds = %79
  store i32 0, i32* %5, align 4, !dbg !6793
  br label %152, !dbg !6793

151:                                              ; preds = %146, %141, %132, %124, %116, %111, %99, %88
  store i32 1, i32* %5, align 4, !dbg !6794
  br label %152, !dbg !6794

152:                                              ; preds = %151, %150, %140, %131, %123, %110, %98, %87, %75, %61, %49
  %153 = load i32, i32* %5, align 4, !dbg !6795
  ret i32 %153, !dbg !6795
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL16copy_float_valuePvS_ii(i8* %0, i8* %1, i32 %2, i32 %3) #0 !dbg !6796 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !6797, metadata !DIExpression()), !dbg !6798
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !6799, metadata !DIExpression()), !dbg !6800
  store i32 %2, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !6801, metadata !DIExpression()), !dbg !6802
  store i32 %3, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !6803, metadata !DIExpression()), !dbg !6804
  %10 = load i32, i32* %8, align 4, !dbg !6805
  switch i32 %10, label %25 [
    i32 98, label %11
    i32 130, label %18
  ], !dbg !6806

11:                                               ; preds = %4
  %12 = load i8*, i8** %6, align 8, !dbg !6807
  %13 = bitcast i8* %12 to float*, !dbg !6809
  %14 = load float, float* %13, align 4, !dbg !6810
  %15 = fpext float %14 to double, !dbg !6810
  %16 = load i8*, i8** %7, align 8, !dbg !6811
  %17 = bitcast i8* %16 to double*, !dbg !6812
  store double %15, double* %17, align 8, !dbg !6813
  br label %26, !dbg !6814

18:                                               ; preds = %4
  %19 = load i8*, i8** %6, align 8, !dbg !6815
  %20 = bitcast i8* %19 to double*, !dbg !6816
  %21 = load double, double* %20, align 8, !dbg !6817
  %22 = fptrunc double %21 to float, !dbg !6817
  %23 = load i8*, i8** %7, align 8, !dbg !6818
  %24 = bitcast i8* %23 to float*, !dbg !6819
  store float %22, float* %24, align 4, !dbg !6820
  br label %26, !dbg !6821

25:                                               ; preds = %4
  store i32 0, i32* %5, align 4, !dbg !6822
  br label %27, !dbg !6822

26:                                               ; preds = %18, %11
  store i32 1, i32* %5, align 4, !dbg !6823
  br label %27, !dbg !6823

27:                                               ; preds = %26, %25
  %28 = load i32, i32* %5, align 4, !dbg !6824
  ret i32 %28, !dbg !6824
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL14copy_raw_valuePvS_i(i8* %0, i8* %1, i32 %2) #0 !dbg !6825 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !6828, metadata !DIExpression()), !dbg !6829
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !6830, metadata !DIExpression()), !dbg !6831
  store i32 %2, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !6832, metadata !DIExpression()), !dbg !6833
  %8 = load i32, i32* %7, align 4, !dbg !6834
  switch i32 %8, label %36 [
    i32 0, label %9
    i32 32, label %10
    i32 64, label %14
    i32 96, label %20
    i32 128, label %26
    i32 192, label %32
    i32 160, label %32
    i32 224, label %32
  ], !dbg !6835

9:                                                ; preds = %3
  br label %37, !dbg !6836

10:                                               ; preds = %3
  %11 = load i8*, i8** %5, align 8, !dbg !6838
  %12 = load i8, i8* %11, align 1, !dbg !6839
  %13 = load i8*, i8** %6, align 8, !dbg !6840
  store i8 %12, i8* %13, align 1, !dbg !6841
  br label %37, !dbg !6842

14:                                               ; preds = %3
  %15 = load i8*, i8** %5, align 8, !dbg !6843
  %16 = bitcast i8* %15 to i16*, !dbg !6844
  %17 = load i16, i16* %16, align 2, !dbg !6845
  %18 = load i8*, i8** %6, align 8, !dbg !6846
  %19 = bitcast i8* %18 to i16*, !dbg !6847
  store i16 %17, i16* %19, align 2, !dbg !6848
  br label %37, !dbg !6849

20:                                               ; preds = %3
  %21 = load i8*, i8** %5, align 8, !dbg !6850
  %22 = bitcast i8* %21 to i32*, !dbg !6851
  %23 = load i32, i32* %22, align 4, !dbg !6852
  %24 = load i8*, i8** %6, align 8, !dbg !6853
  %25 = bitcast i8* %24 to i32*, !dbg !6854
  store i32 %23, i32* %25, align 4, !dbg !6855
  br label %37, !dbg !6856

26:                                               ; preds = %3
  %27 = load i8*, i8** %5, align 8, !dbg !6857
  %28 = bitcast i8* %27 to i64*, !dbg !6858
  %29 = load i64, i64* %28, align 8, !dbg !6859
  %30 = load i8*, i8** %6, align 8, !dbg !6860
  %31 = bitcast i8* %30 to i64*, !dbg !6861
  store i64 %29, i64* %31, align 8, !dbg !6862
  br label %37, !dbg !6863

32:                                               ; preds = %3, %3, %3
  %33 = load i8*, i8** %5, align 8, !dbg !6864
  %34 = load i8*, i8** %6, align 8, !dbg !6865
  %35 = bitcast i8* %34 to i8**, !dbg !6866
  store i8* %33, i8** %35, align 8, !dbg !6867
  br label %37, !dbg !6868

36:                                               ; preds = %3
  store i32 0, i32* %4, align 4, !dbg !6869
  br label %38, !dbg !6869

37:                                               ; preds = %32, %26, %20, %14, %10, %9
  store i32 1, i32* %4, align 4, !dbg !6870
  br label %38, !dbg !6870

38:                                               ; preds = %37, %36
  %39 = load i32, i32* %4, align 4, !dbg !6871
  ret i32 %39, !dbg !6871
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL8int_typei(i32 %0) #0 !dbg !6872 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !6873, metadata !DIExpression()), !dbg !6874
  %4 = load i32, i32* %3, align 4, !dbg !6875
  switch i32 %4, label %7 [
    i32 33, label %5
    i32 65, label %5
    i32 97, label %5
    i32 129, label %5
    i32 32, label %6
    i32 64, label %6
    i32 96, label %6
    i32 128, label %6
  ], !dbg !6876

5:                                                ; preds = %1, %1, %1, %1
  store i32 11, i32* %2, align 4, !dbg !6877
  br label %8, !dbg !6877

6:                                                ; preds = %1, %1, %1, %1
  store i32 22, i32* %2, align 4, !dbg !6879
  br label %8, !dbg !6879

7:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !6880
  br label %8, !dbg !6880

8:                                                ; preds = %7, %6, %5
  %9 = load i32, i32* %2, align 4, !dbg !6881
  ret i32 %9, !dbg !6881
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_get(i8* %0, i32 %1, i32 %2, i8* %3, i32* %4) #6 !dbg !6882 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca %struct.binn_struct, align 8
  %13 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !6883, metadata !DIExpression()), !dbg !6884
  store i32 %1, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !6885, metadata !DIExpression()), !dbg !6886
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !6887, metadata !DIExpression()), !dbg !6888
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !6889, metadata !DIExpression()), !dbg !6890
  store i32* %4, i32** %11, align 8
  call void @llvm.dbg.declare(metadata i32** %11, metadata !6891, metadata !DIExpression()), !dbg !6892
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %12, metadata !6893, metadata !DIExpression()), !dbg !6894
  call void @llvm.dbg.declare(metadata i32* %13, metadata !6895, metadata !DIExpression()), !dbg !6896
  %14 = load i32, i32* %9, align 4, !dbg !6897
  %15 = call i32 @binn_get_read_storage(i32 %14), !dbg !6898
  store i32 %15, i32* %13, align 4, !dbg !6899
  %16 = load i32, i32* %13, align 4, !dbg !6900
  %17 = icmp ne i32 %16, 0, !dbg !6902
  br i1 %17, label %18, label %22, !dbg !6903

18:                                               ; preds = %5
  %19 = load i8*, i8** %10, align 8, !dbg !6904
  %20 = icmp eq i8* %19, null, !dbg !6905
  br i1 %20, label %21, label %22, !dbg !6906

21:                                               ; preds = %18
  store i32 0, i32* %6, align 4, !dbg !6907
  br label %49, !dbg !6907

22:                                               ; preds = %18, %5
  %23 = load i8*, i8** %10, align 8, !dbg !6908
  %24 = load i32, i32* %9, align 4, !dbg !6909
  call void @_ZL10zero_valuePvi(i8* %23, i32 %24), !dbg !6910
  %25 = load i8*, i8** %7, align 8, !dbg !6911
  %26 = load i32, i32* %8, align 4, !dbg !6913
  %27 = call i32 @binn_map_get_value(i8* %25, i32 %26, %struct.binn_struct* %12), !dbg !6914
  %28 = icmp eq i32 %27, 0, !dbg !6915
  br i1 %28, label %29, label %30, !dbg !6916

29:                                               ; preds = %22
  store i32 0, i32* %6, align 4, !dbg !6917
  br label %49, !dbg !6917

30:                                               ; preds = %22
  %31 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 9, !dbg !6918
  %32 = load i8*, i8** %31, align 8, !dbg !6918
  %33 = load i8*, i8** %10, align 8, !dbg !6920
  %34 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 8, !dbg !6921
  %35 = load i32, i32* %34, align 4, !dbg !6921
  %36 = load i32, i32* %9, align 4, !dbg !6922
  %37 = load i32, i32* %13, align 4, !dbg !6923
  %38 = call i32 @_ZL10copy_valuePvS_iii(i8* %32, i8* %33, i32 %35, i32 %36, i32 %37), !dbg !6924
  %39 = icmp eq i32 %38, 0, !dbg !6925
  br i1 %39, label %40, label %41, !dbg !6926

40:                                               ; preds = %30
  store i32 0, i32* %6, align 4, !dbg !6927
  br label %49, !dbg !6927

41:                                               ; preds = %30
  %42 = load i32*, i32** %11, align 8, !dbg !6928
  %43 = icmp ne i32* %42, null, !dbg !6928
  br i1 %43, label %44, label %48, !dbg !6930

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 10, !dbg !6931
  %46 = load i32, i32* %45, align 8, !dbg !6931
  %47 = load i32*, i32** %11, align 8, !dbg !6932
  store i32 %46, i32* %47, align 4, !dbg !6933
  br label %48, !dbg !6934

48:                                               ; preds = %44, %41
  store i32 1, i32* %6, align 4, !dbg !6935
  br label %49, !dbg !6935

49:                                               ; preds = %48, %40, %29, %21
  %50 = load i32, i32* %6, align 4, !dbg !6936
  ret i32 %50, !dbg !6936
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_get(i8* %0, i8* %1, i32 %2, i8* %3, i32* %4) #6 !dbg !6937 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca %struct.binn_struct, align 8
  %13 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !6940, metadata !DIExpression()), !dbg !6941
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !6942, metadata !DIExpression()), !dbg !6943
  store i32 %2, i32* %9, align 4
  call void @llvm.dbg.declare(metadata i32* %9, metadata !6944, metadata !DIExpression()), !dbg !6945
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !6946, metadata !DIExpression()), !dbg !6947
  store i32* %4, i32** %11, align 8
  call void @llvm.dbg.declare(metadata i32** %11, metadata !6948, metadata !DIExpression()), !dbg !6949
  call void @llvm.dbg.declare(metadata %struct.binn_struct* %12, metadata !6950, metadata !DIExpression()), !dbg !6951
  call void @llvm.dbg.declare(metadata i32* %13, metadata !6952, metadata !DIExpression()), !dbg !6953
  %14 = load i32, i32* %9, align 4, !dbg !6954
  %15 = call i32 @binn_get_read_storage(i32 %14), !dbg !6955
  store i32 %15, i32* %13, align 4, !dbg !6956
  %16 = load i32, i32* %13, align 4, !dbg !6957
  %17 = icmp ne i32 %16, 0, !dbg !6959
  br i1 %17, label %18, label %22, !dbg !6960

18:                                               ; preds = %5
  %19 = load i8*, i8** %10, align 8, !dbg !6961
  %20 = icmp eq i8* %19, null, !dbg !6962
  br i1 %20, label %21, label %22, !dbg !6963

21:                                               ; preds = %18
  store i32 0, i32* %6, align 4, !dbg !6964
  br label %49, !dbg !6964

22:                                               ; preds = %18, %5
  %23 = load i8*, i8** %10, align 8, !dbg !6965
  %24 = load i32, i32* %9, align 4, !dbg !6966
  call void @_ZL10zero_valuePvi(i8* %23, i32 %24), !dbg !6967
  %25 = load i8*, i8** %7, align 8, !dbg !6968
  %26 = load i8*, i8** %8, align 8, !dbg !6970
  %27 = call i32 @binn_object_get_value(i8* %25, i8* %26, %struct.binn_struct* %12), !dbg !6971
  %28 = icmp eq i32 %27, 0, !dbg !6972
  br i1 %28, label %29, label %30, !dbg !6973

29:                                               ; preds = %22
  store i32 0, i32* %6, align 4, !dbg !6974
  br label %49, !dbg !6974

30:                                               ; preds = %22
  %31 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 9, !dbg !6975
  %32 = load i8*, i8** %31, align 8, !dbg !6975
  %33 = load i8*, i8** %10, align 8, !dbg !6977
  %34 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 8, !dbg !6978
  %35 = load i32, i32* %34, align 4, !dbg !6978
  %36 = load i32, i32* %9, align 4, !dbg !6979
  %37 = load i32, i32* %13, align 4, !dbg !6980
  %38 = call i32 @_ZL10copy_valuePvS_iii(i8* %32, i8* %33, i32 %35, i32 %36, i32 %37), !dbg !6981
  %39 = icmp eq i32 %38, 0, !dbg !6982
  br i1 %39, label %40, label %41, !dbg !6983

40:                                               ; preds = %30
  store i32 0, i32* %6, align 4, !dbg !6984
  br label %49, !dbg !6984

41:                                               ; preds = %30
  %42 = load i32*, i32** %11, align 8, !dbg !6985
  %43 = icmp ne i32* %42, null, !dbg !6985
  br i1 %43, label %44, label %48, !dbg !6987

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %12, i32 0, i32 10, !dbg !6988
  %46 = load i32, i32* %45, align 8, !dbg !6988
  %47 = load i32*, i32** %11, align 8, !dbg !6989
  store i32 %46, i32* %47, align 4, !dbg !6990
  br label %48, !dbg !6991

48:                                               ; preds = %44, %41
  store i32 1, i32* %6, align 4, !dbg !6992
  br label %49, !dbg !6992

49:                                               ; preds = %48, %40, %29, %21
  %50 = load i32, i32* %6, align 4, !dbg !6993
  ret i32 %50, !dbg !6993
}

; Function Attrs: noinline optnone ssp uwtable
define hidden signext i8 @binn_list_int8(i8* %0, i32 %1) #6 !dbg !6994 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !6997, metadata !DIExpression()), !dbg !6998
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !6999, metadata !DIExpression()), !dbg !7000
  call void @llvm.dbg.declare(metadata i8* %5, metadata !7001, metadata !DIExpression()), !dbg !7002
  %6 = load i8*, i8** %3, align 8, !dbg !7003
  %7 = load i32, i32* %4, align 4, !dbg !7004
  %8 = call i32 @binn_list_get(i8* %6, i32 %7, i32 33, i8* %5, i32* null), !dbg !7005
  %9 = load i8, i8* %5, align 1, !dbg !7006
  ret i8 %9, !dbg !7007
}

; Function Attrs: noinline optnone ssp uwtable
define hidden signext i16 @binn_list_int16(i8* %0, i32 %1) #6 !dbg !7008 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7011, metadata !DIExpression()), !dbg !7012
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7013, metadata !DIExpression()), !dbg !7014
  call void @llvm.dbg.declare(metadata i16* %5, metadata !7015, metadata !DIExpression()), !dbg !7016
  %6 = load i8*, i8** %3, align 8, !dbg !7017
  %7 = load i32, i32* %4, align 4, !dbg !7018
  %8 = bitcast i16* %5 to i8*, !dbg !7019
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 65, i8* %8, i32* null), !dbg !7020
  %10 = load i16, i16* %5, align 2, !dbg !7021
  ret i16 %10, !dbg !7022
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_int32(i8* %0, i32 %1) #6 !dbg !7023 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7026, metadata !DIExpression()), !dbg !7027
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7028, metadata !DIExpression()), !dbg !7029
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7030, metadata !DIExpression()), !dbg !7031
  %6 = load i8*, i8** %3, align 8, !dbg !7032
  %7 = load i32, i32* %4, align 4, !dbg !7033
  %8 = bitcast i32* %5 to i8*, !dbg !7034
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 97, i8* %8, i32* null), !dbg !7035
  %10 = load i32, i32* %5, align 4, !dbg !7036
  ret i32 %10, !dbg !7037
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i64 @binn_list_int64(i8* %0, i32 %1) #6 !dbg !7038 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7041, metadata !DIExpression()), !dbg !7042
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7043, metadata !DIExpression()), !dbg !7044
  call void @llvm.dbg.declare(metadata i64* %5, metadata !7045, metadata !DIExpression()), !dbg !7046
  %6 = load i8*, i8** %3, align 8, !dbg !7047
  %7 = load i32, i32* %4, align 4, !dbg !7048
  %8 = bitcast i64* %5 to i8*, !dbg !7049
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 129, i8* %8, i32* null), !dbg !7050
  %10 = load i64, i64* %5, align 8, !dbg !7051
  ret i64 %10, !dbg !7052
}

; Function Attrs: noinline optnone ssp uwtable
define hidden zeroext i8 @binn_list_uint8(i8* %0, i32 %1) #6 !dbg !7053 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7056, metadata !DIExpression()), !dbg !7057
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7058, metadata !DIExpression()), !dbg !7059
  call void @llvm.dbg.declare(metadata i8* %5, metadata !7060, metadata !DIExpression()), !dbg !7061
  %6 = load i8*, i8** %3, align 8, !dbg !7062
  %7 = load i32, i32* %4, align 4, !dbg !7063
  %8 = call i32 @binn_list_get(i8* %6, i32 %7, i32 32, i8* %5, i32* null), !dbg !7064
  %9 = load i8, i8* %5, align 1, !dbg !7065
  ret i8 %9, !dbg !7066
}

; Function Attrs: noinline optnone ssp uwtable
define hidden zeroext i16 @binn_list_uint16(i8* %0, i32 %1) #6 !dbg !7067 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7070, metadata !DIExpression()), !dbg !7071
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7072, metadata !DIExpression()), !dbg !7073
  call void @llvm.dbg.declare(metadata i16* %5, metadata !7074, metadata !DIExpression()), !dbg !7075
  %6 = load i8*, i8** %3, align 8, !dbg !7076
  %7 = load i32, i32* %4, align 4, !dbg !7077
  %8 = bitcast i16* %5 to i8*, !dbg !7078
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 64, i8* %8, i32* null), !dbg !7079
  %10 = load i16, i16* %5, align 2, !dbg !7080
  ret i16 %10, !dbg !7081
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_uint32(i8* %0, i32 %1) #6 !dbg !7082 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7085, metadata !DIExpression()), !dbg !7086
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7087, metadata !DIExpression()), !dbg !7088
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7089, metadata !DIExpression()), !dbg !7090
  %6 = load i8*, i8** %3, align 8, !dbg !7091
  %7 = load i32, i32* %4, align 4, !dbg !7092
  %8 = bitcast i32* %5 to i8*, !dbg !7093
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 96, i8* %8, i32* null), !dbg !7094
  %10 = load i32, i32* %5, align 4, !dbg !7095
  ret i32 %10, !dbg !7096
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i64 @binn_list_uint64(i8* %0, i32 %1) #6 !dbg !7097 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7100, metadata !DIExpression()), !dbg !7101
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7102, metadata !DIExpression()), !dbg !7103
  call void @llvm.dbg.declare(metadata i64* %5, metadata !7104, metadata !DIExpression()), !dbg !7105
  %6 = load i8*, i8** %3, align 8, !dbg !7106
  %7 = load i32, i32* %4, align 4, !dbg !7107
  %8 = bitcast i64* %5 to i8*, !dbg !7108
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 128, i8* %8, i32* null), !dbg !7109
  %10 = load i64, i64* %5, align 8, !dbg !7110
  ret i64 %10, !dbg !7111
}

; Function Attrs: noinline optnone ssp uwtable
define hidden float @binn_list_float(i8* %0, i32 %1) #6 !dbg !7112 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7115, metadata !DIExpression()), !dbg !7116
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7117, metadata !DIExpression()), !dbg !7118
  call void @llvm.dbg.declare(metadata float* %5, metadata !7119, metadata !DIExpression()), !dbg !7120
  %6 = load i8*, i8** %3, align 8, !dbg !7121
  %7 = load i32, i32* %4, align 4, !dbg !7122
  %8 = bitcast float* %5 to i8*, !dbg !7123
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 98, i8* %8, i32* null), !dbg !7124
  %10 = load float, float* %5, align 4, !dbg !7125
  ret float %10, !dbg !7126
}

; Function Attrs: noinline optnone ssp uwtable
define hidden double @binn_list_double(i8* %0, i32 %1) #6 !dbg !7127 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca double, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7130, metadata !DIExpression()), !dbg !7131
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7132, metadata !DIExpression()), !dbg !7133
  call void @llvm.dbg.declare(metadata double* %5, metadata !7134, metadata !DIExpression()), !dbg !7135
  %6 = load i8*, i8** %3, align 8, !dbg !7136
  %7 = load i32, i32* %4, align 4, !dbg !7137
  %8 = bitcast double* %5 to i8*, !dbg !7138
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 130, i8* %8, i32* null), !dbg !7139
  %10 = load double, double* %5, align 8, !dbg !7140
  ret double %10, !dbg !7141
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_bool(i8* %0, i32 %1) #6 !dbg !7142 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7145, metadata !DIExpression()), !dbg !7146
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7147, metadata !DIExpression()), !dbg !7148
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7149, metadata !DIExpression()), !dbg !7150
  %6 = load i8*, i8** %3, align 8, !dbg !7151
  %7 = load i32, i32* %4, align 4, !dbg !7152
  %8 = bitcast i32* %5 to i8*, !dbg !7153
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 524385, i8* %8, i32* null), !dbg !7154
  %10 = load i32, i32* %5, align 4, !dbg !7155
  ret i32 %10, !dbg !7156
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_list_null(i8* %0, i32 %1) #6 !dbg !7157 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7158, metadata !DIExpression()), !dbg !7159
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7160, metadata !DIExpression()), !dbg !7161
  %5 = load i8*, i8** %3, align 8, !dbg !7162
  %6 = load i32, i32* %4, align 4, !dbg !7163
  %7 = call i32 @binn_list_get(i8* %5, i32 %6, i32 0, i8* null, i32* null), !dbg !7164
  ret i32 %7, !dbg !7165
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_list_str(i8* %0, i32 %1) #6 !dbg !7166 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7169, metadata !DIExpression()), !dbg !7170
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7171, metadata !DIExpression()), !dbg !7172
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7173, metadata !DIExpression()), !dbg !7174
  %6 = load i8*, i8** %3, align 8, !dbg !7175
  %7 = load i32, i32* %4, align 4, !dbg !7176
  %8 = bitcast i8** %5 to i8*, !dbg !7177
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 160, i8* %8, i32* null), !dbg !7178
  %10 = load i8*, i8** %5, align 8, !dbg !7179
  ret i8* %10, !dbg !7180
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_list_blob(i8* %0, i32 %1, i32* %2) #6 !dbg !7181 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7184, metadata !DIExpression()), !dbg !7185
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7186, metadata !DIExpression()), !dbg !7187
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !7188, metadata !DIExpression()), !dbg !7189
  call void @llvm.dbg.declare(metadata i8** %7, metadata !7190, metadata !DIExpression()), !dbg !7191
  %8 = load i8*, i8** %4, align 8, !dbg !7192
  %9 = load i32, i32* %5, align 4, !dbg !7193
  %10 = bitcast i8** %7 to i8*, !dbg !7194
  %11 = load i32*, i32** %6, align 8, !dbg !7195
  %12 = call i32 @binn_list_get(i8* %8, i32 %9, i32 192, i8* %10, i32* %11), !dbg !7196
  %13 = load i8*, i8** %7, align 8, !dbg !7197
  ret i8* %13, !dbg !7198
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_list_list(i8* %0, i32 %1) #6 !dbg !7199 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7202, metadata !DIExpression()), !dbg !7203
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7204, metadata !DIExpression()), !dbg !7205
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7206, metadata !DIExpression()), !dbg !7207
  %6 = load i8*, i8** %3, align 8, !dbg !7208
  %7 = load i32, i32* %4, align 4, !dbg !7209
  %8 = bitcast i8** %5 to i8*, !dbg !7210
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 224, i8* %8, i32* null), !dbg !7211
  %10 = load i8*, i8** %5, align 8, !dbg !7212
  ret i8* %10, !dbg !7213
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_list_map(i8* %0, i32 %1) #6 !dbg !7214 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7215, metadata !DIExpression()), !dbg !7216
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7217, metadata !DIExpression()), !dbg !7218
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7219, metadata !DIExpression()), !dbg !7220
  %6 = load i8*, i8** %3, align 8, !dbg !7221
  %7 = load i32, i32* %4, align 4, !dbg !7222
  %8 = bitcast i8** %5 to i8*, !dbg !7223
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 225, i8* %8, i32* null), !dbg !7224
  %10 = load i8*, i8** %5, align 8, !dbg !7225
  ret i8* %10, !dbg !7226
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_list_object(i8* %0, i32 %1) #6 !dbg !7227 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7228, metadata !DIExpression()), !dbg !7229
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7230, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7232, metadata !DIExpression()), !dbg !7233
  %6 = load i8*, i8** %3, align 8, !dbg !7234
  %7 = load i32, i32* %4, align 4, !dbg !7235
  %8 = bitcast i8** %5 to i8*, !dbg !7236
  %9 = call i32 @binn_list_get(i8* %6, i32 %7, i32 226, i8* %8, i32* null), !dbg !7237
  %10 = load i8*, i8** %5, align 8, !dbg !7238
  ret i8* %10, !dbg !7239
}

; Function Attrs: noinline optnone ssp uwtable
define hidden signext i8 @binn_map_int8(i8* %0, i32 %1) #6 !dbg !7240 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7241, metadata !DIExpression()), !dbg !7242
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7243, metadata !DIExpression()), !dbg !7244
  call void @llvm.dbg.declare(metadata i8* %5, metadata !7245, metadata !DIExpression()), !dbg !7246
  %6 = load i8*, i8** %3, align 8, !dbg !7247
  %7 = load i32, i32* %4, align 4, !dbg !7248
  %8 = call i32 @binn_map_get(i8* %6, i32 %7, i32 33, i8* %5, i32* null), !dbg !7249
  %9 = load i8, i8* %5, align 1, !dbg !7250
  ret i8 %9, !dbg !7251
}

; Function Attrs: noinline optnone ssp uwtable
define hidden signext i16 @binn_map_int16(i8* %0, i32 %1) #6 !dbg !7252 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7253, metadata !DIExpression()), !dbg !7254
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7255, metadata !DIExpression()), !dbg !7256
  call void @llvm.dbg.declare(metadata i16* %5, metadata !7257, metadata !DIExpression()), !dbg !7258
  %6 = load i8*, i8** %3, align 8, !dbg !7259
  %7 = load i32, i32* %4, align 4, !dbg !7260
  %8 = bitcast i16* %5 to i8*, !dbg !7261
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 65, i8* %8, i32* null), !dbg !7262
  %10 = load i16, i16* %5, align 2, !dbg !7263
  ret i16 %10, !dbg !7264
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_int32(i8* %0, i32 %1) #6 !dbg !7265 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7266, metadata !DIExpression()), !dbg !7267
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7268, metadata !DIExpression()), !dbg !7269
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7270, metadata !DIExpression()), !dbg !7271
  %6 = load i8*, i8** %3, align 8, !dbg !7272
  %7 = load i32, i32* %4, align 4, !dbg !7273
  %8 = bitcast i32* %5 to i8*, !dbg !7274
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 97, i8* %8, i32* null), !dbg !7275
  %10 = load i32, i32* %5, align 4, !dbg !7276
  ret i32 %10, !dbg !7277
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i64 @binn_map_int64(i8* %0, i32 %1) #6 !dbg !7278 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7279, metadata !DIExpression()), !dbg !7280
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7281, metadata !DIExpression()), !dbg !7282
  call void @llvm.dbg.declare(metadata i64* %5, metadata !7283, metadata !DIExpression()), !dbg !7284
  %6 = load i8*, i8** %3, align 8, !dbg !7285
  %7 = load i32, i32* %4, align 4, !dbg !7286
  %8 = bitcast i64* %5 to i8*, !dbg !7287
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 129, i8* %8, i32* null), !dbg !7288
  %10 = load i64, i64* %5, align 8, !dbg !7289
  ret i64 %10, !dbg !7290
}

; Function Attrs: noinline optnone ssp uwtable
define hidden zeroext i8 @binn_map_uint8(i8* %0, i32 %1) #6 !dbg !7291 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7292, metadata !DIExpression()), !dbg !7293
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7294, metadata !DIExpression()), !dbg !7295
  call void @llvm.dbg.declare(metadata i8* %5, metadata !7296, metadata !DIExpression()), !dbg !7297
  %6 = load i8*, i8** %3, align 8, !dbg !7298
  %7 = load i32, i32* %4, align 4, !dbg !7299
  %8 = call i32 @binn_map_get(i8* %6, i32 %7, i32 32, i8* %5, i32* null), !dbg !7300
  %9 = load i8, i8* %5, align 1, !dbg !7301
  ret i8 %9, !dbg !7302
}

; Function Attrs: noinline optnone ssp uwtable
define hidden zeroext i16 @binn_map_uint16(i8* %0, i32 %1) #6 !dbg !7303 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7304, metadata !DIExpression()), !dbg !7305
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7306, metadata !DIExpression()), !dbg !7307
  call void @llvm.dbg.declare(metadata i16* %5, metadata !7308, metadata !DIExpression()), !dbg !7309
  %6 = load i8*, i8** %3, align 8, !dbg !7310
  %7 = load i32, i32* %4, align 4, !dbg !7311
  %8 = bitcast i16* %5 to i8*, !dbg !7312
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 64, i8* %8, i32* null), !dbg !7313
  %10 = load i16, i16* %5, align 2, !dbg !7314
  ret i16 %10, !dbg !7315
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_uint32(i8* %0, i32 %1) #6 !dbg !7316 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7317, metadata !DIExpression()), !dbg !7318
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7319, metadata !DIExpression()), !dbg !7320
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7321, metadata !DIExpression()), !dbg !7322
  %6 = load i8*, i8** %3, align 8, !dbg !7323
  %7 = load i32, i32* %4, align 4, !dbg !7324
  %8 = bitcast i32* %5 to i8*, !dbg !7325
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 96, i8* %8, i32* null), !dbg !7326
  %10 = load i32, i32* %5, align 4, !dbg !7327
  ret i32 %10, !dbg !7328
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i64 @binn_map_uint64(i8* %0, i32 %1) #6 !dbg !7329 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7330, metadata !DIExpression()), !dbg !7331
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7332, metadata !DIExpression()), !dbg !7333
  call void @llvm.dbg.declare(metadata i64* %5, metadata !7334, metadata !DIExpression()), !dbg !7335
  %6 = load i8*, i8** %3, align 8, !dbg !7336
  %7 = load i32, i32* %4, align 4, !dbg !7337
  %8 = bitcast i64* %5 to i8*, !dbg !7338
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 128, i8* %8, i32* null), !dbg !7339
  %10 = load i64, i64* %5, align 8, !dbg !7340
  ret i64 %10, !dbg !7341
}

; Function Attrs: noinline optnone ssp uwtable
define hidden float @binn_map_float(i8* %0, i32 %1) #6 !dbg !7342 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7343, metadata !DIExpression()), !dbg !7344
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7345, metadata !DIExpression()), !dbg !7346
  call void @llvm.dbg.declare(metadata float* %5, metadata !7347, metadata !DIExpression()), !dbg !7348
  %6 = load i8*, i8** %3, align 8, !dbg !7349
  %7 = load i32, i32* %4, align 4, !dbg !7350
  %8 = bitcast float* %5 to i8*, !dbg !7351
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 98, i8* %8, i32* null), !dbg !7352
  %10 = load float, float* %5, align 4, !dbg !7353
  ret float %10, !dbg !7354
}

; Function Attrs: noinline optnone ssp uwtable
define hidden double @binn_map_double(i8* %0, i32 %1) #6 !dbg !7355 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca double, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7356, metadata !DIExpression()), !dbg !7357
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7358, metadata !DIExpression()), !dbg !7359
  call void @llvm.dbg.declare(metadata double* %5, metadata !7360, metadata !DIExpression()), !dbg !7361
  %6 = load i8*, i8** %3, align 8, !dbg !7362
  %7 = load i32, i32* %4, align 4, !dbg !7363
  %8 = bitcast double* %5 to i8*, !dbg !7364
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 130, i8* %8, i32* null), !dbg !7365
  %10 = load double, double* %5, align 8, !dbg !7366
  ret double %10, !dbg !7367
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_bool(i8* %0, i32 %1) #6 !dbg !7368 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7369, metadata !DIExpression()), !dbg !7370
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7371, metadata !DIExpression()), !dbg !7372
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7373, metadata !DIExpression()), !dbg !7374
  %6 = load i8*, i8** %3, align 8, !dbg !7375
  %7 = load i32, i32* %4, align 4, !dbg !7376
  %8 = bitcast i32* %5 to i8*, !dbg !7377
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 524385, i8* %8, i32* null), !dbg !7378
  %10 = load i32, i32* %5, align 4, !dbg !7379
  ret i32 %10, !dbg !7380
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_map_null(i8* %0, i32 %1) #6 !dbg !7381 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7382, metadata !DIExpression()), !dbg !7383
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7384, metadata !DIExpression()), !dbg !7385
  %5 = load i8*, i8** %3, align 8, !dbg !7386
  %6 = load i32, i32* %4, align 4, !dbg !7387
  %7 = call i32 @binn_map_get(i8* %5, i32 %6, i32 0, i8* null, i32* null), !dbg !7388
  ret i32 %7, !dbg !7389
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_map_str(i8* %0, i32 %1) #6 !dbg !7390 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7391, metadata !DIExpression()), !dbg !7392
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7393, metadata !DIExpression()), !dbg !7394
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7395, metadata !DIExpression()), !dbg !7396
  %6 = load i8*, i8** %3, align 8, !dbg !7397
  %7 = load i32, i32* %4, align 4, !dbg !7398
  %8 = bitcast i8** %5 to i8*, !dbg !7399
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 160, i8* %8, i32* null), !dbg !7400
  %10 = load i8*, i8** %5, align 8, !dbg !7401
  ret i8* %10, !dbg !7402
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_map_blob(i8* %0, i32 %1, i32* %2) #6 !dbg !7403 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7404, metadata !DIExpression()), !dbg !7405
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7406, metadata !DIExpression()), !dbg !7407
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !7408, metadata !DIExpression()), !dbg !7409
  call void @llvm.dbg.declare(metadata i8** %7, metadata !7410, metadata !DIExpression()), !dbg !7411
  %8 = load i8*, i8** %4, align 8, !dbg !7412
  %9 = load i32, i32* %5, align 4, !dbg !7413
  %10 = bitcast i8** %7 to i8*, !dbg !7414
  %11 = load i32*, i32** %6, align 8, !dbg !7415
  %12 = call i32 @binn_map_get(i8* %8, i32 %9, i32 192, i8* %10, i32* %11), !dbg !7416
  %13 = load i8*, i8** %7, align 8, !dbg !7417
  ret i8* %13, !dbg !7418
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_map_list(i8* %0, i32 %1) #6 !dbg !7419 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7420, metadata !DIExpression()), !dbg !7421
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7422, metadata !DIExpression()), !dbg !7423
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7424, metadata !DIExpression()), !dbg !7425
  %6 = load i8*, i8** %3, align 8, !dbg !7426
  %7 = load i32, i32* %4, align 4, !dbg !7427
  %8 = bitcast i8** %5 to i8*, !dbg !7428
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 224, i8* %8, i32* null), !dbg !7429
  %10 = load i8*, i8** %5, align 8, !dbg !7430
  ret i8* %10, !dbg !7431
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_map_map(i8* %0, i32 %1) #6 !dbg !7432 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7433, metadata !DIExpression()), !dbg !7434
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7435, metadata !DIExpression()), !dbg !7436
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7437, metadata !DIExpression()), !dbg !7438
  %6 = load i8*, i8** %3, align 8, !dbg !7439
  %7 = load i32, i32* %4, align 4, !dbg !7440
  %8 = bitcast i8** %5 to i8*, !dbg !7441
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 225, i8* %8, i32* null), !dbg !7442
  %10 = load i8*, i8** %5, align 8, !dbg !7443
  ret i8* %10, !dbg !7444
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_map_object(i8* %0, i32 %1) #6 !dbg !7445 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7446, metadata !DIExpression()), !dbg !7447
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7448, metadata !DIExpression()), !dbg !7449
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7450, metadata !DIExpression()), !dbg !7451
  %6 = load i8*, i8** %3, align 8, !dbg !7452
  %7 = load i32, i32* %4, align 4, !dbg !7453
  %8 = bitcast i8** %5 to i8*, !dbg !7454
  %9 = call i32 @binn_map_get(i8* %6, i32 %7, i32 226, i8* %8, i32* null), !dbg !7455
  %10 = load i8*, i8** %5, align 8, !dbg !7456
  ret i8* %10, !dbg !7457
}

; Function Attrs: noinline optnone ssp uwtable
define hidden signext i8 @binn_object_int8(i8* %0, i8* %1) #6 !dbg !7458 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7461, metadata !DIExpression()), !dbg !7462
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7463, metadata !DIExpression()), !dbg !7464
  call void @llvm.dbg.declare(metadata i8* %5, metadata !7465, metadata !DIExpression()), !dbg !7466
  %6 = load i8*, i8** %3, align 8, !dbg !7467
  %7 = load i8*, i8** %4, align 8, !dbg !7468
  %8 = call i32 @binn_object_get(i8* %6, i8* %7, i32 33, i8* %5, i32* null), !dbg !7469
  %9 = load i8, i8* %5, align 1, !dbg !7470
  ret i8 %9, !dbg !7471
}

; Function Attrs: noinline optnone ssp uwtable
define hidden signext i16 @binn_object_int16(i8* %0, i8* %1) #6 !dbg !7472 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16, align 2
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7475, metadata !DIExpression()), !dbg !7476
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7477, metadata !DIExpression()), !dbg !7478
  call void @llvm.dbg.declare(metadata i16* %5, metadata !7479, metadata !DIExpression()), !dbg !7480
  %6 = load i8*, i8** %3, align 8, !dbg !7481
  %7 = load i8*, i8** %4, align 8, !dbg !7482
  %8 = bitcast i16* %5 to i8*, !dbg !7483
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 65, i8* %8, i32* null), !dbg !7484
  %10 = load i16, i16* %5, align 2, !dbg !7485
  ret i16 %10, !dbg !7486
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_int32(i8* %0, i8* %1) #6 !dbg !7487 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7490, metadata !DIExpression()), !dbg !7491
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7492, metadata !DIExpression()), !dbg !7493
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7494, metadata !DIExpression()), !dbg !7495
  %6 = load i8*, i8** %3, align 8, !dbg !7496
  %7 = load i8*, i8** %4, align 8, !dbg !7497
  %8 = bitcast i32* %5 to i8*, !dbg !7498
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 97, i8* %8, i32* null), !dbg !7499
  %10 = load i32, i32* %5, align 4, !dbg !7500
  ret i32 %10, !dbg !7501
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i64 @binn_object_int64(i8* %0, i8* %1) #6 !dbg !7502 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7505, metadata !DIExpression()), !dbg !7506
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7507, metadata !DIExpression()), !dbg !7508
  call void @llvm.dbg.declare(metadata i64* %5, metadata !7509, metadata !DIExpression()), !dbg !7510
  %6 = load i8*, i8** %3, align 8, !dbg !7511
  %7 = load i8*, i8** %4, align 8, !dbg !7512
  %8 = bitcast i64* %5 to i8*, !dbg !7513
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 129, i8* %8, i32* null), !dbg !7514
  %10 = load i64, i64* %5, align 8, !dbg !7515
  ret i64 %10, !dbg !7516
}

; Function Attrs: noinline optnone ssp uwtable
define hidden zeroext i8 @binn_object_uint8(i8* %0, i8* %1) #6 !dbg !7517 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7520, metadata !DIExpression()), !dbg !7521
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7522, metadata !DIExpression()), !dbg !7523
  call void @llvm.dbg.declare(metadata i8* %5, metadata !7524, metadata !DIExpression()), !dbg !7525
  %6 = load i8*, i8** %3, align 8, !dbg !7526
  %7 = load i8*, i8** %4, align 8, !dbg !7527
  %8 = call i32 @binn_object_get(i8* %6, i8* %7, i32 32, i8* %5, i32* null), !dbg !7528
  %9 = load i8, i8* %5, align 1, !dbg !7529
  ret i8 %9, !dbg !7530
}

; Function Attrs: noinline optnone ssp uwtable
define hidden zeroext i16 @binn_object_uint16(i8* %0, i8* %1) #6 !dbg !7531 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16, align 2
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7534, metadata !DIExpression()), !dbg !7535
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7536, metadata !DIExpression()), !dbg !7537
  call void @llvm.dbg.declare(metadata i16* %5, metadata !7538, metadata !DIExpression()), !dbg !7539
  %6 = load i8*, i8** %3, align 8, !dbg !7540
  %7 = load i8*, i8** %4, align 8, !dbg !7541
  %8 = bitcast i16* %5 to i8*, !dbg !7542
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 64, i8* %8, i32* null), !dbg !7543
  %10 = load i16, i16* %5, align 2, !dbg !7544
  ret i16 %10, !dbg !7545
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_uint32(i8* %0, i8* %1) #6 !dbg !7546 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7549, metadata !DIExpression()), !dbg !7550
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7551, metadata !DIExpression()), !dbg !7552
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7553, metadata !DIExpression()), !dbg !7554
  %6 = load i8*, i8** %3, align 8, !dbg !7555
  %7 = load i8*, i8** %4, align 8, !dbg !7556
  %8 = bitcast i32* %5 to i8*, !dbg !7557
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 96, i8* %8, i32* null), !dbg !7558
  %10 = load i32, i32* %5, align 4, !dbg !7559
  ret i32 %10, !dbg !7560
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i64 @binn_object_uint64(i8* %0, i8* %1) #6 !dbg !7561 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7564, metadata !DIExpression()), !dbg !7565
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7566, metadata !DIExpression()), !dbg !7567
  call void @llvm.dbg.declare(metadata i64* %5, metadata !7568, metadata !DIExpression()), !dbg !7569
  %6 = load i8*, i8** %3, align 8, !dbg !7570
  %7 = load i8*, i8** %4, align 8, !dbg !7571
  %8 = bitcast i64* %5 to i8*, !dbg !7572
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 128, i8* %8, i32* null), !dbg !7573
  %10 = load i64, i64* %5, align 8, !dbg !7574
  ret i64 %10, !dbg !7575
}

; Function Attrs: noinline optnone ssp uwtable
define hidden float @binn_object_float(i8* %0, i8* %1) #6 !dbg !7576 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca float, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7579, metadata !DIExpression()), !dbg !7580
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7581, metadata !DIExpression()), !dbg !7582
  call void @llvm.dbg.declare(metadata float* %5, metadata !7583, metadata !DIExpression()), !dbg !7584
  %6 = load i8*, i8** %3, align 8, !dbg !7585
  %7 = load i8*, i8** %4, align 8, !dbg !7586
  %8 = bitcast float* %5 to i8*, !dbg !7587
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 98, i8* %8, i32* null), !dbg !7588
  %10 = load float, float* %5, align 4, !dbg !7589
  ret float %10, !dbg !7590
}

; Function Attrs: noinline optnone ssp uwtable
define hidden double @binn_object_double(i8* %0, i8* %1) #6 !dbg !7591 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca double, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7594, metadata !DIExpression()), !dbg !7595
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7596, metadata !DIExpression()), !dbg !7597
  call void @llvm.dbg.declare(metadata double* %5, metadata !7598, metadata !DIExpression()), !dbg !7599
  %6 = load i8*, i8** %3, align 8, !dbg !7600
  %7 = load i8*, i8** %4, align 8, !dbg !7601
  %8 = bitcast double* %5 to i8*, !dbg !7602
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 130, i8* %8, i32* null), !dbg !7603
  %10 = load double, double* %5, align 8, !dbg !7604
  ret double %10, !dbg !7605
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_bool(i8* %0, i8* %1) #6 !dbg !7606 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7609, metadata !DIExpression()), !dbg !7610
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7611, metadata !DIExpression()), !dbg !7612
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7613, metadata !DIExpression()), !dbg !7614
  %6 = load i8*, i8** %3, align 8, !dbg !7615
  %7 = load i8*, i8** %4, align 8, !dbg !7616
  %8 = bitcast i32* %5 to i8*, !dbg !7617
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 524385, i8* %8, i32* null), !dbg !7618
  %10 = load i32, i32* %5, align 4, !dbg !7619
  ret i32 %10, !dbg !7620
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_object_null(i8* %0, i8* %1) #6 !dbg !7621 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7622, metadata !DIExpression()), !dbg !7623
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7624, metadata !DIExpression()), !dbg !7625
  %5 = load i8*, i8** %3, align 8, !dbg !7626
  %6 = load i8*, i8** %4, align 8, !dbg !7627
  %7 = call i32 @binn_object_get(i8* %5, i8* %6, i32 0, i8* null, i32* null), !dbg !7628
  ret i32 %7, !dbg !7629
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_object_str(i8* %0, i8* %1) #6 !dbg !7630 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7633, metadata !DIExpression()), !dbg !7634
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7635, metadata !DIExpression()), !dbg !7636
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7637, metadata !DIExpression()), !dbg !7638
  %6 = load i8*, i8** %3, align 8, !dbg !7639
  %7 = load i8*, i8** %4, align 8, !dbg !7640
  %8 = bitcast i8** %5 to i8*, !dbg !7641
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 160, i8* %8, i32* null), !dbg !7642
  %10 = load i8*, i8** %5, align 8, !dbg !7643
  ret i8* %10, !dbg !7644
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_object_blob(i8* %0, i8* %1, i32* %2) #6 !dbg !7645 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7648, metadata !DIExpression()), !dbg !7649
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7650, metadata !DIExpression()), !dbg !7651
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !7652, metadata !DIExpression()), !dbg !7653
  call void @llvm.dbg.declare(metadata i8** %7, metadata !7654, metadata !DIExpression()), !dbg !7655
  %8 = load i8*, i8** %4, align 8, !dbg !7656
  %9 = load i8*, i8** %5, align 8, !dbg !7657
  %10 = bitcast i8** %7 to i8*, !dbg !7658
  %11 = load i32*, i32** %6, align 8, !dbg !7659
  %12 = call i32 @binn_object_get(i8* %8, i8* %9, i32 192, i8* %10, i32* %11), !dbg !7660
  %13 = load i8*, i8** %7, align 8, !dbg !7661
  ret i8* %13, !dbg !7662
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_object_list(i8* %0, i8* %1) #6 !dbg !7663 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7666, metadata !DIExpression()), !dbg !7667
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7668, metadata !DIExpression()), !dbg !7669
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7670, metadata !DIExpression()), !dbg !7671
  %6 = load i8*, i8** %3, align 8, !dbg !7672
  %7 = load i8*, i8** %4, align 8, !dbg !7673
  %8 = bitcast i8** %5 to i8*, !dbg !7674
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 224, i8* %8, i32* null), !dbg !7675
  %10 = load i8*, i8** %5, align 8, !dbg !7676
  ret i8* %10, !dbg !7677
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_object_map(i8* %0, i8* %1) #6 !dbg !7678 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7679, metadata !DIExpression()), !dbg !7680
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7681, metadata !DIExpression()), !dbg !7682
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7683, metadata !DIExpression()), !dbg !7684
  %6 = load i8*, i8** %3, align 8, !dbg !7685
  %7 = load i8*, i8** %4, align 8, !dbg !7686
  %8 = bitcast i8** %5 to i8*, !dbg !7687
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 225, i8* %8, i32* null), !dbg !7688
  %10 = load i8*, i8** %5, align 8, !dbg !7689
  ret i8* %10, !dbg !7690
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_object_object(i8* %0, i8* %1) #6 !dbg !7691 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !7692, metadata !DIExpression()), !dbg !7693
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7694, metadata !DIExpression()), !dbg !7695
  call void @llvm.dbg.declare(metadata i8** %5, metadata !7696, metadata !DIExpression()), !dbg !7697
  %6 = load i8*, i8** %3, align 8, !dbg !7698
  %7 = load i8*, i8** %4, align 8, !dbg !7699
  %8 = bitcast i8** %5 to i8*, !dbg !7700
  %9 = call i32 @binn_object_get(i8* %6, i8* %7, i32 226, i8* %8, i32* null), !dbg !7701
  %10 = load i8*, i8** %5, align 8, !dbg !7702
  ret i8* %10, !dbg !7703
}

; Function Attrs: noinline optnone ssp uwtable
define hidden %struct.binn_struct* @binn_value(i32 %0, i8* %1, i32 %2, void (i8*)* %3) #6 !dbg !7704 {
  %5 = alloca %struct.binn_struct*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca void (i8*)*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.binn_struct*, align 8
  store i32 %0, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !7707, metadata !DIExpression()), !dbg !7708
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !7709, metadata !DIExpression()), !dbg !7710
  store i32 %2, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !7711, metadata !DIExpression()), !dbg !7712
  store void (i8*)* %3, void (i8*)** %9, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %9, metadata !7713, metadata !DIExpression()), !dbg !7714
  call void @llvm.dbg.declare(metadata i32* %10, metadata !7715, metadata !DIExpression()), !dbg !7716
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %11, metadata !7717, metadata !DIExpression()), !dbg !7718
  %12 = call %struct.binn_struct* @_ZL15binn_alloc_itemv(), !dbg !7719
  store %struct.binn_struct* %12, %struct.binn_struct** %11, align 8, !dbg !7718
  %13 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7720
  %14 = icmp ne %struct.binn_struct* %13, null, !dbg !7720
  br i1 %14, label %15, label %84, !dbg !7722

15:                                               ; preds = %4
  %16 = load i32, i32* %6, align 4, !dbg !7723
  %17 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7725
  %18 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %17, i32 0, i32 8, !dbg !7726
  store i32 %16, i32* %18, align 4, !dbg !7727
  %19 = load i32, i32* %6, align 4, !dbg !7728
  %20 = call i32 @binn_get_type_info(i32 %19, i32* %10, i32* null), !dbg !7729
  %21 = load i32, i32* %10, align 4, !dbg !7730
  switch i32 %21, label %70 [
    i32 0, label %22
    i32 160, label %23
    i32 192, label %32
    i32 224, label %32
  ], !dbg !7731

22:                                               ; preds = %15
  br label %83, !dbg !7732

23:                                               ; preds = %15
  %24 = load i32, i32* %8, align 4, !dbg !7734
  %25 = icmp eq i32 %24, 0, !dbg !7736
  br i1 %25, label %26, label %31, !dbg !7737

26:                                               ; preds = %23
  %27 = load i8*, i8** %7, align 8, !dbg !7738
  %28 = call i64 @strlen(i8* %27), !dbg !7739
  %29 = add i64 %28, 1, !dbg !7740
  %30 = trunc i64 %29 to i32, !dbg !7739
  store i32 %30, i32* %8, align 4, !dbg !7741
  br label %31, !dbg !7742

31:                                               ; preds = %26, %23
  br label %32, !dbg !7743

32:                                               ; preds = %15, %15, %31
  %33 = load void (i8*)*, void (i8*)** %9, align 8, !dbg !7744
  %34 = icmp eq void (i8*)* %33, inttoptr (i64 -1 to void (i8*)*), !dbg !7746
  br i1 %34, label %35, label %59, !dbg !7747

35:                                               ; preds = %32
  %36 = load i8*, i8** %7, align 8, !dbg !7748
  %37 = load i32, i32* %8, align 4, !dbg !7750
  %38 = call i8* @_ZL11binn_memdupPvi(i8* %36, i32 %37), !dbg !7751
  %39 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7752
  %40 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %39, i32 0, i32 9, !dbg !7753
  store i8* %38, i8** %40, align 8, !dbg !7754
  %41 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7755
  %42 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %41, i32 0, i32 9, !dbg !7757
  %43 = load i8*, i8** %42, align 8, !dbg !7757
  %44 = icmp eq i8* %43, null, !dbg !7758
  br i1 %44, label %45, label %49, !dbg !7759

45:                                               ; preds = %35
  %46 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !7760
  %47 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7762
  %48 = bitcast %struct.binn_struct* %47 to i8*, !dbg !7762
  call void %46(i8* %48), !dbg !7760
  store %struct.binn_struct* null, %struct.binn_struct** %5, align 8, !dbg !7763
  br label %86, !dbg !7763

49:                                               ; preds = %35
  %50 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !7764
  %51 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7765
  %52 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %51, i32 0, i32 12, !dbg !7766
  store void (i8*)* %50, void (i8*)** %52, align 8, !dbg !7767
  %53 = load i32, i32* %10, align 4, !dbg !7768
  %54 = icmp eq i32 %53, 160, !dbg !7770
  br i1 %54, label %55, label %58, !dbg !7771

55:                                               ; preds = %49
  %56 = load i32, i32* %8, align 4, !dbg !7772
  %57 = add nsw i32 %56, -1, !dbg !7772
  store i32 %57, i32* %8, align 4, !dbg !7772
  br label %58, !dbg !7773

58:                                               ; preds = %55, %49
  br label %66, !dbg !7774

59:                                               ; preds = %32
  %60 = load i8*, i8** %7, align 8, !dbg !7775
  %61 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7777
  %62 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %61, i32 0, i32 9, !dbg !7778
  store i8* %60, i8** %62, align 8, !dbg !7779
  %63 = load void (i8*)*, void (i8*)** %9, align 8, !dbg !7780
  %64 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7781
  %65 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %64, i32 0, i32 12, !dbg !7782
  store void (i8*)* %63, void (i8*)** %65, align 8, !dbg !7783
  br label %66

66:                                               ; preds = %59, %58
  %67 = load i32, i32* %8, align 4, !dbg !7784
  %68 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7785
  %69 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %68, i32 0, i32 10, !dbg !7786
  store i32 %67, i32* %69, align 8, !dbg !7787
  br label %83, !dbg !7788

70:                                               ; preds = %15
  %71 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7789
  %72 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %71, i32 0, i32 13, !dbg !7790
  %73 = bitcast %union.anon* %72 to i32*, !dbg !7790
  %74 = bitcast i32* %73 to i8*, !dbg !7791
  %75 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7792
  %76 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %75, i32 0, i32 9, !dbg !7793
  store i8* %74, i8** %76, align 8, !dbg !7794
  %77 = load i8*, i8** %7, align 8, !dbg !7795
  %78 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7796
  %79 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %78, i32 0, i32 9, !dbg !7797
  %80 = load i8*, i8** %79, align 8, !dbg !7797
  %81 = load i32, i32* %10, align 4, !dbg !7798
  %82 = call i32 @_ZL14copy_raw_valuePvS_i(i8* %77, i8* %80, i32 %81), !dbg !7799
  br label %83, !dbg !7800

83:                                               ; preds = %70, %66, %22
  br label %84, !dbg !7801

84:                                               ; preds = %83, %4
  %85 = load %struct.binn_struct*, %struct.binn_struct** %11, align 8, !dbg !7802
  store %struct.binn_struct* %85, %struct.binn_struct** %5, align 8, !dbg !7803
  br label %86, !dbg !7803

86:                                               ; preds = %84, %45
  %87 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !7804
  ret %struct.binn_struct* %87, !dbg !7804
}

; Function Attrs: noinline optnone ssp uwtable
define internal %struct.binn_struct* @_ZL15binn_alloc_itemv() #6 !dbg !7805 {
  %1 = alloca %struct.binn_struct*, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %1, metadata !7806, metadata !DIExpression()), !dbg !7807
  %2 = call i8* @_ZL11binn_malloci(i32 80), !dbg !7808
  %3 = bitcast i8* %2 to %struct.binn_struct*, !dbg !7809
  store %struct.binn_struct* %3, %struct.binn_struct** %1, align 8, !dbg !7810
  %4 = load %struct.binn_struct*, %struct.binn_struct** %1, align 8, !dbg !7811
  %5 = icmp ne %struct.binn_struct* %4, null, !dbg !7811
  br i1 %5, label %6, label %13, !dbg !7813

6:                                                ; preds = %0
  %7 = load %struct.binn_struct*, %struct.binn_struct** %1, align 8, !dbg !7814
  %8 = bitcast %struct.binn_struct* %7 to i8*, !dbg !7816
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 80, i1 false), !dbg !7816
  %9 = load %struct.binn_struct*, %struct.binn_struct** %1, align 8, !dbg !7817
  %10 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %9, i32 0, i32 0, !dbg !7818
  store i32 522367263, i32* %10, align 8, !dbg !7819
  %11 = load %struct.binn_struct*, %struct.binn_struct** %1, align 8, !dbg !7820
  %12 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %11, i32 0, i32 1, !dbg !7821
  store i32 1, i32* %12, align 4, !dbg !7822
  br label %13, !dbg !7823

13:                                               ; preds = %6, %0
  %14 = load %struct.binn_struct*, %struct.binn_struct** %1, align 8, !dbg !7824
  ret %struct.binn_struct* %14, !dbg !7825
}

; Function Attrs: noinline optnone ssp uwtable
define internal i8* @_ZL11binn_memdupPvi(i8* %0, i32 %1) #6 !dbg !7826 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !7827, metadata !DIExpression()), !dbg !7828
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !7829, metadata !DIExpression()), !dbg !7830
  call void @llvm.dbg.declare(metadata i8** %6, metadata !7831, metadata !DIExpression()), !dbg !7832
  %7 = load i8*, i8** %4, align 8, !dbg !7833
  %8 = icmp eq i8* %7, null, !dbg !7835
  br i1 %8, label %12, label %9, !dbg !7836

9:                                                ; preds = %2
  %10 = load i32, i32* %5, align 4, !dbg !7837
  %11 = icmp sle i32 %10, 0, !dbg !7838
  br i1 %11, label %12, label %13, !dbg !7839

12:                                               ; preds = %9, %2
  store i8* null, i8** %3, align 8, !dbg !7840
  br label %25, !dbg !7840

13:                                               ; preds = %9
  %14 = load i32, i32* %5, align 4, !dbg !7841
  %15 = call i8* @_ZL11binn_malloci(i32 %14), !dbg !7842
  store i8* %15, i8** %6, align 8, !dbg !7843
  %16 = load i8*, i8** %6, align 8, !dbg !7844
  %17 = icmp eq i8* %16, null, !dbg !7846
  br i1 %17, label %18, label %19, !dbg !7847

18:                                               ; preds = %13
  store i8* null, i8** %3, align 8, !dbg !7848
  br label %25, !dbg !7848

19:                                               ; preds = %13
  %20 = load i8*, i8** %6, align 8, !dbg !7849
  %21 = load i8*, i8** %4, align 8, !dbg !7850
  %22 = load i32, i32* %5, align 4, !dbg !7851
  %23 = sext i32 %22 to i64, !dbg !7851
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 %23, i1 false), !dbg !7852
  %24 = load i8*, i8** %6, align 8, !dbg !7853
  store i8* %24, i8** %3, align 8, !dbg !7854
  br label %25, !dbg !7854

25:                                               ; preds = %19, %18, %12
  %26 = load i8*, i8** %3, align 8, !dbg !7855
  ret i8* %26, !dbg !7855
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_set_string(%struct.binn_struct* %0, i8* %1, void (i8*)* %2) #6 !dbg !7856 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.binn_struct*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca void (i8*)*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %5, metadata !7859, metadata !DIExpression()), !dbg !7860
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !7861, metadata !DIExpression()), !dbg !7862
  store void (i8*)* %2, void (i8*)** %7, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %7, metadata !7863, metadata !DIExpression()), !dbg !7864
  %8 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !7865
  %9 = icmp eq %struct.binn_struct* %8, null, !dbg !7867
  br i1 %9, label %13, label %10, !dbg !7868

10:                                               ; preds = %3
  %11 = load i8*, i8** %6, align 8, !dbg !7869
  %12 = icmp eq i8* %11, null, !dbg !7870
  br i1 %12, label %13, label %14, !dbg !7871

13:                                               ; preds = %10, %3
  store i32 0, i32* %4, align 4, !dbg !7872
  br label %45, !dbg !7872

14:                                               ; preds = %10
  %15 = load void (i8*)*, void (i8*)** %7, align 8, !dbg !7873
  %16 = icmp eq void (i8*)* %15, inttoptr (i64 -1 to void (i8*)*), !dbg !7875
  br i1 %16, label %17, label %35, !dbg !7876

17:                                               ; preds = %14
  %18 = load i8*, i8** %6, align 8, !dbg !7877
  %19 = load i8*, i8** %6, align 8, !dbg !7879
  %20 = call i64 @strlen(i8* %19), !dbg !7880
  %21 = add i64 %20, 1, !dbg !7881
  %22 = trunc i64 %21 to i32, !dbg !7880
  %23 = call i8* @_ZL11binn_memdupPvi(i8* %18, i32 %22), !dbg !7882
  %24 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !7883
  %25 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %24, i32 0, i32 9, !dbg !7884
  store i8* %23, i8** %25, align 8, !dbg !7885
  %26 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !7886
  %27 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %26, i32 0, i32 9, !dbg !7888
  %28 = load i8*, i8** %27, align 8, !dbg !7888
  %29 = icmp eq i8* %28, null, !dbg !7889
  br i1 %29, label %30, label %31, !dbg !7890

30:                                               ; preds = %17
  store i32 0, i32* %4, align 4, !dbg !7891
  br label %45, !dbg !7891

31:                                               ; preds = %17
  %32 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !7892
  %33 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !7893
  %34 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %33, i32 0, i32 12, !dbg !7894
  store void (i8*)* %32, void (i8*)** %34, align 8, !dbg !7895
  br label %42, !dbg !7896

35:                                               ; preds = %14
  %36 = load i8*, i8** %6, align 8, !dbg !7897
  %37 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !7899
  %38 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %37, i32 0, i32 9, !dbg !7900
  store i8* %36, i8** %38, align 8, !dbg !7901
  %39 = load void (i8*)*, void (i8*)** %7, align 8, !dbg !7902
  %40 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !7903
  %41 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %40, i32 0, i32 12, !dbg !7904
  store void (i8*)* %39, void (i8*)** %41, align 8, !dbg !7905
  br label %42

42:                                               ; preds = %35, %31
  %43 = load %struct.binn_struct*, %struct.binn_struct** %5, align 8, !dbg !7906
  %44 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %43, i32 0, i32 8, !dbg !7907
  store i32 160, i32* %44, align 4, !dbg !7908
  store i32 1, i32* %4, align 4, !dbg !7909
  br label %45, !dbg !7909

45:                                               ; preds = %42, %30, %13
  %46 = load i32, i32* %4, align 4, !dbg !7910
  ret i32 %46, !dbg !7910
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_set_blob(%struct.binn_struct* %0, i8* %1, i32 %2, void (i8*)* %3) #6 !dbg !7911 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.binn_struct*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca void (i8*)*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %6, metadata !7914, metadata !DIExpression()), !dbg !7915
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !7916, metadata !DIExpression()), !dbg !7917
  store i32 %2, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !7918, metadata !DIExpression()), !dbg !7919
  store void (i8*)* %3, void (i8*)** %9, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %9, metadata !7920, metadata !DIExpression()), !dbg !7921
  %10 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !7922
  %11 = icmp eq %struct.binn_struct* %10, null, !dbg !7924
  br i1 %11, label %15, label %12, !dbg !7925

12:                                               ; preds = %4
  %13 = load i8*, i8** %7, align 8, !dbg !7926
  %14 = icmp eq i8* %13, null, !dbg !7927
  br i1 %14, label %15, label %16, !dbg !7928

15:                                               ; preds = %12, %4
  store i32 0, i32* %5, align 4, !dbg !7929
  br label %47, !dbg !7929

16:                                               ; preds = %12
  %17 = load void (i8*)*, void (i8*)** %9, align 8, !dbg !7930
  %18 = icmp eq void (i8*)* %17, inttoptr (i64 -1 to void (i8*)*), !dbg !7932
  br i1 %18, label %19, label %34, !dbg !7933

19:                                               ; preds = %16
  %20 = load i8*, i8** %7, align 8, !dbg !7934
  %21 = load i32, i32* %8, align 4, !dbg !7936
  %22 = call i8* @_ZL11binn_memdupPvi(i8* %20, i32 %21), !dbg !7937
  %23 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !7938
  %24 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %23, i32 0, i32 9, !dbg !7939
  store i8* %22, i8** %24, align 8, !dbg !7940
  %25 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !7941
  %26 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %25, i32 0, i32 9, !dbg !7943
  %27 = load i8*, i8** %26, align 8, !dbg !7943
  %28 = icmp eq i8* %27, null, !dbg !7944
  br i1 %28, label %29, label %30, !dbg !7945

29:                                               ; preds = %19
  store i32 0, i32* %5, align 4, !dbg !7946
  br label %47, !dbg !7946

30:                                               ; preds = %19
  %31 = load void (i8*)*, void (i8*)** @free_fn, align 8, !dbg !7947
  %32 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !7948
  %33 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %32, i32 0, i32 12, !dbg !7949
  store void (i8*)* %31, void (i8*)** %33, align 8, !dbg !7950
  br label %41, !dbg !7951

34:                                               ; preds = %16
  %35 = load i8*, i8** %7, align 8, !dbg !7952
  %36 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !7954
  %37 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %36, i32 0, i32 9, !dbg !7955
  store i8* %35, i8** %37, align 8, !dbg !7956
  %38 = load void (i8*)*, void (i8*)** %9, align 8, !dbg !7957
  %39 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !7958
  %40 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %39, i32 0, i32 12, !dbg !7959
  store void (i8*)* %38, void (i8*)** %40, align 8, !dbg !7960
  br label %41

41:                                               ; preds = %34, %30
  %42 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !7961
  %43 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %42, i32 0, i32 8, !dbg !7962
  store i32 192, i32* %43, align 4, !dbg !7963
  %44 = load i32, i32* %8, align 4, !dbg !7964
  %45 = load %struct.binn_struct*, %struct.binn_struct** %6, align 8, !dbg !7965
  %46 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %45, i32 0, i32 10, !dbg !7966
  store i32 %44, i32* %46, align 8, !dbg !7967
  store i32 1, i32* %5, align 4, !dbg !7968
  br label %47, !dbg !7968

47:                                               ; preds = %41, %29, %15
  %48 = load i32, i32* %5, align 4, !dbg !7969
  ret i32 %48, !dbg !7969
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i64 @_Z6atoi64Pc(i8* %0) #0 !dbg !7970 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !7973, metadata !DIExpression()), !dbg !7974
  call void @llvm.dbg.declare(metadata i64* %3, metadata !7975, metadata !DIExpression()), !dbg !7976
  call void @llvm.dbg.declare(metadata i32* %4, metadata !7977, metadata !DIExpression()), !dbg !7978
  store i32 0, i32* %4, align 4, !dbg !7978
  %5 = load i8*, i8** %2, align 8, !dbg !7979
  %6 = load i8, i8* %5, align 1, !dbg !7981
  %7 = sext i8 %6 to i32, !dbg !7981
  %8 = icmp eq i32 %7, 45, !dbg !7982
  br i1 %8, label %9, label %12, !dbg !7983

9:                                                ; preds = %1
  store i32 1, i32* %4, align 4, !dbg !7984
  %10 = load i8*, i8** %2, align 8, !dbg !7986
  %11 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !7986
  store i8* %11, i8** %2, align 8, !dbg !7986
  br label %12, !dbg !7987

12:                                               ; preds = %9, %1
  store i64 0, i64* %3, align 8, !dbg !7988
  br label %13, !dbg !7989

13:                                               ; preds = %26, %12
  %14 = load i8*, i8** %2, align 8, !dbg !7990
  %15 = load i8, i8* %14, align 1, !dbg !7993
  %16 = icmp ne i8 %15, 0, !dbg !7993
  br i1 %16, label %17, label %29, !dbg !7994

17:                                               ; preds = %13
  %18 = load i64, i64* %3, align 8, !dbg !7995
  %19 = mul nsw i64 10, %18, !dbg !7997
  %20 = load i8*, i8** %2, align 8, !dbg !7998
  %21 = load i8, i8* %20, align 1, !dbg !7999
  %22 = sext i8 %21 to i32, !dbg !7999
  %23 = sub nsw i32 %22, 48, !dbg !8000
  %24 = sext i32 %23 to i64, !dbg !8001
  %25 = add nsw i64 %19, %24, !dbg !8002
  store i64 %25, i64* %3, align 8, !dbg !8003
  br label %26, !dbg !8004

26:                                               ; preds = %17
  %27 = load i8*, i8** %2, align 8, !dbg !8005
  %28 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !8005
  store i8* %28, i8** %2, align 8, !dbg !8005
  br label %13, !dbg !8006, !llvm.loop !8007

29:                                               ; preds = %13
  %30 = load i32, i32* %4, align 4, !dbg !8009
  %31 = icmp ne i32 %30, 0, !dbg !8009
  br i1 %31, label %32, label %35, !dbg !8011

32:                                               ; preds = %29
  %33 = load i64, i64* %3, align 8, !dbg !8012
  %34 = mul nsw i64 %33, -1, !dbg !8012
  store i64 %34, i64* %3, align 8, !dbg !8012
  br label %35, !dbg !8013

35:                                               ; preds = %32, %29
  %36 = load i64, i64* %3, align 8, !dbg !8014
  ret i64 %36, !dbg !8015
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_get_int32(%struct.binn_struct* %0, i32* %1) #6 !dbg !8016 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i32*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !8019, metadata !DIExpression()), !dbg !8020
  store i32* %1, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !8021, metadata !DIExpression()), !dbg !8022
  %6 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8023
  %7 = icmp eq %struct.binn_struct* %6, null, !dbg !8025
  br i1 %7, label %11, label %8, !dbg !8026

8:                                                ; preds = %2
  %9 = load i32*, i32** %5, align 8, !dbg !8027
  %10 = icmp eq i32* %9, null, !dbg !8028
  br i1 %10, label %11, label %12, !dbg !8029

11:                                               ; preds = %8, %2
  store i32 0, i32* %3, align 4, !dbg !8030
  br label %223, !dbg !8030

12:                                               ; preds = %8
  %13 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8031
  %14 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %13, i32 0, i32 8, !dbg !8033
  %15 = load i32, i32* %14, align 4, !dbg !8033
  %16 = call i32 @_ZL11type_familyi(i32 %15), !dbg !8034
  %17 = icmp eq i32 %16, 242, !dbg !8035
  br i1 %17, label %18, label %28, !dbg !8036

18:                                               ; preds = %12
  %19 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8037
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %19, i32 0, i32 9, !dbg !8039
  %21 = load i8*, i8** %20, align 8, !dbg !8039
  %22 = load i32*, i32** %5, align 8, !dbg !8040
  %23 = bitcast i32* %22 to i8*, !dbg !8040
  %24 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8041
  %25 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %24, i32 0, i32 8, !dbg !8042
  %26 = load i32, i32* %25, align 4, !dbg !8042
  %27 = call i32 @_ZL14copy_int_valuePvS_ii(i8* %21, i8* %23, i32 %26, i32 97), !dbg !8043
  store i32 %27, i32* %3, align 4, !dbg !8044
  br label %223, !dbg !8044

28:                                               ; preds = %12
  %29 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8045
  %30 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %29, i32 0, i32 8, !dbg !8046
  %31 = load i32, i32* %30, align 4, !dbg !8046
  switch i32 %31, label %221 [
    i32 98, label %32
    i32 130, label %93
    i32 160, label %150
    i32 524385, label %215
  ], !dbg !8047

32:                                               ; preds = %28
  %33 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8048
  %34 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %33, i32 0, i32 13, !dbg !8051
  %35 = bitcast %union.anon* %34 to float*, !dbg !8051
  %36 = load float, float* %35, align 8, !dbg !8051
  %37 = fcmp olt float %36, 0xC1E0000000000000, !dbg !8052
  br i1 %37, label %44, label %38, !dbg !8053

38:                                               ; preds = %32
  %39 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8054
  %40 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %39, i32 0, i32 13, !dbg !8055
  %41 = bitcast %union.anon* %40 to float*, !dbg !8055
  %42 = load float, float* %41, align 8, !dbg !8055
  %43 = fcmp ogt float %42, 0x41E0000000000000, !dbg !8056
  br i1 %43, label %44, label %45, !dbg !8057

44:                                               ; preds = %38, %32
  store i32 0, i32* %3, align 4, !dbg !8058
  br label %223, !dbg !8058

45:                                               ; preds = %38
  %46 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8059
  %47 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %46, i32 0, i32 13, !dbg !8059
  %48 = bitcast %union.anon* %47 to float*, !dbg !8059
  %49 = load float, float* %48, align 8, !dbg !8059
  %50 = fpext float %49 to double, !dbg !8059
  %51 = fcmp oge double %50, 0.000000e+00, !dbg !8059
  br i1 %51, label %52, label %60, !dbg !8059

52:                                               ; preds = %45
  %53 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8059
  %54 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %53, i32 0, i32 13, !dbg !8059
  %55 = bitcast %union.anon* %54 to float*, !dbg !8059
  %56 = load float, float* %55, align 8, !dbg !8059
  %57 = fpext float %56 to double, !dbg !8059
  %58 = fadd double %57, 5.000000e-01, !dbg !8059
  %59 = fptosi double %58 to i32, !dbg !8059
  br label %90, !dbg !8059

60:                                               ; preds = %45
  %61 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8059
  %62 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %61, i32 0, i32 13, !dbg !8059
  %63 = bitcast %union.anon* %62 to float*, !dbg !8059
  %64 = load float, float* %63, align 8, !dbg !8059
  %65 = fpext float %64 to double, !dbg !8059
  %66 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8059
  %67 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %66, i32 0, i32 13, !dbg !8059
  %68 = bitcast %union.anon* %67 to float*, !dbg !8059
  %69 = load float, float* %68, align 8, !dbg !8059
  %70 = fptosi float %69 to i32, !dbg !8059
  %71 = sitofp i32 %70 to double, !dbg !8059
  %72 = fsub double %65, %71, !dbg !8059
  %73 = fcmp ole double %72, -5.000000e-01, !dbg !8059
  br i1 %73, label %74, label %80, !dbg !8059

74:                                               ; preds = %60
  %75 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8059
  %76 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %75, i32 0, i32 13, !dbg !8059
  %77 = bitcast %union.anon* %76 to float*, !dbg !8059
  %78 = load float, float* %77, align 8, !dbg !8059
  %79 = fptosi float %78 to i32, !dbg !8059
  br label %88, !dbg !8059

80:                                               ; preds = %60
  %81 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8059
  %82 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %81, i32 0, i32 13, !dbg !8059
  %83 = bitcast %union.anon* %82 to float*, !dbg !8059
  %84 = load float, float* %83, align 8, !dbg !8059
  %85 = fpext float %84 to double, !dbg !8059
  %86 = fsub double %85, 5.000000e-01, !dbg !8059
  %87 = fptosi double %86 to i32, !dbg !8059
  br label %88, !dbg !8059

88:                                               ; preds = %80, %74
  %89 = phi i32 [ %79, %74 ], [ %87, %80 ], !dbg !8059
  br label %90, !dbg !8059

90:                                               ; preds = %88, %52
  %91 = phi i32 [ %59, %52 ], [ %89, %88 ], !dbg !8059
  %92 = load i32*, i32** %5, align 8, !dbg !8060
  store i32 %91, i32* %92, align 4, !dbg !8061
  br label %222, !dbg !8062

93:                                               ; preds = %28
  %94 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8063
  %95 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %94, i32 0, i32 13, !dbg !8065
  %96 = bitcast %union.anon* %95 to double*, !dbg !8065
  %97 = load double, double* %96, align 8, !dbg !8065
  %98 = fcmp olt double %97, 0xC1E0000000000000, !dbg !8066
  br i1 %98, label %105, label %99, !dbg !8067

99:                                               ; preds = %93
  %100 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8068
  %101 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %100, i32 0, i32 13, !dbg !8069
  %102 = bitcast %union.anon* %101 to double*, !dbg !8069
  %103 = load double, double* %102, align 8, !dbg !8069
  %104 = fcmp ogt double %103, 0x41DFFFFFFFC00000, !dbg !8070
  br i1 %104, label %105, label %106, !dbg !8071

105:                                              ; preds = %99, %93
  store i32 0, i32* %3, align 4, !dbg !8072
  br label %223, !dbg !8072

106:                                              ; preds = %99
  %107 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8073
  %108 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %107, i32 0, i32 13, !dbg !8073
  %109 = bitcast %union.anon* %108 to double*, !dbg !8073
  %110 = load double, double* %109, align 8, !dbg !8073
  %111 = fcmp oge double %110, 0.000000e+00, !dbg !8073
  br i1 %111, label %112, label %119, !dbg !8073

112:                                              ; preds = %106
  %113 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8073
  %114 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %113, i32 0, i32 13, !dbg !8073
  %115 = bitcast %union.anon* %114 to double*, !dbg !8073
  %116 = load double, double* %115, align 8, !dbg !8073
  %117 = fadd double %116, 5.000000e-01, !dbg !8073
  %118 = fptosi double %117 to i32, !dbg !8073
  br label %147, !dbg !8073

119:                                              ; preds = %106
  %120 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8073
  %121 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %120, i32 0, i32 13, !dbg !8073
  %122 = bitcast %union.anon* %121 to double*, !dbg !8073
  %123 = load double, double* %122, align 8, !dbg !8073
  %124 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8073
  %125 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %124, i32 0, i32 13, !dbg !8073
  %126 = bitcast %union.anon* %125 to double*, !dbg !8073
  %127 = load double, double* %126, align 8, !dbg !8073
  %128 = fptosi double %127 to i32, !dbg !8073
  %129 = sitofp i32 %128 to double, !dbg !8073
  %130 = fsub double %123, %129, !dbg !8073
  %131 = fcmp ole double %130, -5.000000e-01, !dbg !8073
  br i1 %131, label %132, label %138, !dbg !8073

132:                                              ; preds = %119
  %133 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8073
  %134 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %133, i32 0, i32 13, !dbg !8073
  %135 = bitcast %union.anon* %134 to double*, !dbg !8073
  %136 = load double, double* %135, align 8, !dbg !8073
  %137 = fptosi double %136 to i32, !dbg !8073
  br label %145, !dbg !8073

138:                                              ; preds = %119
  %139 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8073
  %140 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %139, i32 0, i32 13, !dbg !8073
  %141 = bitcast %union.anon* %140 to double*, !dbg !8073
  %142 = load double, double* %141, align 8, !dbg !8073
  %143 = fsub double %142, 5.000000e-01, !dbg !8073
  %144 = fptosi double %143 to i32, !dbg !8073
  br label %145, !dbg !8073

145:                                              ; preds = %138, %132
  %146 = phi i32 [ %137, %132 ], [ %144, %138 ], !dbg !8073
  br label %147, !dbg !8073

147:                                              ; preds = %145, %112
  %148 = phi i32 [ %118, %112 ], [ %146, %145 ], !dbg !8073
  %149 = load i32*, i32** %5, align 8, !dbg !8074
  store i32 %148, i32* %149, align 4, !dbg !8075
  br label %222, !dbg !8076

150:                                              ; preds = %28
  %151 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8077
  %152 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %151, i32 0, i32 9, !dbg !8079
  %153 = load i8*, i8** %152, align 8, !dbg !8079
  %154 = call i32 @_ZL10is_integerPc(i8* %153), !dbg !8080
  %155 = icmp ne i32 %154, 0, !dbg !8080
  br i1 %155, label %156, label %162, !dbg !8081

156:                                              ; preds = %150
  %157 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8082
  %158 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %157, i32 0, i32 9, !dbg !8083
  %159 = load i8*, i8** %158, align 8, !dbg !8083
  %160 = call i32 @atoi(i8* %159), !dbg !8084
  %161 = load i32*, i32** %5, align 8, !dbg !8085
  store i32 %160, i32* %161, align 4, !dbg !8086
  br label %214, !dbg !8087

162:                                              ; preds = %150
  %163 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8088
  %164 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %163, i32 0, i32 9, !dbg !8090
  %165 = load i8*, i8** %164, align 8, !dbg !8090
  %166 = call i32 @_ZL8is_floatPc(i8* %165), !dbg !8091
  %167 = icmp ne i32 %166, 0, !dbg !8091
  br i1 %167, label %168, label %212, !dbg !8092

168:                                              ; preds = %162
  %169 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8093
  %170 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %169, i32 0, i32 9, !dbg !8093
  %171 = load i8*, i8** %170, align 8, !dbg !8093
  %172 = call double @atof(i8* %171), !dbg !8093
  %173 = fcmp oge double %172, 0.000000e+00, !dbg !8093
  br i1 %173, label %174, label %181, !dbg !8093

174:                                              ; preds = %168
  %175 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8093
  %176 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %175, i32 0, i32 9, !dbg !8093
  %177 = load i8*, i8** %176, align 8, !dbg !8093
  %178 = call double @atof(i8* %177), !dbg !8093
  %179 = fadd double %178, 5.000000e-01, !dbg !8093
  %180 = fptosi double %179 to i32, !dbg !8093
  br label %209, !dbg !8093

181:                                              ; preds = %168
  %182 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8093
  %183 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %182, i32 0, i32 9, !dbg !8093
  %184 = load i8*, i8** %183, align 8, !dbg !8093
  %185 = call double @atof(i8* %184), !dbg !8093
  %186 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8093
  %187 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %186, i32 0, i32 9, !dbg !8093
  %188 = load i8*, i8** %187, align 8, !dbg !8093
  %189 = call double @atof(i8* %188), !dbg !8093
  %190 = fptosi double %189 to i32, !dbg !8093
  %191 = sitofp i32 %190 to double, !dbg !8093
  %192 = fsub double %185, %191, !dbg !8093
  %193 = fcmp ole double %192, -5.000000e-01, !dbg !8093
  br i1 %193, label %194, label %200, !dbg !8093

194:                                              ; preds = %181
  %195 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8093
  %196 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %195, i32 0, i32 9, !dbg !8093
  %197 = load i8*, i8** %196, align 8, !dbg !8093
  %198 = call double @atof(i8* %197), !dbg !8093
  %199 = fptosi double %198 to i32, !dbg !8093
  br label %207, !dbg !8093

200:                                              ; preds = %181
  %201 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8093
  %202 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %201, i32 0, i32 9, !dbg !8093
  %203 = load i8*, i8** %202, align 8, !dbg !8093
  %204 = call double @atof(i8* %203), !dbg !8093
  %205 = fsub double %204, 5.000000e-01, !dbg !8093
  %206 = fptosi double %205 to i32, !dbg !8093
  br label %207, !dbg !8093

207:                                              ; preds = %200, %194
  %208 = phi i32 [ %199, %194 ], [ %206, %200 ], !dbg !8093
  br label %209, !dbg !8093

209:                                              ; preds = %207, %174
  %210 = phi i32 [ %180, %174 ], [ %208, %207 ], !dbg !8093
  %211 = load i32*, i32** %5, align 8, !dbg !8094
  store i32 %210, i32* %211, align 4, !dbg !8095
  br label %213, !dbg !8096

212:                                              ; preds = %162
  store i32 0, i32* %3, align 4, !dbg !8097
  br label %223, !dbg !8097

213:                                              ; preds = %209
  br label %214

214:                                              ; preds = %213, %156
  br label %222, !dbg !8098

215:                                              ; preds = %28
  %216 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8099
  %217 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %216, i32 0, i32 13, !dbg !8100
  %218 = bitcast %union.anon* %217 to i32*, !dbg !8100
  %219 = load i32, i32* %218, align 8, !dbg !8100
  %220 = load i32*, i32** %5, align 8, !dbg !8101
  store i32 %219, i32* %220, align 4, !dbg !8102
  br label %222, !dbg !8103

221:                                              ; preds = %28
  store i32 0, i32* %3, align 4, !dbg !8104
  br label %223, !dbg !8104

222:                                              ; preds = %215, %214, %147, %90
  store i32 1, i32* %3, align 4, !dbg !8105
  br label %223, !dbg !8105

223:                                              ; preds = %222, %221, %212, %105, %44, %18, %11
  %224 = load i32, i32* %3, align 4, !dbg !8106
  ret i32 %224, !dbg !8106
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL10is_integerPc(i8* %0) #0 !dbg !8107 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !8110, metadata !DIExpression()), !dbg !8111
  call void @llvm.dbg.declare(metadata i32* %4, metadata !8112, metadata !DIExpression()), !dbg !8113
  %5 = load i8*, i8** %3, align 8, !dbg !8114
  %6 = icmp eq i8* %5, null, !dbg !8116
  br i1 %6, label %7, label %8, !dbg !8117

7:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !8118
  br label %44, !dbg !8118

8:                                                ; preds = %1
  %9 = load i8*, i8** %3, align 8, !dbg !8119
  %10 = load i8, i8* %9, align 1, !dbg !8121
  %11 = sext i8 %10 to i32, !dbg !8121
  %12 = icmp eq i32 %11, 45, !dbg !8122
  br i1 %12, label %13, label %16, !dbg !8123

13:                                               ; preds = %8
  %14 = load i8*, i8** %3, align 8, !dbg !8124
  %15 = getelementptr inbounds i8, i8* %14, i32 1, !dbg !8124
  store i8* %15, i8** %3, align 8, !dbg !8124
  br label %16, !dbg !8125

16:                                               ; preds = %13, %8
  %17 = load i8*, i8** %3, align 8, !dbg !8126
  %18 = load i8, i8* %17, align 1, !dbg !8128
  %19 = sext i8 %18 to i32, !dbg !8128
  %20 = icmp eq i32 %19, 0, !dbg !8129
  br i1 %20, label %21, label %22, !dbg !8130

21:                                               ; preds = %16
  store i32 0, i32* %2, align 4, !dbg !8131
  br label %44, !dbg !8131

22:                                               ; preds = %16
  store i32 1, i32* %4, align 4, !dbg !8132
  br label %23, !dbg !8133

23:                                               ; preds = %39, %22
  %24 = load i8*, i8** %3, align 8, !dbg !8134
  %25 = load i8, i8* %24, align 1, !dbg !8137
  %26 = icmp ne i8 %25, 0, !dbg !8137
  br i1 %26, label %27, label %42, !dbg !8138

27:                                               ; preds = %23
  %28 = load i8*, i8** %3, align 8, !dbg !8139
  %29 = load i8, i8* %28, align 1, !dbg !8142
  %30 = sext i8 %29 to i32, !dbg !8142
  %31 = icmp slt i32 %30, 48, !dbg !8143
  br i1 %31, label %37, label %32, !dbg !8144

32:                                               ; preds = %27
  %33 = load i8*, i8** %3, align 8, !dbg !8145
  %34 = load i8, i8* %33, align 1, !dbg !8146
  %35 = sext i8 %34 to i32, !dbg !8146
  %36 = icmp sgt i32 %35, 57, !dbg !8147
  br i1 %36, label %37, label %38, !dbg !8148

37:                                               ; preds = %32, %27
  store i32 0, i32* %4, align 4, !dbg !8149
  br label %38, !dbg !8151

38:                                               ; preds = %37, %32
  br label %39, !dbg !8152

39:                                               ; preds = %38
  %40 = load i8*, i8** %3, align 8, !dbg !8153
  %41 = getelementptr inbounds i8, i8* %40, i32 1, !dbg !8153
  store i8* %41, i8** %3, align 8, !dbg !8153
  br label %23, !dbg !8154, !llvm.loop !8155

42:                                               ; preds = %23
  %43 = load i32, i32* %4, align 4, !dbg !8157
  store i32 %43, i32* %2, align 4, !dbg !8158
  br label %44, !dbg !8158

44:                                               ; preds = %42, %21, %7
  %45 = load i32, i32* %2, align 4, !dbg !8159
  ret i32 %45, !dbg !8159
}

declare i32 @atoi(i8*) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL8is_floatPc(i8* %0) #0 !dbg !8160 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !8161, metadata !DIExpression()), !dbg !8162
  call void @llvm.dbg.declare(metadata i32* %4, metadata !8163, metadata !DIExpression()), !dbg !8164
  call void @llvm.dbg.declare(metadata i32* %5, metadata !8165, metadata !DIExpression()), !dbg !8166
  store i32 0, i32* %5, align 4, !dbg !8166
  %6 = load i8*, i8** %3, align 8, !dbg !8167
  %7 = icmp eq i8* %6, null, !dbg !8169
  br i1 %7, label %8, label %9, !dbg !8170

8:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !8171
  br label %62, !dbg !8171

9:                                                ; preds = %1
  %10 = load i8*, i8** %3, align 8, !dbg !8172
  %11 = load i8, i8* %10, align 1, !dbg !8174
  %12 = sext i8 %11 to i32, !dbg !8174
  %13 = icmp eq i32 %12, 45, !dbg !8175
  br i1 %13, label %14, label %17, !dbg !8176

14:                                               ; preds = %9
  %15 = load i8*, i8** %3, align 8, !dbg !8177
  %16 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !8177
  store i8* %16, i8** %3, align 8, !dbg !8177
  br label %17, !dbg !8178

17:                                               ; preds = %14, %9
  %18 = load i8*, i8** %3, align 8, !dbg !8179
  %19 = load i8, i8* %18, align 1, !dbg !8181
  %20 = sext i8 %19 to i32, !dbg !8181
  %21 = icmp eq i32 %20, 0, !dbg !8182
  br i1 %21, label %22, label %23, !dbg !8183

22:                                               ; preds = %17
  store i32 0, i32* %2, align 4, !dbg !8184
  br label %62, !dbg !8184

23:                                               ; preds = %17
  store i32 1, i32* %4, align 4, !dbg !8185
  br label %24, !dbg !8186

24:                                               ; preds = %57, %23
  %25 = load i8*, i8** %3, align 8, !dbg !8187
  %26 = load i8, i8* %25, align 1, !dbg !8190
  %27 = icmp ne i8 %26, 0, !dbg !8190
  br i1 %27, label %28, label %60, !dbg !8191

28:                                               ; preds = %24
  %29 = load i8*, i8** %3, align 8, !dbg !8192
  %30 = load i8, i8* %29, align 1, !dbg !8195
  %31 = sext i8 %30 to i32, !dbg !8195
  %32 = icmp eq i32 %31, 46, !dbg !8196
  br i1 %32, label %38, label %33, !dbg !8197

33:                                               ; preds = %28
  %34 = load i8*, i8** %3, align 8, !dbg !8198
  %35 = load i8, i8* %34, align 1, !dbg !8199
  %36 = sext i8 %35 to i32, !dbg !8199
  %37 = icmp eq i32 %36, 44, !dbg !8200
  br i1 %37, label %38, label %43, !dbg !8201

38:                                               ; preds = %33, %28
  %39 = load i32, i32* %5, align 4, !dbg !8202
  %40 = icmp ne i32 %39, 0, !dbg !8202
  br i1 %40, label %42, label %41, !dbg !8205

41:                                               ; preds = %38
  store i32 0, i32* %4, align 4, !dbg !8206
  br label %42, !dbg !8207

42:                                               ; preds = %41, %38
  br label %56, !dbg !8208

43:                                               ; preds = %33
  %44 = load i8*, i8** %3, align 8, !dbg !8209
  %45 = load i8, i8* %44, align 1, !dbg !8211
  %46 = sext i8 %45 to i32, !dbg !8211
  %47 = icmp sge i32 %46, 48, !dbg !8212
  br i1 %47, label %48, label %54, !dbg !8213

48:                                               ; preds = %43
  %49 = load i8*, i8** %3, align 8, !dbg !8214
  %50 = load i8, i8* %49, align 1, !dbg !8215
  %51 = sext i8 %50 to i32, !dbg !8215
  %52 = icmp sle i32 %51, 57, !dbg !8216
  br i1 %52, label %53, label %54, !dbg !8217

53:                                               ; preds = %48
  store i32 1, i32* %5, align 4, !dbg !8218
  br label %55, !dbg !8220

54:                                               ; preds = %48, %43
  store i32 0, i32* %2, align 4, !dbg !8221
  br label %62, !dbg !8221

55:                                               ; preds = %53
  br label %56

56:                                               ; preds = %55, %42
  br label %57, !dbg !8223

57:                                               ; preds = %56
  %58 = load i8*, i8** %3, align 8, !dbg !8224
  %59 = getelementptr inbounds i8, i8* %58, i32 1, !dbg !8224
  store i8* %59, i8** %3, align 8, !dbg !8224
  br label %24, !dbg !8225, !llvm.loop !8226

60:                                               ; preds = %24
  %61 = load i32, i32* %4, align 4, !dbg !8228
  store i32 %61, i32* %2, align 4, !dbg !8229
  br label %62, !dbg !8229

62:                                               ; preds = %60, %54, %22, %8
  %63 = load i32, i32* %2, align 4, !dbg !8230
  ret i32 %63, !dbg !8230
}

declare double @atof(i8*) #2

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_get_int64(%struct.binn_struct* %0, i64* %1) #6 !dbg !8231 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i64*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !8234, metadata !DIExpression()), !dbg !8235
  store i64* %1, i64** %5, align 8
  call void @llvm.dbg.declare(metadata i64** %5, metadata !8236, metadata !DIExpression()), !dbg !8237
  %6 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8238
  %7 = icmp eq %struct.binn_struct* %6, null, !dbg !8240
  br i1 %7, label %11, label %8, !dbg !8241

8:                                                ; preds = %2
  %9 = load i64*, i64** %5, align 8, !dbg !8242
  %10 = icmp eq i64* %9, null, !dbg !8243
  br i1 %10, label %11, label %12, !dbg !8244

11:                                               ; preds = %8, %2
  store i32 0, i32* %3, align 4, !dbg !8245
  br label %227, !dbg !8245

12:                                               ; preds = %8
  %13 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8246
  %14 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %13, i32 0, i32 8, !dbg !8248
  %15 = load i32, i32* %14, align 4, !dbg !8248
  %16 = call i32 @_ZL11type_familyi(i32 %15), !dbg !8249
  %17 = icmp eq i32 %16, 242, !dbg !8250
  br i1 %17, label %18, label %28, !dbg !8251

18:                                               ; preds = %12
  %19 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8252
  %20 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %19, i32 0, i32 9, !dbg !8254
  %21 = load i8*, i8** %20, align 8, !dbg !8254
  %22 = load i64*, i64** %5, align 8, !dbg !8255
  %23 = bitcast i64* %22 to i8*, !dbg !8255
  %24 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8256
  %25 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %24, i32 0, i32 8, !dbg !8257
  %26 = load i32, i32* %25, align 4, !dbg !8257
  %27 = call i32 @_ZL14copy_int_valuePvS_ii(i8* %21, i8* %23, i32 %26, i32 129), !dbg !8258
  store i32 %27, i32* %3, align 4, !dbg !8259
  br label %227, !dbg !8259

28:                                               ; preds = %12
  %29 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8260
  %30 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %29, i32 0, i32 8, !dbg !8261
  %31 = load i32, i32* %30, align 4, !dbg !8261
  switch i32 %31, label %225 [
    i32 98, label %32
    i32 130, label %94
    i32 160, label %152
    i32 524385, label %218
  ], !dbg !8262

32:                                               ; preds = %28
  %33 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8263
  %34 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %33, i32 0, i32 13, !dbg !8266
  %35 = bitcast %union.anon* %34 to float*, !dbg !8266
  %36 = load float, float* %35, align 8, !dbg !8266
  %37 = fcmp olt float %36, 0xC3E0000000000000, !dbg !8267
  br i1 %37, label %44, label %38, !dbg !8268

38:                                               ; preds = %32
  %39 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8269
  %40 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %39, i32 0, i32 13, !dbg !8270
  %41 = bitcast %union.anon* %40 to float*, !dbg !8270
  %42 = load float, float* %41, align 8, !dbg !8270
  %43 = fcmp ogt float %42, 0x43E0000000000000, !dbg !8271
  br i1 %43, label %44, label %45, !dbg !8272

44:                                               ; preds = %38, %32
  store i32 0, i32* %3, align 4, !dbg !8273
  br label %227, !dbg !8273

45:                                               ; preds = %38
  %46 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8274
  %47 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %46, i32 0, i32 13, !dbg !8274
  %48 = bitcast %union.anon* %47 to float*, !dbg !8274
  %49 = load float, float* %48, align 8, !dbg !8274
  %50 = fpext float %49 to double, !dbg !8274
  %51 = fcmp oge double %50, 0.000000e+00, !dbg !8274
  br i1 %51, label %52, label %60, !dbg !8274

52:                                               ; preds = %45
  %53 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8274
  %54 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %53, i32 0, i32 13, !dbg !8274
  %55 = bitcast %union.anon* %54 to float*, !dbg !8274
  %56 = load float, float* %55, align 8, !dbg !8274
  %57 = fpext float %56 to double, !dbg !8274
  %58 = fadd double %57, 5.000000e-01, !dbg !8274
  %59 = fptosi double %58 to i32, !dbg !8274
  br label %90, !dbg !8274

60:                                               ; preds = %45
  %61 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8274
  %62 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %61, i32 0, i32 13, !dbg !8274
  %63 = bitcast %union.anon* %62 to float*, !dbg !8274
  %64 = load float, float* %63, align 8, !dbg !8274
  %65 = fpext float %64 to double, !dbg !8274
  %66 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8274
  %67 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %66, i32 0, i32 13, !dbg !8274
  %68 = bitcast %union.anon* %67 to float*, !dbg !8274
  %69 = load float, float* %68, align 8, !dbg !8274
  %70 = fptosi float %69 to i32, !dbg !8274
  %71 = sitofp i32 %70 to double, !dbg !8274
  %72 = fsub double %65, %71, !dbg !8274
  %73 = fcmp ole double %72, -5.000000e-01, !dbg !8274
  br i1 %73, label %74, label %80, !dbg !8274

74:                                               ; preds = %60
  %75 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8274
  %76 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %75, i32 0, i32 13, !dbg !8274
  %77 = bitcast %union.anon* %76 to float*, !dbg !8274
  %78 = load float, float* %77, align 8, !dbg !8274
  %79 = fptosi float %78 to i32, !dbg !8274
  br label %88, !dbg !8274

80:                                               ; preds = %60
  %81 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8274
  %82 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %81, i32 0, i32 13, !dbg !8274
  %83 = bitcast %union.anon* %82 to float*, !dbg !8274
  %84 = load float, float* %83, align 8, !dbg !8274
  %85 = fpext float %84 to double, !dbg !8274
  %86 = fsub double %85, 5.000000e-01, !dbg !8274
  %87 = fptosi double %86 to i32, !dbg !8274
  br label %88, !dbg !8274

88:                                               ; preds = %80, %74
  %89 = phi i32 [ %79, %74 ], [ %87, %80 ], !dbg !8274
  br label %90, !dbg !8274

90:                                               ; preds = %88, %52
  %91 = phi i32 [ %59, %52 ], [ %89, %88 ], !dbg !8274
  %92 = sext i32 %91 to i64, !dbg !8274
  %93 = load i64*, i64** %5, align 8, !dbg !8275
  store i64 %92, i64* %93, align 8, !dbg !8276
  br label %226, !dbg !8277

94:                                               ; preds = %28
  %95 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8278
  %96 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %95, i32 0, i32 13, !dbg !8280
  %97 = bitcast %union.anon* %96 to double*, !dbg !8280
  %98 = load double, double* %97, align 8, !dbg !8280
  %99 = fcmp olt double %98, 0xC3E0000000000000, !dbg !8281
  br i1 %99, label %106, label %100, !dbg !8282

100:                                              ; preds = %94
  %101 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8283
  %102 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %101, i32 0, i32 13, !dbg !8284
  %103 = bitcast %union.anon* %102 to double*, !dbg !8284
  %104 = load double, double* %103, align 8, !dbg !8284
  %105 = fcmp ogt double %104, 0x43E0000000000000, !dbg !8285
  br i1 %105, label %106, label %107, !dbg !8286

106:                                              ; preds = %100, %94
  store i32 0, i32* %3, align 4, !dbg !8287
  br label %227, !dbg !8287

107:                                              ; preds = %100
  %108 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8288
  %109 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %108, i32 0, i32 13, !dbg !8288
  %110 = bitcast %union.anon* %109 to double*, !dbg !8288
  %111 = load double, double* %110, align 8, !dbg !8288
  %112 = fcmp oge double %111, 0.000000e+00, !dbg !8288
  br i1 %112, label %113, label %120, !dbg !8288

113:                                              ; preds = %107
  %114 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8288
  %115 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %114, i32 0, i32 13, !dbg !8288
  %116 = bitcast %union.anon* %115 to double*, !dbg !8288
  %117 = load double, double* %116, align 8, !dbg !8288
  %118 = fadd double %117, 5.000000e-01, !dbg !8288
  %119 = fptosi double %118 to i32, !dbg !8288
  br label %148, !dbg !8288

120:                                              ; preds = %107
  %121 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8288
  %122 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %121, i32 0, i32 13, !dbg !8288
  %123 = bitcast %union.anon* %122 to double*, !dbg !8288
  %124 = load double, double* %123, align 8, !dbg !8288
  %125 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8288
  %126 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %125, i32 0, i32 13, !dbg !8288
  %127 = bitcast %union.anon* %126 to double*, !dbg !8288
  %128 = load double, double* %127, align 8, !dbg !8288
  %129 = fptosi double %128 to i32, !dbg !8288
  %130 = sitofp i32 %129 to double, !dbg !8288
  %131 = fsub double %124, %130, !dbg !8288
  %132 = fcmp ole double %131, -5.000000e-01, !dbg !8288
  br i1 %132, label %133, label %139, !dbg !8288

133:                                              ; preds = %120
  %134 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8288
  %135 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %134, i32 0, i32 13, !dbg !8288
  %136 = bitcast %union.anon* %135 to double*, !dbg !8288
  %137 = load double, double* %136, align 8, !dbg !8288
  %138 = fptosi double %137 to i32, !dbg !8288
  br label %146, !dbg !8288

139:                                              ; preds = %120
  %140 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8288
  %141 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %140, i32 0, i32 13, !dbg !8288
  %142 = bitcast %union.anon* %141 to double*, !dbg !8288
  %143 = load double, double* %142, align 8, !dbg !8288
  %144 = fsub double %143, 5.000000e-01, !dbg !8288
  %145 = fptosi double %144 to i32, !dbg !8288
  br label %146, !dbg !8288

146:                                              ; preds = %139, %133
  %147 = phi i32 [ %138, %133 ], [ %145, %139 ], !dbg !8288
  br label %148, !dbg !8288

148:                                              ; preds = %146, %113
  %149 = phi i32 [ %119, %113 ], [ %147, %146 ], !dbg !8288
  %150 = sext i32 %149 to i64, !dbg !8288
  %151 = load i64*, i64** %5, align 8, !dbg !8289
  store i64 %150, i64* %151, align 8, !dbg !8290
  br label %226, !dbg !8291

152:                                              ; preds = %28
  %153 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8292
  %154 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %153, i32 0, i32 9, !dbg !8294
  %155 = load i8*, i8** %154, align 8, !dbg !8294
  %156 = call i32 @_ZL10is_integerPc(i8* %155), !dbg !8295
  %157 = icmp ne i32 %156, 0, !dbg !8295
  br i1 %157, label %158, label %164, !dbg !8296

158:                                              ; preds = %152
  %159 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8297
  %160 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %159, i32 0, i32 9, !dbg !8298
  %161 = load i8*, i8** %160, align 8, !dbg !8298
  %162 = call i64 @_Z6atoi64Pc(i8* %161), !dbg !8299
  %163 = load i64*, i64** %5, align 8, !dbg !8300
  store i64 %162, i64* %163, align 8, !dbg !8301
  br label %217, !dbg !8302

164:                                              ; preds = %152
  %165 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8303
  %166 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %165, i32 0, i32 9, !dbg !8305
  %167 = load i8*, i8** %166, align 8, !dbg !8305
  %168 = call i32 @_ZL8is_floatPc(i8* %167), !dbg !8306
  %169 = icmp ne i32 %168, 0, !dbg !8306
  br i1 %169, label %170, label %215, !dbg !8307

170:                                              ; preds = %164
  %171 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8308
  %172 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %171, i32 0, i32 9, !dbg !8308
  %173 = load i8*, i8** %172, align 8, !dbg !8308
  %174 = call double @atof(i8* %173), !dbg !8308
  %175 = fcmp oge double %174, 0.000000e+00, !dbg !8308
  br i1 %175, label %176, label %183, !dbg !8308

176:                                              ; preds = %170
  %177 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8308
  %178 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %177, i32 0, i32 9, !dbg !8308
  %179 = load i8*, i8** %178, align 8, !dbg !8308
  %180 = call double @atof(i8* %179), !dbg !8308
  %181 = fadd double %180, 5.000000e-01, !dbg !8308
  %182 = fptosi double %181 to i32, !dbg !8308
  br label %211, !dbg !8308

183:                                              ; preds = %170
  %184 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8308
  %185 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %184, i32 0, i32 9, !dbg !8308
  %186 = load i8*, i8** %185, align 8, !dbg !8308
  %187 = call double @atof(i8* %186), !dbg !8308
  %188 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8308
  %189 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %188, i32 0, i32 9, !dbg !8308
  %190 = load i8*, i8** %189, align 8, !dbg !8308
  %191 = call double @atof(i8* %190), !dbg !8308
  %192 = fptosi double %191 to i32, !dbg !8308
  %193 = sitofp i32 %192 to double, !dbg !8308
  %194 = fsub double %187, %193, !dbg !8308
  %195 = fcmp ole double %194, -5.000000e-01, !dbg !8308
  br i1 %195, label %196, label %202, !dbg !8308

196:                                              ; preds = %183
  %197 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8308
  %198 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %197, i32 0, i32 9, !dbg !8308
  %199 = load i8*, i8** %198, align 8, !dbg !8308
  %200 = call double @atof(i8* %199), !dbg !8308
  %201 = fptosi double %200 to i32, !dbg !8308
  br label %209, !dbg !8308

202:                                              ; preds = %183
  %203 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8308
  %204 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %203, i32 0, i32 9, !dbg !8308
  %205 = load i8*, i8** %204, align 8, !dbg !8308
  %206 = call double @atof(i8* %205), !dbg !8308
  %207 = fsub double %206, 5.000000e-01, !dbg !8308
  %208 = fptosi double %207 to i32, !dbg !8308
  br label %209, !dbg !8308

209:                                              ; preds = %202, %196
  %210 = phi i32 [ %201, %196 ], [ %208, %202 ], !dbg !8308
  br label %211, !dbg !8308

211:                                              ; preds = %209, %176
  %212 = phi i32 [ %182, %176 ], [ %210, %209 ], !dbg !8308
  %213 = sext i32 %212 to i64, !dbg !8308
  %214 = load i64*, i64** %5, align 8, !dbg !8309
  store i64 %213, i64* %214, align 8, !dbg !8310
  br label %216, !dbg !8311

215:                                              ; preds = %164
  store i32 0, i32* %3, align 4, !dbg !8312
  br label %227, !dbg !8312

216:                                              ; preds = %211
  br label %217

217:                                              ; preds = %216, %158
  br label %226, !dbg !8313

218:                                              ; preds = %28
  %219 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8314
  %220 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %219, i32 0, i32 13, !dbg !8315
  %221 = bitcast %union.anon* %220 to i32*, !dbg !8315
  %222 = load i32, i32* %221, align 8, !dbg !8315
  %223 = sext i32 %222 to i64, !dbg !8314
  %224 = load i64*, i64** %5, align 8, !dbg !8316
  store i64 %223, i64* %224, align 8, !dbg !8317
  br label %226, !dbg !8318

225:                                              ; preds = %28
  store i32 0, i32* %3, align 4, !dbg !8319
  br label %227, !dbg !8319

226:                                              ; preds = %218, %217, %148, %90
  store i32 1, i32* %3, align 4, !dbg !8320
  br label %227, !dbg !8320

227:                                              ; preds = %226, %225, %215, %106, %44, %18, %11
  %228 = load i32, i32* %3, align 4, !dbg !8321
  ret i32 %228, !dbg !8321
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_get_double(%struct.binn_struct* %0, double* %1) #6 !dbg !8322 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca double*, align 8
  %6 = alloca i64, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !8325, metadata !DIExpression()), !dbg !8326
  store double* %1, double** %5, align 8
  call void @llvm.dbg.declare(metadata double** %5, metadata !8327, metadata !DIExpression()), !dbg !8328
  call void @llvm.dbg.declare(metadata i64* %6, metadata !8329, metadata !DIExpression()), !dbg !8330
  %7 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8331
  %8 = icmp eq %struct.binn_struct* %7, null, !dbg !8333
  br i1 %8, label %12, label %9, !dbg !8334

9:                                                ; preds = %2
  %10 = load double*, double** %5, align 8, !dbg !8335
  %11 = icmp eq double* %10, null, !dbg !8336
  br i1 %11, label %12, label %13, !dbg !8337

12:                                               ; preds = %9, %2
  store i32 0, i32* %3, align 4, !dbg !8338
  br label %88, !dbg !8338

13:                                               ; preds = %9
  %14 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8339
  %15 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %14, i32 0, i32 8, !dbg !8341
  %16 = load i32, i32* %15, align 4, !dbg !8341
  %17 = call i32 @_ZL11type_familyi(i32 %16), !dbg !8342
  %18 = icmp eq i32 %17, 242, !dbg !8343
  br i1 %18, label %19, label %34, !dbg !8344

19:                                               ; preds = %13
  %20 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8345
  %21 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %20, i32 0, i32 9, !dbg !8348
  %22 = load i8*, i8** %21, align 8, !dbg !8348
  %23 = bitcast i64* %6 to i8*, !dbg !8349
  %24 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8350
  %25 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %24, i32 0, i32 8, !dbg !8351
  %26 = load i32, i32* %25, align 4, !dbg !8351
  %27 = call i32 @_ZL14copy_int_valuePvS_ii(i8* %22, i8* %23, i32 %26, i32 129), !dbg !8352
  %28 = icmp eq i32 %27, 0, !dbg !8353
  br i1 %28, label %29, label %30, !dbg !8354

29:                                               ; preds = %19
  store i32 0, i32* %3, align 4, !dbg !8355
  br label %88, !dbg !8355

30:                                               ; preds = %19
  %31 = load i64, i64* %6, align 8, !dbg !8356
  %32 = sitofp i64 %31 to double, !dbg !8356
  %33 = load double*, double** %5, align 8, !dbg !8357
  store double %32, double* %33, align 8, !dbg !8358
  store i32 1, i32* %3, align 4, !dbg !8359
  br label %88, !dbg !8359

34:                                               ; preds = %13
  %35 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8360
  %36 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %35, i32 0, i32 8, !dbg !8361
  %37 = load i32, i32* %36, align 4, !dbg !8361
  switch i32 %37, label %86 [
    i32 98, label %38
    i32 130, label %45
    i32 160, label %51
    i32 524385, label %79
  ], !dbg !8362

38:                                               ; preds = %34
  %39 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8363
  %40 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %39, i32 0, i32 13, !dbg !8365
  %41 = bitcast %union.anon* %40 to float*, !dbg !8365
  %42 = load float, float* %41, align 8, !dbg !8365
  %43 = fpext float %42 to double, !dbg !8363
  %44 = load double*, double** %5, align 8, !dbg !8366
  store double %43, double* %44, align 8, !dbg !8367
  br label %87, !dbg !8368

45:                                               ; preds = %34
  %46 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8369
  %47 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %46, i32 0, i32 13, !dbg !8370
  %48 = bitcast %union.anon* %47 to double*, !dbg !8370
  %49 = load double, double* %48, align 8, !dbg !8370
  %50 = load double*, double** %5, align 8, !dbg !8371
  store double %49, double* %50, align 8, !dbg !8372
  br label %87, !dbg !8373

51:                                               ; preds = %34
  %52 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8374
  %53 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %52, i32 0, i32 9, !dbg !8376
  %54 = load i8*, i8** %53, align 8, !dbg !8376
  %55 = call i32 @_ZL10is_integerPc(i8* %54), !dbg !8377
  %56 = icmp ne i32 %55, 0, !dbg !8377
  br i1 %56, label %57, label %64, !dbg !8378

57:                                               ; preds = %51
  %58 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8379
  %59 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %58, i32 0, i32 9, !dbg !8380
  %60 = load i8*, i8** %59, align 8, !dbg !8380
  %61 = call i64 @_Z6atoi64Pc(i8* %60), !dbg !8381
  %62 = sitofp i64 %61 to double, !dbg !8381
  %63 = load double*, double** %5, align 8, !dbg !8382
  store double %62, double* %63, align 8, !dbg !8383
  br label %78, !dbg !8384

64:                                               ; preds = %51
  %65 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8385
  %66 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %65, i32 0, i32 9, !dbg !8387
  %67 = load i8*, i8** %66, align 8, !dbg !8387
  %68 = call i32 @_ZL8is_floatPc(i8* %67), !dbg !8388
  %69 = icmp ne i32 %68, 0, !dbg !8388
  br i1 %69, label %70, label %76, !dbg !8389

70:                                               ; preds = %64
  %71 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8390
  %72 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %71, i32 0, i32 9, !dbg !8391
  %73 = load i8*, i8** %72, align 8, !dbg !8391
  %74 = call double @atof(i8* %73), !dbg !8392
  %75 = load double*, double** %5, align 8, !dbg !8393
  store double %74, double* %75, align 8, !dbg !8394
  br label %77, !dbg !8395

76:                                               ; preds = %64
  store i32 0, i32* %3, align 4, !dbg !8396
  br label %88, !dbg !8396

77:                                               ; preds = %70
  br label %78

78:                                               ; preds = %77, %57
  br label %87, !dbg !8397

79:                                               ; preds = %34
  %80 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8398
  %81 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %80, i32 0, i32 13, !dbg !8399
  %82 = bitcast %union.anon* %81 to i32*, !dbg !8399
  %83 = load i32, i32* %82, align 8, !dbg !8399
  %84 = sitofp i32 %83 to double, !dbg !8398
  %85 = load double*, double** %5, align 8, !dbg !8400
  store double %84, double* %85, align 8, !dbg !8401
  br label %87, !dbg !8402

86:                                               ; preds = %34
  store i32 0, i32* %3, align 4, !dbg !8403
  br label %88, !dbg !8403

87:                                               ; preds = %79, %78, %45, %38
  store i32 1, i32* %3, align 4, !dbg !8404
  br label %88, !dbg !8404

88:                                               ; preds = %87, %86, %76, %30, %29, %12
  %89 = load i32, i32* %3, align 4, !dbg !8405
  ret i32 %89, !dbg !8405
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @binn_get_bool(%struct.binn_struct* %0, i32* %1) #6 !dbg !8406 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.binn_struct*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i64, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %4, metadata !8409, metadata !DIExpression()), !dbg !8410
  store i32* %1, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !8411, metadata !DIExpression()), !dbg !8412
  call void @llvm.dbg.declare(metadata i64* %6, metadata !8413, metadata !DIExpression()), !dbg !8414
  %7 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8415
  %8 = icmp eq %struct.binn_struct* %7, null, !dbg !8417
  br i1 %8, label %12, label %9, !dbg !8418

9:                                                ; preds = %2
  %10 = load i32*, i32** %5, align 8, !dbg !8419
  %11 = icmp eq i32* %10, null, !dbg !8420
  br i1 %11, label %12, label %13, !dbg !8421

12:                                               ; preds = %9, %2
  store i32 0, i32* %3, align 4, !dbg !8422
  br label %72, !dbg !8422

13:                                               ; preds = %9
  %14 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8423
  %15 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %14, i32 0, i32 8, !dbg !8425
  %16 = load i32, i32* %15, align 4, !dbg !8425
  %17 = call i32 @_ZL11type_familyi(i32 %16), !dbg !8426
  %18 = icmp eq i32 %17, 242, !dbg !8427
  br i1 %18, label %19, label %36, !dbg !8428

19:                                               ; preds = %13
  %20 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8429
  %21 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %20, i32 0, i32 9, !dbg !8432
  %22 = load i8*, i8** %21, align 8, !dbg !8432
  %23 = bitcast i64* %6 to i8*, !dbg !8433
  %24 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8434
  %25 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %24, i32 0, i32 8, !dbg !8435
  %26 = load i32, i32* %25, align 4, !dbg !8435
  %27 = call i32 @_ZL14copy_int_valuePvS_ii(i8* %22, i8* %23, i32 %26, i32 129), !dbg !8436
  %28 = icmp eq i32 %27, 0, !dbg !8437
  br i1 %28, label %29, label %30, !dbg !8438

29:                                               ; preds = %19
  store i32 0, i32* %3, align 4, !dbg !8439
  br label %72, !dbg !8439

30:                                               ; preds = %19
  %31 = load i64, i64* %6, align 8, !dbg !8440
  %32 = icmp ne i64 %31, 0, !dbg !8441
  %33 = zext i1 %32 to i64, !dbg !8442
  %34 = select i1 %32, i32 1, i32 0, !dbg !8442
  %35 = load i32*, i32** %5, align 8, !dbg !8443
  store i32 %34, i32* %35, align 4, !dbg !8444
  store i32 1, i32* %3, align 4, !dbg !8445
  br label %72, !dbg !8445

36:                                               ; preds = %13
  %37 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8446
  %38 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %37, i32 0, i32 8, !dbg !8447
  %39 = load i32, i32* %38, align 4, !dbg !8447
  switch i32 %39, label %70 [
    i32 524385, label %40
    i32 98, label %46
    i32 130, label %55
    i32 160, label %64
  ], !dbg !8448

40:                                               ; preds = %36
  %41 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8449
  %42 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %41, i32 0, i32 13, !dbg !8451
  %43 = bitcast %union.anon* %42 to i32*, !dbg !8451
  %44 = load i32, i32* %43, align 8, !dbg !8451
  %45 = load i32*, i32** %5, align 8, !dbg !8452
  store i32 %44, i32* %45, align 4, !dbg !8453
  br label %71, !dbg !8454

46:                                               ; preds = %36
  %47 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8455
  %48 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %47, i32 0, i32 13, !dbg !8456
  %49 = bitcast %union.anon* %48 to float*, !dbg !8456
  %50 = load float, float* %49, align 8, !dbg !8456
  %51 = fcmp une float %50, 0.000000e+00, !dbg !8457
  %52 = zext i1 %51 to i64, !dbg !8458
  %53 = select i1 %51, i32 1, i32 0, !dbg !8458
  %54 = load i32*, i32** %5, align 8, !dbg !8459
  store i32 %53, i32* %54, align 4, !dbg !8460
  br label %71, !dbg !8461

55:                                               ; preds = %36
  %56 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8462
  %57 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %56, i32 0, i32 13, !dbg !8463
  %58 = bitcast %union.anon* %57 to double*, !dbg !8463
  %59 = load double, double* %58, align 8, !dbg !8463
  %60 = fcmp une double %59, 0.000000e+00, !dbg !8464
  %61 = zext i1 %60 to i64, !dbg !8465
  %62 = select i1 %60, i32 1, i32 0, !dbg !8465
  %63 = load i32*, i32** %5, align 8, !dbg !8466
  store i32 %62, i32* %63, align 4, !dbg !8467
  br label %71, !dbg !8468

64:                                               ; preds = %36
  %65 = load %struct.binn_struct*, %struct.binn_struct** %4, align 8, !dbg !8469
  %66 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %65, i32 0, i32 9, !dbg !8470
  %67 = load i8*, i8** %66, align 8, !dbg !8470
  %68 = load i32*, i32** %5, align 8, !dbg !8471
  %69 = call i32 @_ZL11is_bool_strPcPi(i8* %67, i32* %68), !dbg !8472
  store i32 %69, i32* %3, align 4, !dbg !8473
  br label %72, !dbg !8473

70:                                               ; preds = %36
  store i32 0, i32* %3, align 4, !dbg !8474
  br label %72, !dbg !8474

71:                                               ; preds = %55, %46, %40
  store i32 1, i32* %3, align 4, !dbg !8475
  br label %72, !dbg !8475

72:                                               ; preds = %71, %70, %64, %30, %29, %12
  %73 = load i32, i32* %3, align 4, !dbg !8476
  ret i32 %73, !dbg !8476
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL11is_bool_strPcPi(i8* %0, i32* %1) #6 !dbg !8477 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i64, align 8
  %7 = alloca double, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !8480, metadata !DIExpression()), !dbg !8481
  store i32* %1, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !8482, metadata !DIExpression()), !dbg !8483
  call void @llvm.dbg.declare(metadata i64* %6, metadata !8484, metadata !DIExpression()), !dbg !8485
  call void @llvm.dbg.declare(metadata double* %7, metadata !8486, metadata !DIExpression()), !dbg !8487
  %8 = load i8*, i8** %4, align 8, !dbg !8488
  %9 = icmp eq i8* %8, null, !dbg !8490
  br i1 %9, label %13, label %10, !dbg !8491

10:                                               ; preds = %2
  %11 = load i32*, i32** %5, align 8, !dbg !8492
  %12 = icmp eq i32* %11, null, !dbg !8493
  br i1 %12, label %13, label %14, !dbg !8494

13:                                               ; preds = %10, %2
  store i32 0, i32* %3, align 4, !dbg !8495
  br label %74, !dbg !8495

14:                                               ; preds = %10
  %15 = load i8*, i8** %4, align 8, !dbg !8496
  %16 = call i32 @strcasecmp(i8* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.29, i64 0, i64 0)), !dbg !8498
  %17 = icmp eq i32 %16, 0, !dbg !8499
  br i1 %17, label %18, label %19, !dbg !8500

18:                                               ; preds = %14
  br label %70, !dbg !8501

19:                                               ; preds = %14
  %20 = load i8*, i8** %4, align 8, !dbg !8502
  %21 = call i32 @strcasecmp(i8* %20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.30, i64 0, i64 0)), !dbg !8504
  %22 = icmp eq i32 %21, 0, !dbg !8505
  br i1 %22, label %23, label %24, !dbg !8506

23:                                               ; preds = %19
  br label %70, !dbg !8507

24:                                               ; preds = %19
  %25 = load i8*, i8** %4, align 8, !dbg !8508
  %26 = call i32 @strcasecmp(i8* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5.31, i64 0, i64 0)), !dbg !8510
  %27 = icmp eq i32 %26, 0, !dbg !8511
  br i1 %27, label %28, label %29, !dbg !8512

28:                                               ; preds = %24
  br label %70, !dbg !8513

29:                                               ; preds = %24
  %30 = load i8*, i8** %4, align 8, !dbg !8514
  %31 = call i32 @strcasecmp(i8* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.32, i64 0, i64 0)), !dbg !8516
  %32 = icmp eq i32 %31, 0, !dbg !8517
  br i1 %32, label %33, label %34, !dbg !8518

33:                                               ; preds = %29
  br label %72, !dbg !8519

34:                                               ; preds = %29
  %35 = load i8*, i8** %4, align 8, !dbg !8520
  %36 = call i32 @strcasecmp(i8* %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6.33, i64 0, i64 0)), !dbg !8522
  %37 = icmp eq i32 %36, 0, !dbg !8523
  br i1 %37, label %38, label %39, !dbg !8524

38:                                               ; preds = %34
  br label %72, !dbg !8525

39:                                               ; preds = %34
  %40 = load i8*, i8** %4, align 8, !dbg !8526
  %41 = call i32 @strcasecmp(i8* %40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7.34, i64 0, i64 0)), !dbg !8528
  %42 = icmp eq i32 %41, 0, !dbg !8529
  br i1 %42, label %43, label %44, !dbg !8530

43:                                               ; preds = %39
  br label %72, !dbg !8531

44:                                               ; preds = %39
  %45 = load i8*, i8** %4, align 8, !dbg !8532
  %46 = call i32 @_ZL10is_integerPc(i8* %45), !dbg !8534
  %47 = icmp ne i32 %46, 0, !dbg !8534
  br i1 %47, label %48, label %56, !dbg !8535

48:                                               ; preds = %44
  %49 = load i8*, i8** %4, align 8, !dbg !8536
  %50 = call i64 @_Z6atoi64Pc(i8* %49), !dbg !8538
  store i64 %50, i64* %6, align 8, !dbg !8539
  %51 = load i64, i64* %6, align 8, !dbg !8540
  %52 = icmp ne i64 %51, 0, !dbg !8541
  %53 = zext i1 %52 to i64, !dbg !8542
  %54 = select i1 %52, i32 1, i32 0, !dbg !8542
  %55 = load i32*, i32** %5, align 8, !dbg !8543
  store i32 %54, i32* %55, align 4, !dbg !8544
  store i32 1, i32* %3, align 4, !dbg !8545
  br label %74, !dbg !8545

56:                                               ; preds = %44
  %57 = load i8*, i8** %4, align 8, !dbg !8546
  %58 = call i32 @_ZL8is_floatPc(i8* %57), !dbg !8548
  %59 = icmp ne i32 %58, 0, !dbg !8548
  br i1 %59, label %60, label %68, !dbg !8549

60:                                               ; preds = %56
  %61 = load i8*, i8** %4, align 8, !dbg !8550
  %62 = call double @atof(i8* %61), !dbg !8552
  store double %62, double* %7, align 8, !dbg !8553
  %63 = load double, double* %7, align 8, !dbg !8554
  %64 = fcmp une double %63, 0.000000e+00, !dbg !8555
  %65 = zext i1 %64 to i64, !dbg !8556
  %66 = select i1 %64, i32 1, i32 0, !dbg !8556
  %67 = load i32*, i32** %5, align 8, !dbg !8557
  store i32 %66, i32* %67, align 4, !dbg !8558
  store i32 1, i32* %3, align 4, !dbg !8559
  br label %74, !dbg !8559

68:                                               ; preds = %56
  br label %69

69:                                               ; preds = %68
  store i32 0, i32* %3, align 4, !dbg !8560
  br label %74, !dbg !8560

70:                                               ; preds = %28, %23, %18
  call void @llvm.dbg.label(metadata !8561), !dbg !8562
  %71 = load i32*, i32** %5, align 8, !dbg !8563
  store i32 1, i32* %71, align 4, !dbg !8564
  store i32 1, i32* %3, align 4, !dbg !8565
  br label %74, !dbg !8565

72:                                               ; preds = %43, %38, %33
  call void @llvm.dbg.label(metadata !8566), !dbg !8567
  %73 = load i32*, i32** %5, align 8, !dbg !8568
  store i32 0, i32* %73, align 4, !dbg !8569
  store i32 1, i32* %3, align 4, !dbg !8570
  br label %74, !dbg !8570

74:                                               ; preds = %72, %70, %69, %60, %48, %13
  %75 = load i32, i32* %3, align 4, !dbg !8571
  ret i32 %75, !dbg !8571
}

declare i32 @strcasecmp(i8*, i8*) #2

; Function Attrs: noinline optnone ssp uwtable
define hidden i8* @binn_get_str(%struct.binn_struct* %0) #6 !dbg !8572 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.binn_struct*, align 8
  %4 = alloca i64, align 8
  %5 = alloca [128 x i8], align 16
  store %struct.binn_struct* %0, %struct.binn_struct** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %3, metadata !8575, metadata !DIExpression()), !dbg !8576
  call void @llvm.dbg.declare(metadata i64* %4, metadata !8577, metadata !DIExpression()), !dbg !8578
  call void @llvm.dbg.declare(metadata [128 x i8]* %5, metadata !8579, metadata !DIExpression()), !dbg !8580
  %6 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8581
  %7 = icmp eq %struct.binn_struct* %6, null, !dbg !8583
  br i1 %7, label %8, label %9, !dbg !8584

8:                                                ; preds = %1
  store i8* null, i8** %2, align 8, !dbg !8585
  br label %86, !dbg !8585

9:                                                ; preds = %1
  %10 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8586
  %11 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %10, i32 0, i32 8, !dbg !8588
  %12 = load i32, i32* %11, align 4, !dbg !8588
  %13 = call i32 @_ZL11type_familyi(i32 %12), !dbg !8589
  %14 = icmp eq i32 %13, 242, !dbg !8590
  br i1 %14, label %15, label %30, !dbg !8591

15:                                               ; preds = %9
  %16 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8592
  %17 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %16, i32 0, i32 9, !dbg !8595
  %18 = load i8*, i8** %17, align 8, !dbg !8595
  %19 = bitcast i64* %4 to i8*, !dbg !8596
  %20 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8597
  %21 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %20, i32 0, i32 8, !dbg !8598
  %22 = load i32, i32* %21, align 4, !dbg !8598
  %23 = call i32 @_ZL14copy_int_valuePvS_ii(i8* %18, i8* %19, i32 %22, i32 129), !dbg !8599
  %24 = icmp eq i32 %23, 0, !dbg !8600
  br i1 %24, label %25, label %26, !dbg !8601

25:                                               ; preds = %15
  store i8* null, i8** %2, align 8, !dbg !8602
  br label %86, !dbg !8602

26:                                               ; preds = %15
  %27 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0, !dbg !8603
  %28 = load i64, i64* %4, align 8, !dbg !8604
  %29 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %27, i64 128, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0), i64 %28), !dbg !8605
  br label %68, !dbg !8606

30:                                               ; preds = %9
  %31 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8607
  %32 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %31, i32 0, i32 8, !dbg !8608
  %33 = load i32, i32* %32, align 4, !dbg !8608
  switch i32 %33, label %67 [
    i32 98, label %34
    i32 130, label %43
    i32 160, label %50
    i32 524385, label %54
  ], !dbg !8609

34:                                               ; preds = %30
  %35 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8610
  %36 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %35, i32 0, i32 13, !dbg !8612
  %37 = bitcast %union.anon* %36 to float*, !dbg !8612
  %38 = load float, float* %37, align 8, !dbg !8612
  %39 = fpext float %38 to double, !dbg !8610
  %40 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8613
  %41 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %40, i32 0, i32 13, !dbg !8614
  %42 = bitcast %union.anon* %41 to double*, !dbg !8614
  store double %39, double* %42, align 8, !dbg !8615
  br label %43, !dbg !8613

43:                                               ; preds = %30, %34
  %44 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0, !dbg !8616
  %45 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8617
  %46 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %45, i32 0, i32 13, !dbg !8618
  %47 = bitcast %union.anon* %46 to double*, !dbg !8618
  %48 = load double, double* %47, align 8, !dbg !8618
  %49 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %44, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), double %48), !dbg !8619
  br label %68, !dbg !8620

50:                                               ; preds = %30
  %51 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8621
  %52 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %51, i32 0, i32 9, !dbg !8622
  %53 = load i8*, i8** %52, align 8, !dbg !8622
  store i8* %53, i8** %2, align 8, !dbg !8623
  br label %86, !dbg !8623

54:                                               ; preds = %30
  %55 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8624
  %56 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %55, i32 0, i32 13, !dbg !8626
  %57 = bitcast %union.anon* %56 to i32*, !dbg !8626
  %58 = load i32, i32* %57, align 8, !dbg !8626
  %59 = icmp ne i32 %58, 0, !dbg !8624
  br i1 %59, label %60, label %63, !dbg !8627

60:                                               ; preds = %54
  %61 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0, !dbg !8628
  %62 = call i8* @strncpy(i8* %61, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.29, i64 0, i64 0), i64 128), !dbg !8629
  br label %66, !dbg !8629

63:                                               ; preds = %54
  %64 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0, !dbg !8630
  %65 = call i8* @strncpy(i8* %64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.32, i64 0, i64 0), i64 128), !dbg !8631
  br label %66

66:                                               ; preds = %63, %60
  br label %68, !dbg !8632

67:                                               ; preds = %30
  store i8* null, i8** %2, align 8, !dbg !8633
  br label %86, !dbg !8633

68:                                               ; preds = %66, %43, %26
  call void @llvm.dbg.label(metadata !8634), !dbg !8635
  %69 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0, !dbg !8636
  %70 = call i8* @strndup(i8* %69, i64 128), !dbg !8637
  %71 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8638
  %72 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %71, i32 0, i32 9, !dbg !8639
  store i8* %70, i8** %72, align 8, !dbg !8640
  %73 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8641
  %74 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %73, i32 0, i32 9, !dbg !8643
  %75 = load i8*, i8** %74, align 8, !dbg !8643
  %76 = icmp eq i8* %75, null, !dbg !8644
  br i1 %76, label %77, label %78, !dbg !8645

77:                                               ; preds = %68
  store i8* null, i8** %2, align 8, !dbg !8646
  br label %86, !dbg !8646

78:                                               ; preds = %68
  %79 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8647
  %80 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %79, i32 0, i32 12, !dbg !8648
  store void (i8*)* @free, void (i8*)** %80, align 8, !dbg !8649
  %81 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8650
  %82 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %81, i32 0, i32 8, !dbg !8651
  store i32 160, i32* %82, align 4, !dbg !8652
  %83 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8653
  %84 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %83, i32 0, i32 9, !dbg !8654
  %85 = load i8*, i8** %84, align 8, !dbg !8654
  store i8* %85, i8** %2, align 8, !dbg !8655
  br label %86, !dbg !8655

86:                                               ; preds = %78, %77, %67, %50, %25, %8
  %87 = load i8*, i8** %2, align 8, !dbg !8656
  ret i8* %87, !dbg !8656
}

declare i32 @snprintf(i8*, i64, i8*, ...) #2

declare i8* @strndup(i8*, i64) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden i32 @binn_is_container(%struct.binn_struct* %0) #0 !dbg !8657 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.binn_struct*, align 8
  store %struct.binn_struct* %0, %struct.binn_struct** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.binn_struct** %3, metadata !8658, metadata !DIExpression()), !dbg !8659
  %4 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8660
  %5 = icmp eq %struct.binn_struct* %4, null, !dbg !8662
  br i1 %5, label %6, label %7, !dbg !8663

6:                                                ; preds = %1
  store i32 0, i32* %2, align 4, !dbg !8664
  br label %13, !dbg !8664

7:                                                ; preds = %1
  %8 = load %struct.binn_struct*, %struct.binn_struct** %3, align 8, !dbg !8665
  %9 = getelementptr inbounds %struct.binn_struct, %struct.binn_struct* %8, i32 0, i32 8, !dbg !8666
  %10 = load i32, i32* %9, align 4, !dbg !8666
  switch i32 %10, label %12 [
    i32 224, label %11
    i32 225, label %11
    i32 226, label %11
  ], !dbg !8667

11:                                               ; preds = %7, %7, %7
  store i32 1, i32* %2, align 4, !dbg !8668
  br label %13, !dbg !8668

12:                                               ; preds = %7
  store i32 0, i32* %2, align 4, !dbg !8670
  br label %13, !dbg !8670

13:                                               ; preds = %12, %11, %6
  %14 = load i32, i32* %2, align 4, !dbg !8671
  ret i32 %14, !dbg !8671
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @_Z12do_somethingv() #6 !dbg !8672 {
  %1 = call i32 @ocall_print(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.36, i64 0, i64 0)), !dbg !8675
  call void @llvm.trap(), !dbg !8675
  unreachable, !dbg !8675
}

; Function Attrs: noinline optnone ssp uwtable
define hidden i32 @_Z13crypto_scryptPKhmS0_mmjjPhm(i8* %0, i64 %1, i8* %2, i64 %3, i64 %4, i32 %5, i32 %6, i8* %7, i64 %8) #6 !dbg !8676 {
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !8679, metadata !DIExpression()), !dbg !8680
  store i64 %1, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !8681, metadata !DIExpression()), !dbg !8682
  store i8* %2, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !8683, metadata !DIExpression()), !dbg !8684
  store i64 %3, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !8685, metadata !DIExpression()), !dbg !8686
  store i64 %4, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !8687, metadata !DIExpression()), !dbg !8688
  store i32 %5, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !8689, metadata !DIExpression()), !dbg !8690
  store i32 %6, i32* %16, align 4
  call void @llvm.dbg.declare(metadata i32* %16, metadata !8691, metadata !DIExpression()), !dbg !8692
  store i8* %7, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !8693, metadata !DIExpression()), !dbg !8694
  store i64 %8, i64* %18, align 8
  call void @llvm.dbg.declare(metadata i64* %18, metadata !8695, metadata !DIExpression()), !dbg !8696
  %19 = call i32 @ocall_print(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1.39, i64 0, i64 0)), !dbg !8697
  %20 = load i8*, i8** %10, align 8, !dbg !8698
  %21 = load i64, i64* %11, align 8, !dbg !8699
  %22 = load i8*, i8** %12, align 8, !dbg !8700
  %23 = load i64, i64* %13, align 8, !dbg !8701
  %24 = load i64, i64* %14, align 8, !dbg !8702
  %25 = load i32, i32* %15, align 4, !dbg !8703
  %26 = load i32, i32* %16, align 4, !dbg !8704
  %27 = load i8*, i8** %17, align 8, !dbg !8705
  %28 = load i64, i64* %18, align 8, !dbg !8706
  %29 = call i32 @_ZL14_crypto_scryptPKhmS0_mmjjPhmPFvS1_mmPvS2_E(i8* %20, i64 %21, i8* %22, i64 %23, i64 %24, i32 %25, i32 %26, i8* %27, i64 %28, void (i8*, i64, i64, i8*, i8*)* @_Z18crypto_scrypt_smixPhmmPvS0_), !dbg !8707
  ret i32 %29, !dbg !8708
}

; Function Attrs: noinline optnone ssp uwtable
define internal i32 @_ZL14_crypto_scryptPKhmS0_mmjjPhmPFvS1_mmPvS2_E(i8* %0, i64 %1, i8* %2, i64 %3, i64 %4, i32 %5, i32 %6, i8* %7, i64 %8, void (i8*, i64, i64, i8*, i8*)* %9) #6 !dbg !8709 {
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca void (i8*, i64, i64, i8*, i8*)*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i32*, align 8
  %27 = alloca i32*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i32, align 4
  %31 = alloca [1024 x i8], align 16
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !8715, metadata !DIExpression()), !dbg !8716
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !8717, metadata !DIExpression()), !dbg !8718
  store i8* %2, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !8719, metadata !DIExpression()), !dbg !8720
  store i64 %3, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !8721, metadata !DIExpression()), !dbg !8722
  store i64 %4, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !8723, metadata !DIExpression()), !dbg !8724
  store i32 %5, i32* %17, align 4
  call void @llvm.dbg.declare(metadata i32* %17, metadata !8725, metadata !DIExpression()), !dbg !8726
  store i32 %6, i32* %18, align 4
  call void @llvm.dbg.declare(metadata i32* %18, metadata !8727, metadata !DIExpression()), !dbg !8728
  store i8* %7, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !8729, metadata !DIExpression()), !dbg !8730
  store i64 %8, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !8731, metadata !DIExpression()), !dbg !8732
  store void (i8*, i64, i64, i8*, i8*)* %9, void (i8*, i64, i64, i8*, i8*)** %21, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i64, i64, i8*, i8*)** %21, metadata !8733, metadata !DIExpression()), !dbg !8734
  call void @llvm.dbg.declare(metadata i8** %22, metadata !8735, metadata !DIExpression()), !dbg !8736
  call void @llvm.dbg.declare(metadata i8** %23, metadata !8737, metadata !DIExpression()), !dbg !8738
  call void @llvm.dbg.declare(metadata i8** %24, metadata !8739, metadata !DIExpression()), !dbg !8740
  call void @llvm.dbg.declare(metadata i8** %25, metadata !8741, metadata !DIExpression()), !dbg !8742
  call void @llvm.dbg.declare(metadata i32** %26, metadata !8743, metadata !DIExpression()), !dbg !8744
  call void @llvm.dbg.declare(metadata i32** %27, metadata !8745, metadata !DIExpression()), !dbg !8746
  call void @llvm.dbg.declare(metadata i64* %28, metadata !8747, metadata !DIExpression()), !dbg !8748
  %32 = load i32, i32* %17, align 4, !dbg !8749
  %33 = zext i32 %32 to i64, !dbg !8749
  store i64 %33, i64* %28, align 8, !dbg !8748
  call void @llvm.dbg.declare(metadata i64* %29, metadata !8750, metadata !DIExpression()), !dbg !8751
  %34 = load i32, i32* %18, align 4, !dbg !8752
  %35 = zext i32 %34 to i64, !dbg !8752
  store i64 %35, i64* %29, align 8, !dbg !8751
  call void @llvm.dbg.declare(metadata i32* %30, metadata !8753, metadata !DIExpression()), !dbg !8754
  %36 = load i64, i64* %20, align 8, !dbg !8755
  %37 = icmp ugt i64 %36, 137438953440, !dbg !8757
  br i1 %37, label %38, label %40, !dbg !8758

38:                                               ; preds = %10
  %39 = call i32* @__errno(), !dbg !8759
  store i32 27, i32* %39, align 4, !dbg !8761
  br label %165, !dbg !8762

40:                                               ; preds = %10
  %41 = load i64, i64* %28, align 8, !dbg !8763
  %42 = load i64, i64* %29, align 8, !dbg !8765
  %43 = mul i64 %41, %42, !dbg !8766
  %44 = icmp uge i64 %43, 1073741824, !dbg !8767
  br i1 %44, label %45, label %47, !dbg !8768

45:                                               ; preds = %40
  %46 = call i32* @__errno(), !dbg !8769
  store i32 27, i32* %46, align 4, !dbg !8771
  br label %165, !dbg !8772

47:                                               ; preds = %40
  %48 = load i64, i64* %16, align 8, !dbg !8773
  %49 = load i64, i64* %16, align 8, !dbg !8775
  %50 = sub i64 %49, 1, !dbg !8776
  %51 = and i64 %48, %50, !dbg !8777
  %52 = icmp ne i64 %51, 0, !dbg !8778
  br i1 %52, label %56, label %53, !dbg !8779

53:                                               ; preds = %47
  %54 = load i64, i64* %16, align 8, !dbg !8780
  %55 = icmp ult i64 %54, 2, !dbg !8781
  br i1 %55, label %56, label %58, !dbg !8782

56:                                               ; preds = %53, %47
  %57 = call i32* @__errno(), !dbg !8783
  store i32 22, i32* %57, align 4, !dbg !8785
  br label %165, !dbg !8786

58:                                               ; preds = %53
  %59 = load i64, i64* %28, align 8, !dbg !8787
  %60 = load i64, i64* %29, align 8, !dbg !8789
  %61 = udiv i64 144115188075855871, %60, !dbg !8790
  %62 = icmp ugt i64 %59, %61, !dbg !8791
  br i1 %62, label %71, label %63, !dbg !8792

63:                                               ; preds = %58
  %64 = load i64, i64* %28, align 8, !dbg !8793
  %65 = icmp ugt i64 %64, 72057594037927935, !dbg !8794
  br i1 %65, label %71, label %66, !dbg !8795

66:                                               ; preds = %63
  %67 = load i64, i64* %16, align 8, !dbg !8796
  %68 = load i64, i64* %28, align 8, !dbg !8797
  %69 = udiv i64 144115188075855871, %68, !dbg !8798
  %70 = icmp ugt i64 %67, %69, !dbg !8799
  br i1 %70, label %71, label %73, !dbg !8800

71:                                               ; preds = %66, %63, %58
  %72 = call i32* @__errno(), !dbg !8801
  store i32 12, i32* %72, align 4, !dbg !8803
  br label %165, !dbg !8804

73:                                               ; preds = %66
  %74 = load i64, i64* %28, align 8, !dbg !8805
  %75 = mul i64 128, %74, !dbg !8807
  %76 = load i64, i64* %29, align 8, !dbg !8808
  %77 = mul i64 %75, %76, !dbg !8809
  %78 = add i64 %77, 63, !dbg !8810
  %79 = call align 16 i8* @malloc(i64 %78), !dbg !8811
  store i8* %79, i8** %22, align 8, !dbg !8812
  %80 = icmp eq i8* %79, null, !dbg !8813
  br i1 %80, label %81, label %82, !dbg !8814

81:                                               ; preds = %73
  br label %165, !dbg !8815

82:                                               ; preds = %73
  %83 = load i8*, i8** %22, align 8, !dbg !8816
  %84 = ptrtoint i8* %83 to i64, !dbg !8817
  %85 = add i64 %84, 63, !dbg !8818
  %86 = and i64 %85, -64, !dbg !8819
  %87 = inttoptr i64 %86 to i8*, !dbg !8820
  store i8* %87, i8** %25, align 8, !dbg !8821
  %88 = load i64, i64* %28, align 8, !dbg !8822
  %89 = mul i64 256, %88, !dbg !8824
  %90 = add i64 %89, 64, !dbg !8825
  %91 = add i64 %90, 63, !dbg !8826
  %92 = call align 16 i8* @malloc(i64 %91), !dbg !8827
  store i8* %92, i8** %24, align 8, !dbg !8828
  %93 = icmp eq i8* %92, null, !dbg !8829
  br i1 %93, label %94, label %95, !dbg !8830

94:                                               ; preds = %82
  br label %163, !dbg !8831

95:                                               ; preds = %82
  %96 = load i8*, i8** %24, align 8, !dbg !8832
  %97 = ptrtoint i8* %96 to i64, !dbg !8833
  %98 = add i64 %97, 63, !dbg !8834
  %99 = and i64 %98, -64, !dbg !8835
  %100 = inttoptr i64 %99 to i32*, !dbg !8836
  store i32* %100, i32** %27, align 8, !dbg !8837
  %101 = load i64, i64* %28, align 8, !dbg !8838
  %102 = mul i64 128, %101, !dbg !8840
  %103 = load i64, i64* %16, align 8, !dbg !8841
  %104 = mul i64 %102, %103, !dbg !8842
  %105 = add i64 %104, 63, !dbg !8843
  %106 = call align 16 i8* @malloc(i64 %105), !dbg !8844
  store i8* %106, i8** %23, align 8, !dbg !8845
  %107 = icmp eq i8* %106, null, !dbg !8846
  br i1 %107, label %108, label %109, !dbg !8847

108:                                              ; preds = %95
  br label %161, !dbg !8848

109:                                              ; preds = %95
  %110 = load i8*, i8** %23, align 8, !dbg !8849
  %111 = ptrtoint i8* %110 to i64, !dbg !8850
  %112 = add i64 %111, 63, !dbg !8851
  %113 = and i64 %112, -64, !dbg !8852
  %114 = inttoptr i64 %113 to i32*, !dbg !8853
  store i32* %114, i32** %26, align 8, !dbg !8854
  %115 = load i8*, i8** %12, align 8, !dbg !8855
  %116 = load i64, i64* %13, align 8, !dbg !8856
  %117 = load i8*, i8** %14, align 8, !dbg !8857
  %118 = load i64, i64* %15, align 8, !dbg !8858
  %119 = load i8*, i8** %25, align 8, !dbg !8859
  %120 = load i64, i64* %29, align 8, !dbg !8860
  %121 = mul i64 %120, 128, !dbg !8861
  %122 = load i64, i64* %28, align 8, !dbg !8862
  %123 = mul i64 %121, %122, !dbg !8863
  call void @_Z13PBKDF2_SHA256PKhmS0_mmPhm(i8* %115, i64 %116, i8* %117, i64 %118, i64 1, i8* %119, i64 %123), !dbg !8864
  store i32 0, i32* %30, align 4, !dbg !8865
  br label %124, !dbg !8867

124:                                              ; preds = %145, %109
  %125 = load i32, i32* %30, align 4, !dbg !8868
  %126 = zext i32 %125 to i64, !dbg !8868
  %127 = load i64, i64* %29, align 8, !dbg !8870
  %128 = icmp ult i64 %126, %127, !dbg !8871
  br i1 %128, label %129, label %148, !dbg !8872

129:                                              ; preds = %124
  call void @llvm.dbg.declare(metadata [1024 x i8]* %31, metadata !8873, metadata !DIExpression()), !dbg !8876
  %130 = getelementptr inbounds [1024 x i8], [1024 x i8]* %31, i64 0, i64 1023, !dbg !8877
  store i8 0, i8* %130, align 1, !dbg !8878
  %131 = load void (i8*, i64, i64, i8*, i8*)*, void (i8*, i64, i64, i8*, i8*)** %21, align 8, !dbg !8879
  %132 = load i8*, i8** %25, align 8, !dbg !8880
  %133 = load i32, i32* %30, align 4, !dbg !8881
  %134 = mul i32 %133, 128, !dbg !8882
  %135 = zext i32 %134 to i64, !dbg !8881
  %136 = load i64, i64* %28, align 8, !dbg !8883
  %137 = mul i64 %135, %136, !dbg !8884
  %138 = getelementptr inbounds i8, i8* %132, i64 %137, !dbg !8880
  %139 = load i64, i64* %28, align 8, !dbg !8885
  %140 = load i64, i64* %16, align 8, !dbg !8886
  %141 = load i32*, i32** %26, align 8, !dbg !8887
  %142 = bitcast i32* %141 to i8*, !dbg !8887
  %143 = load i32*, i32** %27, align 8, !dbg !8888
  %144 = bitcast i32* %143 to i8*, !dbg !8888
  call void %131(i8* %138, i64 %139, i64 %140, i8* %142, i8* %144), !dbg !8889
  br label %145, !dbg !8890

145:                                              ; preds = %129
  %146 = load i32, i32* %30, align 4, !dbg !8891
  %147 = add i32 %146, 1, !dbg !8891
  store i32 %147, i32* %30, align 4, !dbg !8891
  br label %124, !dbg !8892, !llvm.loop !8893

148:                                              ; preds = %124
  %149 = load i8*, i8** %12, align 8, !dbg !8895
  %150 = load i64, i64* %13, align 8, !dbg !8896
  %151 = load i8*, i8** %25, align 8, !dbg !8897
  %152 = load i64, i64* %29, align 8, !dbg !8898
  %153 = mul i64 %152, 128, !dbg !8899
  %154 = load i64, i64* %28, align 8, !dbg !8900
  %155 = mul i64 %153, %154, !dbg !8901
  %156 = load i8*, i8** %19, align 8, !dbg !8902
  %157 = load i64, i64* %20, align 8, !dbg !8903
  call void @_Z13PBKDF2_SHA256PKhmS0_mmPhm(i8* %149, i64 %150, i8* %151, i64 %155, i64 1, i8* %156, i64 %157), !dbg !8904
  %158 = load i8*, i8** %23, align 8, !dbg !8905
  call void @free(i8* %158), !dbg !8906
  %159 = load i8*, i8** %24, align 8, !dbg !8907
  call void @free(i8* %159), !dbg !8908
  %160 = load i8*, i8** %22, align 8, !dbg !8909
  call void @free(i8* %160), !dbg !8910
  store i32 0, i32* %11, align 4, !dbg !8911
  br label %166, !dbg !8911

161:                                              ; preds = %108
  call void @llvm.dbg.label(metadata !8912), !dbg !8913
  %162 = load i8*, i8** %24, align 8, !dbg !8914
  call void @free(i8* %162), !dbg !8915
  br label %163, !dbg !8915

163:                                              ; preds = %161, %94
  call void @llvm.dbg.label(metadata !8916), !dbg !8917
  %164 = load i8*, i8** %22, align 8, !dbg !8918
  call void @free(i8* %164), !dbg !8919
  br label %165, !dbg !8919

165:                                              ; preds = %163, %81, %71, %56, %45, %38
  call void @llvm.dbg.label(metadata !8920), !dbg !8921
  store i32 -1, i32* %11, align 4, !dbg !8922
  br label %166, !dbg !8922

166:                                              ; preds = %165, %148
  %167 = load i32, i32* %11, align 4, !dbg !8923
  ret i32 %167, !dbg !8923
}

declare i32* @__errno() #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define hidden void @_Z23libcperciva_SHA256_InitP22libcperciva_SHA256_CTX(%struct.libcperciva_SHA256_CTX* %0) #0 !dbg !8924 {
  %2 = alloca %struct.libcperciva_SHA256_CTX*, align 8
  store %struct.libcperciva_SHA256_CTX* %0, %struct.libcperciva_SHA256_CTX** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_SHA256_CTX** %2, metadata !8937, metadata !DIExpression()), !dbg !8938
  %3 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %2, align 8, !dbg !8939
  %4 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %3, i32 0, i32 1, !dbg !8940
  store i64 0, i64* %4, align 8, !dbg !8941
  %5 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %2, align 8, !dbg !8942
  %6 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %5, i32 0, i32 0, !dbg !8943
  %7 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0, !dbg !8944
  %8 = bitcast i32* %7 to i8*, !dbg !8944
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 16 bitcast ([8 x i32]* @_ZL13initial_state to i8*), i64 32, i1 false), !dbg !8944
  ret void, !dbg !8945
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z25libcperciva_SHA256_UpdateP22libcperciva_SHA256_CTXPKvm(%struct.libcperciva_SHA256_CTX* %0, i8* %1, i64 %2) #6 !dbg !8946 {
  %4 = alloca %struct.libcperciva_SHA256_CTX*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca [72 x i32], align 16
  store %struct.libcperciva_SHA256_CTX* %0, %struct.libcperciva_SHA256_CTX** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_SHA256_CTX** %4, metadata !8951, metadata !DIExpression()), !dbg !8952
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !8953, metadata !DIExpression()), !dbg !8954
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !8955, metadata !DIExpression()), !dbg !8956
  call void @llvm.dbg.declare(metadata [72 x i32]* %7, metadata !8957, metadata !DIExpression()), !dbg !8961
  %8 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %4, align 8, !dbg !8962
  %9 = load i8*, i8** %5, align 8, !dbg !8963
  %10 = load i64, i64* %6, align 8, !dbg !8964
  %11 = getelementptr inbounds [72 x i32], [72 x i32]* %7, i64 0, i64 0, !dbg !8965
  call void @_ZL14_SHA256_UpdateP22libcperciva_SHA256_CTXPKvmPj(%struct.libcperciva_SHA256_CTX* %8, i8* %9, i64 %10, i32* %11), !dbg !8966
  %12 = getelementptr inbounds [72 x i32], [72 x i32]* %7, i64 0, i64 0, !dbg !8967
  %13 = bitcast i32* %12 to i8*, !dbg !8967
  call void @_ZL16insecure_memzeroPVvm(i8* %13, i64 288), !dbg !8968
  ret void, !dbg !8969
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL14_SHA256_UpdateP22libcperciva_SHA256_CTXPKvmPj(%struct.libcperciva_SHA256_CTX* %0, i8* %1, i64 %2, i32* %3) #6 !dbg !8970 {
  %5 = alloca %struct.libcperciva_SHA256_CTX*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store %struct.libcperciva_SHA256_CTX* %0, %struct.libcperciva_SHA256_CTX** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_SHA256_CTX** %5, metadata !8973, metadata !DIExpression()), !dbg !8974
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !8975, metadata !DIExpression()), !dbg !8976
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !8977, metadata !DIExpression()), !dbg !8978
  store i32* %3, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !8979, metadata !DIExpression()), !dbg !8980
  call void @llvm.dbg.declare(metadata i32* %9, metadata !8981, metadata !DIExpression()), !dbg !8982
  call void @llvm.dbg.declare(metadata i8** %10, metadata !8983, metadata !DIExpression()), !dbg !8984
  %11 = load i8*, i8** %6, align 8, !dbg !8985
  store i8* %11, i8** %10, align 8, !dbg !8984
  %12 = load i64, i64* %7, align 8, !dbg !8986
  %13 = icmp eq i64 %12, 0, !dbg !8988
  br i1 %13, label %14, label %15, !dbg !8989

14:                                               ; preds = %4
  br label %93, !dbg !8990

15:                                               ; preds = %4
  %16 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !8991
  %17 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %16, i32 0, i32 1, !dbg !8992
  %18 = load i64, i64* %17, align 8, !dbg !8992
  %19 = lshr i64 %18, 3, !dbg !8993
  %20 = and i64 %19, 63, !dbg !8994
  %21 = trunc i64 %20 to i32, !dbg !8995
  store i32 %21, i32* %9, align 4, !dbg !8996
  %22 = load i64, i64* %7, align 8, !dbg !8997
  %23 = shl i64 %22, 3, !dbg !8998
  %24 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !8999
  %25 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %24, i32 0, i32 1, !dbg !9000
  %26 = load i64, i64* %25, align 8, !dbg !9001
  %27 = add i64 %26, %23, !dbg !9001
  store i64 %27, i64* %25, align 8, !dbg !9001
  %28 = load i64, i64* %7, align 8, !dbg !9002
  %29 = load i32, i32* %9, align 4, !dbg !9004
  %30 = sub i32 64, %29, !dbg !9005
  %31 = zext i32 %30 to i64, !dbg !9006
  %32 = icmp ult i64 %28, %31, !dbg !9007
  br i1 %32, label %33, label %41, !dbg !9008

33:                                               ; preds = %15
  %34 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !9009
  %35 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %34, i32 0, i32 2, !dbg !9011
  %36 = load i32, i32* %9, align 4, !dbg !9012
  %37 = zext i32 %36 to i64, !dbg !9009
  %38 = getelementptr inbounds [64 x i8], [64 x i8]* %35, i64 0, i64 %37, !dbg !9009
  %39 = load i8*, i8** %10, align 8, !dbg !9013
  %40 = load i64, i64* %7, align 8, !dbg !9014
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %39, i64 %40, i1 false), !dbg !9015
  br label %93, !dbg !9016

41:                                               ; preds = %15
  %42 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !9017
  %43 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %42, i32 0, i32 2, !dbg !9018
  %44 = load i32, i32* %9, align 4, !dbg !9019
  %45 = zext i32 %44 to i64, !dbg !9017
  %46 = getelementptr inbounds [64 x i8], [64 x i8]* %43, i64 0, i64 %45, !dbg !9017
  %47 = load i8*, i8** %10, align 8, !dbg !9020
  %48 = load i32, i32* %9, align 4, !dbg !9021
  %49 = sub i32 64, %48, !dbg !9022
  %50 = zext i32 %49 to i64, !dbg !9023
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %47, i64 %50, i1 false), !dbg !9024
  %51 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !9025
  %52 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %51, i32 0, i32 0, !dbg !9026
  %53 = getelementptr inbounds [8 x i32], [8 x i32]* %52, i64 0, i64 0, !dbg !9025
  %54 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !9027
  %55 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %54, i32 0, i32 2, !dbg !9028
  %56 = getelementptr inbounds [64 x i8], [64 x i8]* %55, i64 0, i64 0, !dbg !9027
  %57 = load i32*, i32** %8, align 8, !dbg !9029
  %58 = getelementptr inbounds i32, i32* %57, i64 0, !dbg !9029
  %59 = load i32*, i32** %8, align 8, !dbg !9030
  %60 = getelementptr inbounds i32, i32* %59, i64 64, !dbg !9030
  call void @_ZL16SHA256_TransformPjPKhS_S_(i32* %53, i8* %56, i32* %58, i32* %60), !dbg !9031
  %61 = load i32, i32* %9, align 4, !dbg !9032
  %62 = sub i32 64, %61, !dbg !9033
  %63 = load i8*, i8** %10, align 8, !dbg !9034
  %64 = zext i32 %62 to i64, !dbg !9034
  %65 = getelementptr inbounds i8, i8* %63, i64 %64, !dbg !9034
  store i8* %65, i8** %10, align 8, !dbg !9034
  %66 = load i32, i32* %9, align 4, !dbg !9035
  %67 = sub i32 64, %66, !dbg !9036
  %68 = zext i32 %67 to i64, !dbg !9037
  %69 = load i64, i64* %7, align 8, !dbg !9038
  %70 = sub i64 %69, %68, !dbg !9038
  store i64 %70, i64* %7, align 8, !dbg !9038
  br label %71, !dbg !9039

71:                                               ; preds = %74, %41
  %72 = load i64, i64* %7, align 8, !dbg !9040
  %73 = icmp uge i64 %72, 64, !dbg !9041
  br i1 %73, label %74, label %87, !dbg !9039

74:                                               ; preds = %71
  %75 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !9042
  %76 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %75, i32 0, i32 0, !dbg !9044
  %77 = getelementptr inbounds [8 x i32], [8 x i32]* %76, i64 0, i64 0, !dbg !9042
  %78 = load i8*, i8** %10, align 8, !dbg !9045
  %79 = load i32*, i32** %8, align 8, !dbg !9046
  %80 = getelementptr inbounds i32, i32* %79, i64 0, !dbg !9046
  %81 = load i32*, i32** %8, align 8, !dbg !9047
  %82 = getelementptr inbounds i32, i32* %81, i64 64, !dbg !9047
  call void @_ZL16SHA256_TransformPjPKhS_S_(i32* %77, i8* %78, i32* %80, i32* %82), !dbg !9048
  %83 = load i8*, i8** %10, align 8, !dbg !9049
  %84 = getelementptr inbounds i8, i8* %83, i64 64, !dbg !9049
  store i8* %84, i8** %10, align 8, !dbg !9049
  %85 = load i64, i64* %7, align 8, !dbg !9050
  %86 = sub i64 %85, 64, !dbg !9050
  store i64 %86, i64* %7, align 8, !dbg !9050
  br label %71, !dbg !9039, !llvm.loop !9051

87:                                               ; preds = %71
  %88 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !9053
  %89 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %88, i32 0, i32 2, !dbg !9054
  %90 = getelementptr inbounds [64 x i8], [64 x i8]* %89, i64 0, i64 0, !dbg !9055
  %91 = load i8*, i8** %10, align 8, !dbg !9056
  %92 = load i64, i64* %7, align 8, !dbg !9057
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 1 %91, i64 %92, i1 false), !dbg !9055
  br label %93, !dbg !9058

93:                                               ; preds = %87, %33, %14
  ret void, !dbg !9058
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL16insecure_memzeroPVvm(i8* %0, i64 %1) #6 !dbg !9059 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !9063, metadata !DIExpression()), !dbg !9064
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !9065, metadata !DIExpression()), !dbg !9066
  %5 = load volatile void (i8*, i64)*, void (i8*, i64)** @insecure_memzero_ptr, align 8, !dbg !9067
  %6 = load i8*, i8** %3, align 8, !dbg !9068
  %7 = load i64, i64* %4, align 8, !dbg !9069
  call void %5(i8* %6, i64 %7), !dbg !9070
  ret void, !dbg !9071
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL16SHA256_TransformPjPKhS_S_(i32* %0, i8* %1, i32* %2, i32* %3) #6 !dbg !9072 {
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  store i32* %0, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !9075, metadata !DIExpression()), !dbg !9076
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !9077, metadata !DIExpression()), !dbg !9078
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !9079, metadata !DIExpression()), !dbg !9080
  store i32* %3, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !9081, metadata !DIExpression()), !dbg !9082
  call void @llvm.dbg.declare(metadata i32* %9, metadata !9083, metadata !DIExpression()), !dbg !9084
  %10 = load i32*, i32** %7, align 8, !dbg !9085
  %11 = load i8*, i8** %6, align 8, !dbg !9086
  call void @_ZL12be32dec_vectPjPKhm(i32* %10, i8* %11, i64 64), !dbg !9087
  %12 = load i32*, i32** %8, align 8, !dbg !9088
  %13 = bitcast i32* %12 to i8*, !dbg !9089
  %14 = load i32*, i32** %5, align 8, !dbg !9090
  %15 = bitcast i32* %14 to i8*, !dbg !9089
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %15, i64 32, i1 false), !dbg !9089
  store i32 0, i32* %9, align 4, !dbg !9091
  br label %16, !dbg !9093

16:                                               ; preds = %3736, %4
  %17 = load i32, i32* %9, align 4, !dbg !9094
  %18 = icmp slt i32 %17, 64, !dbg !9096
  br i1 %18, label %19, label %3739, !dbg !9097

19:                                               ; preds = %16
  %20 = load i32*, i32** %8, align 8, !dbg !9098
  %21 = getelementptr inbounds i32, i32* %20, i64 4, !dbg !9098
  %22 = load i32, i32* %21, align 4, !dbg !9098
  %23 = lshr i32 %22, 6, !dbg !9098
  %24 = load i32*, i32** %8, align 8, !dbg !9098
  %25 = getelementptr inbounds i32, i32* %24, i64 4, !dbg !9098
  %26 = load i32, i32* %25, align 4, !dbg !9098
  %27 = shl i32 %26, 26, !dbg !9098
  %28 = or i32 %23, %27, !dbg !9098
  %29 = load i32*, i32** %8, align 8, !dbg !9098
  %30 = getelementptr inbounds i32, i32* %29, i64 4, !dbg !9098
  %31 = load i32, i32* %30, align 4, !dbg !9098
  %32 = lshr i32 %31, 11, !dbg !9098
  %33 = load i32*, i32** %8, align 8, !dbg !9098
  %34 = getelementptr inbounds i32, i32* %33, i64 4, !dbg !9098
  %35 = load i32, i32* %34, align 4, !dbg !9098
  %36 = shl i32 %35, 21, !dbg !9098
  %37 = or i32 %32, %36, !dbg !9098
  %38 = xor i32 %28, %37, !dbg !9098
  %39 = load i32*, i32** %8, align 8, !dbg !9098
  %40 = getelementptr inbounds i32, i32* %39, i64 4, !dbg !9098
  %41 = load i32, i32* %40, align 4, !dbg !9098
  %42 = lshr i32 %41, 25, !dbg !9098
  %43 = load i32*, i32** %8, align 8, !dbg !9098
  %44 = getelementptr inbounds i32, i32* %43, i64 4, !dbg !9098
  %45 = load i32, i32* %44, align 4, !dbg !9098
  %46 = shl i32 %45, 7, !dbg !9098
  %47 = or i32 %42, %46, !dbg !9098
  %48 = xor i32 %38, %47, !dbg !9098
  %49 = load i32*, i32** %8, align 8, !dbg !9098
  %50 = getelementptr inbounds i32, i32* %49, i64 4, !dbg !9098
  %51 = load i32, i32* %50, align 4, !dbg !9098
  %52 = load i32*, i32** %8, align 8, !dbg !9098
  %53 = getelementptr inbounds i32, i32* %52, i64 5, !dbg !9098
  %54 = load i32, i32* %53, align 4, !dbg !9098
  %55 = load i32*, i32** %8, align 8, !dbg !9098
  %56 = getelementptr inbounds i32, i32* %55, i64 6, !dbg !9098
  %57 = load i32, i32* %56, align 4, !dbg !9098
  %58 = xor i32 %54, %57, !dbg !9098
  %59 = and i32 %51, %58, !dbg !9098
  %60 = load i32*, i32** %8, align 8, !dbg !9098
  %61 = getelementptr inbounds i32, i32* %60, i64 6, !dbg !9098
  %62 = load i32, i32* %61, align 4, !dbg !9098
  %63 = xor i32 %59, %62, !dbg !9098
  %64 = add i32 %48, %63, !dbg !9098
  %65 = load i32*, i32** %7, align 8, !dbg !9098
  %66 = load i32, i32* %9, align 4, !dbg !9098
  %67 = add nsw i32 0, %66, !dbg !9098
  %68 = sext i32 %67 to i64, !dbg !9098
  %69 = getelementptr inbounds i32, i32* %65, i64 %68, !dbg !9098
  %70 = load i32, i32* %69, align 4, !dbg !9098
  %71 = add i32 %64, %70, !dbg !9098
  %72 = load i32, i32* %9, align 4, !dbg !9098
  %73 = add nsw i32 0, %72, !dbg !9098
  %74 = sext i32 %73 to i64, !dbg !9098
  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %74, !dbg !9098
  %76 = load i32, i32* %75, align 4, !dbg !9098
  %77 = add i32 %71, %76, !dbg !9098
  %78 = load i32*, i32** %8, align 8, !dbg !9098
  %79 = getelementptr inbounds i32, i32* %78, i64 7, !dbg !9098
  %80 = load i32, i32* %79, align 4, !dbg !9098
  %81 = add i32 %80, %77, !dbg !9098
  store i32 %81, i32* %79, align 4, !dbg !9098
  %82 = load i32*, i32** %8, align 8, !dbg !9098
  %83 = getelementptr inbounds i32, i32* %82, i64 7, !dbg !9098
  %84 = load i32, i32* %83, align 4, !dbg !9098
  %85 = load i32*, i32** %8, align 8, !dbg !9098
  %86 = getelementptr inbounds i32, i32* %85, i64 3, !dbg !9098
  %87 = load i32, i32* %86, align 4, !dbg !9098
  %88 = add i32 %87, %84, !dbg !9098
  store i32 %88, i32* %86, align 4, !dbg !9098
  %89 = load i32*, i32** %8, align 8, !dbg !9098
  %90 = getelementptr inbounds i32, i32* %89, i64 0, !dbg !9098
  %91 = load i32, i32* %90, align 4, !dbg !9098
  %92 = lshr i32 %91, 2, !dbg !9098
  %93 = load i32*, i32** %8, align 8, !dbg !9098
  %94 = getelementptr inbounds i32, i32* %93, i64 0, !dbg !9098
  %95 = load i32, i32* %94, align 4, !dbg !9098
  %96 = shl i32 %95, 30, !dbg !9098
  %97 = or i32 %92, %96, !dbg !9098
  %98 = load i32*, i32** %8, align 8, !dbg !9098
  %99 = getelementptr inbounds i32, i32* %98, i64 0, !dbg !9098
  %100 = load i32, i32* %99, align 4, !dbg !9098
  %101 = lshr i32 %100, 13, !dbg !9098
  %102 = load i32*, i32** %8, align 8, !dbg !9098
  %103 = getelementptr inbounds i32, i32* %102, i64 0, !dbg !9098
  %104 = load i32, i32* %103, align 4, !dbg !9098
  %105 = shl i32 %104, 19, !dbg !9098
  %106 = or i32 %101, %105, !dbg !9098
  %107 = xor i32 %97, %106, !dbg !9098
  %108 = load i32*, i32** %8, align 8, !dbg !9098
  %109 = getelementptr inbounds i32, i32* %108, i64 0, !dbg !9098
  %110 = load i32, i32* %109, align 4, !dbg !9098
  %111 = lshr i32 %110, 22, !dbg !9098
  %112 = load i32*, i32** %8, align 8, !dbg !9098
  %113 = getelementptr inbounds i32, i32* %112, i64 0, !dbg !9098
  %114 = load i32, i32* %113, align 4, !dbg !9098
  %115 = shl i32 %114, 10, !dbg !9098
  %116 = or i32 %111, %115, !dbg !9098
  %117 = xor i32 %107, %116, !dbg !9098
  %118 = load i32*, i32** %8, align 8, !dbg !9098
  %119 = getelementptr inbounds i32, i32* %118, i64 0, !dbg !9098
  %120 = load i32, i32* %119, align 4, !dbg !9098
  %121 = load i32*, i32** %8, align 8, !dbg !9098
  %122 = getelementptr inbounds i32, i32* %121, i64 1, !dbg !9098
  %123 = load i32, i32* %122, align 4, !dbg !9098
  %124 = load i32*, i32** %8, align 8, !dbg !9098
  %125 = getelementptr inbounds i32, i32* %124, i64 2, !dbg !9098
  %126 = load i32, i32* %125, align 4, !dbg !9098
  %127 = or i32 %123, %126, !dbg !9098
  %128 = and i32 %120, %127, !dbg !9098
  %129 = load i32*, i32** %8, align 8, !dbg !9098
  %130 = getelementptr inbounds i32, i32* %129, i64 1, !dbg !9098
  %131 = load i32, i32* %130, align 4, !dbg !9098
  %132 = load i32*, i32** %8, align 8, !dbg !9098
  %133 = getelementptr inbounds i32, i32* %132, i64 2, !dbg !9098
  %134 = load i32, i32* %133, align 4, !dbg !9098
  %135 = and i32 %131, %134, !dbg !9098
  %136 = or i32 %128, %135, !dbg !9098
  %137 = add i32 %117, %136, !dbg !9098
  %138 = load i32*, i32** %8, align 8, !dbg !9098
  %139 = getelementptr inbounds i32, i32* %138, i64 7, !dbg !9098
  %140 = load i32, i32* %139, align 4, !dbg !9098
  %141 = add i32 %140, %137, !dbg !9098
  store i32 %141, i32* %139, align 4, !dbg !9098
  %142 = load i32*, i32** %8, align 8, !dbg !9100
  %143 = getelementptr inbounds i32, i32* %142, i64 3, !dbg !9100
  %144 = load i32, i32* %143, align 4, !dbg !9100
  %145 = lshr i32 %144, 6, !dbg !9100
  %146 = load i32*, i32** %8, align 8, !dbg !9100
  %147 = getelementptr inbounds i32, i32* %146, i64 3, !dbg !9100
  %148 = load i32, i32* %147, align 4, !dbg !9100
  %149 = shl i32 %148, 26, !dbg !9100
  %150 = or i32 %145, %149, !dbg !9100
  %151 = load i32*, i32** %8, align 8, !dbg !9100
  %152 = getelementptr inbounds i32, i32* %151, i64 3, !dbg !9100
  %153 = load i32, i32* %152, align 4, !dbg !9100
  %154 = lshr i32 %153, 11, !dbg !9100
  %155 = load i32*, i32** %8, align 8, !dbg !9100
  %156 = getelementptr inbounds i32, i32* %155, i64 3, !dbg !9100
  %157 = load i32, i32* %156, align 4, !dbg !9100
  %158 = shl i32 %157, 21, !dbg !9100
  %159 = or i32 %154, %158, !dbg !9100
  %160 = xor i32 %150, %159, !dbg !9100
  %161 = load i32*, i32** %8, align 8, !dbg !9100
  %162 = getelementptr inbounds i32, i32* %161, i64 3, !dbg !9100
  %163 = load i32, i32* %162, align 4, !dbg !9100
  %164 = lshr i32 %163, 25, !dbg !9100
  %165 = load i32*, i32** %8, align 8, !dbg !9100
  %166 = getelementptr inbounds i32, i32* %165, i64 3, !dbg !9100
  %167 = load i32, i32* %166, align 4, !dbg !9100
  %168 = shl i32 %167, 7, !dbg !9100
  %169 = or i32 %164, %168, !dbg !9100
  %170 = xor i32 %160, %169, !dbg !9100
  %171 = load i32*, i32** %8, align 8, !dbg !9100
  %172 = getelementptr inbounds i32, i32* %171, i64 3, !dbg !9100
  %173 = load i32, i32* %172, align 4, !dbg !9100
  %174 = load i32*, i32** %8, align 8, !dbg !9100
  %175 = getelementptr inbounds i32, i32* %174, i64 4, !dbg !9100
  %176 = load i32, i32* %175, align 4, !dbg !9100
  %177 = load i32*, i32** %8, align 8, !dbg !9100
  %178 = getelementptr inbounds i32, i32* %177, i64 5, !dbg !9100
  %179 = load i32, i32* %178, align 4, !dbg !9100
  %180 = xor i32 %176, %179, !dbg !9100
  %181 = and i32 %173, %180, !dbg !9100
  %182 = load i32*, i32** %8, align 8, !dbg !9100
  %183 = getelementptr inbounds i32, i32* %182, i64 5, !dbg !9100
  %184 = load i32, i32* %183, align 4, !dbg !9100
  %185 = xor i32 %181, %184, !dbg !9100
  %186 = add i32 %170, %185, !dbg !9100
  %187 = load i32*, i32** %7, align 8, !dbg !9100
  %188 = load i32, i32* %9, align 4, !dbg !9100
  %189 = add nsw i32 1, %188, !dbg !9100
  %190 = sext i32 %189 to i64, !dbg !9100
  %191 = getelementptr inbounds i32, i32* %187, i64 %190, !dbg !9100
  %192 = load i32, i32* %191, align 4, !dbg !9100
  %193 = add i32 %186, %192, !dbg !9100
  %194 = load i32, i32* %9, align 4, !dbg !9100
  %195 = add nsw i32 1, %194, !dbg !9100
  %196 = sext i32 %195 to i64, !dbg !9100
  %197 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %196, !dbg !9100
  %198 = load i32, i32* %197, align 4, !dbg !9100
  %199 = add i32 %193, %198, !dbg !9100
  %200 = load i32*, i32** %8, align 8, !dbg !9100
  %201 = getelementptr inbounds i32, i32* %200, i64 6, !dbg !9100
  %202 = load i32, i32* %201, align 4, !dbg !9100
  %203 = add i32 %202, %199, !dbg !9100
  store i32 %203, i32* %201, align 4, !dbg !9100
  %204 = load i32*, i32** %8, align 8, !dbg !9100
  %205 = getelementptr inbounds i32, i32* %204, i64 6, !dbg !9100
  %206 = load i32, i32* %205, align 4, !dbg !9100
  %207 = load i32*, i32** %8, align 8, !dbg !9100
  %208 = getelementptr inbounds i32, i32* %207, i64 2, !dbg !9100
  %209 = load i32, i32* %208, align 4, !dbg !9100
  %210 = add i32 %209, %206, !dbg !9100
  store i32 %210, i32* %208, align 4, !dbg !9100
  %211 = load i32*, i32** %8, align 8, !dbg !9100
  %212 = getelementptr inbounds i32, i32* %211, i64 7, !dbg !9100
  %213 = load i32, i32* %212, align 4, !dbg !9100
  %214 = lshr i32 %213, 2, !dbg !9100
  %215 = load i32*, i32** %8, align 8, !dbg !9100
  %216 = getelementptr inbounds i32, i32* %215, i64 7, !dbg !9100
  %217 = load i32, i32* %216, align 4, !dbg !9100
  %218 = shl i32 %217, 30, !dbg !9100
  %219 = or i32 %214, %218, !dbg !9100
  %220 = load i32*, i32** %8, align 8, !dbg !9100
  %221 = getelementptr inbounds i32, i32* %220, i64 7, !dbg !9100
  %222 = load i32, i32* %221, align 4, !dbg !9100
  %223 = lshr i32 %222, 13, !dbg !9100
  %224 = load i32*, i32** %8, align 8, !dbg !9100
  %225 = getelementptr inbounds i32, i32* %224, i64 7, !dbg !9100
  %226 = load i32, i32* %225, align 4, !dbg !9100
  %227 = shl i32 %226, 19, !dbg !9100
  %228 = or i32 %223, %227, !dbg !9100
  %229 = xor i32 %219, %228, !dbg !9100
  %230 = load i32*, i32** %8, align 8, !dbg !9100
  %231 = getelementptr inbounds i32, i32* %230, i64 7, !dbg !9100
  %232 = load i32, i32* %231, align 4, !dbg !9100
  %233 = lshr i32 %232, 22, !dbg !9100
  %234 = load i32*, i32** %8, align 8, !dbg !9100
  %235 = getelementptr inbounds i32, i32* %234, i64 7, !dbg !9100
  %236 = load i32, i32* %235, align 4, !dbg !9100
  %237 = shl i32 %236, 10, !dbg !9100
  %238 = or i32 %233, %237, !dbg !9100
  %239 = xor i32 %229, %238, !dbg !9100
  %240 = load i32*, i32** %8, align 8, !dbg !9100
  %241 = getelementptr inbounds i32, i32* %240, i64 7, !dbg !9100
  %242 = load i32, i32* %241, align 4, !dbg !9100
  %243 = load i32*, i32** %8, align 8, !dbg !9100
  %244 = getelementptr inbounds i32, i32* %243, i64 0, !dbg !9100
  %245 = load i32, i32* %244, align 4, !dbg !9100
  %246 = load i32*, i32** %8, align 8, !dbg !9100
  %247 = getelementptr inbounds i32, i32* %246, i64 1, !dbg !9100
  %248 = load i32, i32* %247, align 4, !dbg !9100
  %249 = or i32 %245, %248, !dbg !9100
  %250 = and i32 %242, %249, !dbg !9100
  %251 = load i32*, i32** %8, align 8, !dbg !9100
  %252 = getelementptr inbounds i32, i32* %251, i64 0, !dbg !9100
  %253 = load i32, i32* %252, align 4, !dbg !9100
  %254 = load i32*, i32** %8, align 8, !dbg !9100
  %255 = getelementptr inbounds i32, i32* %254, i64 1, !dbg !9100
  %256 = load i32, i32* %255, align 4, !dbg !9100
  %257 = and i32 %253, %256, !dbg !9100
  %258 = or i32 %250, %257, !dbg !9100
  %259 = add i32 %239, %258, !dbg !9100
  %260 = load i32*, i32** %8, align 8, !dbg !9100
  %261 = getelementptr inbounds i32, i32* %260, i64 6, !dbg !9100
  %262 = load i32, i32* %261, align 4, !dbg !9100
  %263 = add i32 %262, %259, !dbg !9100
  store i32 %263, i32* %261, align 4, !dbg !9100
  %264 = load i32*, i32** %8, align 8, !dbg !9101
  %265 = getelementptr inbounds i32, i32* %264, i64 2, !dbg !9101
  %266 = load i32, i32* %265, align 4, !dbg !9101
  %267 = lshr i32 %266, 6, !dbg !9101
  %268 = load i32*, i32** %8, align 8, !dbg !9101
  %269 = getelementptr inbounds i32, i32* %268, i64 2, !dbg !9101
  %270 = load i32, i32* %269, align 4, !dbg !9101
  %271 = shl i32 %270, 26, !dbg !9101
  %272 = or i32 %267, %271, !dbg !9101
  %273 = load i32*, i32** %8, align 8, !dbg !9101
  %274 = getelementptr inbounds i32, i32* %273, i64 2, !dbg !9101
  %275 = load i32, i32* %274, align 4, !dbg !9101
  %276 = lshr i32 %275, 11, !dbg !9101
  %277 = load i32*, i32** %8, align 8, !dbg !9101
  %278 = getelementptr inbounds i32, i32* %277, i64 2, !dbg !9101
  %279 = load i32, i32* %278, align 4, !dbg !9101
  %280 = shl i32 %279, 21, !dbg !9101
  %281 = or i32 %276, %280, !dbg !9101
  %282 = xor i32 %272, %281, !dbg !9101
  %283 = load i32*, i32** %8, align 8, !dbg !9101
  %284 = getelementptr inbounds i32, i32* %283, i64 2, !dbg !9101
  %285 = load i32, i32* %284, align 4, !dbg !9101
  %286 = lshr i32 %285, 25, !dbg !9101
  %287 = load i32*, i32** %8, align 8, !dbg !9101
  %288 = getelementptr inbounds i32, i32* %287, i64 2, !dbg !9101
  %289 = load i32, i32* %288, align 4, !dbg !9101
  %290 = shl i32 %289, 7, !dbg !9101
  %291 = or i32 %286, %290, !dbg !9101
  %292 = xor i32 %282, %291, !dbg !9101
  %293 = load i32*, i32** %8, align 8, !dbg !9101
  %294 = getelementptr inbounds i32, i32* %293, i64 2, !dbg !9101
  %295 = load i32, i32* %294, align 4, !dbg !9101
  %296 = load i32*, i32** %8, align 8, !dbg !9101
  %297 = getelementptr inbounds i32, i32* %296, i64 3, !dbg !9101
  %298 = load i32, i32* %297, align 4, !dbg !9101
  %299 = load i32*, i32** %8, align 8, !dbg !9101
  %300 = getelementptr inbounds i32, i32* %299, i64 4, !dbg !9101
  %301 = load i32, i32* %300, align 4, !dbg !9101
  %302 = xor i32 %298, %301, !dbg !9101
  %303 = and i32 %295, %302, !dbg !9101
  %304 = load i32*, i32** %8, align 8, !dbg !9101
  %305 = getelementptr inbounds i32, i32* %304, i64 4, !dbg !9101
  %306 = load i32, i32* %305, align 4, !dbg !9101
  %307 = xor i32 %303, %306, !dbg !9101
  %308 = add i32 %292, %307, !dbg !9101
  %309 = load i32*, i32** %7, align 8, !dbg !9101
  %310 = load i32, i32* %9, align 4, !dbg !9101
  %311 = add nsw i32 2, %310, !dbg !9101
  %312 = sext i32 %311 to i64, !dbg !9101
  %313 = getelementptr inbounds i32, i32* %309, i64 %312, !dbg !9101
  %314 = load i32, i32* %313, align 4, !dbg !9101
  %315 = add i32 %308, %314, !dbg !9101
  %316 = load i32, i32* %9, align 4, !dbg !9101
  %317 = add nsw i32 2, %316, !dbg !9101
  %318 = sext i32 %317 to i64, !dbg !9101
  %319 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %318, !dbg !9101
  %320 = load i32, i32* %319, align 4, !dbg !9101
  %321 = add i32 %315, %320, !dbg !9101
  %322 = load i32*, i32** %8, align 8, !dbg !9101
  %323 = getelementptr inbounds i32, i32* %322, i64 5, !dbg !9101
  %324 = load i32, i32* %323, align 4, !dbg !9101
  %325 = add i32 %324, %321, !dbg !9101
  store i32 %325, i32* %323, align 4, !dbg !9101
  %326 = load i32*, i32** %8, align 8, !dbg !9101
  %327 = getelementptr inbounds i32, i32* %326, i64 5, !dbg !9101
  %328 = load i32, i32* %327, align 4, !dbg !9101
  %329 = load i32*, i32** %8, align 8, !dbg !9101
  %330 = getelementptr inbounds i32, i32* %329, i64 1, !dbg !9101
  %331 = load i32, i32* %330, align 4, !dbg !9101
  %332 = add i32 %331, %328, !dbg !9101
  store i32 %332, i32* %330, align 4, !dbg !9101
  %333 = load i32*, i32** %8, align 8, !dbg !9101
  %334 = getelementptr inbounds i32, i32* %333, i64 6, !dbg !9101
  %335 = load i32, i32* %334, align 4, !dbg !9101
  %336 = lshr i32 %335, 2, !dbg !9101
  %337 = load i32*, i32** %8, align 8, !dbg !9101
  %338 = getelementptr inbounds i32, i32* %337, i64 6, !dbg !9101
  %339 = load i32, i32* %338, align 4, !dbg !9101
  %340 = shl i32 %339, 30, !dbg !9101
  %341 = or i32 %336, %340, !dbg !9101
  %342 = load i32*, i32** %8, align 8, !dbg !9101
  %343 = getelementptr inbounds i32, i32* %342, i64 6, !dbg !9101
  %344 = load i32, i32* %343, align 4, !dbg !9101
  %345 = lshr i32 %344, 13, !dbg !9101
  %346 = load i32*, i32** %8, align 8, !dbg !9101
  %347 = getelementptr inbounds i32, i32* %346, i64 6, !dbg !9101
  %348 = load i32, i32* %347, align 4, !dbg !9101
  %349 = shl i32 %348, 19, !dbg !9101
  %350 = or i32 %345, %349, !dbg !9101
  %351 = xor i32 %341, %350, !dbg !9101
  %352 = load i32*, i32** %8, align 8, !dbg !9101
  %353 = getelementptr inbounds i32, i32* %352, i64 6, !dbg !9101
  %354 = load i32, i32* %353, align 4, !dbg !9101
  %355 = lshr i32 %354, 22, !dbg !9101
  %356 = load i32*, i32** %8, align 8, !dbg !9101
  %357 = getelementptr inbounds i32, i32* %356, i64 6, !dbg !9101
  %358 = load i32, i32* %357, align 4, !dbg !9101
  %359 = shl i32 %358, 10, !dbg !9101
  %360 = or i32 %355, %359, !dbg !9101
  %361 = xor i32 %351, %360, !dbg !9101
  %362 = load i32*, i32** %8, align 8, !dbg !9101
  %363 = getelementptr inbounds i32, i32* %362, i64 6, !dbg !9101
  %364 = load i32, i32* %363, align 4, !dbg !9101
  %365 = load i32*, i32** %8, align 8, !dbg !9101
  %366 = getelementptr inbounds i32, i32* %365, i64 7, !dbg !9101
  %367 = load i32, i32* %366, align 4, !dbg !9101
  %368 = load i32*, i32** %8, align 8, !dbg !9101
  %369 = getelementptr inbounds i32, i32* %368, i64 0, !dbg !9101
  %370 = load i32, i32* %369, align 4, !dbg !9101
  %371 = or i32 %367, %370, !dbg !9101
  %372 = and i32 %364, %371, !dbg !9101
  %373 = load i32*, i32** %8, align 8, !dbg !9101
  %374 = getelementptr inbounds i32, i32* %373, i64 7, !dbg !9101
  %375 = load i32, i32* %374, align 4, !dbg !9101
  %376 = load i32*, i32** %8, align 8, !dbg !9101
  %377 = getelementptr inbounds i32, i32* %376, i64 0, !dbg !9101
  %378 = load i32, i32* %377, align 4, !dbg !9101
  %379 = and i32 %375, %378, !dbg !9101
  %380 = or i32 %372, %379, !dbg !9101
  %381 = add i32 %361, %380, !dbg !9101
  %382 = load i32*, i32** %8, align 8, !dbg !9101
  %383 = getelementptr inbounds i32, i32* %382, i64 5, !dbg !9101
  %384 = load i32, i32* %383, align 4, !dbg !9101
  %385 = add i32 %384, %381, !dbg !9101
  store i32 %385, i32* %383, align 4, !dbg !9101
  %386 = load i32*, i32** %8, align 8, !dbg !9102
  %387 = getelementptr inbounds i32, i32* %386, i64 1, !dbg !9102
  %388 = load i32, i32* %387, align 4, !dbg !9102
  %389 = lshr i32 %388, 6, !dbg !9102
  %390 = load i32*, i32** %8, align 8, !dbg !9102
  %391 = getelementptr inbounds i32, i32* %390, i64 1, !dbg !9102
  %392 = load i32, i32* %391, align 4, !dbg !9102
  %393 = shl i32 %392, 26, !dbg !9102
  %394 = or i32 %389, %393, !dbg !9102
  %395 = load i32*, i32** %8, align 8, !dbg !9102
  %396 = getelementptr inbounds i32, i32* %395, i64 1, !dbg !9102
  %397 = load i32, i32* %396, align 4, !dbg !9102
  %398 = lshr i32 %397, 11, !dbg !9102
  %399 = load i32*, i32** %8, align 8, !dbg !9102
  %400 = getelementptr inbounds i32, i32* %399, i64 1, !dbg !9102
  %401 = load i32, i32* %400, align 4, !dbg !9102
  %402 = shl i32 %401, 21, !dbg !9102
  %403 = or i32 %398, %402, !dbg !9102
  %404 = xor i32 %394, %403, !dbg !9102
  %405 = load i32*, i32** %8, align 8, !dbg !9102
  %406 = getelementptr inbounds i32, i32* %405, i64 1, !dbg !9102
  %407 = load i32, i32* %406, align 4, !dbg !9102
  %408 = lshr i32 %407, 25, !dbg !9102
  %409 = load i32*, i32** %8, align 8, !dbg !9102
  %410 = getelementptr inbounds i32, i32* %409, i64 1, !dbg !9102
  %411 = load i32, i32* %410, align 4, !dbg !9102
  %412 = shl i32 %411, 7, !dbg !9102
  %413 = or i32 %408, %412, !dbg !9102
  %414 = xor i32 %404, %413, !dbg !9102
  %415 = load i32*, i32** %8, align 8, !dbg !9102
  %416 = getelementptr inbounds i32, i32* %415, i64 1, !dbg !9102
  %417 = load i32, i32* %416, align 4, !dbg !9102
  %418 = load i32*, i32** %8, align 8, !dbg !9102
  %419 = getelementptr inbounds i32, i32* %418, i64 2, !dbg !9102
  %420 = load i32, i32* %419, align 4, !dbg !9102
  %421 = load i32*, i32** %8, align 8, !dbg !9102
  %422 = getelementptr inbounds i32, i32* %421, i64 3, !dbg !9102
  %423 = load i32, i32* %422, align 4, !dbg !9102
  %424 = xor i32 %420, %423, !dbg !9102
  %425 = and i32 %417, %424, !dbg !9102
  %426 = load i32*, i32** %8, align 8, !dbg !9102
  %427 = getelementptr inbounds i32, i32* %426, i64 3, !dbg !9102
  %428 = load i32, i32* %427, align 4, !dbg !9102
  %429 = xor i32 %425, %428, !dbg !9102
  %430 = add i32 %414, %429, !dbg !9102
  %431 = load i32*, i32** %7, align 8, !dbg !9102
  %432 = load i32, i32* %9, align 4, !dbg !9102
  %433 = add nsw i32 3, %432, !dbg !9102
  %434 = sext i32 %433 to i64, !dbg !9102
  %435 = getelementptr inbounds i32, i32* %431, i64 %434, !dbg !9102
  %436 = load i32, i32* %435, align 4, !dbg !9102
  %437 = add i32 %430, %436, !dbg !9102
  %438 = load i32, i32* %9, align 4, !dbg !9102
  %439 = add nsw i32 3, %438, !dbg !9102
  %440 = sext i32 %439 to i64, !dbg !9102
  %441 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %440, !dbg !9102
  %442 = load i32, i32* %441, align 4, !dbg !9102
  %443 = add i32 %437, %442, !dbg !9102
  %444 = load i32*, i32** %8, align 8, !dbg !9102
  %445 = getelementptr inbounds i32, i32* %444, i64 4, !dbg !9102
  %446 = load i32, i32* %445, align 4, !dbg !9102
  %447 = add i32 %446, %443, !dbg !9102
  store i32 %447, i32* %445, align 4, !dbg !9102
  %448 = load i32*, i32** %8, align 8, !dbg !9102
  %449 = getelementptr inbounds i32, i32* %448, i64 4, !dbg !9102
  %450 = load i32, i32* %449, align 4, !dbg !9102
  %451 = load i32*, i32** %8, align 8, !dbg !9102
  %452 = getelementptr inbounds i32, i32* %451, i64 0, !dbg !9102
  %453 = load i32, i32* %452, align 4, !dbg !9102
  %454 = add i32 %453, %450, !dbg !9102
  store i32 %454, i32* %452, align 4, !dbg !9102
  %455 = load i32*, i32** %8, align 8, !dbg !9102
  %456 = getelementptr inbounds i32, i32* %455, i64 5, !dbg !9102
  %457 = load i32, i32* %456, align 4, !dbg !9102
  %458 = lshr i32 %457, 2, !dbg !9102
  %459 = load i32*, i32** %8, align 8, !dbg !9102
  %460 = getelementptr inbounds i32, i32* %459, i64 5, !dbg !9102
  %461 = load i32, i32* %460, align 4, !dbg !9102
  %462 = shl i32 %461, 30, !dbg !9102
  %463 = or i32 %458, %462, !dbg !9102
  %464 = load i32*, i32** %8, align 8, !dbg !9102
  %465 = getelementptr inbounds i32, i32* %464, i64 5, !dbg !9102
  %466 = load i32, i32* %465, align 4, !dbg !9102
  %467 = lshr i32 %466, 13, !dbg !9102
  %468 = load i32*, i32** %8, align 8, !dbg !9102
  %469 = getelementptr inbounds i32, i32* %468, i64 5, !dbg !9102
  %470 = load i32, i32* %469, align 4, !dbg !9102
  %471 = shl i32 %470, 19, !dbg !9102
  %472 = or i32 %467, %471, !dbg !9102
  %473 = xor i32 %463, %472, !dbg !9102
  %474 = load i32*, i32** %8, align 8, !dbg !9102
  %475 = getelementptr inbounds i32, i32* %474, i64 5, !dbg !9102
  %476 = load i32, i32* %475, align 4, !dbg !9102
  %477 = lshr i32 %476, 22, !dbg !9102
  %478 = load i32*, i32** %8, align 8, !dbg !9102
  %479 = getelementptr inbounds i32, i32* %478, i64 5, !dbg !9102
  %480 = load i32, i32* %479, align 4, !dbg !9102
  %481 = shl i32 %480, 10, !dbg !9102
  %482 = or i32 %477, %481, !dbg !9102
  %483 = xor i32 %473, %482, !dbg !9102
  %484 = load i32*, i32** %8, align 8, !dbg !9102
  %485 = getelementptr inbounds i32, i32* %484, i64 5, !dbg !9102
  %486 = load i32, i32* %485, align 4, !dbg !9102
  %487 = load i32*, i32** %8, align 8, !dbg !9102
  %488 = getelementptr inbounds i32, i32* %487, i64 6, !dbg !9102
  %489 = load i32, i32* %488, align 4, !dbg !9102
  %490 = load i32*, i32** %8, align 8, !dbg !9102
  %491 = getelementptr inbounds i32, i32* %490, i64 7, !dbg !9102
  %492 = load i32, i32* %491, align 4, !dbg !9102
  %493 = or i32 %489, %492, !dbg !9102
  %494 = and i32 %486, %493, !dbg !9102
  %495 = load i32*, i32** %8, align 8, !dbg !9102
  %496 = getelementptr inbounds i32, i32* %495, i64 6, !dbg !9102
  %497 = load i32, i32* %496, align 4, !dbg !9102
  %498 = load i32*, i32** %8, align 8, !dbg !9102
  %499 = getelementptr inbounds i32, i32* %498, i64 7, !dbg !9102
  %500 = load i32, i32* %499, align 4, !dbg !9102
  %501 = and i32 %497, %500, !dbg !9102
  %502 = or i32 %494, %501, !dbg !9102
  %503 = add i32 %483, %502, !dbg !9102
  %504 = load i32*, i32** %8, align 8, !dbg !9102
  %505 = getelementptr inbounds i32, i32* %504, i64 4, !dbg !9102
  %506 = load i32, i32* %505, align 4, !dbg !9102
  %507 = add i32 %506, %503, !dbg !9102
  store i32 %507, i32* %505, align 4, !dbg !9102
  %508 = load i32*, i32** %8, align 8, !dbg !9103
  %509 = getelementptr inbounds i32, i32* %508, i64 0, !dbg !9103
  %510 = load i32, i32* %509, align 4, !dbg !9103
  %511 = lshr i32 %510, 6, !dbg !9103
  %512 = load i32*, i32** %8, align 8, !dbg !9103
  %513 = getelementptr inbounds i32, i32* %512, i64 0, !dbg !9103
  %514 = load i32, i32* %513, align 4, !dbg !9103
  %515 = shl i32 %514, 26, !dbg !9103
  %516 = or i32 %511, %515, !dbg !9103
  %517 = load i32*, i32** %8, align 8, !dbg !9103
  %518 = getelementptr inbounds i32, i32* %517, i64 0, !dbg !9103
  %519 = load i32, i32* %518, align 4, !dbg !9103
  %520 = lshr i32 %519, 11, !dbg !9103
  %521 = load i32*, i32** %8, align 8, !dbg !9103
  %522 = getelementptr inbounds i32, i32* %521, i64 0, !dbg !9103
  %523 = load i32, i32* %522, align 4, !dbg !9103
  %524 = shl i32 %523, 21, !dbg !9103
  %525 = or i32 %520, %524, !dbg !9103
  %526 = xor i32 %516, %525, !dbg !9103
  %527 = load i32*, i32** %8, align 8, !dbg !9103
  %528 = getelementptr inbounds i32, i32* %527, i64 0, !dbg !9103
  %529 = load i32, i32* %528, align 4, !dbg !9103
  %530 = lshr i32 %529, 25, !dbg !9103
  %531 = load i32*, i32** %8, align 8, !dbg !9103
  %532 = getelementptr inbounds i32, i32* %531, i64 0, !dbg !9103
  %533 = load i32, i32* %532, align 4, !dbg !9103
  %534 = shl i32 %533, 7, !dbg !9103
  %535 = or i32 %530, %534, !dbg !9103
  %536 = xor i32 %526, %535, !dbg !9103
  %537 = load i32*, i32** %8, align 8, !dbg !9103
  %538 = getelementptr inbounds i32, i32* %537, i64 0, !dbg !9103
  %539 = load i32, i32* %538, align 4, !dbg !9103
  %540 = load i32*, i32** %8, align 8, !dbg !9103
  %541 = getelementptr inbounds i32, i32* %540, i64 1, !dbg !9103
  %542 = load i32, i32* %541, align 4, !dbg !9103
  %543 = load i32*, i32** %8, align 8, !dbg !9103
  %544 = getelementptr inbounds i32, i32* %543, i64 2, !dbg !9103
  %545 = load i32, i32* %544, align 4, !dbg !9103
  %546 = xor i32 %542, %545, !dbg !9103
  %547 = and i32 %539, %546, !dbg !9103
  %548 = load i32*, i32** %8, align 8, !dbg !9103
  %549 = getelementptr inbounds i32, i32* %548, i64 2, !dbg !9103
  %550 = load i32, i32* %549, align 4, !dbg !9103
  %551 = xor i32 %547, %550, !dbg !9103
  %552 = add i32 %536, %551, !dbg !9103
  %553 = load i32*, i32** %7, align 8, !dbg !9103
  %554 = load i32, i32* %9, align 4, !dbg !9103
  %555 = add nsw i32 4, %554, !dbg !9103
  %556 = sext i32 %555 to i64, !dbg !9103
  %557 = getelementptr inbounds i32, i32* %553, i64 %556, !dbg !9103
  %558 = load i32, i32* %557, align 4, !dbg !9103
  %559 = add i32 %552, %558, !dbg !9103
  %560 = load i32, i32* %9, align 4, !dbg !9103
  %561 = add nsw i32 4, %560, !dbg !9103
  %562 = sext i32 %561 to i64, !dbg !9103
  %563 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %562, !dbg !9103
  %564 = load i32, i32* %563, align 4, !dbg !9103
  %565 = add i32 %559, %564, !dbg !9103
  %566 = load i32*, i32** %8, align 8, !dbg !9103
  %567 = getelementptr inbounds i32, i32* %566, i64 3, !dbg !9103
  %568 = load i32, i32* %567, align 4, !dbg !9103
  %569 = add i32 %568, %565, !dbg !9103
  store i32 %569, i32* %567, align 4, !dbg !9103
  %570 = load i32*, i32** %8, align 8, !dbg !9103
  %571 = getelementptr inbounds i32, i32* %570, i64 3, !dbg !9103
  %572 = load i32, i32* %571, align 4, !dbg !9103
  %573 = load i32*, i32** %8, align 8, !dbg !9103
  %574 = getelementptr inbounds i32, i32* %573, i64 7, !dbg !9103
  %575 = load i32, i32* %574, align 4, !dbg !9103
  %576 = add i32 %575, %572, !dbg !9103
  store i32 %576, i32* %574, align 4, !dbg !9103
  %577 = load i32*, i32** %8, align 8, !dbg !9103
  %578 = getelementptr inbounds i32, i32* %577, i64 4, !dbg !9103
  %579 = load i32, i32* %578, align 4, !dbg !9103
  %580 = lshr i32 %579, 2, !dbg !9103
  %581 = load i32*, i32** %8, align 8, !dbg !9103
  %582 = getelementptr inbounds i32, i32* %581, i64 4, !dbg !9103
  %583 = load i32, i32* %582, align 4, !dbg !9103
  %584 = shl i32 %583, 30, !dbg !9103
  %585 = or i32 %580, %584, !dbg !9103
  %586 = load i32*, i32** %8, align 8, !dbg !9103
  %587 = getelementptr inbounds i32, i32* %586, i64 4, !dbg !9103
  %588 = load i32, i32* %587, align 4, !dbg !9103
  %589 = lshr i32 %588, 13, !dbg !9103
  %590 = load i32*, i32** %8, align 8, !dbg !9103
  %591 = getelementptr inbounds i32, i32* %590, i64 4, !dbg !9103
  %592 = load i32, i32* %591, align 4, !dbg !9103
  %593 = shl i32 %592, 19, !dbg !9103
  %594 = or i32 %589, %593, !dbg !9103
  %595 = xor i32 %585, %594, !dbg !9103
  %596 = load i32*, i32** %8, align 8, !dbg !9103
  %597 = getelementptr inbounds i32, i32* %596, i64 4, !dbg !9103
  %598 = load i32, i32* %597, align 4, !dbg !9103
  %599 = lshr i32 %598, 22, !dbg !9103
  %600 = load i32*, i32** %8, align 8, !dbg !9103
  %601 = getelementptr inbounds i32, i32* %600, i64 4, !dbg !9103
  %602 = load i32, i32* %601, align 4, !dbg !9103
  %603 = shl i32 %602, 10, !dbg !9103
  %604 = or i32 %599, %603, !dbg !9103
  %605 = xor i32 %595, %604, !dbg !9103
  %606 = load i32*, i32** %8, align 8, !dbg !9103
  %607 = getelementptr inbounds i32, i32* %606, i64 4, !dbg !9103
  %608 = load i32, i32* %607, align 4, !dbg !9103
  %609 = load i32*, i32** %8, align 8, !dbg !9103
  %610 = getelementptr inbounds i32, i32* %609, i64 5, !dbg !9103
  %611 = load i32, i32* %610, align 4, !dbg !9103
  %612 = load i32*, i32** %8, align 8, !dbg !9103
  %613 = getelementptr inbounds i32, i32* %612, i64 6, !dbg !9103
  %614 = load i32, i32* %613, align 4, !dbg !9103
  %615 = or i32 %611, %614, !dbg !9103
  %616 = and i32 %608, %615, !dbg !9103
  %617 = load i32*, i32** %8, align 8, !dbg !9103
  %618 = getelementptr inbounds i32, i32* %617, i64 5, !dbg !9103
  %619 = load i32, i32* %618, align 4, !dbg !9103
  %620 = load i32*, i32** %8, align 8, !dbg !9103
  %621 = getelementptr inbounds i32, i32* %620, i64 6, !dbg !9103
  %622 = load i32, i32* %621, align 4, !dbg !9103
  %623 = and i32 %619, %622, !dbg !9103
  %624 = or i32 %616, %623, !dbg !9103
  %625 = add i32 %605, %624, !dbg !9103
  %626 = load i32*, i32** %8, align 8, !dbg !9103
  %627 = getelementptr inbounds i32, i32* %626, i64 3, !dbg !9103
  %628 = load i32, i32* %627, align 4, !dbg !9103
  %629 = add i32 %628, %625, !dbg !9103
  store i32 %629, i32* %627, align 4, !dbg !9103
  %630 = load i32*, i32** %8, align 8, !dbg !9104
  %631 = getelementptr inbounds i32, i32* %630, i64 7, !dbg !9104
  %632 = load i32, i32* %631, align 4, !dbg !9104
  %633 = lshr i32 %632, 6, !dbg !9104
  %634 = load i32*, i32** %8, align 8, !dbg !9104
  %635 = getelementptr inbounds i32, i32* %634, i64 7, !dbg !9104
  %636 = load i32, i32* %635, align 4, !dbg !9104
  %637 = shl i32 %636, 26, !dbg !9104
  %638 = or i32 %633, %637, !dbg !9104
  %639 = load i32*, i32** %8, align 8, !dbg !9104
  %640 = getelementptr inbounds i32, i32* %639, i64 7, !dbg !9104
  %641 = load i32, i32* %640, align 4, !dbg !9104
  %642 = lshr i32 %641, 11, !dbg !9104
  %643 = load i32*, i32** %8, align 8, !dbg !9104
  %644 = getelementptr inbounds i32, i32* %643, i64 7, !dbg !9104
  %645 = load i32, i32* %644, align 4, !dbg !9104
  %646 = shl i32 %645, 21, !dbg !9104
  %647 = or i32 %642, %646, !dbg !9104
  %648 = xor i32 %638, %647, !dbg !9104
  %649 = load i32*, i32** %8, align 8, !dbg !9104
  %650 = getelementptr inbounds i32, i32* %649, i64 7, !dbg !9104
  %651 = load i32, i32* %650, align 4, !dbg !9104
  %652 = lshr i32 %651, 25, !dbg !9104
  %653 = load i32*, i32** %8, align 8, !dbg !9104
  %654 = getelementptr inbounds i32, i32* %653, i64 7, !dbg !9104
  %655 = load i32, i32* %654, align 4, !dbg !9104
  %656 = shl i32 %655, 7, !dbg !9104
  %657 = or i32 %652, %656, !dbg !9104
  %658 = xor i32 %648, %657, !dbg !9104
  %659 = load i32*, i32** %8, align 8, !dbg !9104
  %660 = getelementptr inbounds i32, i32* %659, i64 7, !dbg !9104
  %661 = load i32, i32* %660, align 4, !dbg !9104
  %662 = load i32*, i32** %8, align 8, !dbg !9104
  %663 = getelementptr inbounds i32, i32* %662, i64 0, !dbg !9104
  %664 = load i32, i32* %663, align 4, !dbg !9104
  %665 = load i32*, i32** %8, align 8, !dbg !9104
  %666 = getelementptr inbounds i32, i32* %665, i64 1, !dbg !9104
  %667 = load i32, i32* %666, align 4, !dbg !9104
  %668 = xor i32 %664, %667, !dbg !9104
  %669 = and i32 %661, %668, !dbg !9104
  %670 = load i32*, i32** %8, align 8, !dbg !9104
  %671 = getelementptr inbounds i32, i32* %670, i64 1, !dbg !9104
  %672 = load i32, i32* %671, align 4, !dbg !9104
  %673 = xor i32 %669, %672, !dbg !9104
  %674 = add i32 %658, %673, !dbg !9104
  %675 = load i32*, i32** %7, align 8, !dbg !9104
  %676 = load i32, i32* %9, align 4, !dbg !9104
  %677 = add nsw i32 5, %676, !dbg !9104
  %678 = sext i32 %677 to i64, !dbg !9104
  %679 = getelementptr inbounds i32, i32* %675, i64 %678, !dbg !9104
  %680 = load i32, i32* %679, align 4, !dbg !9104
  %681 = add i32 %674, %680, !dbg !9104
  %682 = load i32, i32* %9, align 4, !dbg !9104
  %683 = add nsw i32 5, %682, !dbg !9104
  %684 = sext i32 %683 to i64, !dbg !9104
  %685 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %684, !dbg !9104
  %686 = load i32, i32* %685, align 4, !dbg !9104
  %687 = add i32 %681, %686, !dbg !9104
  %688 = load i32*, i32** %8, align 8, !dbg !9104
  %689 = getelementptr inbounds i32, i32* %688, i64 2, !dbg !9104
  %690 = load i32, i32* %689, align 4, !dbg !9104
  %691 = add i32 %690, %687, !dbg !9104
  store i32 %691, i32* %689, align 4, !dbg !9104
  %692 = load i32*, i32** %8, align 8, !dbg !9104
  %693 = getelementptr inbounds i32, i32* %692, i64 2, !dbg !9104
  %694 = load i32, i32* %693, align 4, !dbg !9104
  %695 = load i32*, i32** %8, align 8, !dbg !9104
  %696 = getelementptr inbounds i32, i32* %695, i64 6, !dbg !9104
  %697 = load i32, i32* %696, align 4, !dbg !9104
  %698 = add i32 %697, %694, !dbg !9104
  store i32 %698, i32* %696, align 4, !dbg !9104
  %699 = load i32*, i32** %8, align 8, !dbg !9104
  %700 = getelementptr inbounds i32, i32* %699, i64 3, !dbg !9104
  %701 = load i32, i32* %700, align 4, !dbg !9104
  %702 = lshr i32 %701, 2, !dbg !9104
  %703 = load i32*, i32** %8, align 8, !dbg !9104
  %704 = getelementptr inbounds i32, i32* %703, i64 3, !dbg !9104
  %705 = load i32, i32* %704, align 4, !dbg !9104
  %706 = shl i32 %705, 30, !dbg !9104
  %707 = or i32 %702, %706, !dbg !9104
  %708 = load i32*, i32** %8, align 8, !dbg !9104
  %709 = getelementptr inbounds i32, i32* %708, i64 3, !dbg !9104
  %710 = load i32, i32* %709, align 4, !dbg !9104
  %711 = lshr i32 %710, 13, !dbg !9104
  %712 = load i32*, i32** %8, align 8, !dbg !9104
  %713 = getelementptr inbounds i32, i32* %712, i64 3, !dbg !9104
  %714 = load i32, i32* %713, align 4, !dbg !9104
  %715 = shl i32 %714, 19, !dbg !9104
  %716 = or i32 %711, %715, !dbg !9104
  %717 = xor i32 %707, %716, !dbg !9104
  %718 = load i32*, i32** %8, align 8, !dbg !9104
  %719 = getelementptr inbounds i32, i32* %718, i64 3, !dbg !9104
  %720 = load i32, i32* %719, align 4, !dbg !9104
  %721 = lshr i32 %720, 22, !dbg !9104
  %722 = load i32*, i32** %8, align 8, !dbg !9104
  %723 = getelementptr inbounds i32, i32* %722, i64 3, !dbg !9104
  %724 = load i32, i32* %723, align 4, !dbg !9104
  %725 = shl i32 %724, 10, !dbg !9104
  %726 = or i32 %721, %725, !dbg !9104
  %727 = xor i32 %717, %726, !dbg !9104
  %728 = load i32*, i32** %8, align 8, !dbg !9104
  %729 = getelementptr inbounds i32, i32* %728, i64 3, !dbg !9104
  %730 = load i32, i32* %729, align 4, !dbg !9104
  %731 = load i32*, i32** %8, align 8, !dbg !9104
  %732 = getelementptr inbounds i32, i32* %731, i64 4, !dbg !9104
  %733 = load i32, i32* %732, align 4, !dbg !9104
  %734 = load i32*, i32** %8, align 8, !dbg !9104
  %735 = getelementptr inbounds i32, i32* %734, i64 5, !dbg !9104
  %736 = load i32, i32* %735, align 4, !dbg !9104
  %737 = or i32 %733, %736, !dbg !9104
  %738 = and i32 %730, %737, !dbg !9104
  %739 = load i32*, i32** %8, align 8, !dbg !9104
  %740 = getelementptr inbounds i32, i32* %739, i64 4, !dbg !9104
  %741 = load i32, i32* %740, align 4, !dbg !9104
  %742 = load i32*, i32** %8, align 8, !dbg !9104
  %743 = getelementptr inbounds i32, i32* %742, i64 5, !dbg !9104
  %744 = load i32, i32* %743, align 4, !dbg !9104
  %745 = and i32 %741, %744, !dbg !9104
  %746 = or i32 %738, %745, !dbg !9104
  %747 = add i32 %727, %746, !dbg !9104
  %748 = load i32*, i32** %8, align 8, !dbg !9104
  %749 = getelementptr inbounds i32, i32* %748, i64 2, !dbg !9104
  %750 = load i32, i32* %749, align 4, !dbg !9104
  %751 = add i32 %750, %747, !dbg !9104
  store i32 %751, i32* %749, align 4, !dbg !9104
  %752 = load i32*, i32** %8, align 8, !dbg !9105
  %753 = getelementptr inbounds i32, i32* %752, i64 6, !dbg !9105
  %754 = load i32, i32* %753, align 4, !dbg !9105
  %755 = lshr i32 %754, 6, !dbg !9105
  %756 = load i32*, i32** %8, align 8, !dbg !9105
  %757 = getelementptr inbounds i32, i32* %756, i64 6, !dbg !9105
  %758 = load i32, i32* %757, align 4, !dbg !9105
  %759 = shl i32 %758, 26, !dbg !9105
  %760 = or i32 %755, %759, !dbg !9105
  %761 = load i32*, i32** %8, align 8, !dbg !9105
  %762 = getelementptr inbounds i32, i32* %761, i64 6, !dbg !9105
  %763 = load i32, i32* %762, align 4, !dbg !9105
  %764 = lshr i32 %763, 11, !dbg !9105
  %765 = load i32*, i32** %8, align 8, !dbg !9105
  %766 = getelementptr inbounds i32, i32* %765, i64 6, !dbg !9105
  %767 = load i32, i32* %766, align 4, !dbg !9105
  %768 = shl i32 %767, 21, !dbg !9105
  %769 = or i32 %764, %768, !dbg !9105
  %770 = xor i32 %760, %769, !dbg !9105
  %771 = load i32*, i32** %8, align 8, !dbg !9105
  %772 = getelementptr inbounds i32, i32* %771, i64 6, !dbg !9105
  %773 = load i32, i32* %772, align 4, !dbg !9105
  %774 = lshr i32 %773, 25, !dbg !9105
  %775 = load i32*, i32** %8, align 8, !dbg !9105
  %776 = getelementptr inbounds i32, i32* %775, i64 6, !dbg !9105
  %777 = load i32, i32* %776, align 4, !dbg !9105
  %778 = shl i32 %777, 7, !dbg !9105
  %779 = or i32 %774, %778, !dbg !9105
  %780 = xor i32 %770, %779, !dbg !9105
  %781 = load i32*, i32** %8, align 8, !dbg !9105
  %782 = getelementptr inbounds i32, i32* %781, i64 6, !dbg !9105
  %783 = load i32, i32* %782, align 4, !dbg !9105
  %784 = load i32*, i32** %8, align 8, !dbg !9105
  %785 = getelementptr inbounds i32, i32* %784, i64 7, !dbg !9105
  %786 = load i32, i32* %785, align 4, !dbg !9105
  %787 = load i32*, i32** %8, align 8, !dbg !9105
  %788 = getelementptr inbounds i32, i32* %787, i64 0, !dbg !9105
  %789 = load i32, i32* %788, align 4, !dbg !9105
  %790 = xor i32 %786, %789, !dbg !9105
  %791 = and i32 %783, %790, !dbg !9105
  %792 = load i32*, i32** %8, align 8, !dbg !9105
  %793 = getelementptr inbounds i32, i32* %792, i64 0, !dbg !9105
  %794 = load i32, i32* %793, align 4, !dbg !9105
  %795 = xor i32 %791, %794, !dbg !9105
  %796 = add i32 %780, %795, !dbg !9105
  %797 = load i32*, i32** %7, align 8, !dbg !9105
  %798 = load i32, i32* %9, align 4, !dbg !9105
  %799 = add nsw i32 6, %798, !dbg !9105
  %800 = sext i32 %799 to i64, !dbg !9105
  %801 = getelementptr inbounds i32, i32* %797, i64 %800, !dbg !9105
  %802 = load i32, i32* %801, align 4, !dbg !9105
  %803 = add i32 %796, %802, !dbg !9105
  %804 = load i32, i32* %9, align 4, !dbg !9105
  %805 = add nsw i32 6, %804, !dbg !9105
  %806 = sext i32 %805 to i64, !dbg !9105
  %807 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %806, !dbg !9105
  %808 = load i32, i32* %807, align 4, !dbg !9105
  %809 = add i32 %803, %808, !dbg !9105
  %810 = load i32*, i32** %8, align 8, !dbg !9105
  %811 = getelementptr inbounds i32, i32* %810, i64 1, !dbg !9105
  %812 = load i32, i32* %811, align 4, !dbg !9105
  %813 = add i32 %812, %809, !dbg !9105
  store i32 %813, i32* %811, align 4, !dbg !9105
  %814 = load i32*, i32** %8, align 8, !dbg !9105
  %815 = getelementptr inbounds i32, i32* %814, i64 1, !dbg !9105
  %816 = load i32, i32* %815, align 4, !dbg !9105
  %817 = load i32*, i32** %8, align 8, !dbg !9105
  %818 = getelementptr inbounds i32, i32* %817, i64 5, !dbg !9105
  %819 = load i32, i32* %818, align 4, !dbg !9105
  %820 = add i32 %819, %816, !dbg !9105
  store i32 %820, i32* %818, align 4, !dbg !9105
  %821 = load i32*, i32** %8, align 8, !dbg !9105
  %822 = getelementptr inbounds i32, i32* %821, i64 2, !dbg !9105
  %823 = load i32, i32* %822, align 4, !dbg !9105
  %824 = lshr i32 %823, 2, !dbg !9105
  %825 = load i32*, i32** %8, align 8, !dbg !9105
  %826 = getelementptr inbounds i32, i32* %825, i64 2, !dbg !9105
  %827 = load i32, i32* %826, align 4, !dbg !9105
  %828 = shl i32 %827, 30, !dbg !9105
  %829 = or i32 %824, %828, !dbg !9105
  %830 = load i32*, i32** %8, align 8, !dbg !9105
  %831 = getelementptr inbounds i32, i32* %830, i64 2, !dbg !9105
  %832 = load i32, i32* %831, align 4, !dbg !9105
  %833 = lshr i32 %832, 13, !dbg !9105
  %834 = load i32*, i32** %8, align 8, !dbg !9105
  %835 = getelementptr inbounds i32, i32* %834, i64 2, !dbg !9105
  %836 = load i32, i32* %835, align 4, !dbg !9105
  %837 = shl i32 %836, 19, !dbg !9105
  %838 = or i32 %833, %837, !dbg !9105
  %839 = xor i32 %829, %838, !dbg !9105
  %840 = load i32*, i32** %8, align 8, !dbg !9105
  %841 = getelementptr inbounds i32, i32* %840, i64 2, !dbg !9105
  %842 = load i32, i32* %841, align 4, !dbg !9105
  %843 = lshr i32 %842, 22, !dbg !9105
  %844 = load i32*, i32** %8, align 8, !dbg !9105
  %845 = getelementptr inbounds i32, i32* %844, i64 2, !dbg !9105
  %846 = load i32, i32* %845, align 4, !dbg !9105
  %847 = shl i32 %846, 10, !dbg !9105
  %848 = or i32 %843, %847, !dbg !9105
  %849 = xor i32 %839, %848, !dbg !9105
  %850 = load i32*, i32** %8, align 8, !dbg !9105
  %851 = getelementptr inbounds i32, i32* %850, i64 2, !dbg !9105
  %852 = load i32, i32* %851, align 4, !dbg !9105
  %853 = load i32*, i32** %8, align 8, !dbg !9105
  %854 = getelementptr inbounds i32, i32* %853, i64 3, !dbg !9105
  %855 = load i32, i32* %854, align 4, !dbg !9105
  %856 = load i32*, i32** %8, align 8, !dbg !9105
  %857 = getelementptr inbounds i32, i32* %856, i64 4, !dbg !9105
  %858 = load i32, i32* %857, align 4, !dbg !9105
  %859 = or i32 %855, %858, !dbg !9105
  %860 = and i32 %852, %859, !dbg !9105
  %861 = load i32*, i32** %8, align 8, !dbg !9105
  %862 = getelementptr inbounds i32, i32* %861, i64 3, !dbg !9105
  %863 = load i32, i32* %862, align 4, !dbg !9105
  %864 = load i32*, i32** %8, align 8, !dbg !9105
  %865 = getelementptr inbounds i32, i32* %864, i64 4, !dbg !9105
  %866 = load i32, i32* %865, align 4, !dbg !9105
  %867 = and i32 %863, %866, !dbg !9105
  %868 = or i32 %860, %867, !dbg !9105
  %869 = add i32 %849, %868, !dbg !9105
  %870 = load i32*, i32** %8, align 8, !dbg !9105
  %871 = getelementptr inbounds i32, i32* %870, i64 1, !dbg !9105
  %872 = load i32, i32* %871, align 4, !dbg !9105
  %873 = add i32 %872, %869, !dbg !9105
  store i32 %873, i32* %871, align 4, !dbg !9105
  %874 = load i32*, i32** %8, align 8, !dbg !9106
  %875 = getelementptr inbounds i32, i32* %874, i64 5, !dbg !9106
  %876 = load i32, i32* %875, align 4, !dbg !9106
  %877 = lshr i32 %876, 6, !dbg !9106
  %878 = load i32*, i32** %8, align 8, !dbg !9106
  %879 = getelementptr inbounds i32, i32* %878, i64 5, !dbg !9106
  %880 = load i32, i32* %879, align 4, !dbg !9106
  %881 = shl i32 %880, 26, !dbg !9106
  %882 = or i32 %877, %881, !dbg !9106
  %883 = load i32*, i32** %8, align 8, !dbg !9106
  %884 = getelementptr inbounds i32, i32* %883, i64 5, !dbg !9106
  %885 = load i32, i32* %884, align 4, !dbg !9106
  %886 = lshr i32 %885, 11, !dbg !9106
  %887 = load i32*, i32** %8, align 8, !dbg !9106
  %888 = getelementptr inbounds i32, i32* %887, i64 5, !dbg !9106
  %889 = load i32, i32* %888, align 4, !dbg !9106
  %890 = shl i32 %889, 21, !dbg !9106
  %891 = or i32 %886, %890, !dbg !9106
  %892 = xor i32 %882, %891, !dbg !9106
  %893 = load i32*, i32** %8, align 8, !dbg !9106
  %894 = getelementptr inbounds i32, i32* %893, i64 5, !dbg !9106
  %895 = load i32, i32* %894, align 4, !dbg !9106
  %896 = lshr i32 %895, 25, !dbg !9106
  %897 = load i32*, i32** %8, align 8, !dbg !9106
  %898 = getelementptr inbounds i32, i32* %897, i64 5, !dbg !9106
  %899 = load i32, i32* %898, align 4, !dbg !9106
  %900 = shl i32 %899, 7, !dbg !9106
  %901 = or i32 %896, %900, !dbg !9106
  %902 = xor i32 %892, %901, !dbg !9106
  %903 = load i32*, i32** %8, align 8, !dbg !9106
  %904 = getelementptr inbounds i32, i32* %903, i64 5, !dbg !9106
  %905 = load i32, i32* %904, align 4, !dbg !9106
  %906 = load i32*, i32** %8, align 8, !dbg !9106
  %907 = getelementptr inbounds i32, i32* %906, i64 6, !dbg !9106
  %908 = load i32, i32* %907, align 4, !dbg !9106
  %909 = load i32*, i32** %8, align 8, !dbg !9106
  %910 = getelementptr inbounds i32, i32* %909, i64 7, !dbg !9106
  %911 = load i32, i32* %910, align 4, !dbg !9106
  %912 = xor i32 %908, %911, !dbg !9106
  %913 = and i32 %905, %912, !dbg !9106
  %914 = load i32*, i32** %8, align 8, !dbg !9106
  %915 = getelementptr inbounds i32, i32* %914, i64 7, !dbg !9106
  %916 = load i32, i32* %915, align 4, !dbg !9106
  %917 = xor i32 %913, %916, !dbg !9106
  %918 = add i32 %902, %917, !dbg !9106
  %919 = load i32*, i32** %7, align 8, !dbg !9106
  %920 = load i32, i32* %9, align 4, !dbg !9106
  %921 = add nsw i32 7, %920, !dbg !9106
  %922 = sext i32 %921 to i64, !dbg !9106
  %923 = getelementptr inbounds i32, i32* %919, i64 %922, !dbg !9106
  %924 = load i32, i32* %923, align 4, !dbg !9106
  %925 = add i32 %918, %924, !dbg !9106
  %926 = load i32, i32* %9, align 4, !dbg !9106
  %927 = add nsw i32 7, %926, !dbg !9106
  %928 = sext i32 %927 to i64, !dbg !9106
  %929 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %928, !dbg !9106
  %930 = load i32, i32* %929, align 4, !dbg !9106
  %931 = add i32 %925, %930, !dbg !9106
  %932 = load i32*, i32** %8, align 8, !dbg !9106
  %933 = getelementptr inbounds i32, i32* %932, i64 0, !dbg !9106
  %934 = load i32, i32* %933, align 4, !dbg !9106
  %935 = add i32 %934, %931, !dbg !9106
  store i32 %935, i32* %933, align 4, !dbg !9106
  %936 = load i32*, i32** %8, align 8, !dbg !9106
  %937 = getelementptr inbounds i32, i32* %936, i64 0, !dbg !9106
  %938 = load i32, i32* %937, align 4, !dbg !9106
  %939 = load i32*, i32** %8, align 8, !dbg !9106
  %940 = getelementptr inbounds i32, i32* %939, i64 4, !dbg !9106
  %941 = load i32, i32* %940, align 4, !dbg !9106
  %942 = add i32 %941, %938, !dbg !9106
  store i32 %942, i32* %940, align 4, !dbg !9106
  %943 = load i32*, i32** %8, align 8, !dbg !9106
  %944 = getelementptr inbounds i32, i32* %943, i64 1, !dbg !9106
  %945 = load i32, i32* %944, align 4, !dbg !9106
  %946 = lshr i32 %945, 2, !dbg !9106
  %947 = load i32*, i32** %8, align 8, !dbg !9106
  %948 = getelementptr inbounds i32, i32* %947, i64 1, !dbg !9106
  %949 = load i32, i32* %948, align 4, !dbg !9106
  %950 = shl i32 %949, 30, !dbg !9106
  %951 = or i32 %946, %950, !dbg !9106
  %952 = load i32*, i32** %8, align 8, !dbg !9106
  %953 = getelementptr inbounds i32, i32* %952, i64 1, !dbg !9106
  %954 = load i32, i32* %953, align 4, !dbg !9106
  %955 = lshr i32 %954, 13, !dbg !9106
  %956 = load i32*, i32** %8, align 8, !dbg !9106
  %957 = getelementptr inbounds i32, i32* %956, i64 1, !dbg !9106
  %958 = load i32, i32* %957, align 4, !dbg !9106
  %959 = shl i32 %958, 19, !dbg !9106
  %960 = or i32 %955, %959, !dbg !9106
  %961 = xor i32 %951, %960, !dbg !9106
  %962 = load i32*, i32** %8, align 8, !dbg !9106
  %963 = getelementptr inbounds i32, i32* %962, i64 1, !dbg !9106
  %964 = load i32, i32* %963, align 4, !dbg !9106
  %965 = lshr i32 %964, 22, !dbg !9106
  %966 = load i32*, i32** %8, align 8, !dbg !9106
  %967 = getelementptr inbounds i32, i32* %966, i64 1, !dbg !9106
  %968 = load i32, i32* %967, align 4, !dbg !9106
  %969 = shl i32 %968, 10, !dbg !9106
  %970 = or i32 %965, %969, !dbg !9106
  %971 = xor i32 %961, %970, !dbg !9106
  %972 = load i32*, i32** %8, align 8, !dbg !9106
  %973 = getelementptr inbounds i32, i32* %972, i64 1, !dbg !9106
  %974 = load i32, i32* %973, align 4, !dbg !9106
  %975 = load i32*, i32** %8, align 8, !dbg !9106
  %976 = getelementptr inbounds i32, i32* %975, i64 2, !dbg !9106
  %977 = load i32, i32* %976, align 4, !dbg !9106
  %978 = load i32*, i32** %8, align 8, !dbg !9106
  %979 = getelementptr inbounds i32, i32* %978, i64 3, !dbg !9106
  %980 = load i32, i32* %979, align 4, !dbg !9106
  %981 = or i32 %977, %980, !dbg !9106
  %982 = and i32 %974, %981, !dbg !9106
  %983 = load i32*, i32** %8, align 8, !dbg !9106
  %984 = getelementptr inbounds i32, i32* %983, i64 2, !dbg !9106
  %985 = load i32, i32* %984, align 4, !dbg !9106
  %986 = load i32*, i32** %8, align 8, !dbg !9106
  %987 = getelementptr inbounds i32, i32* %986, i64 3, !dbg !9106
  %988 = load i32, i32* %987, align 4, !dbg !9106
  %989 = and i32 %985, %988, !dbg !9106
  %990 = or i32 %982, %989, !dbg !9106
  %991 = add i32 %971, %990, !dbg !9106
  %992 = load i32*, i32** %8, align 8, !dbg !9106
  %993 = getelementptr inbounds i32, i32* %992, i64 0, !dbg !9106
  %994 = load i32, i32* %993, align 4, !dbg !9106
  %995 = add i32 %994, %991, !dbg !9106
  store i32 %995, i32* %993, align 4, !dbg !9106
  %996 = load i32*, i32** %8, align 8, !dbg !9107
  %997 = getelementptr inbounds i32, i32* %996, i64 4, !dbg !9107
  %998 = load i32, i32* %997, align 4, !dbg !9107
  %999 = lshr i32 %998, 6, !dbg !9107
  %1000 = load i32*, i32** %8, align 8, !dbg !9107
  %1001 = getelementptr inbounds i32, i32* %1000, i64 4, !dbg !9107
  %1002 = load i32, i32* %1001, align 4, !dbg !9107
  %1003 = shl i32 %1002, 26, !dbg !9107
  %1004 = or i32 %999, %1003, !dbg !9107
  %1005 = load i32*, i32** %8, align 8, !dbg !9107
  %1006 = getelementptr inbounds i32, i32* %1005, i64 4, !dbg !9107
  %1007 = load i32, i32* %1006, align 4, !dbg !9107
  %1008 = lshr i32 %1007, 11, !dbg !9107
  %1009 = load i32*, i32** %8, align 8, !dbg !9107
  %1010 = getelementptr inbounds i32, i32* %1009, i64 4, !dbg !9107
  %1011 = load i32, i32* %1010, align 4, !dbg !9107
  %1012 = shl i32 %1011, 21, !dbg !9107
  %1013 = or i32 %1008, %1012, !dbg !9107
  %1014 = xor i32 %1004, %1013, !dbg !9107
  %1015 = load i32*, i32** %8, align 8, !dbg !9107
  %1016 = getelementptr inbounds i32, i32* %1015, i64 4, !dbg !9107
  %1017 = load i32, i32* %1016, align 4, !dbg !9107
  %1018 = lshr i32 %1017, 25, !dbg !9107
  %1019 = load i32*, i32** %8, align 8, !dbg !9107
  %1020 = getelementptr inbounds i32, i32* %1019, i64 4, !dbg !9107
  %1021 = load i32, i32* %1020, align 4, !dbg !9107
  %1022 = shl i32 %1021, 7, !dbg !9107
  %1023 = or i32 %1018, %1022, !dbg !9107
  %1024 = xor i32 %1014, %1023, !dbg !9107
  %1025 = load i32*, i32** %8, align 8, !dbg !9107
  %1026 = getelementptr inbounds i32, i32* %1025, i64 4, !dbg !9107
  %1027 = load i32, i32* %1026, align 4, !dbg !9107
  %1028 = load i32*, i32** %8, align 8, !dbg !9107
  %1029 = getelementptr inbounds i32, i32* %1028, i64 5, !dbg !9107
  %1030 = load i32, i32* %1029, align 4, !dbg !9107
  %1031 = load i32*, i32** %8, align 8, !dbg !9107
  %1032 = getelementptr inbounds i32, i32* %1031, i64 6, !dbg !9107
  %1033 = load i32, i32* %1032, align 4, !dbg !9107
  %1034 = xor i32 %1030, %1033, !dbg !9107
  %1035 = and i32 %1027, %1034, !dbg !9107
  %1036 = load i32*, i32** %8, align 8, !dbg !9107
  %1037 = getelementptr inbounds i32, i32* %1036, i64 6, !dbg !9107
  %1038 = load i32, i32* %1037, align 4, !dbg !9107
  %1039 = xor i32 %1035, %1038, !dbg !9107
  %1040 = add i32 %1024, %1039, !dbg !9107
  %1041 = load i32*, i32** %7, align 8, !dbg !9107
  %1042 = load i32, i32* %9, align 4, !dbg !9107
  %1043 = add nsw i32 8, %1042, !dbg !9107
  %1044 = sext i32 %1043 to i64, !dbg !9107
  %1045 = getelementptr inbounds i32, i32* %1041, i64 %1044, !dbg !9107
  %1046 = load i32, i32* %1045, align 4, !dbg !9107
  %1047 = add i32 %1040, %1046, !dbg !9107
  %1048 = load i32, i32* %9, align 4, !dbg !9107
  %1049 = add nsw i32 8, %1048, !dbg !9107
  %1050 = sext i32 %1049 to i64, !dbg !9107
  %1051 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %1050, !dbg !9107
  %1052 = load i32, i32* %1051, align 4, !dbg !9107
  %1053 = add i32 %1047, %1052, !dbg !9107
  %1054 = load i32*, i32** %8, align 8, !dbg !9107
  %1055 = getelementptr inbounds i32, i32* %1054, i64 7, !dbg !9107
  %1056 = load i32, i32* %1055, align 4, !dbg !9107
  %1057 = add i32 %1056, %1053, !dbg !9107
  store i32 %1057, i32* %1055, align 4, !dbg !9107
  %1058 = load i32*, i32** %8, align 8, !dbg !9107
  %1059 = getelementptr inbounds i32, i32* %1058, i64 7, !dbg !9107
  %1060 = load i32, i32* %1059, align 4, !dbg !9107
  %1061 = load i32*, i32** %8, align 8, !dbg !9107
  %1062 = getelementptr inbounds i32, i32* %1061, i64 3, !dbg !9107
  %1063 = load i32, i32* %1062, align 4, !dbg !9107
  %1064 = add i32 %1063, %1060, !dbg !9107
  store i32 %1064, i32* %1062, align 4, !dbg !9107
  %1065 = load i32*, i32** %8, align 8, !dbg !9107
  %1066 = getelementptr inbounds i32, i32* %1065, i64 0, !dbg !9107
  %1067 = load i32, i32* %1066, align 4, !dbg !9107
  %1068 = lshr i32 %1067, 2, !dbg !9107
  %1069 = load i32*, i32** %8, align 8, !dbg !9107
  %1070 = getelementptr inbounds i32, i32* %1069, i64 0, !dbg !9107
  %1071 = load i32, i32* %1070, align 4, !dbg !9107
  %1072 = shl i32 %1071, 30, !dbg !9107
  %1073 = or i32 %1068, %1072, !dbg !9107
  %1074 = load i32*, i32** %8, align 8, !dbg !9107
  %1075 = getelementptr inbounds i32, i32* %1074, i64 0, !dbg !9107
  %1076 = load i32, i32* %1075, align 4, !dbg !9107
  %1077 = lshr i32 %1076, 13, !dbg !9107
  %1078 = load i32*, i32** %8, align 8, !dbg !9107
  %1079 = getelementptr inbounds i32, i32* %1078, i64 0, !dbg !9107
  %1080 = load i32, i32* %1079, align 4, !dbg !9107
  %1081 = shl i32 %1080, 19, !dbg !9107
  %1082 = or i32 %1077, %1081, !dbg !9107
  %1083 = xor i32 %1073, %1082, !dbg !9107
  %1084 = load i32*, i32** %8, align 8, !dbg !9107
  %1085 = getelementptr inbounds i32, i32* %1084, i64 0, !dbg !9107
  %1086 = load i32, i32* %1085, align 4, !dbg !9107
  %1087 = lshr i32 %1086, 22, !dbg !9107
  %1088 = load i32*, i32** %8, align 8, !dbg !9107
  %1089 = getelementptr inbounds i32, i32* %1088, i64 0, !dbg !9107
  %1090 = load i32, i32* %1089, align 4, !dbg !9107
  %1091 = shl i32 %1090, 10, !dbg !9107
  %1092 = or i32 %1087, %1091, !dbg !9107
  %1093 = xor i32 %1083, %1092, !dbg !9107
  %1094 = load i32*, i32** %8, align 8, !dbg !9107
  %1095 = getelementptr inbounds i32, i32* %1094, i64 0, !dbg !9107
  %1096 = load i32, i32* %1095, align 4, !dbg !9107
  %1097 = load i32*, i32** %8, align 8, !dbg !9107
  %1098 = getelementptr inbounds i32, i32* %1097, i64 1, !dbg !9107
  %1099 = load i32, i32* %1098, align 4, !dbg !9107
  %1100 = load i32*, i32** %8, align 8, !dbg !9107
  %1101 = getelementptr inbounds i32, i32* %1100, i64 2, !dbg !9107
  %1102 = load i32, i32* %1101, align 4, !dbg !9107
  %1103 = or i32 %1099, %1102, !dbg !9107
  %1104 = and i32 %1096, %1103, !dbg !9107
  %1105 = load i32*, i32** %8, align 8, !dbg !9107
  %1106 = getelementptr inbounds i32, i32* %1105, i64 1, !dbg !9107
  %1107 = load i32, i32* %1106, align 4, !dbg !9107
  %1108 = load i32*, i32** %8, align 8, !dbg !9107
  %1109 = getelementptr inbounds i32, i32* %1108, i64 2, !dbg !9107
  %1110 = load i32, i32* %1109, align 4, !dbg !9107
  %1111 = and i32 %1107, %1110, !dbg !9107
  %1112 = or i32 %1104, %1111, !dbg !9107
  %1113 = add i32 %1093, %1112, !dbg !9107
  %1114 = load i32*, i32** %8, align 8, !dbg !9107
  %1115 = getelementptr inbounds i32, i32* %1114, i64 7, !dbg !9107
  %1116 = load i32, i32* %1115, align 4, !dbg !9107
  %1117 = add i32 %1116, %1113, !dbg !9107
  store i32 %1117, i32* %1115, align 4, !dbg !9107
  %1118 = load i32*, i32** %8, align 8, !dbg !9108
  %1119 = getelementptr inbounds i32, i32* %1118, i64 3, !dbg !9108
  %1120 = load i32, i32* %1119, align 4, !dbg !9108
  %1121 = lshr i32 %1120, 6, !dbg !9108
  %1122 = load i32*, i32** %8, align 8, !dbg !9108
  %1123 = getelementptr inbounds i32, i32* %1122, i64 3, !dbg !9108
  %1124 = load i32, i32* %1123, align 4, !dbg !9108
  %1125 = shl i32 %1124, 26, !dbg !9108
  %1126 = or i32 %1121, %1125, !dbg !9108
  %1127 = load i32*, i32** %8, align 8, !dbg !9108
  %1128 = getelementptr inbounds i32, i32* %1127, i64 3, !dbg !9108
  %1129 = load i32, i32* %1128, align 4, !dbg !9108
  %1130 = lshr i32 %1129, 11, !dbg !9108
  %1131 = load i32*, i32** %8, align 8, !dbg !9108
  %1132 = getelementptr inbounds i32, i32* %1131, i64 3, !dbg !9108
  %1133 = load i32, i32* %1132, align 4, !dbg !9108
  %1134 = shl i32 %1133, 21, !dbg !9108
  %1135 = or i32 %1130, %1134, !dbg !9108
  %1136 = xor i32 %1126, %1135, !dbg !9108
  %1137 = load i32*, i32** %8, align 8, !dbg !9108
  %1138 = getelementptr inbounds i32, i32* %1137, i64 3, !dbg !9108
  %1139 = load i32, i32* %1138, align 4, !dbg !9108
  %1140 = lshr i32 %1139, 25, !dbg !9108
  %1141 = load i32*, i32** %8, align 8, !dbg !9108
  %1142 = getelementptr inbounds i32, i32* %1141, i64 3, !dbg !9108
  %1143 = load i32, i32* %1142, align 4, !dbg !9108
  %1144 = shl i32 %1143, 7, !dbg !9108
  %1145 = or i32 %1140, %1144, !dbg !9108
  %1146 = xor i32 %1136, %1145, !dbg !9108
  %1147 = load i32*, i32** %8, align 8, !dbg !9108
  %1148 = getelementptr inbounds i32, i32* %1147, i64 3, !dbg !9108
  %1149 = load i32, i32* %1148, align 4, !dbg !9108
  %1150 = load i32*, i32** %8, align 8, !dbg !9108
  %1151 = getelementptr inbounds i32, i32* %1150, i64 4, !dbg !9108
  %1152 = load i32, i32* %1151, align 4, !dbg !9108
  %1153 = load i32*, i32** %8, align 8, !dbg !9108
  %1154 = getelementptr inbounds i32, i32* %1153, i64 5, !dbg !9108
  %1155 = load i32, i32* %1154, align 4, !dbg !9108
  %1156 = xor i32 %1152, %1155, !dbg !9108
  %1157 = and i32 %1149, %1156, !dbg !9108
  %1158 = load i32*, i32** %8, align 8, !dbg !9108
  %1159 = getelementptr inbounds i32, i32* %1158, i64 5, !dbg !9108
  %1160 = load i32, i32* %1159, align 4, !dbg !9108
  %1161 = xor i32 %1157, %1160, !dbg !9108
  %1162 = add i32 %1146, %1161, !dbg !9108
  %1163 = load i32*, i32** %7, align 8, !dbg !9108
  %1164 = load i32, i32* %9, align 4, !dbg !9108
  %1165 = add nsw i32 9, %1164, !dbg !9108
  %1166 = sext i32 %1165 to i64, !dbg !9108
  %1167 = getelementptr inbounds i32, i32* %1163, i64 %1166, !dbg !9108
  %1168 = load i32, i32* %1167, align 4, !dbg !9108
  %1169 = add i32 %1162, %1168, !dbg !9108
  %1170 = load i32, i32* %9, align 4, !dbg !9108
  %1171 = add nsw i32 9, %1170, !dbg !9108
  %1172 = sext i32 %1171 to i64, !dbg !9108
  %1173 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %1172, !dbg !9108
  %1174 = load i32, i32* %1173, align 4, !dbg !9108
  %1175 = add i32 %1169, %1174, !dbg !9108
  %1176 = load i32*, i32** %8, align 8, !dbg !9108
  %1177 = getelementptr inbounds i32, i32* %1176, i64 6, !dbg !9108
  %1178 = load i32, i32* %1177, align 4, !dbg !9108
  %1179 = add i32 %1178, %1175, !dbg !9108
  store i32 %1179, i32* %1177, align 4, !dbg !9108
  %1180 = load i32*, i32** %8, align 8, !dbg !9108
  %1181 = getelementptr inbounds i32, i32* %1180, i64 6, !dbg !9108
  %1182 = load i32, i32* %1181, align 4, !dbg !9108
  %1183 = load i32*, i32** %8, align 8, !dbg !9108
  %1184 = getelementptr inbounds i32, i32* %1183, i64 2, !dbg !9108
  %1185 = load i32, i32* %1184, align 4, !dbg !9108
  %1186 = add i32 %1185, %1182, !dbg !9108
  store i32 %1186, i32* %1184, align 4, !dbg !9108
  %1187 = load i32*, i32** %8, align 8, !dbg !9108
  %1188 = getelementptr inbounds i32, i32* %1187, i64 7, !dbg !9108
  %1189 = load i32, i32* %1188, align 4, !dbg !9108
  %1190 = lshr i32 %1189, 2, !dbg !9108
  %1191 = load i32*, i32** %8, align 8, !dbg !9108
  %1192 = getelementptr inbounds i32, i32* %1191, i64 7, !dbg !9108
  %1193 = load i32, i32* %1192, align 4, !dbg !9108
  %1194 = shl i32 %1193, 30, !dbg !9108
  %1195 = or i32 %1190, %1194, !dbg !9108
  %1196 = load i32*, i32** %8, align 8, !dbg !9108
  %1197 = getelementptr inbounds i32, i32* %1196, i64 7, !dbg !9108
  %1198 = load i32, i32* %1197, align 4, !dbg !9108
  %1199 = lshr i32 %1198, 13, !dbg !9108
  %1200 = load i32*, i32** %8, align 8, !dbg !9108
  %1201 = getelementptr inbounds i32, i32* %1200, i64 7, !dbg !9108
  %1202 = load i32, i32* %1201, align 4, !dbg !9108
  %1203 = shl i32 %1202, 19, !dbg !9108
  %1204 = or i32 %1199, %1203, !dbg !9108
  %1205 = xor i32 %1195, %1204, !dbg !9108
  %1206 = load i32*, i32** %8, align 8, !dbg !9108
  %1207 = getelementptr inbounds i32, i32* %1206, i64 7, !dbg !9108
  %1208 = load i32, i32* %1207, align 4, !dbg !9108
  %1209 = lshr i32 %1208, 22, !dbg !9108
  %1210 = load i32*, i32** %8, align 8, !dbg !9108
  %1211 = getelementptr inbounds i32, i32* %1210, i64 7, !dbg !9108
  %1212 = load i32, i32* %1211, align 4, !dbg !9108
  %1213 = shl i32 %1212, 10, !dbg !9108
  %1214 = or i32 %1209, %1213, !dbg !9108
  %1215 = xor i32 %1205, %1214, !dbg !9108
  %1216 = load i32*, i32** %8, align 8, !dbg !9108
  %1217 = getelementptr inbounds i32, i32* %1216, i64 7, !dbg !9108
  %1218 = load i32, i32* %1217, align 4, !dbg !9108
  %1219 = load i32*, i32** %8, align 8, !dbg !9108
  %1220 = getelementptr inbounds i32, i32* %1219, i64 0, !dbg !9108
  %1221 = load i32, i32* %1220, align 4, !dbg !9108
  %1222 = load i32*, i32** %8, align 8, !dbg !9108
  %1223 = getelementptr inbounds i32, i32* %1222, i64 1, !dbg !9108
  %1224 = load i32, i32* %1223, align 4, !dbg !9108
  %1225 = or i32 %1221, %1224, !dbg !9108
  %1226 = and i32 %1218, %1225, !dbg !9108
  %1227 = load i32*, i32** %8, align 8, !dbg !9108
  %1228 = getelementptr inbounds i32, i32* %1227, i64 0, !dbg !9108
  %1229 = load i32, i32* %1228, align 4, !dbg !9108
  %1230 = load i32*, i32** %8, align 8, !dbg !9108
  %1231 = getelementptr inbounds i32, i32* %1230, i64 1, !dbg !9108
  %1232 = load i32, i32* %1231, align 4, !dbg !9108
  %1233 = and i32 %1229, %1232, !dbg !9108
  %1234 = or i32 %1226, %1233, !dbg !9108
  %1235 = add i32 %1215, %1234, !dbg !9108
  %1236 = load i32*, i32** %8, align 8, !dbg !9108
  %1237 = getelementptr inbounds i32, i32* %1236, i64 6, !dbg !9108
  %1238 = load i32, i32* %1237, align 4, !dbg !9108
  %1239 = add i32 %1238, %1235, !dbg !9108
  store i32 %1239, i32* %1237, align 4, !dbg !9108
  %1240 = load i32*, i32** %8, align 8, !dbg !9109
  %1241 = getelementptr inbounds i32, i32* %1240, i64 2, !dbg !9109
  %1242 = load i32, i32* %1241, align 4, !dbg !9109
  %1243 = lshr i32 %1242, 6, !dbg !9109
  %1244 = load i32*, i32** %8, align 8, !dbg !9109
  %1245 = getelementptr inbounds i32, i32* %1244, i64 2, !dbg !9109
  %1246 = load i32, i32* %1245, align 4, !dbg !9109
  %1247 = shl i32 %1246, 26, !dbg !9109
  %1248 = or i32 %1243, %1247, !dbg !9109
  %1249 = load i32*, i32** %8, align 8, !dbg !9109
  %1250 = getelementptr inbounds i32, i32* %1249, i64 2, !dbg !9109
  %1251 = load i32, i32* %1250, align 4, !dbg !9109
  %1252 = lshr i32 %1251, 11, !dbg !9109
  %1253 = load i32*, i32** %8, align 8, !dbg !9109
  %1254 = getelementptr inbounds i32, i32* %1253, i64 2, !dbg !9109
  %1255 = load i32, i32* %1254, align 4, !dbg !9109
  %1256 = shl i32 %1255, 21, !dbg !9109
  %1257 = or i32 %1252, %1256, !dbg !9109
  %1258 = xor i32 %1248, %1257, !dbg !9109
  %1259 = load i32*, i32** %8, align 8, !dbg !9109
  %1260 = getelementptr inbounds i32, i32* %1259, i64 2, !dbg !9109
  %1261 = load i32, i32* %1260, align 4, !dbg !9109
  %1262 = lshr i32 %1261, 25, !dbg !9109
  %1263 = load i32*, i32** %8, align 8, !dbg !9109
  %1264 = getelementptr inbounds i32, i32* %1263, i64 2, !dbg !9109
  %1265 = load i32, i32* %1264, align 4, !dbg !9109
  %1266 = shl i32 %1265, 7, !dbg !9109
  %1267 = or i32 %1262, %1266, !dbg !9109
  %1268 = xor i32 %1258, %1267, !dbg !9109
  %1269 = load i32*, i32** %8, align 8, !dbg !9109
  %1270 = getelementptr inbounds i32, i32* %1269, i64 2, !dbg !9109
  %1271 = load i32, i32* %1270, align 4, !dbg !9109
  %1272 = load i32*, i32** %8, align 8, !dbg !9109
  %1273 = getelementptr inbounds i32, i32* %1272, i64 3, !dbg !9109
  %1274 = load i32, i32* %1273, align 4, !dbg !9109
  %1275 = load i32*, i32** %8, align 8, !dbg !9109
  %1276 = getelementptr inbounds i32, i32* %1275, i64 4, !dbg !9109
  %1277 = load i32, i32* %1276, align 4, !dbg !9109
  %1278 = xor i32 %1274, %1277, !dbg !9109
  %1279 = and i32 %1271, %1278, !dbg !9109
  %1280 = load i32*, i32** %8, align 8, !dbg !9109
  %1281 = getelementptr inbounds i32, i32* %1280, i64 4, !dbg !9109
  %1282 = load i32, i32* %1281, align 4, !dbg !9109
  %1283 = xor i32 %1279, %1282, !dbg !9109
  %1284 = add i32 %1268, %1283, !dbg !9109
  %1285 = load i32*, i32** %7, align 8, !dbg !9109
  %1286 = load i32, i32* %9, align 4, !dbg !9109
  %1287 = add nsw i32 10, %1286, !dbg !9109
  %1288 = sext i32 %1287 to i64, !dbg !9109
  %1289 = getelementptr inbounds i32, i32* %1285, i64 %1288, !dbg !9109
  %1290 = load i32, i32* %1289, align 4, !dbg !9109
  %1291 = add i32 %1284, %1290, !dbg !9109
  %1292 = load i32, i32* %9, align 4, !dbg !9109
  %1293 = add nsw i32 10, %1292, !dbg !9109
  %1294 = sext i32 %1293 to i64, !dbg !9109
  %1295 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %1294, !dbg !9109
  %1296 = load i32, i32* %1295, align 4, !dbg !9109
  %1297 = add i32 %1291, %1296, !dbg !9109
  %1298 = load i32*, i32** %8, align 8, !dbg !9109
  %1299 = getelementptr inbounds i32, i32* %1298, i64 5, !dbg !9109
  %1300 = load i32, i32* %1299, align 4, !dbg !9109
  %1301 = add i32 %1300, %1297, !dbg !9109
  store i32 %1301, i32* %1299, align 4, !dbg !9109
  %1302 = load i32*, i32** %8, align 8, !dbg !9109
  %1303 = getelementptr inbounds i32, i32* %1302, i64 5, !dbg !9109
  %1304 = load i32, i32* %1303, align 4, !dbg !9109
  %1305 = load i32*, i32** %8, align 8, !dbg !9109
  %1306 = getelementptr inbounds i32, i32* %1305, i64 1, !dbg !9109
  %1307 = load i32, i32* %1306, align 4, !dbg !9109
  %1308 = add i32 %1307, %1304, !dbg !9109
  store i32 %1308, i32* %1306, align 4, !dbg !9109
  %1309 = load i32*, i32** %8, align 8, !dbg !9109
  %1310 = getelementptr inbounds i32, i32* %1309, i64 6, !dbg !9109
  %1311 = load i32, i32* %1310, align 4, !dbg !9109
  %1312 = lshr i32 %1311, 2, !dbg !9109
  %1313 = load i32*, i32** %8, align 8, !dbg !9109
  %1314 = getelementptr inbounds i32, i32* %1313, i64 6, !dbg !9109
  %1315 = load i32, i32* %1314, align 4, !dbg !9109
  %1316 = shl i32 %1315, 30, !dbg !9109
  %1317 = or i32 %1312, %1316, !dbg !9109
  %1318 = load i32*, i32** %8, align 8, !dbg !9109
  %1319 = getelementptr inbounds i32, i32* %1318, i64 6, !dbg !9109
  %1320 = load i32, i32* %1319, align 4, !dbg !9109
  %1321 = lshr i32 %1320, 13, !dbg !9109
  %1322 = load i32*, i32** %8, align 8, !dbg !9109
  %1323 = getelementptr inbounds i32, i32* %1322, i64 6, !dbg !9109
  %1324 = load i32, i32* %1323, align 4, !dbg !9109
  %1325 = shl i32 %1324, 19, !dbg !9109
  %1326 = or i32 %1321, %1325, !dbg !9109
  %1327 = xor i32 %1317, %1326, !dbg !9109
  %1328 = load i32*, i32** %8, align 8, !dbg !9109
  %1329 = getelementptr inbounds i32, i32* %1328, i64 6, !dbg !9109
  %1330 = load i32, i32* %1329, align 4, !dbg !9109
  %1331 = lshr i32 %1330, 22, !dbg !9109
  %1332 = load i32*, i32** %8, align 8, !dbg !9109
  %1333 = getelementptr inbounds i32, i32* %1332, i64 6, !dbg !9109
  %1334 = load i32, i32* %1333, align 4, !dbg !9109
  %1335 = shl i32 %1334, 10, !dbg !9109
  %1336 = or i32 %1331, %1335, !dbg !9109
  %1337 = xor i32 %1327, %1336, !dbg !9109
  %1338 = load i32*, i32** %8, align 8, !dbg !9109
  %1339 = getelementptr inbounds i32, i32* %1338, i64 6, !dbg !9109
  %1340 = load i32, i32* %1339, align 4, !dbg !9109
  %1341 = load i32*, i32** %8, align 8, !dbg !9109
  %1342 = getelementptr inbounds i32, i32* %1341, i64 7, !dbg !9109
  %1343 = load i32, i32* %1342, align 4, !dbg !9109
  %1344 = load i32*, i32** %8, align 8, !dbg !9109
  %1345 = getelementptr inbounds i32, i32* %1344, i64 0, !dbg !9109
  %1346 = load i32, i32* %1345, align 4, !dbg !9109
  %1347 = or i32 %1343, %1346, !dbg !9109
  %1348 = and i32 %1340, %1347, !dbg !9109
  %1349 = load i32*, i32** %8, align 8, !dbg !9109
  %1350 = getelementptr inbounds i32, i32* %1349, i64 7, !dbg !9109
  %1351 = load i32, i32* %1350, align 4, !dbg !9109
  %1352 = load i32*, i32** %8, align 8, !dbg !9109
  %1353 = getelementptr inbounds i32, i32* %1352, i64 0, !dbg !9109
  %1354 = load i32, i32* %1353, align 4, !dbg !9109
  %1355 = and i32 %1351, %1354, !dbg !9109
  %1356 = or i32 %1348, %1355, !dbg !9109
  %1357 = add i32 %1337, %1356, !dbg !9109
  %1358 = load i32*, i32** %8, align 8, !dbg !9109
  %1359 = getelementptr inbounds i32, i32* %1358, i64 5, !dbg !9109
  %1360 = load i32, i32* %1359, align 4, !dbg !9109
  %1361 = add i32 %1360, %1357, !dbg !9109
  store i32 %1361, i32* %1359, align 4, !dbg !9109
  %1362 = load i32*, i32** %8, align 8, !dbg !9110
  %1363 = getelementptr inbounds i32, i32* %1362, i64 1, !dbg !9110
  %1364 = load i32, i32* %1363, align 4, !dbg !9110
  %1365 = lshr i32 %1364, 6, !dbg !9110
  %1366 = load i32*, i32** %8, align 8, !dbg !9110
  %1367 = getelementptr inbounds i32, i32* %1366, i64 1, !dbg !9110
  %1368 = load i32, i32* %1367, align 4, !dbg !9110
  %1369 = shl i32 %1368, 26, !dbg !9110
  %1370 = or i32 %1365, %1369, !dbg !9110
  %1371 = load i32*, i32** %8, align 8, !dbg !9110
  %1372 = getelementptr inbounds i32, i32* %1371, i64 1, !dbg !9110
  %1373 = load i32, i32* %1372, align 4, !dbg !9110
  %1374 = lshr i32 %1373, 11, !dbg !9110
  %1375 = load i32*, i32** %8, align 8, !dbg !9110
  %1376 = getelementptr inbounds i32, i32* %1375, i64 1, !dbg !9110
  %1377 = load i32, i32* %1376, align 4, !dbg !9110
  %1378 = shl i32 %1377, 21, !dbg !9110
  %1379 = or i32 %1374, %1378, !dbg !9110
  %1380 = xor i32 %1370, %1379, !dbg !9110
  %1381 = load i32*, i32** %8, align 8, !dbg !9110
  %1382 = getelementptr inbounds i32, i32* %1381, i64 1, !dbg !9110
  %1383 = load i32, i32* %1382, align 4, !dbg !9110
  %1384 = lshr i32 %1383, 25, !dbg !9110
  %1385 = load i32*, i32** %8, align 8, !dbg !9110
  %1386 = getelementptr inbounds i32, i32* %1385, i64 1, !dbg !9110
  %1387 = load i32, i32* %1386, align 4, !dbg !9110
  %1388 = shl i32 %1387, 7, !dbg !9110
  %1389 = or i32 %1384, %1388, !dbg !9110
  %1390 = xor i32 %1380, %1389, !dbg !9110
  %1391 = load i32*, i32** %8, align 8, !dbg !9110
  %1392 = getelementptr inbounds i32, i32* %1391, i64 1, !dbg !9110
  %1393 = load i32, i32* %1392, align 4, !dbg !9110
  %1394 = load i32*, i32** %8, align 8, !dbg !9110
  %1395 = getelementptr inbounds i32, i32* %1394, i64 2, !dbg !9110
  %1396 = load i32, i32* %1395, align 4, !dbg !9110
  %1397 = load i32*, i32** %8, align 8, !dbg !9110
  %1398 = getelementptr inbounds i32, i32* %1397, i64 3, !dbg !9110
  %1399 = load i32, i32* %1398, align 4, !dbg !9110
  %1400 = xor i32 %1396, %1399, !dbg !9110
  %1401 = and i32 %1393, %1400, !dbg !9110
  %1402 = load i32*, i32** %8, align 8, !dbg !9110
  %1403 = getelementptr inbounds i32, i32* %1402, i64 3, !dbg !9110
  %1404 = load i32, i32* %1403, align 4, !dbg !9110
  %1405 = xor i32 %1401, %1404, !dbg !9110
  %1406 = add i32 %1390, %1405, !dbg !9110
  %1407 = load i32*, i32** %7, align 8, !dbg !9110
  %1408 = load i32, i32* %9, align 4, !dbg !9110
  %1409 = add nsw i32 11, %1408, !dbg !9110
  %1410 = sext i32 %1409 to i64, !dbg !9110
  %1411 = getelementptr inbounds i32, i32* %1407, i64 %1410, !dbg !9110
  %1412 = load i32, i32* %1411, align 4, !dbg !9110
  %1413 = add i32 %1406, %1412, !dbg !9110
  %1414 = load i32, i32* %9, align 4, !dbg !9110
  %1415 = add nsw i32 11, %1414, !dbg !9110
  %1416 = sext i32 %1415 to i64, !dbg !9110
  %1417 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %1416, !dbg !9110
  %1418 = load i32, i32* %1417, align 4, !dbg !9110
  %1419 = add i32 %1413, %1418, !dbg !9110
  %1420 = load i32*, i32** %8, align 8, !dbg !9110
  %1421 = getelementptr inbounds i32, i32* %1420, i64 4, !dbg !9110
  %1422 = load i32, i32* %1421, align 4, !dbg !9110
  %1423 = add i32 %1422, %1419, !dbg !9110
  store i32 %1423, i32* %1421, align 4, !dbg !9110
  %1424 = load i32*, i32** %8, align 8, !dbg !9110
  %1425 = getelementptr inbounds i32, i32* %1424, i64 4, !dbg !9110
  %1426 = load i32, i32* %1425, align 4, !dbg !9110
  %1427 = load i32*, i32** %8, align 8, !dbg !9110
  %1428 = getelementptr inbounds i32, i32* %1427, i64 0, !dbg !9110
  %1429 = load i32, i32* %1428, align 4, !dbg !9110
  %1430 = add i32 %1429, %1426, !dbg !9110
  store i32 %1430, i32* %1428, align 4, !dbg !9110
  %1431 = load i32*, i32** %8, align 8, !dbg !9110
  %1432 = getelementptr inbounds i32, i32* %1431, i64 5, !dbg !9110
  %1433 = load i32, i32* %1432, align 4, !dbg !9110
  %1434 = lshr i32 %1433, 2, !dbg !9110
  %1435 = load i32*, i32** %8, align 8, !dbg !9110
  %1436 = getelementptr inbounds i32, i32* %1435, i64 5, !dbg !9110
  %1437 = load i32, i32* %1436, align 4, !dbg !9110
  %1438 = shl i32 %1437, 30, !dbg !9110
  %1439 = or i32 %1434, %1438, !dbg !9110
  %1440 = load i32*, i32** %8, align 8, !dbg !9110
  %1441 = getelementptr inbounds i32, i32* %1440, i64 5, !dbg !9110
  %1442 = load i32, i32* %1441, align 4, !dbg !9110
  %1443 = lshr i32 %1442, 13, !dbg !9110
  %1444 = load i32*, i32** %8, align 8, !dbg !9110
  %1445 = getelementptr inbounds i32, i32* %1444, i64 5, !dbg !9110
  %1446 = load i32, i32* %1445, align 4, !dbg !9110
  %1447 = shl i32 %1446, 19, !dbg !9110
  %1448 = or i32 %1443, %1447, !dbg !9110
  %1449 = xor i32 %1439, %1448, !dbg !9110
  %1450 = load i32*, i32** %8, align 8, !dbg !9110
  %1451 = getelementptr inbounds i32, i32* %1450, i64 5, !dbg !9110
  %1452 = load i32, i32* %1451, align 4, !dbg !9110
  %1453 = lshr i32 %1452, 22, !dbg !9110
  %1454 = load i32*, i32** %8, align 8, !dbg !9110
  %1455 = getelementptr inbounds i32, i32* %1454, i64 5, !dbg !9110
  %1456 = load i32, i32* %1455, align 4, !dbg !9110
  %1457 = shl i32 %1456, 10, !dbg !9110
  %1458 = or i32 %1453, %1457, !dbg !9110
  %1459 = xor i32 %1449, %1458, !dbg !9110
  %1460 = load i32*, i32** %8, align 8, !dbg !9110
  %1461 = getelementptr inbounds i32, i32* %1460, i64 5, !dbg !9110
  %1462 = load i32, i32* %1461, align 4, !dbg !9110
  %1463 = load i32*, i32** %8, align 8, !dbg !9110
  %1464 = getelementptr inbounds i32, i32* %1463, i64 6, !dbg !9110
  %1465 = load i32, i32* %1464, align 4, !dbg !9110
  %1466 = load i32*, i32** %8, align 8, !dbg !9110
  %1467 = getelementptr inbounds i32, i32* %1466, i64 7, !dbg !9110
  %1468 = load i32, i32* %1467, align 4, !dbg !9110
  %1469 = or i32 %1465, %1468, !dbg !9110
  %1470 = and i32 %1462, %1469, !dbg !9110
  %1471 = load i32*, i32** %8, align 8, !dbg !9110
  %1472 = getelementptr inbounds i32, i32* %1471, i64 6, !dbg !9110
  %1473 = load i32, i32* %1472, align 4, !dbg !9110
  %1474 = load i32*, i32** %8, align 8, !dbg !9110
  %1475 = getelementptr inbounds i32, i32* %1474, i64 7, !dbg !9110
  %1476 = load i32, i32* %1475, align 4, !dbg !9110
  %1477 = and i32 %1473, %1476, !dbg !9110
  %1478 = or i32 %1470, %1477, !dbg !9110
  %1479 = add i32 %1459, %1478, !dbg !9110
  %1480 = load i32*, i32** %8, align 8, !dbg !9110
  %1481 = getelementptr inbounds i32, i32* %1480, i64 4, !dbg !9110
  %1482 = load i32, i32* %1481, align 4, !dbg !9110
  %1483 = add i32 %1482, %1479, !dbg !9110
  store i32 %1483, i32* %1481, align 4, !dbg !9110
  %1484 = load i32*, i32** %8, align 8, !dbg !9111
  %1485 = getelementptr inbounds i32, i32* %1484, i64 0, !dbg !9111
  %1486 = load i32, i32* %1485, align 4, !dbg !9111
  %1487 = lshr i32 %1486, 6, !dbg !9111
  %1488 = load i32*, i32** %8, align 8, !dbg !9111
  %1489 = getelementptr inbounds i32, i32* %1488, i64 0, !dbg !9111
  %1490 = load i32, i32* %1489, align 4, !dbg !9111
  %1491 = shl i32 %1490, 26, !dbg !9111
  %1492 = or i32 %1487, %1491, !dbg !9111
  %1493 = load i32*, i32** %8, align 8, !dbg !9111
  %1494 = getelementptr inbounds i32, i32* %1493, i64 0, !dbg !9111
  %1495 = load i32, i32* %1494, align 4, !dbg !9111
  %1496 = lshr i32 %1495, 11, !dbg !9111
  %1497 = load i32*, i32** %8, align 8, !dbg !9111
  %1498 = getelementptr inbounds i32, i32* %1497, i64 0, !dbg !9111
  %1499 = load i32, i32* %1498, align 4, !dbg !9111
  %1500 = shl i32 %1499, 21, !dbg !9111
  %1501 = or i32 %1496, %1500, !dbg !9111
  %1502 = xor i32 %1492, %1501, !dbg !9111
  %1503 = load i32*, i32** %8, align 8, !dbg !9111
  %1504 = getelementptr inbounds i32, i32* %1503, i64 0, !dbg !9111
  %1505 = load i32, i32* %1504, align 4, !dbg !9111
  %1506 = lshr i32 %1505, 25, !dbg !9111
  %1507 = load i32*, i32** %8, align 8, !dbg !9111
  %1508 = getelementptr inbounds i32, i32* %1507, i64 0, !dbg !9111
  %1509 = load i32, i32* %1508, align 4, !dbg !9111
  %1510 = shl i32 %1509, 7, !dbg !9111
  %1511 = or i32 %1506, %1510, !dbg !9111
  %1512 = xor i32 %1502, %1511, !dbg !9111
  %1513 = load i32*, i32** %8, align 8, !dbg !9111
  %1514 = getelementptr inbounds i32, i32* %1513, i64 0, !dbg !9111
  %1515 = load i32, i32* %1514, align 4, !dbg !9111
  %1516 = load i32*, i32** %8, align 8, !dbg !9111
  %1517 = getelementptr inbounds i32, i32* %1516, i64 1, !dbg !9111
  %1518 = load i32, i32* %1517, align 4, !dbg !9111
  %1519 = load i32*, i32** %8, align 8, !dbg !9111
  %1520 = getelementptr inbounds i32, i32* %1519, i64 2, !dbg !9111
  %1521 = load i32, i32* %1520, align 4, !dbg !9111
  %1522 = xor i32 %1518, %1521, !dbg !9111
  %1523 = and i32 %1515, %1522, !dbg !9111
  %1524 = load i32*, i32** %8, align 8, !dbg !9111
  %1525 = getelementptr inbounds i32, i32* %1524, i64 2, !dbg !9111
  %1526 = load i32, i32* %1525, align 4, !dbg !9111
  %1527 = xor i32 %1523, %1526, !dbg !9111
  %1528 = add i32 %1512, %1527, !dbg !9111
  %1529 = load i32*, i32** %7, align 8, !dbg !9111
  %1530 = load i32, i32* %9, align 4, !dbg !9111
  %1531 = add nsw i32 12, %1530, !dbg !9111
  %1532 = sext i32 %1531 to i64, !dbg !9111
  %1533 = getelementptr inbounds i32, i32* %1529, i64 %1532, !dbg !9111
  %1534 = load i32, i32* %1533, align 4, !dbg !9111
  %1535 = add i32 %1528, %1534, !dbg !9111
  %1536 = load i32, i32* %9, align 4, !dbg !9111
  %1537 = add nsw i32 12, %1536, !dbg !9111
  %1538 = sext i32 %1537 to i64, !dbg !9111
  %1539 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %1538, !dbg !9111
  %1540 = load i32, i32* %1539, align 4, !dbg !9111
  %1541 = add i32 %1535, %1540, !dbg !9111
  %1542 = load i32*, i32** %8, align 8, !dbg !9111
  %1543 = getelementptr inbounds i32, i32* %1542, i64 3, !dbg !9111
  %1544 = load i32, i32* %1543, align 4, !dbg !9111
  %1545 = add i32 %1544, %1541, !dbg !9111
  store i32 %1545, i32* %1543, align 4, !dbg !9111
  %1546 = load i32*, i32** %8, align 8, !dbg !9111
  %1547 = getelementptr inbounds i32, i32* %1546, i64 3, !dbg !9111
  %1548 = load i32, i32* %1547, align 4, !dbg !9111
  %1549 = load i32*, i32** %8, align 8, !dbg !9111
  %1550 = getelementptr inbounds i32, i32* %1549, i64 7, !dbg !9111
  %1551 = load i32, i32* %1550, align 4, !dbg !9111
  %1552 = add i32 %1551, %1548, !dbg !9111
  store i32 %1552, i32* %1550, align 4, !dbg !9111
  %1553 = load i32*, i32** %8, align 8, !dbg !9111
  %1554 = getelementptr inbounds i32, i32* %1553, i64 4, !dbg !9111
  %1555 = load i32, i32* %1554, align 4, !dbg !9111
  %1556 = lshr i32 %1555, 2, !dbg !9111
  %1557 = load i32*, i32** %8, align 8, !dbg !9111
  %1558 = getelementptr inbounds i32, i32* %1557, i64 4, !dbg !9111
  %1559 = load i32, i32* %1558, align 4, !dbg !9111
  %1560 = shl i32 %1559, 30, !dbg !9111
  %1561 = or i32 %1556, %1560, !dbg !9111
  %1562 = load i32*, i32** %8, align 8, !dbg !9111
  %1563 = getelementptr inbounds i32, i32* %1562, i64 4, !dbg !9111
  %1564 = load i32, i32* %1563, align 4, !dbg !9111
  %1565 = lshr i32 %1564, 13, !dbg !9111
  %1566 = load i32*, i32** %8, align 8, !dbg !9111
  %1567 = getelementptr inbounds i32, i32* %1566, i64 4, !dbg !9111
  %1568 = load i32, i32* %1567, align 4, !dbg !9111
  %1569 = shl i32 %1568, 19, !dbg !9111
  %1570 = or i32 %1565, %1569, !dbg !9111
  %1571 = xor i32 %1561, %1570, !dbg !9111
  %1572 = load i32*, i32** %8, align 8, !dbg !9111
  %1573 = getelementptr inbounds i32, i32* %1572, i64 4, !dbg !9111
  %1574 = load i32, i32* %1573, align 4, !dbg !9111
  %1575 = lshr i32 %1574, 22, !dbg !9111
  %1576 = load i32*, i32** %8, align 8, !dbg !9111
  %1577 = getelementptr inbounds i32, i32* %1576, i64 4, !dbg !9111
  %1578 = load i32, i32* %1577, align 4, !dbg !9111
  %1579 = shl i32 %1578, 10, !dbg !9111
  %1580 = or i32 %1575, %1579, !dbg !9111
  %1581 = xor i32 %1571, %1580, !dbg !9111
  %1582 = load i32*, i32** %8, align 8, !dbg !9111
  %1583 = getelementptr inbounds i32, i32* %1582, i64 4, !dbg !9111
  %1584 = load i32, i32* %1583, align 4, !dbg !9111
  %1585 = load i32*, i32** %8, align 8, !dbg !9111
  %1586 = getelementptr inbounds i32, i32* %1585, i64 5, !dbg !9111
  %1587 = load i32, i32* %1586, align 4, !dbg !9111
  %1588 = load i32*, i32** %8, align 8, !dbg !9111
  %1589 = getelementptr inbounds i32, i32* %1588, i64 6, !dbg !9111
  %1590 = load i32, i32* %1589, align 4, !dbg !9111
  %1591 = or i32 %1587, %1590, !dbg !9111
  %1592 = and i32 %1584, %1591, !dbg !9111
  %1593 = load i32*, i32** %8, align 8, !dbg !9111
  %1594 = getelementptr inbounds i32, i32* %1593, i64 5, !dbg !9111
  %1595 = load i32, i32* %1594, align 4, !dbg !9111
  %1596 = load i32*, i32** %8, align 8, !dbg !9111
  %1597 = getelementptr inbounds i32, i32* %1596, i64 6, !dbg !9111
  %1598 = load i32, i32* %1597, align 4, !dbg !9111
  %1599 = and i32 %1595, %1598, !dbg !9111
  %1600 = or i32 %1592, %1599, !dbg !9111
  %1601 = add i32 %1581, %1600, !dbg !9111
  %1602 = load i32*, i32** %8, align 8, !dbg !9111
  %1603 = getelementptr inbounds i32, i32* %1602, i64 3, !dbg !9111
  %1604 = load i32, i32* %1603, align 4, !dbg !9111
  %1605 = add i32 %1604, %1601, !dbg !9111
  store i32 %1605, i32* %1603, align 4, !dbg !9111
  %1606 = load i32*, i32** %8, align 8, !dbg !9112
  %1607 = getelementptr inbounds i32, i32* %1606, i64 7, !dbg !9112
  %1608 = load i32, i32* %1607, align 4, !dbg !9112
  %1609 = lshr i32 %1608, 6, !dbg !9112
  %1610 = load i32*, i32** %8, align 8, !dbg !9112
  %1611 = getelementptr inbounds i32, i32* %1610, i64 7, !dbg !9112
  %1612 = load i32, i32* %1611, align 4, !dbg !9112
  %1613 = shl i32 %1612, 26, !dbg !9112
  %1614 = or i32 %1609, %1613, !dbg !9112
  %1615 = load i32*, i32** %8, align 8, !dbg !9112
  %1616 = getelementptr inbounds i32, i32* %1615, i64 7, !dbg !9112
  %1617 = load i32, i32* %1616, align 4, !dbg !9112
  %1618 = lshr i32 %1617, 11, !dbg !9112
  %1619 = load i32*, i32** %8, align 8, !dbg !9112
  %1620 = getelementptr inbounds i32, i32* %1619, i64 7, !dbg !9112
  %1621 = load i32, i32* %1620, align 4, !dbg !9112
  %1622 = shl i32 %1621, 21, !dbg !9112
  %1623 = or i32 %1618, %1622, !dbg !9112
  %1624 = xor i32 %1614, %1623, !dbg !9112
  %1625 = load i32*, i32** %8, align 8, !dbg !9112
  %1626 = getelementptr inbounds i32, i32* %1625, i64 7, !dbg !9112
  %1627 = load i32, i32* %1626, align 4, !dbg !9112
  %1628 = lshr i32 %1627, 25, !dbg !9112
  %1629 = load i32*, i32** %8, align 8, !dbg !9112
  %1630 = getelementptr inbounds i32, i32* %1629, i64 7, !dbg !9112
  %1631 = load i32, i32* %1630, align 4, !dbg !9112
  %1632 = shl i32 %1631, 7, !dbg !9112
  %1633 = or i32 %1628, %1632, !dbg !9112
  %1634 = xor i32 %1624, %1633, !dbg !9112
  %1635 = load i32*, i32** %8, align 8, !dbg !9112
  %1636 = getelementptr inbounds i32, i32* %1635, i64 7, !dbg !9112
  %1637 = load i32, i32* %1636, align 4, !dbg !9112
  %1638 = load i32*, i32** %8, align 8, !dbg !9112
  %1639 = getelementptr inbounds i32, i32* %1638, i64 0, !dbg !9112
  %1640 = load i32, i32* %1639, align 4, !dbg !9112
  %1641 = load i32*, i32** %8, align 8, !dbg !9112
  %1642 = getelementptr inbounds i32, i32* %1641, i64 1, !dbg !9112
  %1643 = load i32, i32* %1642, align 4, !dbg !9112
  %1644 = xor i32 %1640, %1643, !dbg !9112
  %1645 = and i32 %1637, %1644, !dbg !9112
  %1646 = load i32*, i32** %8, align 8, !dbg !9112
  %1647 = getelementptr inbounds i32, i32* %1646, i64 1, !dbg !9112
  %1648 = load i32, i32* %1647, align 4, !dbg !9112
  %1649 = xor i32 %1645, %1648, !dbg !9112
  %1650 = add i32 %1634, %1649, !dbg !9112
  %1651 = load i32*, i32** %7, align 8, !dbg !9112
  %1652 = load i32, i32* %9, align 4, !dbg !9112
  %1653 = add nsw i32 13, %1652, !dbg !9112
  %1654 = sext i32 %1653 to i64, !dbg !9112
  %1655 = getelementptr inbounds i32, i32* %1651, i64 %1654, !dbg !9112
  %1656 = load i32, i32* %1655, align 4, !dbg !9112
  %1657 = add i32 %1650, %1656, !dbg !9112
  %1658 = load i32, i32* %9, align 4, !dbg !9112
  %1659 = add nsw i32 13, %1658, !dbg !9112
  %1660 = sext i32 %1659 to i64, !dbg !9112
  %1661 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %1660, !dbg !9112
  %1662 = load i32, i32* %1661, align 4, !dbg !9112
  %1663 = add i32 %1657, %1662, !dbg !9112
  %1664 = load i32*, i32** %8, align 8, !dbg !9112
  %1665 = getelementptr inbounds i32, i32* %1664, i64 2, !dbg !9112
  %1666 = load i32, i32* %1665, align 4, !dbg !9112
  %1667 = add i32 %1666, %1663, !dbg !9112
  store i32 %1667, i32* %1665, align 4, !dbg !9112
  %1668 = load i32*, i32** %8, align 8, !dbg !9112
  %1669 = getelementptr inbounds i32, i32* %1668, i64 2, !dbg !9112
  %1670 = load i32, i32* %1669, align 4, !dbg !9112
  %1671 = load i32*, i32** %8, align 8, !dbg !9112
  %1672 = getelementptr inbounds i32, i32* %1671, i64 6, !dbg !9112
  %1673 = load i32, i32* %1672, align 4, !dbg !9112
  %1674 = add i32 %1673, %1670, !dbg !9112
  store i32 %1674, i32* %1672, align 4, !dbg !9112
  %1675 = load i32*, i32** %8, align 8, !dbg !9112
  %1676 = getelementptr inbounds i32, i32* %1675, i64 3, !dbg !9112
  %1677 = load i32, i32* %1676, align 4, !dbg !9112
  %1678 = lshr i32 %1677, 2, !dbg !9112
  %1679 = load i32*, i32** %8, align 8, !dbg !9112
  %1680 = getelementptr inbounds i32, i32* %1679, i64 3, !dbg !9112
  %1681 = load i32, i32* %1680, align 4, !dbg !9112
  %1682 = shl i32 %1681, 30, !dbg !9112
  %1683 = or i32 %1678, %1682, !dbg !9112
  %1684 = load i32*, i32** %8, align 8, !dbg !9112
  %1685 = getelementptr inbounds i32, i32* %1684, i64 3, !dbg !9112
  %1686 = load i32, i32* %1685, align 4, !dbg !9112
  %1687 = lshr i32 %1686, 13, !dbg !9112
  %1688 = load i32*, i32** %8, align 8, !dbg !9112
  %1689 = getelementptr inbounds i32, i32* %1688, i64 3, !dbg !9112
  %1690 = load i32, i32* %1689, align 4, !dbg !9112
  %1691 = shl i32 %1690, 19, !dbg !9112
  %1692 = or i32 %1687, %1691, !dbg !9112
  %1693 = xor i32 %1683, %1692, !dbg !9112
  %1694 = load i32*, i32** %8, align 8, !dbg !9112
  %1695 = getelementptr inbounds i32, i32* %1694, i64 3, !dbg !9112
  %1696 = load i32, i32* %1695, align 4, !dbg !9112
  %1697 = lshr i32 %1696, 22, !dbg !9112
  %1698 = load i32*, i32** %8, align 8, !dbg !9112
  %1699 = getelementptr inbounds i32, i32* %1698, i64 3, !dbg !9112
  %1700 = load i32, i32* %1699, align 4, !dbg !9112
  %1701 = shl i32 %1700, 10, !dbg !9112
  %1702 = or i32 %1697, %1701, !dbg !9112
  %1703 = xor i32 %1693, %1702, !dbg !9112
  %1704 = load i32*, i32** %8, align 8, !dbg !9112
  %1705 = getelementptr inbounds i32, i32* %1704, i64 3, !dbg !9112
  %1706 = load i32, i32* %1705, align 4, !dbg !9112
  %1707 = load i32*, i32** %8, align 8, !dbg !9112
  %1708 = getelementptr inbounds i32, i32* %1707, i64 4, !dbg !9112
  %1709 = load i32, i32* %1708, align 4, !dbg !9112
  %1710 = load i32*, i32** %8, align 8, !dbg !9112
  %1711 = getelementptr inbounds i32, i32* %1710, i64 5, !dbg !9112
  %1712 = load i32, i32* %1711, align 4, !dbg !9112
  %1713 = or i32 %1709, %1712, !dbg !9112
  %1714 = and i32 %1706, %1713, !dbg !9112
  %1715 = load i32*, i32** %8, align 8, !dbg !9112
  %1716 = getelementptr inbounds i32, i32* %1715, i64 4, !dbg !9112
  %1717 = load i32, i32* %1716, align 4, !dbg !9112
  %1718 = load i32*, i32** %8, align 8, !dbg !9112
  %1719 = getelementptr inbounds i32, i32* %1718, i64 5, !dbg !9112
  %1720 = load i32, i32* %1719, align 4, !dbg !9112
  %1721 = and i32 %1717, %1720, !dbg !9112
  %1722 = or i32 %1714, %1721, !dbg !9112
  %1723 = add i32 %1703, %1722, !dbg !9112
  %1724 = load i32*, i32** %8, align 8, !dbg !9112
  %1725 = getelementptr inbounds i32, i32* %1724, i64 2, !dbg !9112
  %1726 = load i32, i32* %1725, align 4, !dbg !9112
  %1727 = add i32 %1726, %1723, !dbg !9112
  store i32 %1727, i32* %1725, align 4, !dbg !9112
  %1728 = load i32*, i32** %8, align 8, !dbg !9113
  %1729 = getelementptr inbounds i32, i32* %1728, i64 6, !dbg !9113
  %1730 = load i32, i32* %1729, align 4, !dbg !9113
  %1731 = lshr i32 %1730, 6, !dbg !9113
  %1732 = load i32*, i32** %8, align 8, !dbg !9113
  %1733 = getelementptr inbounds i32, i32* %1732, i64 6, !dbg !9113
  %1734 = load i32, i32* %1733, align 4, !dbg !9113
  %1735 = shl i32 %1734, 26, !dbg !9113
  %1736 = or i32 %1731, %1735, !dbg !9113
  %1737 = load i32*, i32** %8, align 8, !dbg !9113
  %1738 = getelementptr inbounds i32, i32* %1737, i64 6, !dbg !9113
  %1739 = load i32, i32* %1738, align 4, !dbg !9113
  %1740 = lshr i32 %1739, 11, !dbg !9113
  %1741 = load i32*, i32** %8, align 8, !dbg !9113
  %1742 = getelementptr inbounds i32, i32* %1741, i64 6, !dbg !9113
  %1743 = load i32, i32* %1742, align 4, !dbg !9113
  %1744 = shl i32 %1743, 21, !dbg !9113
  %1745 = or i32 %1740, %1744, !dbg !9113
  %1746 = xor i32 %1736, %1745, !dbg !9113
  %1747 = load i32*, i32** %8, align 8, !dbg !9113
  %1748 = getelementptr inbounds i32, i32* %1747, i64 6, !dbg !9113
  %1749 = load i32, i32* %1748, align 4, !dbg !9113
  %1750 = lshr i32 %1749, 25, !dbg !9113
  %1751 = load i32*, i32** %8, align 8, !dbg !9113
  %1752 = getelementptr inbounds i32, i32* %1751, i64 6, !dbg !9113
  %1753 = load i32, i32* %1752, align 4, !dbg !9113
  %1754 = shl i32 %1753, 7, !dbg !9113
  %1755 = or i32 %1750, %1754, !dbg !9113
  %1756 = xor i32 %1746, %1755, !dbg !9113
  %1757 = load i32*, i32** %8, align 8, !dbg !9113
  %1758 = getelementptr inbounds i32, i32* %1757, i64 6, !dbg !9113
  %1759 = load i32, i32* %1758, align 4, !dbg !9113
  %1760 = load i32*, i32** %8, align 8, !dbg !9113
  %1761 = getelementptr inbounds i32, i32* %1760, i64 7, !dbg !9113
  %1762 = load i32, i32* %1761, align 4, !dbg !9113
  %1763 = load i32*, i32** %8, align 8, !dbg !9113
  %1764 = getelementptr inbounds i32, i32* %1763, i64 0, !dbg !9113
  %1765 = load i32, i32* %1764, align 4, !dbg !9113
  %1766 = xor i32 %1762, %1765, !dbg !9113
  %1767 = and i32 %1759, %1766, !dbg !9113
  %1768 = load i32*, i32** %8, align 8, !dbg !9113
  %1769 = getelementptr inbounds i32, i32* %1768, i64 0, !dbg !9113
  %1770 = load i32, i32* %1769, align 4, !dbg !9113
  %1771 = xor i32 %1767, %1770, !dbg !9113
  %1772 = add i32 %1756, %1771, !dbg !9113
  %1773 = load i32*, i32** %7, align 8, !dbg !9113
  %1774 = load i32, i32* %9, align 4, !dbg !9113
  %1775 = add nsw i32 14, %1774, !dbg !9113
  %1776 = sext i32 %1775 to i64, !dbg !9113
  %1777 = getelementptr inbounds i32, i32* %1773, i64 %1776, !dbg !9113
  %1778 = load i32, i32* %1777, align 4, !dbg !9113
  %1779 = add i32 %1772, %1778, !dbg !9113
  %1780 = load i32, i32* %9, align 4, !dbg !9113
  %1781 = add nsw i32 14, %1780, !dbg !9113
  %1782 = sext i32 %1781 to i64, !dbg !9113
  %1783 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %1782, !dbg !9113
  %1784 = load i32, i32* %1783, align 4, !dbg !9113
  %1785 = add i32 %1779, %1784, !dbg !9113
  %1786 = load i32*, i32** %8, align 8, !dbg !9113
  %1787 = getelementptr inbounds i32, i32* %1786, i64 1, !dbg !9113
  %1788 = load i32, i32* %1787, align 4, !dbg !9113
  %1789 = add i32 %1788, %1785, !dbg !9113
  store i32 %1789, i32* %1787, align 4, !dbg !9113
  %1790 = load i32*, i32** %8, align 8, !dbg !9113
  %1791 = getelementptr inbounds i32, i32* %1790, i64 1, !dbg !9113
  %1792 = load i32, i32* %1791, align 4, !dbg !9113
  %1793 = load i32*, i32** %8, align 8, !dbg !9113
  %1794 = getelementptr inbounds i32, i32* %1793, i64 5, !dbg !9113
  %1795 = load i32, i32* %1794, align 4, !dbg !9113
  %1796 = add i32 %1795, %1792, !dbg !9113
  store i32 %1796, i32* %1794, align 4, !dbg !9113
  %1797 = load i32*, i32** %8, align 8, !dbg !9113
  %1798 = getelementptr inbounds i32, i32* %1797, i64 2, !dbg !9113
  %1799 = load i32, i32* %1798, align 4, !dbg !9113
  %1800 = lshr i32 %1799, 2, !dbg !9113
  %1801 = load i32*, i32** %8, align 8, !dbg !9113
  %1802 = getelementptr inbounds i32, i32* %1801, i64 2, !dbg !9113
  %1803 = load i32, i32* %1802, align 4, !dbg !9113
  %1804 = shl i32 %1803, 30, !dbg !9113
  %1805 = or i32 %1800, %1804, !dbg !9113
  %1806 = load i32*, i32** %8, align 8, !dbg !9113
  %1807 = getelementptr inbounds i32, i32* %1806, i64 2, !dbg !9113
  %1808 = load i32, i32* %1807, align 4, !dbg !9113
  %1809 = lshr i32 %1808, 13, !dbg !9113
  %1810 = load i32*, i32** %8, align 8, !dbg !9113
  %1811 = getelementptr inbounds i32, i32* %1810, i64 2, !dbg !9113
  %1812 = load i32, i32* %1811, align 4, !dbg !9113
  %1813 = shl i32 %1812, 19, !dbg !9113
  %1814 = or i32 %1809, %1813, !dbg !9113
  %1815 = xor i32 %1805, %1814, !dbg !9113
  %1816 = load i32*, i32** %8, align 8, !dbg !9113
  %1817 = getelementptr inbounds i32, i32* %1816, i64 2, !dbg !9113
  %1818 = load i32, i32* %1817, align 4, !dbg !9113
  %1819 = lshr i32 %1818, 22, !dbg !9113
  %1820 = load i32*, i32** %8, align 8, !dbg !9113
  %1821 = getelementptr inbounds i32, i32* %1820, i64 2, !dbg !9113
  %1822 = load i32, i32* %1821, align 4, !dbg !9113
  %1823 = shl i32 %1822, 10, !dbg !9113
  %1824 = or i32 %1819, %1823, !dbg !9113
  %1825 = xor i32 %1815, %1824, !dbg !9113
  %1826 = load i32*, i32** %8, align 8, !dbg !9113
  %1827 = getelementptr inbounds i32, i32* %1826, i64 2, !dbg !9113
  %1828 = load i32, i32* %1827, align 4, !dbg !9113
  %1829 = load i32*, i32** %8, align 8, !dbg !9113
  %1830 = getelementptr inbounds i32, i32* %1829, i64 3, !dbg !9113
  %1831 = load i32, i32* %1830, align 4, !dbg !9113
  %1832 = load i32*, i32** %8, align 8, !dbg !9113
  %1833 = getelementptr inbounds i32, i32* %1832, i64 4, !dbg !9113
  %1834 = load i32, i32* %1833, align 4, !dbg !9113
  %1835 = or i32 %1831, %1834, !dbg !9113
  %1836 = and i32 %1828, %1835, !dbg !9113
  %1837 = load i32*, i32** %8, align 8, !dbg !9113
  %1838 = getelementptr inbounds i32, i32* %1837, i64 3, !dbg !9113
  %1839 = load i32, i32* %1838, align 4, !dbg !9113
  %1840 = load i32*, i32** %8, align 8, !dbg !9113
  %1841 = getelementptr inbounds i32, i32* %1840, i64 4, !dbg !9113
  %1842 = load i32, i32* %1841, align 4, !dbg !9113
  %1843 = and i32 %1839, %1842, !dbg !9113
  %1844 = or i32 %1836, %1843, !dbg !9113
  %1845 = add i32 %1825, %1844, !dbg !9113
  %1846 = load i32*, i32** %8, align 8, !dbg !9113
  %1847 = getelementptr inbounds i32, i32* %1846, i64 1, !dbg !9113
  %1848 = load i32, i32* %1847, align 4, !dbg !9113
  %1849 = add i32 %1848, %1845, !dbg !9113
  store i32 %1849, i32* %1847, align 4, !dbg !9113
  %1850 = load i32*, i32** %8, align 8, !dbg !9114
  %1851 = getelementptr inbounds i32, i32* %1850, i64 5, !dbg !9114
  %1852 = load i32, i32* %1851, align 4, !dbg !9114
  %1853 = lshr i32 %1852, 6, !dbg !9114
  %1854 = load i32*, i32** %8, align 8, !dbg !9114
  %1855 = getelementptr inbounds i32, i32* %1854, i64 5, !dbg !9114
  %1856 = load i32, i32* %1855, align 4, !dbg !9114
  %1857 = shl i32 %1856, 26, !dbg !9114
  %1858 = or i32 %1853, %1857, !dbg !9114
  %1859 = load i32*, i32** %8, align 8, !dbg !9114
  %1860 = getelementptr inbounds i32, i32* %1859, i64 5, !dbg !9114
  %1861 = load i32, i32* %1860, align 4, !dbg !9114
  %1862 = lshr i32 %1861, 11, !dbg !9114
  %1863 = load i32*, i32** %8, align 8, !dbg !9114
  %1864 = getelementptr inbounds i32, i32* %1863, i64 5, !dbg !9114
  %1865 = load i32, i32* %1864, align 4, !dbg !9114
  %1866 = shl i32 %1865, 21, !dbg !9114
  %1867 = or i32 %1862, %1866, !dbg !9114
  %1868 = xor i32 %1858, %1867, !dbg !9114
  %1869 = load i32*, i32** %8, align 8, !dbg !9114
  %1870 = getelementptr inbounds i32, i32* %1869, i64 5, !dbg !9114
  %1871 = load i32, i32* %1870, align 4, !dbg !9114
  %1872 = lshr i32 %1871, 25, !dbg !9114
  %1873 = load i32*, i32** %8, align 8, !dbg !9114
  %1874 = getelementptr inbounds i32, i32* %1873, i64 5, !dbg !9114
  %1875 = load i32, i32* %1874, align 4, !dbg !9114
  %1876 = shl i32 %1875, 7, !dbg !9114
  %1877 = or i32 %1872, %1876, !dbg !9114
  %1878 = xor i32 %1868, %1877, !dbg !9114
  %1879 = load i32*, i32** %8, align 8, !dbg !9114
  %1880 = getelementptr inbounds i32, i32* %1879, i64 5, !dbg !9114
  %1881 = load i32, i32* %1880, align 4, !dbg !9114
  %1882 = load i32*, i32** %8, align 8, !dbg !9114
  %1883 = getelementptr inbounds i32, i32* %1882, i64 6, !dbg !9114
  %1884 = load i32, i32* %1883, align 4, !dbg !9114
  %1885 = load i32*, i32** %8, align 8, !dbg !9114
  %1886 = getelementptr inbounds i32, i32* %1885, i64 7, !dbg !9114
  %1887 = load i32, i32* %1886, align 4, !dbg !9114
  %1888 = xor i32 %1884, %1887, !dbg !9114
  %1889 = and i32 %1881, %1888, !dbg !9114
  %1890 = load i32*, i32** %8, align 8, !dbg !9114
  %1891 = getelementptr inbounds i32, i32* %1890, i64 7, !dbg !9114
  %1892 = load i32, i32* %1891, align 4, !dbg !9114
  %1893 = xor i32 %1889, %1892, !dbg !9114
  %1894 = add i32 %1878, %1893, !dbg !9114
  %1895 = load i32*, i32** %7, align 8, !dbg !9114
  %1896 = load i32, i32* %9, align 4, !dbg !9114
  %1897 = add nsw i32 15, %1896, !dbg !9114
  %1898 = sext i32 %1897 to i64, !dbg !9114
  %1899 = getelementptr inbounds i32, i32* %1895, i64 %1898, !dbg !9114
  %1900 = load i32, i32* %1899, align 4, !dbg !9114
  %1901 = add i32 %1894, %1900, !dbg !9114
  %1902 = load i32, i32* %9, align 4, !dbg !9114
  %1903 = add nsw i32 15, %1902, !dbg !9114
  %1904 = sext i32 %1903 to i64, !dbg !9114
  %1905 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZL4Krnd, i64 0, i64 %1904, !dbg !9114
  %1906 = load i32, i32* %1905, align 4, !dbg !9114
  %1907 = add i32 %1901, %1906, !dbg !9114
  %1908 = load i32*, i32** %8, align 8, !dbg !9114
  %1909 = getelementptr inbounds i32, i32* %1908, i64 0, !dbg !9114
  %1910 = load i32, i32* %1909, align 4, !dbg !9114
  %1911 = add i32 %1910, %1907, !dbg !9114
  store i32 %1911, i32* %1909, align 4, !dbg !9114
  %1912 = load i32*, i32** %8, align 8, !dbg !9114
  %1913 = getelementptr inbounds i32, i32* %1912, i64 0, !dbg !9114
  %1914 = load i32, i32* %1913, align 4, !dbg !9114
  %1915 = load i32*, i32** %8, align 8, !dbg !9114
  %1916 = getelementptr inbounds i32, i32* %1915, i64 4, !dbg !9114
  %1917 = load i32, i32* %1916, align 4, !dbg !9114
  %1918 = add i32 %1917, %1914, !dbg !9114
  store i32 %1918, i32* %1916, align 4, !dbg !9114
  %1919 = load i32*, i32** %8, align 8, !dbg !9114
  %1920 = getelementptr inbounds i32, i32* %1919, i64 1, !dbg !9114
  %1921 = load i32, i32* %1920, align 4, !dbg !9114
  %1922 = lshr i32 %1921, 2, !dbg !9114
  %1923 = load i32*, i32** %8, align 8, !dbg !9114
  %1924 = getelementptr inbounds i32, i32* %1923, i64 1, !dbg !9114
  %1925 = load i32, i32* %1924, align 4, !dbg !9114
  %1926 = shl i32 %1925, 30, !dbg !9114
  %1927 = or i32 %1922, %1926, !dbg !9114
  %1928 = load i32*, i32** %8, align 8, !dbg !9114
  %1929 = getelementptr inbounds i32, i32* %1928, i64 1, !dbg !9114
  %1930 = load i32, i32* %1929, align 4, !dbg !9114
  %1931 = lshr i32 %1930, 13, !dbg !9114
  %1932 = load i32*, i32** %8, align 8, !dbg !9114
  %1933 = getelementptr inbounds i32, i32* %1932, i64 1, !dbg !9114
  %1934 = load i32, i32* %1933, align 4, !dbg !9114
  %1935 = shl i32 %1934, 19, !dbg !9114
  %1936 = or i32 %1931, %1935, !dbg !9114
  %1937 = xor i32 %1927, %1936, !dbg !9114
  %1938 = load i32*, i32** %8, align 8, !dbg !9114
  %1939 = getelementptr inbounds i32, i32* %1938, i64 1, !dbg !9114
  %1940 = load i32, i32* %1939, align 4, !dbg !9114
  %1941 = lshr i32 %1940, 22, !dbg !9114
  %1942 = load i32*, i32** %8, align 8, !dbg !9114
  %1943 = getelementptr inbounds i32, i32* %1942, i64 1, !dbg !9114
  %1944 = load i32, i32* %1943, align 4, !dbg !9114
  %1945 = shl i32 %1944, 10, !dbg !9114
  %1946 = or i32 %1941, %1945, !dbg !9114
  %1947 = xor i32 %1937, %1946, !dbg !9114
  %1948 = load i32*, i32** %8, align 8, !dbg !9114
  %1949 = getelementptr inbounds i32, i32* %1948, i64 1, !dbg !9114
  %1950 = load i32, i32* %1949, align 4, !dbg !9114
  %1951 = load i32*, i32** %8, align 8, !dbg !9114
  %1952 = getelementptr inbounds i32, i32* %1951, i64 2, !dbg !9114
  %1953 = load i32, i32* %1952, align 4, !dbg !9114
  %1954 = load i32*, i32** %8, align 8, !dbg !9114
  %1955 = getelementptr inbounds i32, i32* %1954, i64 3, !dbg !9114
  %1956 = load i32, i32* %1955, align 4, !dbg !9114
  %1957 = or i32 %1953, %1956, !dbg !9114
  %1958 = and i32 %1950, %1957, !dbg !9114
  %1959 = load i32*, i32** %8, align 8, !dbg !9114
  %1960 = getelementptr inbounds i32, i32* %1959, i64 2, !dbg !9114
  %1961 = load i32, i32* %1960, align 4, !dbg !9114
  %1962 = load i32*, i32** %8, align 8, !dbg !9114
  %1963 = getelementptr inbounds i32, i32* %1962, i64 3, !dbg !9114
  %1964 = load i32, i32* %1963, align 4, !dbg !9114
  %1965 = and i32 %1961, %1964, !dbg !9114
  %1966 = or i32 %1958, %1965, !dbg !9114
  %1967 = add i32 %1947, %1966, !dbg !9114
  %1968 = load i32*, i32** %8, align 8, !dbg !9114
  %1969 = getelementptr inbounds i32, i32* %1968, i64 0, !dbg !9114
  %1970 = load i32, i32* %1969, align 4, !dbg !9114
  %1971 = add i32 %1970, %1967, !dbg !9114
  store i32 %1971, i32* %1969, align 4, !dbg !9114
  %1972 = load i32, i32* %9, align 4, !dbg !9115
  %1973 = icmp eq i32 %1972, 48, !dbg !9117
  br i1 %1973, label %1974, label %1975, !dbg !9118

1974:                                             ; preds = %19
  br label %3739, !dbg !9119

1975:                                             ; preds = %19
  %1976 = load i32*, i32** %7, align 8, !dbg !9120
  %1977 = load i32, i32* %9, align 4, !dbg !9120
  %1978 = add nsw i32 %1977, 0, !dbg !9120
  %1979 = add nsw i32 %1978, 14, !dbg !9120
  %1980 = sext i32 %1979 to i64, !dbg !9120
  %1981 = getelementptr inbounds i32, i32* %1976, i64 %1980, !dbg !9120
  %1982 = load i32, i32* %1981, align 4, !dbg !9120
  %1983 = lshr i32 %1982, 17, !dbg !9120
  %1984 = load i32*, i32** %7, align 8, !dbg !9120
  %1985 = load i32, i32* %9, align 4, !dbg !9120
  %1986 = add nsw i32 %1985, 0, !dbg !9120
  %1987 = add nsw i32 %1986, 14, !dbg !9120
  %1988 = sext i32 %1987 to i64, !dbg !9120
  %1989 = getelementptr inbounds i32, i32* %1984, i64 %1988, !dbg !9120
  %1990 = load i32, i32* %1989, align 4, !dbg !9120
  %1991 = shl i32 %1990, 15, !dbg !9120
  %1992 = or i32 %1983, %1991, !dbg !9120
  %1993 = load i32*, i32** %7, align 8, !dbg !9120
  %1994 = load i32, i32* %9, align 4, !dbg !9120
  %1995 = add nsw i32 %1994, 0, !dbg !9120
  %1996 = add nsw i32 %1995, 14, !dbg !9120
  %1997 = sext i32 %1996 to i64, !dbg !9120
  %1998 = getelementptr inbounds i32, i32* %1993, i64 %1997, !dbg !9120
  %1999 = load i32, i32* %1998, align 4, !dbg !9120
  %2000 = lshr i32 %1999, 19, !dbg !9120
  %2001 = load i32*, i32** %7, align 8, !dbg !9120
  %2002 = load i32, i32* %9, align 4, !dbg !9120
  %2003 = add nsw i32 %2002, 0, !dbg !9120
  %2004 = add nsw i32 %2003, 14, !dbg !9120
  %2005 = sext i32 %2004 to i64, !dbg !9120
  %2006 = getelementptr inbounds i32, i32* %2001, i64 %2005, !dbg !9120
  %2007 = load i32, i32* %2006, align 4, !dbg !9120
  %2008 = shl i32 %2007, 13, !dbg !9120
  %2009 = or i32 %2000, %2008, !dbg !9120
  %2010 = xor i32 %1992, %2009, !dbg !9120
  %2011 = load i32*, i32** %7, align 8, !dbg !9120
  %2012 = load i32, i32* %9, align 4, !dbg !9120
  %2013 = add nsw i32 %2012, 0, !dbg !9120
  %2014 = add nsw i32 %2013, 14, !dbg !9120
  %2015 = sext i32 %2014 to i64, !dbg !9120
  %2016 = getelementptr inbounds i32, i32* %2011, i64 %2015, !dbg !9120
  %2017 = load i32, i32* %2016, align 4, !dbg !9120
  %2018 = lshr i32 %2017, 10, !dbg !9120
  %2019 = xor i32 %2010, %2018, !dbg !9120
  %2020 = load i32*, i32** %7, align 8, !dbg !9120
  %2021 = load i32, i32* %9, align 4, !dbg !9120
  %2022 = add nsw i32 %2021, 0, !dbg !9120
  %2023 = add nsw i32 %2022, 9, !dbg !9120
  %2024 = sext i32 %2023 to i64, !dbg !9120
  %2025 = getelementptr inbounds i32, i32* %2020, i64 %2024, !dbg !9120
  %2026 = load i32, i32* %2025, align 4, !dbg !9120
  %2027 = add i32 %2019, %2026, !dbg !9120
  %2028 = load i32*, i32** %7, align 8, !dbg !9120
  %2029 = load i32, i32* %9, align 4, !dbg !9120
  %2030 = add nsw i32 %2029, 0, !dbg !9120
  %2031 = add nsw i32 %2030, 1, !dbg !9120
  %2032 = sext i32 %2031 to i64, !dbg !9120
  %2033 = getelementptr inbounds i32, i32* %2028, i64 %2032, !dbg !9120
  %2034 = load i32, i32* %2033, align 4, !dbg !9120
  %2035 = lshr i32 %2034, 7, !dbg !9120
  %2036 = load i32*, i32** %7, align 8, !dbg !9120
  %2037 = load i32, i32* %9, align 4, !dbg !9120
  %2038 = add nsw i32 %2037, 0, !dbg !9120
  %2039 = add nsw i32 %2038, 1, !dbg !9120
  %2040 = sext i32 %2039 to i64, !dbg !9120
  %2041 = getelementptr inbounds i32, i32* %2036, i64 %2040, !dbg !9120
  %2042 = load i32, i32* %2041, align 4, !dbg !9120
  %2043 = shl i32 %2042, 25, !dbg !9120
  %2044 = or i32 %2035, %2043, !dbg !9120
  %2045 = load i32*, i32** %7, align 8, !dbg !9120
  %2046 = load i32, i32* %9, align 4, !dbg !9120
  %2047 = add nsw i32 %2046, 0, !dbg !9120
  %2048 = add nsw i32 %2047, 1, !dbg !9120
  %2049 = sext i32 %2048 to i64, !dbg !9120
  %2050 = getelementptr inbounds i32, i32* %2045, i64 %2049, !dbg !9120
  %2051 = load i32, i32* %2050, align 4, !dbg !9120
  %2052 = lshr i32 %2051, 18, !dbg !9120
  %2053 = load i32*, i32** %7, align 8, !dbg !9120
  %2054 = load i32, i32* %9, align 4, !dbg !9120
  %2055 = add nsw i32 %2054, 0, !dbg !9120
  %2056 = add nsw i32 %2055, 1, !dbg !9120
  %2057 = sext i32 %2056 to i64, !dbg !9120
  %2058 = getelementptr inbounds i32, i32* %2053, i64 %2057, !dbg !9120
  %2059 = load i32, i32* %2058, align 4, !dbg !9120
  %2060 = shl i32 %2059, 14, !dbg !9120
  %2061 = or i32 %2052, %2060, !dbg !9120
  %2062 = xor i32 %2044, %2061, !dbg !9120
  %2063 = load i32*, i32** %7, align 8, !dbg !9120
  %2064 = load i32, i32* %9, align 4, !dbg !9120
  %2065 = add nsw i32 %2064, 0, !dbg !9120
  %2066 = add nsw i32 %2065, 1, !dbg !9120
  %2067 = sext i32 %2066 to i64, !dbg !9120
  %2068 = getelementptr inbounds i32, i32* %2063, i64 %2067, !dbg !9120
  %2069 = load i32, i32* %2068, align 4, !dbg !9120
  %2070 = lshr i32 %2069, 3, !dbg !9120
  %2071 = xor i32 %2062, %2070, !dbg !9120
  %2072 = add i32 %2027, %2071, !dbg !9120
  %2073 = load i32*, i32** %7, align 8, !dbg !9120
  %2074 = load i32, i32* %9, align 4, !dbg !9120
  %2075 = add nsw i32 %2074, 0, !dbg !9120
  %2076 = sext i32 %2075 to i64, !dbg !9120
  %2077 = getelementptr inbounds i32, i32* %2073, i64 %2076, !dbg !9120
  %2078 = load i32, i32* %2077, align 4, !dbg !9120
  %2079 = add i32 %2072, %2078, !dbg !9120
  %2080 = load i32*, i32** %7, align 8, !dbg !9120
  %2081 = load i32, i32* %9, align 4, !dbg !9120
  %2082 = add nsw i32 %2081, 0, !dbg !9120
  %2083 = add nsw i32 %2082, 16, !dbg !9120
  %2084 = sext i32 %2083 to i64, !dbg !9120
  %2085 = getelementptr inbounds i32, i32* %2080, i64 %2084, !dbg !9120
  store i32 %2079, i32* %2085, align 4, !dbg !9120
  %2086 = load i32*, i32** %7, align 8, !dbg !9121
  %2087 = load i32, i32* %9, align 4, !dbg !9121
  %2088 = add nsw i32 %2087, 1, !dbg !9121
  %2089 = add nsw i32 %2088, 14, !dbg !9121
  %2090 = sext i32 %2089 to i64, !dbg !9121
  %2091 = getelementptr inbounds i32, i32* %2086, i64 %2090, !dbg !9121
  %2092 = load i32, i32* %2091, align 4, !dbg !9121
  %2093 = lshr i32 %2092, 17, !dbg !9121
  %2094 = load i32*, i32** %7, align 8, !dbg !9121
  %2095 = load i32, i32* %9, align 4, !dbg !9121
  %2096 = add nsw i32 %2095, 1, !dbg !9121
  %2097 = add nsw i32 %2096, 14, !dbg !9121
  %2098 = sext i32 %2097 to i64, !dbg !9121
  %2099 = getelementptr inbounds i32, i32* %2094, i64 %2098, !dbg !9121
  %2100 = load i32, i32* %2099, align 4, !dbg !9121
  %2101 = shl i32 %2100, 15, !dbg !9121
  %2102 = or i32 %2093, %2101, !dbg !9121
  %2103 = load i32*, i32** %7, align 8, !dbg !9121
  %2104 = load i32, i32* %9, align 4, !dbg !9121
  %2105 = add nsw i32 %2104, 1, !dbg !9121
  %2106 = add nsw i32 %2105, 14, !dbg !9121
  %2107 = sext i32 %2106 to i64, !dbg !9121
  %2108 = getelementptr inbounds i32, i32* %2103, i64 %2107, !dbg !9121
  %2109 = load i32, i32* %2108, align 4, !dbg !9121
  %2110 = lshr i32 %2109, 19, !dbg !9121
  %2111 = load i32*, i32** %7, align 8, !dbg !9121
  %2112 = load i32, i32* %9, align 4, !dbg !9121
  %2113 = add nsw i32 %2112, 1, !dbg !9121
  %2114 = add nsw i32 %2113, 14, !dbg !9121
  %2115 = sext i32 %2114 to i64, !dbg !9121
  %2116 = getelementptr inbounds i32, i32* %2111, i64 %2115, !dbg !9121
  %2117 = load i32, i32* %2116, align 4, !dbg !9121
  %2118 = shl i32 %2117, 13, !dbg !9121
  %2119 = or i32 %2110, %2118, !dbg !9121
  %2120 = xor i32 %2102, %2119, !dbg !9121
  %2121 = load i32*, i32** %7, align 8, !dbg !9121
  %2122 = load i32, i32* %9, align 4, !dbg !9121
  %2123 = add nsw i32 %2122, 1, !dbg !9121
  %2124 = add nsw i32 %2123, 14, !dbg !9121
  %2125 = sext i32 %2124 to i64, !dbg !9121
  %2126 = getelementptr inbounds i32, i32* %2121, i64 %2125, !dbg !9121
  %2127 = load i32, i32* %2126, align 4, !dbg !9121
  %2128 = lshr i32 %2127, 10, !dbg !9121
  %2129 = xor i32 %2120, %2128, !dbg !9121
  %2130 = load i32*, i32** %7, align 8, !dbg !9121
  %2131 = load i32, i32* %9, align 4, !dbg !9121
  %2132 = add nsw i32 %2131, 1, !dbg !9121
  %2133 = add nsw i32 %2132, 9, !dbg !9121
  %2134 = sext i32 %2133 to i64, !dbg !9121
  %2135 = getelementptr inbounds i32, i32* %2130, i64 %2134, !dbg !9121
  %2136 = load i32, i32* %2135, align 4, !dbg !9121
  %2137 = add i32 %2129, %2136, !dbg !9121
  %2138 = load i32*, i32** %7, align 8, !dbg !9121
  %2139 = load i32, i32* %9, align 4, !dbg !9121
  %2140 = add nsw i32 %2139, 1, !dbg !9121
  %2141 = add nsw i32 %2140, 1, !dbg !9121
  %2142 = sext i32 %2141 to i64, !dbg !9121
  %2143 = getelementptr inbounds i32, i32* %2138, i64 %2142, !dbg !9121
  %2144 = load i32, i32* %2143, align 4, !dbg !9121
  %2145 = lshr i32 %2144, 7, !dbg !9121
  %2146 = load i32*, i32** %7, align 8, !dbg !9121
  %2147 = load i32, i32* %9, align 4, !dbg !9121
  %2148 = add nsw i32 %2147, 1, !dbg !9121
  %2149 = add nsw i32 %2148, 1, !dbg !9121
  %2150 = sext i32 %2149 to i64, !dbg !9121
  %2151 = getelementptr inbounds i32, i32* %2146, i64 %2150, !dbg !9121
  %2152 = load i32, i32* %2151, align 4, !dbg !9121
  %2153 = shl i32 %2152, 25, !dbg !9121
  %2154 = or i32 %2145, %2153, !dbg !9121
  %2155 = load i32*, i32** %7, align 8, !dbg !9121
  %2156 = load i32, i32* %9, align 4, !dbg !9121
  %2157 = add nsw i32 %2156, 1, !dbg !9121
  %2158 = add nsw i32 %2157, 1, !dbg !9121
  %2159 = sext i32 %2158 to i64, !dbg !9121
  %2160 = getelementptr inbounds i32, i32* %2155, i64 %2159, !dbg !9121
  %2161 = load i32, i32* %2160, align 4, !dbg !9121
  %2162 = lshr i32 %2161, 18, !dbg !9121
  %2163 = load i32*, i32** %7, align 8, !dbg !9121
  %2164 = load i32, i32* %9, align 4, !dbg !9121
  %2165 = add nsw i32 %2164, 1, !dbg !9121
  %2166 = add nsw i32 %2165, 1, !dbg !9121
  %2167 = sext i32 %2166 to i64, !dbg !9121
  %2168 = getelementptr inbounds i32, i32* %2163, i64 %2167, !dbg !9121
  %2169 = load i32, i32* %2168, align 4, !dbg !9121
  %2170 = shl i32 %2169, 14, !dbg !9121
  %2171 = or i32 %2162, %2170, !dbg !9121
  %2172 = xor i32 %2154, %2171, !dbg !9121
  %2173 = load i32*, i32** %7, align 8, !dbg !9121
  %2174 = load i32, i32* %9, align 4, !dbg !9121
  %2175 = add nsw i32 %2174, 1, !dbg !9121
  %2176 = add nsw i32 %2175, 1, !dbg !9121
  %2177 = sext i32 %2176 to i64, !dbg !9121
  %2178 = getelementptr inbounds i32, i32* %2173, i64 %2177, !dbg !9121
  %2179 = load i32, i32* %2178, align 4, !dbg !9121
  %2180 = lshr i32 %2179, 3, !dbg !9121
  %2181 = xor i32 %2172, %2180, !dbg !9121
  %2182 = add i32 %2137, %2181, !dbg !9121
  %2183 = load i32*, i32** %7, align 8, !dbg !9121
  %2184 = load i32, i32* %9, align 4, !dbg !9121
  %2185 = add nsw i32 %2184, 1, !dbg !9121
  %2186 = sext i32 %2185 to i64, !dbg !9121
  %2187 = getelementptr inbounds i32, i32* %2183, i64 %2186, !dbg !9121
  %2188 = load i32, i32* %2187, align 4, !dbg !9121
  %2189 = add i32 %2182, %2188, !dbg !9121
  %2190 = load i32*, i32** %7, align 8, !dbg !9121
  %2191 = load i32, i32* %9, align 4, !dbg !9121
  %2192 = add nsw i32 %2191, 1, !dbg !9121
  %2193 = add nsw i32 %2192, 16, !dbg !9121
  %2194 = sext i32 %2193 to i64, !dbg !9121
  %2195 = getelementptr inbounds i32, i32* %2190, i64 %2194, !dbg !9121
  store i32 %2189, i32* %2195, align 4, !dbg !9121
  %2196 = load i32*, i32** %7, align 8, !dbg !9122
  %2197 = load i32, i32* %9, align 4, !dbg !9122
  %2198 = add nsw i32 %2197, 2, !dbg !9122
  %2199 = add nsw i32 %2198, 14, !dbg !9122
  %2200 = sext i32 %2199 to i64, !dbg !9122
  %2201 = getelementptr inbounds i32, i32* %2196, i64 %2200, !dbg !9122
  %2202 = load i32, i32* %2201, align 4, !dbg !9122
  %2203 = lshr i32 %2202, 17, !dbg !9122
  %2204 = load i32*, i32** %7, align 8, !dbg !9122
  %2205 = load i32, i32* %9, align 4, !dbg !9122
  %2206 = add nsw i32 %2205, 2, !dbg !9122
  %2207 = add nsw i32 %2206, 14, !dbg !9122
  %2208 = sext i32 %2207 to i64, !dbg !9122
  %2209 = getelementptr inbounds i32, i32* %2204, i64 %2208, !dbg !9122
  %2210 = load i32, i32* %2209, align 4, !dbg !9122
  %2211 = shl i32 %2210, 15, !dbg !9122
  %2212 = or i32 %2203, %2211, !dbg !9122
  %2213 = load i32*, i32** %7, align 8, !dbg !9122
  %2214 = load i32, i32* %9, align 4, !dbg !9122
  %2215 = add nsw i32 %2214, 2, !dbg !9122
  %2216 = add nsw i32 %2215, 14, !dbg !9122
  %2217 = sext i32 %2216 to i64, !dbg !9122
  %2218 = getelementptr inbounds i32, i32* %2213, i64 %2217, !dbg !9122
  %2219 = load i32, i32* %2218, align 4, !dbg !9122
  %2220 = lshr i32 %2219, 19, !dbg !9122
  %2221 = load i32*, i32** %7, align 8, !dbg !9122
  %2222 = load i32, i32* %9, align 4, !dbg !9122
  %2223 = add nsw i32 %2222, 2, !dbg !9122
  %2224 = add nsw i32 %2223, 14, !dbg !9122
  %2225 = sext i32 %2224 to i64, !dbg !9122
  %2226 = getelementptr inbounds i32, i32* %2221, i64 %2225, !dbg !9122
  %2227 = load i32, i32* %2226, align 4, !dbg !9122
  %2228 = shl i32 %2227, 13, !dbg !9122
  %2229 = or i32 %2220, %2228, !dbg !9122
  %2230 = xor i32 %2212, %2229, !dbg !9122
  %2231 = load i32*, i32** %7, align 8, !dbg !9122
  %2232 = load i32, i32* %9, align 4, !dbg !9122
  %2233 = add nsw i32 %2232, 2, !dbg !9122
  %2234 = add nsw i32 %2233, 14, !dbg !9122
  %2235 = sext i32 %2234 to i64, !dbg !9122
  %2236 = getelementptr inbounds i32, i32* %2231, i64 %2235, !dbg !9122
  %2237 = load i32, i32* %2236, align 4, !dbg !9122
  %2238 = lshr i32 %2237, 10, !dbg !9122
  %2239 = xor i32 %2230, %2238, !dbg !9122
  %2240 = load i32*, i32** %7, align 8, !dbg !9122
  %2241 = load i32, i32* %9, align 4, !dbg !9122
  %2242 = add nsw i32 %2241, 2, !dbg !9122
  %2243 = add nsw i32 %2242, 9, !dbg !9122
  %2244 = sext i32 %2243 to i64, !dbg !9122
  %2245 = getelementptr inbounds i32, i32* %2240, i64 %2244, !dbg !9122
  %2246 = load i32, i32* %2245, align 4, !dbg !9122
  %2247 = add i32 %2239, %2246, !dbg !9122
  %2248 = load i32*, i32** %7, align 8, !dbg !9122
  %2249 = load i32, i32* %9, align 4, !dbg !9122
  %2250 = add nsw i32 %2249, 2, !dbg !9122
  %2251 = add nsw i32 %2250, 1, !dbg !9122
  %2252 = sext i32 %2251 to i64, !dbg !9122
  %2253 = getelementptr inbounds i32, i32* %2248, i64 %2252, !dbg !9122
  %2254 = load i32, i32* %2253, align 4, !dbg !9122
  %2255 = lshr i32 %2254, 7, !dbg !9122
  %2256 = load i32*, i32** %7, align 8, !dbg !9122
  %2257 = load i32, i32* %9, align 4, !dbg !9122
  %2258 = add nsw i32 %2257, 2, !dbg !9122
  %2259 = add nsw i32 %2258, 1, !dbg !9122
  %2260 = sext i32 %2259 to i64, !dbg !9122
  %2261 = getelementptr inbounds i32, i32* %2256, i64 %2260, !dbg !9122
  %2262 = load i32, i32* %2261, align 4, !dbg !9122
  %2263 = shl i32 %2262, 25, !dbg !9122
  %2264 = or i32 %2255, %2263, !dbg !9122
  %2265 = load i32*, i32** %7, align 8, !dbg !9122
  %2266 = load i32, i32* %9, align 4, !dbg !9122
  %2267 = add nsw i32 %2266, 2, !dbg !9122
  %2268 = add nsw i32 %2267, 1, !dbg !9122
  %2269 = sext i32 %2268 to i64, !dbg !9122
  %2270 = getelementptr inbounds i32, i32* %2265, i64 %2269, !dbg !9122
  %2271 = load i32, i32* %2270, align 4, !dbg !9122
  %2272 = lshr i32 %2271, 18, !dbg !9122
  %2273 = load i32*, i32** %7, align 8, !dbg !9122
  %2274 = load i32, i32* %9, align 4, !dbg !9122
  %2275 = add nsw i32 %2274, 2, !dbg !9122
  %2276 = add nsw i32 %2275, 1, !dbg !9122
  %2277 = sext i32 %2276 to i64, !dbg !9122
  %2278 = getelementptr inbounds i32, i32* %2273, i64 %2277, !dbg !9122
  %2279 = load i32, i32* %2278, align 4, !dbg !9122
  %2280 = shl i32 %2279, 14, !dbg !9122
  %2281 = or i32 %2272, %2280, !dbg !9122
  %2282 = xor i32 %2264, %2281, !dbg !9122
  %2283 = load i32*, i32** %7, align 8, !dbg !9122
  %2284 = load i32, i32* %9, align 4, !dbg !9122
  %2285 = add nsw i32 %2284, 2, !dbg !9122
  %2286 = add nsw i32 %2285, 1, !dbg !9122
  %2287 = sext i32 %2286 to i64, !dbg !9122
  %2288 = getelementptr inbounds i32, i32* %2283, i64 %2287, !dbg !9122
  %2289 = load i32, i32* %2288, align 4, !dbg !9122
  %2290 = lshr i32 %2289, 3, !dbg !9122
  %2291 = xor i32 %2282, %2290, !dbg !9122
  %2292 = add i32 %2247, %2291, !dbg !9122
  %2293 = load i32*, i32** %7, align 8, !dbg !9122
  %2294 = load i32, i32* %9, align 4, !dbg !9122
  %2295 = add nsw i32 %2294, 2, !dbg !9122
  %2296 = sext i32 %2295 to i64, !dbg !9122
  %2297 = getelementptr inbounds i32, i32* %2293, i64 %2296, !dbg !9122
  %2298 = load i32, i32* %2297, align 4, !dbg !9122
  %2299 = add i32 %2292, %2298, !dbg !9122
  %2300 = load i32*, i32** %7, align 8, !dbg !9122
  %2301 = load i32, i32* %9, align 4, !dbg !9122
  %2302 = add nsw i32 %2301, 2, !dbg !9122
  %2303 = add nsw i32 %2302, 16, !dbg !9122
  %2304 = sext i32 %2303 to i64, !dbg !9122
  %2305 = getelementptr inbounds i32, i32* %2300, i64 %2304, !dbg !9122
  store i32 %2299, i32* %2305, align 4, !dbg !9122
  %2306 = load i32*, i32** %7, align 8, !dbg !9123
  %2307 = load i32, i32* %9, align 4, !dbg !9123
  %2308 = add nsw i32 %2307, 3, !dbg !9123
  %2309 = add nsw i32 %2308, 14, !dbg !9123
  %2310 = sext i32 %2309 to i64, !dbg !9123
  %2311 = getelementptr inbounds i32, i32* %2306, i64 %2310, !dbg !9123
  %2312 = load i32, i32* %2311, align 4, !dbg !9123
  %2313 = lshr i32 %2312, 17, !dbg !9123
  %2314 = load i32*, i32** %7, align 8, !dbg !9123
  %2315 = load i32, i32* %9, align 4, !dbg !9123
  %2316 = add nsw i32 %2315, 3, !dbg !9123
  %2317 = add nsw i32 %2316, 14, !dbg !9123
  %2318 = sext i32 %2317 to i64, !dbg !9123
  %2319 = getelementptr inbounds i32, i32* %2314, i64 %2318, !dbg !9123
  %2320 = load i32, i32* %2319, align 4, !dbg !9123
  %2321 = shl i32 %2320, 15, !dbg !9123
  %2322 = or i32 %2313, %2321, !dbg !9123
  %2323 = load i32*, i32** %7, align 8, !dbg !9123
  %2324 = load i32, i32* %9, align 4, !dbg !9123
  %2325 = add nsw i32 %2324, 3, !dbg !9123
  %2326 = add nsw i32 %2325, 14, !dbg !9123
  %2327 = sext i32 %2326 to i64, !dbg !9123
  %2328 = getelementptr inbounds i32, i32* %2323, i64 %2327, !dbg !9123
  %2329 = load i32, i32* %2328, align 4, !dbg !9123
  %2330 = lshr i32 %2329, 19, !dbg !9123
  %2331 = load i32*, i32** %7, align 8, !dbg !9123
  %2332 = load i32, i32* %9, align 4, !dbg !9123
  %2333 = add nsw i32 %2332, 3, !dbg !9123
  %2334 = add nsw i32 %2333, 14, !dbg !9123
  %2335 = sext i32 %2334 to i64, !dbg !9123
  %2336 = getelementptr inbounds i32, i32* %2331, i64 %2335, !dbg !9123
  %2337 = load i32, i32* %2336, align 4, !dbg !9123
  %2338 = shl i32 %2337, 13, !dbg !9123
  %2339 = or i32 %2330, %2338, !dbg !9123
  %2340 = xor i32 %2322, %2339, !dbg !9123
  %2341 = load i32*, i32** %7, align 8, !dbg !9123
  %2342 = load i32, i32* %9, align 4, !dbg !9123
  %2343 = add nsw i32 %2342, 3, !dbg !9123
  %2344 = add nsw i32 %2343, 14, !dbg !9123
  %2345 = sext i32 %2344 to i64, !dbg !9123
  %2346 = getelementptr inbounds i32, i32* %2341, i64 %2345, !dbg !9123
  %2347 = load i32, i32* %2346, align 4, !dbg !9123
  %2348 = lshr i32 %2347, 10, !dbg !9123
  %2349 = xor i32 %2340, %2348, !dbg !9123
  %2350 = load i32*, i32** %7, align 8, !dbg !9123
  %2351 = load i32, i32* %9, align 4, !dbg !9123
  %2352 = add nsw i32 %2351, 3, !dbg !9123
  %2353 = add nsw i32 %2352, 9, !dbg !9123
  %2354 = sext i32 %2353 to i64, !dbg !9123
  %2355 = getelementptr inbounds i32, i32* %2350, i64 %2354, !dbg !9123
  %2356 = load i32, i32* %2355, align 4, !dbg !9123
  %2357 = add i32 %2349, %2356, !dbg !9123
  %2358 = load i32*, i32** %7, align 8, !dbg !9123
  %2359 = load i32, i32* %9, align 4, !dbg !9123
  %2360 = add nsw i32 %2359, 3, !dbg !9123
  %2361 = add nsw i32 %2360, 1, !dbg !9123
  %2362 = sext i32 %2361 to i64, !dbg !9123
  %2363 = getelementptr inbounds i32, i32* %2358, i64 %2362, !dbg !9123
  %2364 = load i32, i32* %2363, align 4, !dbg !9123
  %2365 = lshr i32 %2364, 7, !dbg !9123
  %2366 = load i32*, i32** %7, align 8, !dbg !9123
  %2367 = load i32, i32* %9, align 4, !dbg !9123
  %2368 = add nsw i32 %2367, 3, !dbg !9123
  %2369 = add nsw i32 %2368, 1, !dbg !9123
  %2370 = sext i32 %2369 to i64, !dbg !9123
  %2371 = getelementptr inbounds i32, i32* %2366, i64 %2370, !dbg !9123
  %2372 = load i32, i32* %2371, align 4, !dbg !9123
  %2373 = shl i32 %2372, 25, !dbg !9123
  %2374 = or i32 %2365, %2373, !dbg !9123
  %2375 = load i32*, i32** %7, align 8, !dbg !9123
  %2376 = load i32, i32* %9, align 4, !dbg !9123
  %2377 = add nsw i32 %2376, 3, !dbg !9123
  %2378 = add nsw i32 %2377, 1, !dbg !9123
  %2379 = sext i32 %2378 to i64, !dbg !9123
  %2380 = getelementptr inbounds i32, i32* %2375, i64 %2379, !dbg !9123
  %2381 = load i32, i32* %2380, align 4, !dbg !9123
  %2382 = lshr i32 %2381, 18, !dbg !9123
  %2383 = load i32*, i32** %7, align 8, !dbg !9123
  %2384 = load i32, i32* %9, align 4, !dbg !9123
  %2385 = add nsw i32 %2384, 3, !dbg !9123
  %2386 = add nsw i32 %2385, 1, !dbg !9123
  %2387 = sext i32 %2386 to i64, !dbg !9123
  %2388 = getelementptr inbounds i32, i32* %2383, i64 %2387, !dbg !9123
  %2389 = load i32, i32* %2388, align 4, !dbg !9123
  %2390 = shl i32 %2389, 14, !dbg !9123
  %2391 = or i32 %2382, %2390, !dbg !9123
  %2392 = xor i32 %2374, %2391, !dbg !9123
  %2393 = load i32*, i32** %7, align 8, !dbg !9123
  %2394 = load i32, i32* %9, align 4, !dbg !9123
  %2395 = add nsw i32 %2394, 3, !dbg !9123
  %2396 = add nsw i32 %2395, 1, !dbg !9123
  %2397 = sext i32 %2396 to i64, !dbg !9123
  %2398 = getelementptr inbounds i32, i32* %2393, i64 %2397, !dbg !9123
  %2399 = load i32, i32* %2398, align 4, !dbg !9123
  %2400 = lshr i32 %2399, 3, !dbg !9123
  %2401 = xor i32 %2392, %2400, !dbg !9123
  %2402 = add i32 %2357, %2401, !dbg !9123
  %2403 = load i32*, i32** %7, align 8, !dbg !9123
  %2404 = load i32, i32* %9, align 4, !dbg !9123
  %2405 = add nsw i32 %2404, 3, !dbg !9123
  %2406 = sext i32 %2405 to i64, !dbg !9123
  %2407 = getelementptr inbounds i32, i32* %2403, i64 %2406, !dbg !9123
  %2408 = load i32, i32* %2407, align 4, !dbg !9123
  %2409 = add i32 %2402, %2408, !dbg !9123
  %2410 = load i32*, i32** %7, align 8, !dbg !9123
  %2411 = load i32, i32* %9, align 4, !dbg !9123
  %2412 = add nsw i32 %2411, 3, !dbg !9123
  %2413 = add nsw i32 %2412, 16, !dbg !9123
  %2414 = sext i32 %2413 to i64, !dbg !9123
  %2415 = getelementptr inbounds i32, i32* %2410, i64 %2414, !dbg !9123
  store i32 %2409, i32* %2415, align 4, !dbg !9123
  %2416 = load i32*, i32** %7, align 8, !dbg !9124
  %2417 = load i32, i32* %9, align 4, !dbg !9124
  %2418 = add nsw i32 %2417, 4, !dbg !9124
  %2419 = add nsw i32 %2418, 14, !dbg !9124
  %2420 = sext i32 %2419 to i64, !dbg !9124
  %2421 = getelementptr inbounds i32, i32* %2416, i64 %2420, !dbg !9124
  %2422 = load i32, i32* %2421, align 4, !dbg !9124
  %2423 = lshr i32 %2422, 17, !dbg !9124
  %2424 = load i32*, i32** %7, align 8, !dbg !9124
  %2425 = load i32, i32* %9, align 4, !dbg !9124
  %2426 = add nsw i32 %2425, 4, !dbg !9124
  %2427 = add nsw i32 %2426, 14, !dbg !9124
  %2428 = sext i32 %2427 to i64, !dbg !9124
  %2429 = getelementptr inbounds i32, i32* %2424, i64 %2428, !dbg !9124
  %2430 = load i32, i32* %2429, align 4, !dbg !9124
  %2431 = shl i32 %2430, 15, !dbg !9124
  %2432 = or i32 %2423, %2431, !dbg !9124
  %2433 = load i32*, i32** %7, align 8, !dbg !9124
  %2434 = load i32, i32* %9, align 4, !dbg !9124
  %2435 = add nsw i32 %2434, 4, !dbg !9124
  %2436 = add nsw i32 %2435, 14, !dbg !9124
  %2437 = sext i32 %2436 to i64, !dbg !9124
  %2438 = getelementptr inbounds i32, i32* %2433, i64 %2437, !dbg !9124
  %2439 = load i32, i32* %2438, align 4, !dbg !9124
  %2440 = lshr i32 %2439, 19, !dbg !9124
  %2441 = load i32*, i32** %7, align 8, !dbg !9124
  %2442 = load i32, i32* %9, align 4, !dbg !9124
  %2443 = add nsw i32 %2442, 4, !dbg !9124
  %2444 = add nsw i32 %2443, 14, !dbg !9124
  %2445 = sext i32 %2444 to i64, !dbg !9124
  %2446 = getelementptr inbounds i32, i32* %2441, i64 %2445, !dbg !9124
  %2447 = load i32, i32* %2446, align 4, !dbg !9124
  %2448 = shl i32 %2447, 13, !dbg !9124
  %2449 = or i32 %2440, %2448, !dbg !9124
  %2450 = xor i32 %2432, %2449, !dbg !9124
  %2451 = load i32*, i32** %7, align 8, !dbg !9124
  %2452 = load i32, i32* %9, align 4, !dbg !9124
  %2453 = add nsw i32 %2452, 4, !dbg !9124
  %2454 = add nsw i32 %2453, 14, !dbg !9124
  %2455 = sext i32 %2454 to i64, !dbg !9124
  %2456 = getelementptr inbounds i32, i32* %2451, i64 %2455, !dbg !9124
  %2457 = load i32, i32* %2456, align 4, !dbg !9124
  %2458 = lshr i32 %2457, 10, !dbg !9124
  %2459 = xor i32 %2450, %2458, !dbg !9124
  %2460 = load i32*, i32** %7, align 8, !dbg !9124
  %2461 = load i32, i32* %9, align 4, !dbg !9124
  %2462 = add nsw i32 %2461, 4, !dbg !9124
  %2463 = add nsw i32 %2462, 9, !dbg !9124
  %2464 = sext i32 %2463 to i64, !dbg !9124
  %2465 = getelementptr inbounds i32, i32* %2460, i64 %2464, !dbg !9124
  %2466 = load i32, i32* %2465, align 4, !dbg !9124
  %2467 = add i32 %2459, %2466, !dbg !9124
  %2468 = load i32*, i32** %7, align 8, !dbg !9124
  %2469 = load i32, i32* %9, align 4, !dbg !9124
  %2470 = add nsw i32 %2469, 4, !dbg !9124
  %2471 = add nsw i32 %2470, 1, !dbg !9124
  %2472 = sext i32 %2471 to i64, !dbg !9124
  %2473 = getelementptr inbounds i32, i32* %2468, i64 %2472, !dbg !9124
  %2474 = load i32, i32* %2473, align 4, !dbg !9124
  %2475 = lshr i32 %2474, 7, !dbg !9124
  %2476 = load i32*, i32** %7, align 8, !dbg !9124
  %2477 = load i32, i32* %9, align 4, !dbg !9124
  %2478 = add nsw i32 %2477, 4, !dbg !9124
  %2479 = add nsw i32 %2478, 1, !dbg !9124
  %2480 = sext i32 %2479 to i64, !dbg !9124
  %2481 = getelementptr inbounds i32, i32* %2476, i64 %2480, !dbg !9124
  %2482 = load i32, i32* %2481, align 4, !dbg !9124
  %2483 = shl i32 %2482, 25, !dbg !9124
  %2484 = or i32 %2475, %2483, !dbg !9124
  %2485 = load i32*, i32** %7, align 8, !dbg !9124
  %2486 = load i32, i32* %9, align 4, !dbg !9124
  %2487 = add nsw i32 %2486, 4, !dbg !9124
  %2488 = add nsw i32 %2487, 1, !dbg !9124
  %2489 = sext i32 %2488 to i64, !dbg !9124
  %2490 = getelementptr inbounds i32, i32* %2485, i64 %2489, !dbg !9124
  %2491 = load i32, i32* %2490, align 4, !dbg !9124
  %2492 = lshr i32 %2491, 18, !dbg !9124
  %2493 = load i32*, i32** %7, align 8, !dbg !9124
  %2494 = load i32, i32* %9, align 4, !dbg !9124
  %2495 = add nsw i32 %2494, 4, !dbg !9124
  %2496 = add nsw i32 %2495, 1, !dbg !9124
  %2497 = sext i32 %2496 to i64, !dbg !9124
  %2498 = getelementptr inbounds i32, i32* %2493, i64 %2497, !dbg !9124
  %2499 = load i32, i32* %2498, align 4, !dbg !9124
  %2500 = shl i32 %2499, 14, !dbg !9124
  %2501 = or i32 %2492, %2500, !dbg !9124
  %2502 = xor i32 %2484, %2501, !dbg !9124
  %2503 = load i32*, i32** %7, align 8, !dbg !9124
  %2504 = load i32, i32* %9, align 4, !dbg !9124
  %2505 = add nsw i32 %2504, 4, !dbg !9124
  %2506 = add nsw i32 %2505, 1, !dbg !9124
  %2507 = sext i32 %2506 to i64, !dbg !9124
  %2508 = getelementptr inbounds i32, i32* %2503, i64 %2507, !dbg !9124
  %2509 = load i32, i32* %2508, align 4, !dbg !9124
  %2510 = lshr i32 %2509, 3, !dbg !9124
  %2511 = xor i32 %2502, %2510, !dbg !9124
  %2512 = add i32 %2467, %2511, !dbg !9124
  %2513 = load i32*, i32** %7, align 8, !dbg !9124
  %2514 = load i32, i32* %9, align 4, !dbg !9124
  %2515 = add nsw i32 %2514, 4, !dbg !9124
  %2516 = sext i32 %2515 to i64, !dbg !9124
  %2517 = getelementptr inbounds i32, i32* %2513, i64 %2516, !dbg !9124
  %2518 = load i32, i32* %2517, align 4, !dbg !9124
  %2519 = add i32 %2512, %2518, !dbg !9124
  %2520 = load i32*, i32** %7, align 8, !dbg !9124
  %2521 = load i32, i32* %9, align 4, !dbg !9124
  %2522 = add nsw i32 %2521, 4, !dbg !9124
  %2523 = add nsw i32 %2522, 16, !dbg !9124
  %2524 = sext i32 %2523 to i64, !dbg !9124
  %2525 = getelementptr inbounds i32, i32* %2520, i64 %2524, !dbg !9124
  store i32 %2519, i32* %2525, align 4, !dbg !9124
  %2526 = load i32*, i32** %7, align 8, !dbg !9125
  %2527 = load i32, i32* %9, align 4, !dbg !9125
  %2528 = add nsw i32 %2527, 5, !dbg !9125
  %2529 = add nsw i32 %2528, 14, !dbg !9125
  %2530 = sext i32 %2529 to i64, !dbg !9125
  %2531 = getelementptr inbounds i32, i32* %2526, i64 %2530, !dbg !9125
  %2532 = load i32, i32* %2531, align 4, !dbg !9125
  %2533 = lshr i32 %2532, 17, !dbg !9125
  %2534 = load i32*, i32** %7, align 8, !dbg !9125
  %2535 = load i32, i32* %9, align 4, !dbg !9125
  %2536 = add nsw i32 %2535, 5, !dbg !9125
  %2537 = add nsw i32 %2536, 14, !dbg !9125
  %2538 = sext i32 %2537 to i64, !dbg !9125
  %2539 = getelementptr inbounds i32, i32* %2534, i64 %2538, !dbg !9125
  %2540 = load i32, i32* %2539, align 4, !dbg !9125
  %2541 = shl i32 %2540, 15, !dbg !9125
  %2542 = or i32 %2533, %2541, !dbg !9125
  %2543 = load i32*, i32** %7, align 8, !dbg !9125
  %2544 = load i32, i32* %9, align 4, !dbg !9125
  %2545 = add nsw i32 %2544, 5, !dbg !9125
  %2546 = add nsw i32 %2545, 14, !dbg !9125
  %2547 = sext i32 %2546 to i64, !dbg !9125
  %2548 = getelementptr inbounds i32, i32* %2543, i64 %2547, !dbg !9125
  %2549 = load i32, i32* %2548, align 4, !dbg !9125
  %2550 = lshr i32 %2549, 19, !dbg !9125
  %2551 = load i32*, i32** %7, align 8, !dbg !9125
  %2552 = load i32, i32* %9, align 4, !dbg !9125
  %2553 = add nsw i32 %2552, 5, !dbg !9125
  %2554 = add nsw i32 %2553, 14, !dbg !9125
  %2555 = sext i32 %2554 to i64, !dbg !9125
  %2556 = getelementptr inbounds i32, i32* %2551, i64 %2555, !dbg !9125
  %2557 = load i32, i32* %2556, align 4, !dbg !9125
  %2558 = shl i32 %2557, 13, !dbg !9125
  %2559 = or i32 %2550, %2558, !dbg !9125
  %2560 = xor i32 %2542, %2559, !dbg !9125
  %2561 = load i32*, i32** %7, align 8, !dbg !9125
  %2562 = load i32, i32* %9, align 4, !dbg !9125
  %2563 = add nsw i32 %2562, 5, !dbg !9125
  %2564 = add nsw i32 %2563, 14, !dbg !9125
  %2565 = sext i32 %2564 to i64, !dbg !9125
  %2566 = getelementptr inbounds i32, i32* %2561, i64 %2565, !dbg !9125
  %2567 = load i32, i32* %2566, align 4, !dbg !9125
  %2568 = lshr i32 %2567, 10, !dbg !9125
  %2569 = xor i32 %2560, %2568, !dbg !9125
  %2570 = load i32*, i32** %7, align 8, !dbg !9125
  %2571 = load i32, i32* %9, align 4, !dbg !9125
  %2572 = add nsw i32 %2571, 5, !dbg !9125
  %2573 = add nsw i32 %2572, 9, !dbg !9125
  %2574 = sext i32 %2573 to i64, !dbg !9125
  %2575 = getelementptr inbounds i32, i32* %2570, i64 %2574, !dbg !9125
  %2576 = load i32, i32* %2575, align 4, !dbg !9125
  %2577 = add i32 %2569, %2576, !dbg !9125
  %2578 = load i32*, i32** %7, align 8, !dbg !9125
  %2579 = load i32, i32* %9, align 4, !dbg !9125
  %2580 = add nsw i32 %2579, 5, !dbg !9125
  %2581 = add nsw i32 %2580, 1, !dbg !9125
  %2582 = sext i32 %2581 to i64, !dbg !9125
  %2583 = getelementptr inbounds i32, i32* %2578, i64 %2582, !dbg !9125
  %2584 = load i32, i32* %2583, align 4, !dbg !9125
  %2585 = lshr i32 %2584, 7, !dbg !9125
  %2586 = load i32*, i32** %7, align 8, !dbg !9125
  %2587 = load i32, i32* %9, align 4, !dbg !9125
  %2588 = add nsw i32 %2587, 5, !dbg !9125
  %2589 = add nsw i32 %2588, 1, !dbg !9125
  %2590 = sext i32 %2589 to i64, !dbg !9125
  %2591 = getelementptr inbounds i32, i32* %2586, i64 %2590, !dbg !9125
  %2592 = load i32, i32* %2591, align 4, !dbg !9125
  %2593 = shl i32 %2592, 25, !dbg !9125
  %2594 = or i32 %2585, %2593, !dbg !9125
  %2595 = load i32*, i32** %7, align 8, !dbg !9125
  %2596 = load i32, i32* %9, align 4, !dbg !9125
  %2597 = add nsw i32 %2596, 5, !dbg !9125
  %2598 = add nsw i32 %2597, 1, !dbg !9125
  %2599 = sext i32 %2598 to i64, !dbg !9125
  %2600 = getelementptr inbounds i32, i32* %2595, i64 %2599, !dbg !9125
  %2601 = load i32, i32* %2600, align 4, !dbg !9125
  %2602 = lshr i32 %2601, 18, !dbg !9125
  %2603 = load i32*, i32** %7, align 8, !dbg !9125
  %2604 = load i32, i32* %9, align 4, !dbg !9125
  %2605 = add nsw i32 %2604, 5, !dbg !9125
  %2606 = add nsw i32 %2605, 1, !dbg !9125
  %2607 = sext i32 %2606 to i64, !dbg !9125
  %2608 = getelementptr inbounds i32, i32* %2603, i64 %2607, !dbg !9125
  %2609 = load i32, i32* %2608, align 4, !dbg !9125
  %2610 = shl i32 %2609, 14, !dbg !9125
  %2611 = or i32 %2602, %2610, !dbg !9125
  %2612 = xor i32 %2594, %2611, !dbg !9125
  %2613 = load i32*, i32** %7, align 8, !dbg !9125
  %2614 = load i32, i32* %9, align 4, !dbg !9125
  %2615 = add nsw i32 %2614, 5, !dbg !9125
  %2616 = add nsw i32 %2615, 1, !dbg !9125
  %2617 = sext i32 %2616 to i64, !dbg !9125
  %2618 = getelementptr inbounds i32, i32* %2613, i64 %2617, !dbg !9125
  %2619 = load i32, i32* %2618, align 4, !dbg !9125
  %2620 = lshr i32 %2619, 3, !dbg !9125
  %2621 = xor i32 %2612, %2620, !dbg !9125
  %2622 = add i32 %2577, %2621, !dbg !9125
  %2623 = load i32*, i32** %7, align 8, !dbg !9125
  %2624 = load i32, i32* %9, align 4, !dbg !9125
  %2625 = add nsw i32 %2624, 5, !dbg !9125
  %2626 = sext i32 %2625 to i64, !dbg !9125
  %2627 = getelementptr inbounds i32, i32* %2623, i64 %2626, !dbg !9125
  %2628 = load i32, i32* %2627, align 4, !dbg !9125
  %2629 = add i32 %2622, %2628, !dbg !9125
  %2630 = load i32*, i32** %7, align 8, !dbg !9125
  %2631 = load i32, i32* %9, align 4, !dbg !9125
  %2632 = add nsw i32 %2631, 5, !dbg !9125
  %2633 = add nsw i32 %2632, 16, !dbg !9125
  %2634 = sext i32 %2633 to i64, !dbg !9125
  %2635 = getelementptr inbounds i32, i32* %2630, i64 %2634, !dbg !9125
  store i32 %2629, i32* %2635, align 4, !dbg !9125
  %2636 = load i32*, i32** %7, align 8, !dbg !9126
  %2637 = load i32, i32* %9, align 4, !dbg !9126
  %2638 = add nsw i32 %2637, 6, !dbg !9126
  %2639 = add nsw i32 %2638, 14, !dbg !9126
  %2640 = sext i32 %2639 to i64, !dbg !9126
  %2641 = getelementptr inbounds i32, i32* %2636, i64 %2640, !dbg !9126
  %2642 = load i32, i32* %2641, align 4, !dbg !9126
  %2643 = lshr i32 %2642, 17, !dbg !9126
  %2644 = load i32*, i32** %7, align 8, !dbg !9126
  %2645 = load i32, i32* %9, align 4, !dbg !9126
  %2646 = add nsw i32 %2645, 6, !dbg !9126
  %2647 = add nsw i32 %2646, 14, !dbg !9126
  %2648 = sext i32 %2647 to i64, !dbg !9126
  %2649 = getelementptr inbounds i32, i32* %2644, i64 %2648, !dbg !9126
  %2650 = load i32, i32* %2649, align 4, !dbg !9126
  %2651 = shl i32 %2650, 15, !dbg !9126
  %2652 = or i32 %2643, %2651, !dbg !9126
  %2653 = load i32*, i32** %7, align 8, !dbg !9126
  %2654 = load i32, i32* %9, align 4, !dbg !9126
  %2655 = add nsw i32 %2654, 6, !dbg !9126
  %2656 = add nsw i32 %2655, 14, !dbg !9126
  %2657 = sext i32 %2656 to i64, !dbg !9126
  %2658 = getelementptr inbounds i32, i32* %2653, i64 %2657, !dbg !9126
  %2659 = load i32, i32* %2658, align 4, !dbg !9126
  %2660 = lshr i32 %2659, 19, !dbg !9126
  %2661 = load i32*, i32** %7, align 8, !dbg !9126
  %2662 = load i32, i32* %9, align 4, !dbg !9126
  %2663 = add nsw i32 %2662, 6, !dbg !9126
  %2664 = add nsw i32 %2663, 14, !dbg !9126
  %2665 = sext i32 %2664 to i64, !dbg !9126
  %2666 = getelementptr inbounds i32, i32* %2661, i64 %2665, !dbg !9126
  %2667 = load i32, i32* %2666, align 4, !dbg !9126
  %2668 = shl i32 %2667, 13, !dbg !9126
  %2669 = or i32 %2660, %2668, !dbg !9126
  %2670 = xor i32 %2652, %2669, !dbg !9126
  %2671 = load i32*, i32** %7, align 8, !dbg !9126
  %2672 = load i32, i32* %9, align 4, !dbg !9126
  %2673 = add nsw i32 %2672, 6, !dbg !9126
  %2674 = add nsw i32 %2673, 14, !dbg !9126
  %2675 = sext i32 %2674 to i64, !dbg !9126
  %2676 = getelementptr inbounds i32, i32* %2671, i64 %2675, !dbg !9126
  %2677 = load i32, i32* %2676, align 4, !dbg !9126
  %2678 = lshr i32 %2677, 10, !dbg !9126
  %2679 = xor i32 %2670, %2678, !dbg !9126
  %2680 = load i32*, i32** %7, align 8, !dbg !9126
  %2681 = load i32, i32* %9, align 4, !dbg !9126
  %2682 = add nsw i32 %2681, 6, !dbg !9126
  %2683 = add nsw i32 %2682, 9, !dbg !9126
  %2684 = sext i32 %2683 to i64, !dbg !9126
  %2685 = getelementptr inbounds i32, i32* %2680, i64 %2684, !dbg !9126
  %2686 = load i32, i32* %2685, align 4, !dbg !9126
  %2687 = add i32 %2679, %2686, !dbg !9126
  %2688 = load i32*, i32** %7, align 8, !dbg !9126
  %2689 = load i32, i32* %9, align 4, !dbg !9126
  %2690 = add nsw i32 %2689, 6, !dbg !9126
  %2691 = add nsw i32 %2690, 1, !dbg !9126
  %2692 = sext i32 %2691 to i64, !dbg !9126
  %2693 = getelementptr inbounds i32, i32* %2688, i64 %2692, !dbg !9126
  %2694 = load i32, i32* %2693, align 4, !dbg !9126
  %2695 = lshr i32 %2694, 7, !dbg !9126
  %2696 = load i32*, i32** %7, align 8, !dbg !9126
  %2697 = load i32, i32* %9, align 4, !dbg !9126
  %2698 = add nsw i32 %2697, 6, !dbg !9126
  %2699 = add nsw i32 %2698, 1, !dbg !9126
  %2700 = sext i32 %2699 to i64, !dbg !9126
  %2701 = getelementptr inbounds i32, i32* %2696, i64 %2700, !dbg !9126
  %2702 = load i32, i32* %2701, align 4, !dbg !9126
  %2703 = shl i32 %2702, 25, !dbg !9126
  %2704 = or i32 %2695, %2703, !dbg !9126
  %2705 = load i32*, i32** %7, align 8, !dbg !9126
  %2706 = load i32, i32* %9, align 4, !dbg !9126
  %2707 = add nsw i32 %2706, 6, !dbg !9126
  %2708 = add nsw i32 %2707, 1, !dbg !9126
  %2709 = sext i32 %2708 to i64, !dbg !9126
  %2710 = getelementptr inbounds i32, i32* %2705, i64 %2709, !dbg !9126
  %2711 = load i32, i32* %2710, align 4, !dbg !9126
  %2712 = lshr i32 %2711, 18, !dbg !9126
  %2713 = load i32*, i32** %7, align 8, !dbg !9126
  %2714 = load i32, i32* %9, align 4, !dbg !9126
  %2715 = add nsw i32 %2714, 6, !dbg !9126
  %2716 = add nsw i32 %2715, 1, !dbg !9126
  %2717 = sext i32 %2716 to i64, !dbg !9126
  %2718 = getelementptr inbounds i32, i32* %2713, i64 %2717, !dbg !9126
  %2719 = load i32, i32* %2718, align 4, !dbg !9126
  %2720 = shl i32 %2719, 14, !dbg !9126
  %2721 = or i32 %2712, %2720, !dbg !9126
  %2722 = xor i32 %2704, %2721, !dbg !9126
  %2723 = load i32*, i32** %7, align 8, !dbg !9126
  %2724 = load i32, i32* %9, align 4, !dbg !9126
  %2725 = add nsw i32 %2724, 6, !dbg !9126
  %2726 = add nsw i32 %2725, 1, !dbg !9126
  %2727 = sext i32 %2726 to i64, !dbg !9126
  %2728 = getelementptr inbounds i32, i32* %2723, i64 %2727, !dbg !9126
  %2729 = load i32, i32* %2728, align 4, !dbg !9126
  %2730 = lshr i32 %2729, 3, !dbg !9126
  %2731 = xor i32 %2722, %2730, !dbg !9126
  %2732 = add i32 %2687, %2731, !dbg !9126
  %2733 = load i32*, i32** %7, align 8, !dbg !9126
  %2734 = load i32, i32* %9, align 4, !dbg !9126
  %2735 = add nsw i32 %2734, 6, !dbg !9126
  %2736 = sext i32 %2735 to i64, !dbg !9126
  %2737 = getelementptr inbounds i32, i32* %2733, i64 %2736, !dbg !9126
  %2738 = load i32, i32* %2737, align 4, !dbg !9126
  %2739 = add i32 %2732, %2738, !dbg !9126
  %2740 = load i32*, i32** %7, align 8, !dbg !9126
  %2741 = load i32, i32* %9, align 4, !dbg !9126
  %2742 = add nsw i32 %2741, 6, !dbg !9126
  %2743 = add nsw i32 %2742, 16, !dbg !9126
  %2744 = sext i32 %2743 to i64, !dbg !9126
  %2745 = getelementptr inbounds i32, i32* %2740, i64 %2744, !dbg !9126
  store i32 %2739, i32* %2745, align 4, !dbg !9126
  %2746 = load i32*, i32** %7, align 8, !dbg !9127
  %2747 = load i32, i32* %9, align 4, !dbg !9127
  %2748 = add nsw i32 %2747, 7, !dbg !9127
  %2749 = add nsw i32 %2748, 14, !dbg !9127
  %2750 = sext i32 %2749 to i64, !dbg !9127
  %2751 = getelementptr inbounds i32, i32* %2746, i64 %2750, !dbg !9127
  %2752 = load i32, i32* %2751, align 4, !dbg !9127
  %2753 = lshr i32 %2752, 17, !dbg !9127
  %2754 = load i32*, i32** %7, align 8, !dbg !9127
  %2755 = load i32, i32* %9, align 4, !dbg !9127
  %2756 = add nsw i32 %2755, 7, !dbg !9127
  %2757 = add nsw i32 %2756, 14, !dbg !9127
  %2758 = sext i32 %2757 to i64, !dbg !9127
  %2759 = getelementptr inbounds i32, i32* %2754, i64 %2758, !dbg !9127
  %2760 = load i32, i32* %2759, align 4, !dbg !9127
  %2761 = shl i32 %2760, 15, !dbg !9127
  %2762 = or i32 %2753, %2761, !dbg !9127
  %2763 = load i32*, i32** %7, align 8, !dbg !9127
  %2764 = load i32, i32* %9, align 4, !dbg !9127
  %2765 = add nsw i32 %2764, 7, !dbg !9127
  %2766 = add nsw i32 %2765, 14, !dbg !9127
  %2767 = sext i32 %2766 to i64, !dbg !9127
  %2768 = getelementptr inbounds i32, i32* %2763, i64 %2767, !dbg !9127
  %2769 = load i32, i32* %2768, align 4, !dbg !9127
  %2770 = lshr i32 %2769, 19, !dbg !9127
  %2771 = load i32*, i32** %7, align 8, !dbg !9127
  %2772 = load i32, i32* %9, align 4, !dbg !9127
  %2773 = add nsw i32 %2772, 7, !dbg !9127
  %2774 = add nsw i32 %2773, 14, !dbg !9127
  %2775 = sext i32 %2774 to i64, !dbg !9127
  %2776 = getelementptr inbounds i32, i32* %2771, i64 %2775, !dbg !9127
  %2777 = load i32, i32* %2776, align 4, !dbg !9127
  %2778 = shl i32 %2777, 13, !dbg !9127
  %2779 = or i32 %2770, %2778, !dbg !9127
  %2780 = xor i32 %2762, %2779, !dbg !9127
  %2781 = load i32*, i32** %7, align 8, !dbg !9127
  %2782 = load i32, i32* %9, align 4, !dbg !9127
  %2783 = add nsw i32 %2782, 7, !dbg !9127
  %2784 = add nsw i32 %2783, 14, !dbg !9127
  %2785 = sext i32 %2784 to i64, !dbg !9127
  %2786 = getelementptr inbounds i32, i32* %2781, i64 %2785, !dbg !9127
  %2787 = load i32, i32* %2786, align 4, !dbg !9127
  %2788 = lshr i32 %2787, 10, !dbg !9127
  %2789 = xor i32 %2780, %2788, !dbg !9127
  %2790 = load i32*, i32** %7, align 8, !dbg !9127
  %2791 = load i32, i32* %9, align 4, !dbg !9127
  %2792 = add nsw i32 %2791, 7, !dbg !9127
  %2793 = add nsw i32 %2792, 9, !dbg !9127
  %2794 = sext i32 %2793 to i64, !dbg !9127
  %2795 = getelementptr inbounds i32, i32* %2790, i64 %2794, !dbg !9127
  %2796 = load i32, i32* %2795, align 4, !dbg !9127
  %2797 = add i32 %2789, %2796, !dbg !9127
  %2798 = load i32*, i32** %7, align 8, !dbg !9127
  %2799 = load i32, i32* %9, align 4, !dbg !9127
  %2800 = add nsw i32 %2799, 7, !dbg !9127
  %2801 = add nsw i32 %2800, 1, !dbg !9127
  %2802 = sext i32 %2801 to i64, !dbg !9127
  %2803 = getelementptr inbounds i32, i32* %2798, i64 %2802, !dbg !9127
  %2804 = load i32, i32* %2803, align 4, !dbg !9127
  %2805 = lshr i32 %2804, 7, !dbg !9127
  %2806 = load i32*, i32** %7, align 8, !dbg !9127
  %2807 = load i32, i32* %9, align 4, !dbg !9127
  %2808 = add nsw i32 %2807, 7, !dbg !9127
  %2809 = add nsw i32 %2808, 1, !dbg !9127
  %2810 = sext i32 %2809 to i64, !dbg !9127
  %2811 = getelementptr inbounds i32, i32* %2806, i64 %2810, !dbg !9127
  %2812 = load i32, i32* %2811, align 4, !dbg !9127
  %2813 = shl i32 %2812, 25, !dbg !9127
  %2814 = or i32 %2805, %2813, !dbg !9127
  %2815 = load i32*, i32** %7, align 8, !dbg !9127
  %2816 = load i32, i32* %9, align 4, !dbg !9127
  %2817 = add nsw i32 %2816, 7, !dbg !9127
  %2818 = add nsw i32 %2817, 1, !dbg !9127
  %2819 = sext i32 %2818 to i64, !dbg !9127
  %2820 = getelementptr inbounds i32, i32* %2815, i64 %2819, !dbg !9127
  %2821 = load i32, i32* %2820, align 4, !dbg !9127
  %2822 = lshr i32 %2821, 18, !dbg !9127
  %2823 = load i32*, i32** %7, align 8, !dbg !9127
  %2824 = load i32, i32* %9, align 4, !dbg !9127
  %2825 = add nsw i32 %2824, 7, !dbg !9127
  %2826 = add nsw i32 %2825, 1, !dbg !9127
  %2827 = sext i32 %2826 to i64, !dbg !9127
  %2828 = getelementptr inbounds i32, i32* %2823, i64 %2827, !dbg !9127
  %2829 = load i32, i32* %2828, align 4, !dbg !9127
  %2830 = shl i32 %2829, 14, !dbg !9127
  %2831 = or i32 %2822, %2830, !dbg !9127
  %2832 = xor i32 %2814, %2831, !dbg !9127
  %2833 = load i32*, i32** %7, align 8, !dbg !9127
  %2834 = load i32, i32* %9, align 4, !dbg !9127
  %2835 = add nsw i32 %2834, 7, !dbg !9127
  %2836 = add nsw i32 %2835, 1, !dbg !9127
  %2837 = sext i32 %2836 to i64, !dbg !9127
  %2838 = getelementptr inbounds i32, i32* %2833, i64 %2837, !dbg !9127
  %2839 = load i32, i32* %2838, align 4, !dbg !9127
  %2840 = lshr i32 %2839, 3, !dbg !9127
  %2841 = xor i32 %2832, %2840, !dbg !9127
  %2842 = add i32 %2797, %2841, !dbg !9127
  %2843 = load i32*, i32** %7, align 8, !dbg !9127
  %2844 = load i32, i32* %9, align 4, !dbg !9127
  %2845 = add nsw i32 %2844, 7, !dbg !9127
  %2846 = sext i32 %2845 to i64, !dbg !9127
  %2847 = getelementptr inbounds i32, i32* %2843, i64 %2846, !dbg !9127
  %2848 = load i32, i32* %2847, align 4, !dbg !9127
  %2849 = add i32 %2842, %2848, !dbg !9127
  %2850 = load i32*, i32** %7, align 8, !dbg !9127
  %2851 = load i32, i32* %9, align 4, !dbg !9127
  %2852 = add nsw i32 %2851, 7, !dbg !9127
  %2853 = add nsw i32 %2852, 16, !dbg !9127
  %2854 = sext i32 %2853 to i64, !dbg !9127
  %2855 = getelementptr inbounds i32, i32* %2850, i64 %2854, !dbg !9127
  store i32 %2849, i32* %2855, align 4, !dbg !9127
  %2856 = load i32*, i32** %7, align 8, !dbg !9128
  %2857 = load i32, i32* %9, align 4, !dbg !9128
  %2858 = add nsw i32 %2857, 8, !dbg !9128
  %2859 = add nsw i32 %2858, 14, !dbg !9128
  %2860 = sext i32 %2859 to i64, !dbg !9128
  %2861 = getelementptr inbounds i32, i32* %2856, i64 %2860, !dbg !9128
  %2862 = load i32, i32* %2861, align 4, !dbg !9128
  %2863 = lshr i32 %2862, 17, !dbg !9128
  %2864 = load i32*, i32** %7, align 8, !dbg !9128
  %2865 = load i32, i32* %9, align 4, !dbg !9128
  %2866 = add nsw i32 %2865, 8, !dbg !9128
  %2867 = add nsw i32 %2866, 14, !dbg !9128
  %2868 = sext i32 %2867 to i64, !dbg !9128
  %2869 = getelementptr inbounds i32, i32* %2864, i64 %2868, !dbg !9128
  %2870 = load i32, i32* %2869, align 4, !dbg !9128
  %2871 = shl i32 %2870, 15, !dbg !9128
  %2872 = or i32 %2863, %2871, !dbg !9128
  %2873 = load i32*, i32** %7, align 8, !dbg !9128
  %2874 = load i32, i32* %9, align 4, !dbg !9128
  %2875 = add nsw i32 %2874, 8, !dbg !9128
  %2876 = add nsw i32 %2875, 14, !dbg !9128
  %2877 = sext i32 %2876 to i64, !dbg !9128
  %2878 = getelementptr inbounds i32, i32* %2873, i64 %2877, !dbg !9128
  %2879 = load i32, i32* %2878, align 4, !dbg !9128
  %2880 = lshr i32 %2879, 19, !dbg !9128
  %2881 = load i32*, i32** %7, align 8, !dbg !9128
  %2882 = load i32, i32* %9, align 4, !dbg !9128
  %2883 = add nsw i32 %2882, 8, !dbg !9128
  %2884 = add nsw i32 %2883, 14, !dbg !9128
  %2885 = sext i32 %2884 to i64, !dbg !9128
  %2886 = getelementptr inbounds i32, i32* %2881, i64 %2885, !dbg !9128
  %2887 = load i32, i32* %2886, align 4, !dbg !9128
  %2888 = shl i32 %2887, 13, !dbg !9128
  %2889 = or i32 %2880, %2888, !dbg !9128
  %2890 = xor i32 %2872, %2889, !dbg !9128
  %2891 = load i32*, i32** %7, align 8, !dbg !9128
  %2892 = load i32, i32* %9, align 4, !dbg !9128
  %2893 = add nsw i32 %2892, 8, !dbg !9128
  %2894 = add nsw i32 %2893, 14, !dbg !9128
  %2895 = sext i32 %2894 to i64, !dbg !9128
  %2896 = getelementptr inbounds i32, i32* %2891, i64 %2895, !dbg !9128
  %2897 = load i32, i32* %2896, align 4, !dbg !9128
  %2898 = lshr i32 %2897, 10, !dbg !9128
  %2899 = xor i32 %2890, %2898, !dbg !9128
  %2900 = load i32*, i32** %7, align 8, !dbg !9128
  %2901 = load i32, i32* %9, align 4, !dbg !9128
  %2902 = add nsw i32 %2901, 8, !dbg !9128
  %2903 = add nsw i32 %2902, 9, !dbg !9128
  %2904 = sext i32 %2903 to i64, !dbg !9128
  %2905 = getelementptr inbounds i32, i32* %2900, i64 %2904, !dbg !9128
  %2906 = load i32, i32* %2905, align 4, !dbg !9128
  %2907 = add i32 %2899, %2906, !dbg !9128
  %2908 = load i32*, i32** %7, align 8, !dbg !9128
  %2909 = load i32, i32* %9, align 4, !dbg !9128
  %2910 = add nsw i32 %2909, 8, !dbg !9128
  %2911 = add nsw i32 %2910, 1, !dbg !9128
  %2912 = sext i32 %2911 to i64, !dbg !9128
  %2913 = getelementptr inbounds i32, i32* %2908, i64 %2912, !dbg !9128
  %2914 = load i32, i32* %2913, align 4, !dbg !9128
  %2915 = lshr i32 %2914, 7, !dbg !9128
  %2916 = load i32*, i32** %7, align 8, !dbg !9128
  %2917 = load i32, i32* %9, align 4, !dbg !9128
  %2918 = add nsw i32 %2917, 8, !dbg !9128
  %2919 = add nsw i32 %2918, 1, !dbg !9128
  %2920 = sext i32 %2919 to i64, !dbg !9128
  %2921 = getelementptr inbounds i32, i32* %2916, i64 %2920, !dbg !9128
  %2922 = load i32, i32* %2921, align 4, !dbg !9128
  %2923 = shl i32 %2922, 25, !dbg !9128
  %2924 = or i32 %2915, %2923, !dbg !9128
  %2925 = load i32*, i32** %7, align 8, !dbg !9128
  %2926 = load i32, i32* %9, align 4, !dbg !9128
  %2927 = add nsw i32 %2926, 8, !dbg !9128
  %2928 = add nsw i32 %2927, 1, !dbg !9128
  %2929 = sext i32 %2928 to i64, !dbg !9128
  %2930 = getelementptr inbounds i32, i32* %2925, i64 %2929, !dbg !9128
  %2931 = load i32, i32* %2930, align 4, !dbg !9128
  %2932 = lshr i32 %2931, 18, !dbg !9128
  %2933 = load i32*, i32** %7, align 8, !dbg !9128
  %2934 = load i32, i32* %9, align 4, !dbg !9128
  %2935 = add nsw i32 %2934, 8, !dbg !9128
  %2936 = add nsw i32 %2935, 1, !dbg !9128
  %2937 = sext i32 %2936 to i64, !dbg !9128
  %2938 = getelementptr inbounds i32, i32* %2933, i64 %2937, !dbg !9128
  %2939 = load i32, i32* %2938, align 4, !dbg !9128
  %2940 = shl i32 %2939, 14, !dbg !9128
  %2941 = or i32 %2932, %2940, !dbg !9128
  %2942 = xor i32 %2924, %2941, !dbg !9128
  %2943 = load i32*, i32** %7, align 8, !dbg !9128
  %2944 = load i32, i32* %9, align 4, !dbg !9128
  %2945 = add nsw i32 %2944, 8, !dbg !9128
  %2946 = add nsw i32 %2945, 1, !dbg !9128
  %2947 = sext i32 %2946 to i64, !dbg !9128
  %2948 = getelementptr inbounds i32, i32* %2943, i64 %2947, !dbg !9128
  %2949 = load i32, i32* %2948, align 4, !dbg !9128
  %2950 = lshr i32 %2949, 3, !dbg !9128
  %2951 = xor i32 %2942, %2950, !dbg !9128
  %2952 = add i32 %2907, %2951, !dbg !9128
  %2953 = load i32*, i32** %7, align 8, !dbg !9128
  %2954 = load i32, i32* %9, align 4, !dbg !9128
  %2955 = add nsw i32 %2954, 8, !dbg !9128
  %2956 = sext i32 %2955 to i64, !dbg !9128
  %2957 = getelementptr inbounds i32, i32* %2953, i64 %2956, !dbg !9128
  %2958 = load i32, i32* %2957, align 4, !dbg !9128
  %2959 = add i32 %2952, %2958, !dbg !9128
  %2960 = load i32*, i32** %7, align 8, !dbg !9128
  %2961 = load i32, i32* %9, align 4, !dbg !9128
  %2962 = add nsw i32 %2961, 8, !dbg !9128
  %2963 = add nsw i32 %2962, 16, !dbg !9128
  %2964 = sext i32 %2963 to i64, !dbg !9128
  %2965 = getelementptr inbounds i32, i32* %2960, i64 %2964, !dbg !9128
  store i32 %2959, i32* %2965, align 4, !dbg !9128
  %2966 = load i32*, i32** %7, align 8, !dbg !9129
  %2967 = load i32, i32* %9, align 4, !dbg !9129
  %2968 = add nsw i32 %2967, 9, !dbg !9129
  %2969 = add nsw i32 %2968, 14, !dbg !9129
  %2970 = sext i32 %2969 to i64, !dbg !9129
  %2971 = getelementptr inbounds i32, i32* %2966, i64 %2970, !dbg !9129
  %2972 = load i32, i32* %2971, align 4, !dbg !9129
  %2973 = lshr i32 %2972, 17, !dbg !9129
  %2974 = load i32*, i32** %7, align 8, !dbg !9129
  %2975 = load i32, i32* %9, align 4, !dbg !9129
  %2976 = add nsw i32 %2975, 9, !dbg !9129
  %2977 = add nsw i32 %2976, 14, !dbg !9129
  %2978 = sext i32 %2977 to i64, !dbg !9129
  %2979 = getelementptr inbounds i32, i32* %2974, i64 %2978, !dbg !9129
  %2980 = load i32, i32* %2979, align 4, !dbg !9129
  %2981 = shl i32 %2980, 15, !dbg !9129
  %2982 = or i32 %2973, %2981, !dbg !9129
  %2983 = load i32*, i32** %7, align 8, !dbg !9129
  %2984 = load i32, i32* %9, align 4, !dbg !9129
  %2985 = add nsw i32 %2984, 9, !dbg !9129
  %2986 = add nsw i32 %2985, 14, !dbg !9129
  %2987 = sext i32 %2986 to i64, !dbg !9129
  %2988 = getelementptr inbounds i32, i32* %2983, i64 %2987, !dbg !9129
  %2989 = load i32, i32* %2988, align 4, !dbg !9129
  %2990 = lshr i32 %2989, 19, !dbg !9129
  %2991 = load i32*, i32** %7, align 8, !dbg !9129
  %2992 = load i32, i32* %9, align 4, !dbg !9129
  %2993 = add nsw i32 %2992, 9, !dbg !9129
  %2994 = add nsw i32 %2993, 14, !dbg !9129
  %2995 = sext i32 %2994 to i64, !dbg !9129
  %2996 = getelementptr inbounds i32, i32* %2991, i64 %2995, !dbg !9129
  %2997 = load i32, i32* %2996, align 4, !dbg !9129
  %2998 = shl i32 %2997, 13, !dbg !9129
  %2999 = or i32 %2990, %2998, !dbg !9129
  %3000 = xor i32 %2982, %2999, !dbg !9129
  %3001 = load i32*, i32** %7, align 8, !dbg !9129
  %3002 = load i32, i32* %9, align 4, !dbg !9129
  %3003 = add nsw i32 %3002, 9, !dbg !9129
  %3004 = add nsw i32 %3003, 14, !dbg !9129
  %3005 = sext i32 %3004 to i64, !dbg !9129
  %3006 = getelementptr inbounds i32, i32* %3001, i64 %3005, !dbg !9129
  %3007 = load i32, i32* %3006, align 4, !dbg !9129
  %3008 = lshr i32 %3007, 10, !dbg !9129
  %3009 = xor i32 %3000, %3008, !dbg !9129
  %3010 = load i32*, i32** %7, align 8, !dbg !9129
  %3011 = load i32, i32* %9, align 4, !dbg !9129
  %3012 = add nsw i32 %3011, 9, !dbg !9129
  %3013 = add nsw i32 %3012, 9, !dbg !9129
  %3014 = sext i32 %3013 to i64, !dbg !9129
  %3015 = getelementptr inbounds i32, i32* %3010, i64 %3014, !dbg !9129
  %3016 = load i32, i32* %3015, align 4, !dbg !9129
  %3017 = add i32 %3009, %3016, !dbg !9129
  %3018 = load i32*, i32** %7, align 8, !dbg !9129
  %3019 = load i32, i32* %9, align 4, !dbg !9129
  %3020 = add nsw i32 %3019, 9, !dbg !9129
  %3021 = add nsw i32 %3020, 1, !dbg !9129
  %3022 = sext i32 %3021 to i64, !dbg !9129
  %3023 = getelementptr inbounds i32, i32* %3018, i64 %3022, !dbg !9129
  %3024 = load i32, i32* %3023, align 4, !dbg !9129
  %3025 = lshr i32 %3024, 7, !dbg !9129
  %3026 = load i32*, i32** %7, align 8, !dbg !9129
  %3027 = load i32, i32* %9, align 4, !dbg !9129
  %3028 = add nsw i32 %3027, 9, !dbg !9129
  %3029 = add nsw i32 %3028, 1, !dbg !9129
  %3030 = sext i32 %3029 to i64, !dbg !9129
  %3031 = getelementptr inbounds i32, i32* %3026, i64 %3030, !dbg !9129
  %3032 = load i32, i32* %3031, align 4, !dbg !9129
  %3033 = shl i32 %3032, 25, !dbg !9129
  %3034 = or i32 %3025, %3033, !dbg !9129
  %3035 = load i32*, i32** %7, align 8, !dbg !9129
  %3036 = load i32, i32* %9, align 4, !dbg !9129
  %3037 = add nsw i32 %3036, 9, !dbg !9129
  %3038 = add nsw i32 %3037, 1, !dbg !9129
  %3039 = sext i32 %3038 to i64, !dbg !9129
  %3040 = getelementptr inbounds i32, i32* %3035, i64 %3039, !dbg !9129
  %3041 = load i32, i32* %3040, align 4, !dbg !9129
  %3042 = lshr i32 %3041, 18, !dbg !9129
  %3043 = load i32*, i32** %7, align 8, !dbg !9129
  %3044 = load i32, i32* %9, align 4, !dbg !9129
  %3045 = add nsw i32 %3044, 9, !dbg !9129
  %3046 = add nsw i32 %3045, 1, !dbg !9129
  %3047 = sext i32 %3046 to i64, !dbg !9129
  %3048 = getelementptr inbounds i32, i32* %3043, i64 %3047, !dbg !9129
  %3049 = load i32, i32* %3048, align 4, !dbg !9129
  %3050 = shl i32 %3049, 14, !dbg !9129
  %3051 = or i32 %3042, %3050, !dbg !9129
  %3052 = xor i32 %3034, %3051, !dbg !9129
  %3053 = load i32*, i32** %7, align 8, !dbg !9129
  %3054 = load i32, i32* %9, align 4, !dbg !9129
  %3055 = add nsw i32 %3054, 9, !dbg !9129
  %3056 = add nsw i32 %3055, 1, !dbg !9129
  %3057 = sext i32 %3056 to i64, !dbg !9129
  %3058 = getelementptr inbounds i32, i32* %3053, i64 %3057, !dbg !9129
  %3059 = load i32, i32* %3058, align 4, !dbg !9129
  %3060 = lshr i32 %3059, 3, !dbg !9129
  %3061 = xor i32 %3052, %3060, !dbg !9129
  %3062 = add i32 %3017, %3061, !dbg !9129
  %3063 = load i32*, i32** %7, align 8, !dbg !9129
  %3064 = load i32, i32* %9, align 4, !dbg !9129
  %3065 = add nsw i32 %3064, 9, !dbg !9129
  %3066 = sext i32 %3065 to i64, !dbg !9129
  %3067 = getelementptr inbounds i32, i32* %3063, i64 %3066, !dbg !9129
  %3068 = load i32, i32* %3067, align 4, !dbg !9129
  %3069 = add i32 %3062, %3068, !dbg !9129
  %3070 = load i32*, i32** %7, align 8, !dbg !9129
  %3071 = load i32, i32* %9, align 4, !dbg !9129
  %3072 = add nsw i32 %3071, 9, !dbg !9129
  %3073 = add nsw i32 %3072, 16, !dbg !9129
  %3074 = sext i32 %3073 to i64, !dbg !9129
  %3075 = getelementptr inbounds i32, i32* %3070, i64 %3074, !dbg !9129
  store i32 %3069, i32* %3075, align 4, !dbg !9129
  %3076 = load i32*, i32** %7, align 8, !dbg !9130
  %3077 = load i32, i32* %9, align 4, !dbg !9130
  %3078 = add nsw i32 %3077, 10, !dbg !9130
  %3079 = add nsw i32 %3078, 14, !dbg !9130
  %3080 = sext i32 %3079 to i64, !dbg !9130
  %3081 = getelementptr inbounds i32, i32* %3076, i64 %3080, !dbg !9130
  %3082 = load i32, i32* %3081, align 4, !dbg !9130
  %3083 = lshr i32 %3082, 17, !dbg !9130
  %3084 = load i32*, i32** %7, align 8, !dbg !9130
  %3085 = load i32, i32* %9, align 4, !dbg !9130
  %3086 = add nsw i32 %3085, 10, !dbg !9130
  %3087 = add nsw i32 %3086, 14, !dbg !9130
  %3088 = sext i32 %3087 to i64, !dbg !9130
  %3089 = getelementptr inbounds i32, i32* %3084, i64 %3088, !dbg !9130
  %3090 = load i32, i32* %3089, align 4, !dbg !9130
  %3091 = shl i32 %3090, 15, !dbg !9130
  %3092 = or i32 %3083, %3091, !dbg !9130
  %3093 = load i32*, i32** %7, align 8, !dbg !9130
  %3094 = load i32, i32* %9, align 4, !dbg !9130
  %3095 = add nsw i32 %3094, 10, !dbg !9130
  %3096 = add nsw i32 %3095, 14, !dbg !9130
  %3097 = sext i32 %3096 to i64, !dbg !9130
  %3098 = getelementptr inbounds i32, i32* %3093, i64 %3097, !dbg !9130
  %3099 = load i32, i32* %3098, align 4, !dbg !9130
  %3100 = lshr i32 %3099, 19, !dbg !9130
  %3101 = load i32*, i32** %7, align 8, !dbg !9130
  %3102 = load i32, i32* %9, align 4, !dbg !9130
  %3103 = add nsw i32 %3102, 10, !dbg !9130
  %3104 = add nsw i32 %3103, 14, !dbg !9130
  %3105 = sext i32 %3104 to i64, !dbg !9130
  %3106 = getelementptr inbounds i32, i32* %3101, i64 %3105, !dbg !9130
  %3107 = load i32, i32* %3106, align 4, !dbg !9130
  %3108 = shl i32 %3107, 13, !dbg !9130
  %3109 = or i32 %3100, %3108, !dbg !9130
  %3110 = xor i32 %3092, %3109, !dbg !9130
  %3111 = load i32*, i32** %7, align 8, !dbg !9130
  %3112 = load i32, i32* %9, align 4, !dbg !9130
  %3113 = add nsw i32 %3112, 10, !dbg !9130
  %3114 = add nsw i32 %3113, 14, !dbg !9130
  %3115 = sext i32 %3114 to i64, !dbg !9130
  %3116 = getelementptr inbounds i32, i32* %3111, i64 %3115, !dbg !9130
  %3117 = load i32, i32* %3116, align 4, !dbg !9130
  %3118 = lshr i32 %3117, 10, !dbg !9130
  %3119 = xor i32 %3110, %3118, !dbg !9130
  %3120 = load i32*, i32** %7, align 8, !dbg !9130
  %3121 = load i32, i32* %9, align 4, !dbg !9130
  %3122 = add nsw i32 %3121, 10, !dbg !9130
  %3123 = add nsw i32 %3122, 9, !dbg !9130
  %3124 = sext i32 %3123 to i64, !dbg !9130
  %3125 = getelementptr inbounds i32, i32* %3120, i64 %3124, !dbg !9130
  %3126 = load i32, i32* %3125, align 4, !dbg !9130
  %3127 = add i32 %3119, %3126, !dbg !9130
  %3128 = load i32*, i32** %7, align 8, !dbg !9130
  %3129 = load i32, i32* %9, align 4, !dbg !9130
  %3130 = add nsw i32 %3129, 10, !dbg !9130
  %3131 = add nsw i32 %3130, 1, !dbg !9130
  %3132 = sext i32 %3131 to i64, !dbg !9130
  %3133 = getelementptr inbounds i32, i32* %3128, i64 %3132, !dbg !9130
  %3134 = load i32, i32* %3133, align 4, !dbg !9130
  %3135 = lshr i32 %3134, 7, !dbg !9130
  %3136 = load i32*, i32** %7, align 8, !dbg !9130
  %3137 = load i32, i32* %9, align 4, !dbg !9130
  %3138 = add nsw i32 %3137, 10, !dbg !9130
  %3139 = add nsw i32 %3138, 1, !dbg !9130
  %3140 = sext i32 %3139 to i64, !dbg !9130
  %3141 = getelementptr inbounds i32, i32* %3136, i64 %3140, !dbg !9130
  %3142 = load i32, i32* %3141, align 4, !dbg !9130
  %3143 = shl i32 %3142, 25, !dbg !9130
  %3144 = or i32 %3135, %3143, !dbg !9130
  %3145 = load i32*, i32** %7, align 8, !dbg !9130
  %3146 = load i32, i32* %9, align 4, !dbg !9130
  %3147 = add nsw i32 %3146, 10, !dbg !9130
  %3148 = add nsw i32 %3147, 1, !dbg !9130
  %3149 = sext i32 %3148 to i64, !dbg !9130
  %3150 = getelementptr inbounds i32, i32* %3145, i64 %3149, !dbg !9130
  %3151 = load i32, i32* %3150, align 4, !dbg !9130
  %3152 = lshr i32 %3151, 18, !dbg !9130
  %3153 = load i32*, i32** %7, align 8, !dbg !9130
  %3154 = load i32, i32* %9, align 4, !dbg !9130
  %3155 = add nsw i32 %3154, 10, !dbg !9130
  %3156 = add nsw i32 %3155, 1, !dbg !9130
  %3157 = sext i32 %3156 to i64, !dbg !9130
  %3158 = getelementptr inbounds i32, i32* %3153, i64 %3157, !dbg !9130
  %3159 = load i32, i32* %3158, align 4, !dbg !9130
  %3160 = shl i32 %3159, 14, !dbg !9130
  %3161 = or i32 %3152, %3160, !dbg !9130
  %3162 = xor i32 %3144, %3161, !dbg !9130
  %3163 = load i32*, i32** %7, align 8, !dbg !9130
  %3164 = load i32, i32* %9, align 4, !dbg !9130
  %3165 = add nsw i32 %3164, 10, !dbg !9130
  %3166 = add nsw i32 %3165, 1, !dbg !9130
  %3167 = sext i32 %3166 to i64, !dbg !9130
  %3168 = getelementptr inbounds i32, i32* %3163, i64 %3167, !dbg !9130
  %3169 = load i32, i32* %3168, align 4, !dbg !9130
  %3170 = lshr i32 %3169, 3, !dbg !9130
  %3171 = xor i32 %3162, %3170, !dbg !9130
  %3172 = add i32 %3127, %3171, !dbg !9130
  %3173 = load i32*, i32** %7, align 8, !dbg !9130
  %3174 = load i32, i32* %9, align 4, !dbg !9130
  %3175 = add nsw i32 %3174, 10, !dbg !9130
  %3176 = sext i32 %3175 to i64, !dbg !9130
  %3177 = getelementptr inbounds i32, i32* %3173, i64 %3176, !dbg !9130
  %3178 = load i32, i32* %3177, align 4, !dbg !9130
  %3179 = add i32 %3172, %3178, !dbg !9130
  %3180 = load i32*, i32** %7, align 8, !dbg !9130
  %3181 = load i32, i32* %9, align 4, !dbg !9130
  %3182 = add nsw i32 %3181, 10, !dbg !9130
  %3183 = add nsw i32 %3182, 16, !dbg !9130
  %3184 = sext i32 %3183 to i64, !dbg !9130
  %3185 = getelementptr inbounds i32, i32* %3180, i64 %3184, !dbg !9130
  store i32 %3179, i32* %3185, align 4, !dbg !9130
  %3186 = load i32*, i32** %7, align 8, !dbg !9131
  %3187 = load i32, i32* %9, align 4, !dbg !9131
  %3188 = add nsw i32 %3187, 11, !dbg !9131
  %3189 = add nsw i32 %3188, 14, !dbg !9131
  %3190 = sext i32 %3189 to i64, !dbg !9131
  %3191 = getelementptr inbounds i32, i32* %3186, i64 %3190, !dbg !9131
  %3192 = load i32, i32* %3191, align 4, !dbg !9131
  %3193 = lshr i32 %3192, 17, !dbg !9131
  %3194 = load i32*, i32** %7, align 8, !dbg !9131
  %3195 = load i32, i32* %9, align 4, !dbg !9131
  %3196 = add nsw i32 %3195, 11, !dbg !9131
  %3197 = add nsw i32 %3196, 14, !dbg !9131
  %3198 = sext i32 %3197 to i64, !dbg !9131
  %3199 = getelementptr inbounds i32, i32* %3194, i64 %3198, !dbg !9131
  %3200 = load i32, i32* %3199, align 4, !dbg !9131
  %3201 = shl i32 %3200, 15, !dbg !9131
  %3202 = or i32 %3193, %3201, !dbg !9131
  %3203 = load i32*, i32** %7, align 8, !dbg !9131
  %3204 = load i32, i32* %9, align 4, !dbg !9131
  %3205 = add nsw i32 %3204, 11, !dbg !9131
  %3206 = add nsw i32 %3205, 14, !dbg !9131
  %3207 = sext i32 %3206 to i64, !dbg !9131
  %3208 = getelementptr inbounds i32, i32* %3203, i64 %3207, !dbg !9131
  %3209 = load i32, i32* %3208, align 4, !dbg !9131
  %3210 = lshr i32 %3209, 19, !dbg !9131
  %3211 = load i32*, i32** %7, align 8, !dbg !9131
  %3212 = load i32, i32* %9, align 4, !dbg !9131
  %3213 = add nsw i32 %3212, 11, !dbg !9131
  %3214 = add nsw i32 %3213, 14, !dbg !9131
  %3215 = sext i32 %3214 to i64, !dbg !9131
  %3216 = getelementptr inbounds i32, i32* %3211, i64 %3215, !dbg !9131
  %3217 = load i32, i32* %3216, align 4, !dbg !9131
  %3218 = shl i32 %3217, 13, !dbg !9131
  %3219 = or i32 %3210, %3218, !dbg !9131
  %3220 = xor i32 %3202, %3219, !dbg !9131
  %3221 = load i32*, i32** %7, align 8, !dbg !9131
  %3222 = load i32, i32* %9, align 4, !dbg !9131
  %3223 = add nsw i32 %3222, 11, !dbg !9131
  %3224 = add nsw i32 %3223, 14, !dbg !9131
  %3225 = sext i32 %3224 to i64, !dbg !9131
  %3226 = getelementptr inbounds i32, i32* %3221, i64 %3225, !dbg !9131
  %3227 = load i32, i32* %3226, align 4, !dbg !9131
  %3228 = lshr i32 %3227, 10, !dbg !9131
  %3229 = xor i32 %3220, %3228, !dbg !9131
  %3230 = load i32*, i32** %7, align 8, !dbg !9131
  %3231 = load i32, i32* %9, align 4, !dbg !9131
  %3232 = add nsw i32 %3231, 11, !dbg !9131
  %3233 = add nsw i32 %3232, 9, !dbg !9131
  %3234 = sext i32 %3233 to i64, !dbg !9131
  %3235 = getelementptr inbounds i32, i32* %3230, i64 %3234, !dbg !9131
  %3236 = load i32, i32* %3235, align 4, !dbg !9131
  %3237 = add i32 %3229, %3236, !dbg !9131
  %3238 = load i32*, i32** %7, align 8, !dbg !9131
  %3239 = load i32, i32* %9, align 4, !dbg !9131
  %3240 = add nsw i32 %3239, 11, !dbg !9131
  %3241 = add nsw i32 %3240, 1, !dbg !9131
  %3242 = sext i32 %3241 to i64, !dbg !9131
  %3243 = getelementptr inbounds i32, i32* %3238, i64 %3242, !dbg !9131
  %3244 = load i32, i32* %3243, align 4, !dbg !9131
  %3245 = lshr i32 %3244, 7, !dbg !9131
  %3246 = load i32*, i32** %7, align 8, !dbg !9131
  %3247 = load i32, i32* %9, align 4, !dbg !9131
  %3248 = add nsw i32 %3247, 11, !dbg !9131
  %3249 = add nsw i32 %3248, 1, !dbg !9131
  %3250 = sext i32 %3249 to i64, !dbg !9131
  %3251 = getelementptr inbounds i32, i32* %3246, i64 %3250, !dbg !9131
  %3252 = load i32, i32* %3251, align 4, !dbg !9131
  %3253 = shl i32 %3252, 25, !dbg !9131
  %3254 = or i32 %3245, %3253, !dbg !9131
  %3255 = load i32*, i32** %7, align 8, !dbg !9131
  %3256 = load i32, i32* %9, align 4, !dbg !9131
  %3257 = add nsw i32 %3256, 11, !dbg !9131
  %3258 = add nsw i32 %3257, 1, !dbg !9131
  %3259 = sext i32 %3258 to i64, !dbg !9131
  %3260 = getelementptr inbounds i32, i32* %3255, i64 %3259, !dbg !9131
  %3261 = load i32, i32* %3260, align 4, !dbg !9131
  %3262 = lshr i32 %3261, 18, !dbg !9131
  %3263 = load i32*, i32** %7, align 8, !dbg !9131
  %3264 = load i32, i32* %9, align 4, !dbg !9131
  %3265 = add nsw i32 %3264, 11, !dbg !9131
  %3266 = add nsw i32 %3265, 1, !dbg !9131
  %3267 = sext i32 %3266 to i64, !dbg !9131
  %3268 = getelementptr inbounds i32, i32* %3263, i64 %3267, !dbg !9131
  %3269 = load i32, i32* %3268, align 4, !dbg !9131
  %3270 = shl i32 %3269, 14, !dbg !9131
  %3271 = or i32 %3262, %3270, !dbg !9131
  %3272 = xor i32 %3254, %3271, !dbg !9131
  %3273 = load i32*, i32** %7, align 8, !dbg !9131
  %3274 = load i32, i32* %9, align 4, !dbg !9131
  %3275 = add nsw i32 %3274, 11, !dbg !9131
  %3276 = add nsw i32 %3275, 1, !dbg !9131
  %3277 = sext i32 %3276 to i64, !dbg !9131
  %3278 = getelementptr inbounds i32, i32* %3273, i64 %3277, !dbg !9131
  %3279 = load i32, i32* %3278, align 4, !dbg !9131
  %3280 = lshr i32 %3279, 3, !dbg !9131
  %3281 = xor i32 %3272, %3280, !dbg !9131
  %3282 = add i32 %3237, %3281, !dbg !9131
  %3283 = load i32*, i32** %7, align 8, !dbg !9131
  %3284 = load i32, i32* %9, align 4, !dbg !9131
  %3285 = add nsw i32 %3284, 11, !dbg !9131
  %3286 = sext i32 %3285 to i64, !dbg !9131
  %3287 = getelementptr inbounds i32, i32* %3283, i64 %3286, !dbg !9131
  %3288 = load i32, i32* %3287, align 4, !dbg !9131
  %3289 = add i32 %3282, %3288, !dbg !9131
  %3290 = load i32*, i32** %7, align 8, !dbg !9131
  %3291 = load i32, i32* %9, align 4, !dbg !9131
  %3292 = add nsw i32 %3291, 11, !dbg !9131
  %3293 = add nsw i32 %3292, 16, !dbg !9131
  %3294 = sext i32 %3293 to i64, !dbg !9131
  %3295 = getelementptr inbounds i32, i32* %3290, i64 %3294, !dbg !9131
  store i32 %3289, i32* %3295, align 4, !dbg !9131
  %3296 = load i32*, i32** %7, align 8, !dbg !9132
  %3297 = load i32, i32* %9, align 4, !dbg !9132
  %3298 = add nsw i32 %3297, 12, !dbg !9132
  %3299 = add nsw i32 %3298, 14, !dbg !9132
  %3300 = sext i32 %3299 to i64, !dbg !9132
  %3301 = getelementptr inbounds i32, i32* %3296, i64 %3300, !dbg !9132
  %3302 = load i32, i32* %3301, align 4, !dbg !9132
  %3303 = lshr i32 %3302, 17, !dbg !9132
  %3304 = load i32*, i32** %7, align 8, !dbg !9132
  %3305 = load i32, i32* %9, align 4, !dbg !9132
  %3306 = add nsw i32 %3305, 12, !dbg !9132
  %3307 = add nsw i32 %3306, 14, !dbg !9132
  %3308 = sext i32 %3307 to i64, !dbg !9132
  %3309 = getelementptr inbounds i32, i32* %3304, i64 %3308, !dbg !9132
  %3310 = load i32, i32* %3309, align 4, !dbg !9132
  %3311 = shl i32 %3310, 15, !dbg !9132
  %3312 = or i32 %3303, %3311, !dbg !9132
  %3313 = load i32*, i32** %7, align 8, !dbg !9132
  %3314 = load i32, i32* %9, align 4, !dbg !9132
  %3315 = add nsw i32 %3314, 12, !dbg !9132
  %3316 = add nsw i32 %3315, 14, !dbg !9132
  %3317 = sext i32 %3316 to i64, !dbg !9132
  %3318 = getelementptr inbounds i32, i32* %3313, i64 %3317, !dbg !9132
  %3319 = load i32, i32* %3318, align 4, !dbg !9132
  %3320 = lshr i32 %3319, 19, !dbg !9132
  %3321 = load i32*, i32** %7, align 8, !dbg !9132
  %3322 = load i32, i32* %9, align 4, !dbg !9132
  %3323 = add nsw i32 %3322, 12, !dbg !9132
  %3324 = add nsw i32 %3323, 14, !dbg !9132
  %3325 = sext i32 %3324 to i64, !dbg !9132
  %3326 = getelementptr inbounds i32, i32* %3321, i64 %3325, !dbg !9132
  %3327 = load i32, i32* %3326, align 4, !dbg !9132
  %3328 = shl i32 %3327, 13, !dbg !9132
  %3329 = or i32 %3320, %3328, !dbg !9132
  %3330 = xor i32 %3312, %3329, !dbg !9132
  %3331 = load i32*, i32** %7, align 8, !dbg !9132
  %3332 = load i32, i32* %9, align 4, !dbg !9132
  %3333 = add nsw i32 %3332, 12, !dbg !9132
  %3334 = add nsw i32 %3333, 14, !dbg !9132
  %3335 = sext i32 %3334 to i64, !dbg !9132
  %3336 = getelementptr inbounds i32, i32* %3331, i64 %3335, !dbg !9132
  %3337 = load i32, i32* %3336, align 4, !dbg !9132
  %3338 = lshr i32 %3337, 10, !dbg !9132
  %3339 = xor i32 %3330, %3338, !dbg !9132
  %3340 = load i32*, i32** %7, align 8, !dbg !9132
  %3341 = load i32, i32* %9, align 4, !dbg !9132
  %3342 = add nsw i32 %3341, 12, !dbg !9132
  %3343 = add nsw i32 %3342, 9, !dbg !9132
  %3344 = sext i32 %3343 to i64, !dbg !9132
  %3345 = getelementptr inbounds i32, i32* %3340, i64 %3344, !dbg !9132
  %3346 = load i32, i32* %3345, align 4, !dbg !9132
  %3347 = add i32 %3339, %3346, !dbg !9132
  %3348 = load i32*, i32** %7, align 8, !dbg !9132
  %3349 = load i32, i32* %9, align 4, !dbg !9132
  %3350 = add nsw i32 %3349, 12, !dbg !9132
  %3351 = add nsw i32 %3350, 1, !dbg !9132
  %3352 = sext i32 %3351 to i64, !dbg !9132
  %3353 = getelementptr inbounds i32, i32* %3348, i64 %3352, !dbg !9132
  %3354 = load i32, i32* %3353, align 4, !dbg !9132
  %3355 = lshr i32 %3354, 7, !dbg !9132
  %3356 = load i32*, i32** %7, align 8, !dbg !9132
  %3357 = load i32, i32* %9, align 4, !dbg !9132
  %3358 = add nsw i32 %3357, 12, !dbg !9132
  %3359 = add nsw i32 %3358, 1, !dbg !9132
  %3360 = sext i32 %3359 to i64, !dbg !9132
  %3361 = getelementptr inbounds i32, i32* %3356, i64 %3360, !dbg !9132
  %3362 = load i32, i32* %3361, align 4, !dbg !9132
  %3363 = shl i32 %3362, 25, !dbg !9132
  %3364 = or i32 %3355, %3363, !dbg !9132
  %3365 = load i32*, i32** %7, align 8, !dbg !9132
  %3366 = load i32, i32* %9, align 4, !dbg !9132
  %3367 = add nsw i32 %3366, 12, !dbg !9132
  %3368 = add nsw i32 %3367, 1, !dbg !9132
  %3369 = sext i32 %3368 to i64, !dbg !9132
  %3370 = getelementptr inbounds i32, i32* %3365, i64 %3369, !dbg !9132
  %3371 = load i32, i32* %3370, align 4, !dbg !9132
  %3372 = lshr i32 %3371, 18, !dbg !9132
  %3373 = load i32*, i32** %7, align 8, !dbg !9132
  %3374 = load i32, i32* %9, align 4, !dbg !9132
  %3375 = add nsw i32 %3374, 12, !dbg !9132
  %3376 = add nsw i32 %3375, 1, !dbg !9132
  %3377 = sext i32 %3376 to i64, !dbg !9132
  %3378 = getelementptr inbounds i32, i32* %3373, i64 %3377, !dbg !9132
  %3379 = load i32, i32* %3378, align 4, !dbg !9132
  %3380 = shl i32 %3379, 14, !dbg !9132
  %3381 = or i32 %3372, %3380, !dbg !9132
  %3382 = xor i32 %3364, %3381, !dbg !9132
  %3383 = load i32*, i32** %7, align 8, !dbg !9132
  %3384 = load i32, i32* %9, align 4, !dbg !9132
  %3385 = add nsw i32 %3384, 12, !dbg !9132
  %3386 = add nsw i32 %3385, 1, !dbg !9132
  %3387 = sext i32 %3386 to i64, !dbg !9132
  %3388 = getelementptr inbounds i32, i32* %3383, i64 %3387, !dbg !9132
  %3389 = load i32, i32* %3388, align 4, !dbg !9132
  %3390 = lshr i32 %3389, 3, !dbg !9132
  %3391 = xor i32 %3382, %3390, !dbg !9132
  %3392 = add i32 %3347, %3391, !dbg !9132
  %3393 = load i32*, i32** %7, align 8, !dbg !9132
  %3394 = load i32, i32* %9, align 4, !dbg !9132
  %3395 = add nsw i32 %3394, 12, !dbg !9132
  %3396 = sext i32 %3395 to i64, !dbg !9132
  %3397 = getelementptr inbounds i32, i32* %3393, i64 %3396, !dbg !9132
  %3398 = load i32, i32* %3397, align 4, !dbg !9132
  %3399 = add i32 %3392, %3398, !dbg !9132
  %3400 = load i32*, i32** %7, align 8, !dbg !9132
  %3401 = load i32, i32* %9, align 4, !dbg !9132
  %3402 = add nsw i32 %3401, 12, !dbg !9132
  %3403 = add nsw i32 %3402, 16, !dbg !9132
  %3404 = sext i32 %3403 to i64, !dbg !9132
  %3405 = getelementptr inbounds i32, i32* %3400, i64 %3404, !dbg !9132
  store i32 %3399, i32* %3405, align 4, !dbg !9132
  %3406 = load i32*, i32** %7, align 8, !dbg !9133
  %3407 = load i32, i32* %9, align 4, !dbg !9133
  %3408 = add nsw i32 %3407, 13, !dbg !9133
  %3409 = add nsw i32 %3408, 14, !dbg !9133
  %3410 = sext i32 %3409 to i64, !dbg !9133
  %3411 = getelementptr inbounds i32, i32* %3406, i64 %3410, !dbg !9133
  %3412 = load i32, i32* %3411, align 4, !dbg !9133
  %3413 = lshr i32 %3412, 17, !dbg !9133
  %3414 = load i32*, i32** %7, align 8, !dbg !9133
  %3415 = load i32, i32* %9, align 4, !dbg !9133
  %3416 = add nsw i32 %3415, 13, !dbg !9133
  %3417 = add nsw i32 %3416, 14, !dbg !9133
  %3418 = sext i32 %3417 to i64, !dbg !9133
  %3419 = getelementptr inbounds i32, i32* %3414, i64 %3418, !dbg !9133
  %3420 = load i32, i32* %3419, align 4, !dbg !9133
  %3421 = shl i32 %3420, 15, !dbg !9133
  %3422 = or i32 %3413, %3421, !dbg !9133
  %3423 = load i32*, i32** %7, align 8, !dbg !9133
  %3424 = load i32, i32* %9, align 4, !dbg !9133
  %3425 = add nsw i32 %3424, 13, !dbg !9133
  %3426 = add nsw i32 %3425, 14, !dbg !9133
  %3427 = sext i32 %3426 to i64, !dbg !9133
  %3428 = getelementptr inbounds i32, i32* %3423, i64 %3427, !dbg !9133
  %3429 = load i32, i32* %3428, align 4, !dbg !9133
  %3430 = lshr i32 %3429, 19, !dbg !9133
  %3431 = load i32*, i32** %7, align 8, !dbg !9133
  %3432 = load i32, i32* %9, align 4, !dbg !9133
  %3433 = add nsw i32 %3432, 13, !dbg !9133
  %3434 = add nsw i32 %3433, 14, !dbg !9133
  %3435 = sext i32 %3434 to i64, !dbg !9133
  %3436 = getelementptr inbounds i32, i32* %3431, i64 %3435, !dbg !9133
  %3437 = load i32, i32* %3436, align 4, !dbg !9133
  %3438 = shl i32 %3437, 13, !dbg !9133
  %3439 = or i32 %3430, %3438, !dbg !9133
  %3440 = xor i32 %3422, %3439, !dbg !9133
  %3441 = load i32*, i32** %7, align 8, !dbg !9133
  %3442 = load i32, i32* %9, align 4, !dbg !9133
  %3443 = add nsw i32 %3442, 13, !dbg !9133
  %3444 = add nsw i32 %3443, 14, !dbg !9133
  %3445 = sext i32 %3444 to i64, !dbg !9133
  %3446 = getelementptr inbounds i32, i32* %3441, i64 %3445, !dbg !9133
  %3447 = load i32, i32* %3446, align 4, !dbg !9133
  %3448 = lshr i32 %3447, 10, !dbg !9133
  %3449 = xor i32 %3440, %3448, !dbg !9133
  %3450 = load i32*, i32** %7, align 8, !dbg !9133
  %3451 = load i32, i32* %9, align 4, !dbg !9133
  %3452 = add nsw i32 %3451, 13, !dbg !9133
  %3453 = add nsw i32 %3452, 9, !dbg !9133
  %3454 = sext i32 %3453 to i64, !dbg !9133
  %3455 = getelementptr inbounds i32, i32* %3450, i64 %3454, !dbg !9133
  %3456 = load i32, i32* %3455, align 4, !dbg !9133
  %3457 = add i32 %3449, %3456, !dbg !9133
  %3458 = load i32*, i32** %7, align 8, !dbg !9133
  %3459 = load i32, i32* %9, align 4, !dbg !9133
  %3460 = add nsw i32 %3459, 13, !dbg !9133
  %3461 = add nsw i32 %3460, 1, !dbg !9133
  %3462 = sext i32 %3461 to i64, !dbg !9133
  %3463 = getelementptr inbounds i32, i32* %3458, i64 %3462, !dbg !9133
  %3464 = load i32, i32* %3463, align 4, !dbg !9133
  %3465 = lshr i32 %3464, 7, !dbg !9133
  %3466 = load i32*, i32** %7, align 8, !dbg !9133
  %3467 = load i32, i32* %9, align 4, !dbg !9133
  %3468 = add nsw i32 %3467, 13, !dbg !9133
  %3469 = add nsw i32 %3468, 1, !dbg !9133
  %3470 = sext i32 %3469 to i64, !dbg !9133
  %3471 = getelementptr inbounds i32, i32* %3466, i64 %3470, !dbg !9133
  %3472 = load i32, i32* %3471, align 4, !dbg !9133
  %3473 = shl i32 %3472, 25, !dbg !9133
  %3474 = or i32 %3465, %3473, !dbg !9133
  %3475 = load i32*, i32** %7, align 8, !dbg !9133
  %3476 = load i32, i32* %9, align 4, !dbg !9133
  %3477 = add nsw i32 %3476, 13, !dbg !9133
  %3478 = add nsw i32 %3477, 1, !dbg !9133
  %3479 = sext i32 %3478 to i64, !dbg !9133
  %3480 = getelementptr inbounds i32, i32* %3475, i64 %3479, !dbg !9133
  %3481 = load i32, i32* %3480, align 4, !dbg !9133
  %3482 = lshr i32 %3481, 18, !dbg !9133
  %3483 = load i32*, i32** %7, align 8, !dbg !9133
  %3484 = load i32, i32* %9, align 4, !dbg !9133
  %3485 = add nsw i32 %3484, 13, !dbg !9133
  %3486 = add nsw i32 %3485, 1, !dbg !9133
  %3487 = sext i32 %3486 to i64, !dbg !9133
  %3488 = getelementptr inbounds i32, i32* %3483, i64 %3487, !dbg !9133
  %3489 = load i32, i32* %3488, align 4, !dbg !9133
  %3490 = shl i32 %3489, 14, !dbg !9133
  %3491 = or i32 %3482, %3490, !dbg !9133
  %3492 = xor i32 %3474, %3491, !dbg !9133
  %3493 = load i32*, i32** %7, align 8, !dbg !9133
  %3494 = load i32, i32* %9, align 4, !dbg !9133
  %3495 = add nsw i32 %3494, 13, !dbg !9133
  %3496 = add nsw i32 %3495, 1, !dbg !9133
  %3497 = sext i32 %3496 to i64, !dbg !9133
  %3498 = getelementptr inbounds i32, i32* %3493, i64 %3497, !dbg !9133
  %3499 = load i32, i32* %3498, align 4, !dbg !9133
  %3500 = lshr i32 %3499, 3, !dbg !9133
  %3501 = xor i32 %3492, %3500, !dbg !9133
  %3502 = add i32 %3457, %3501, !dbg !9133
  %3503 = load i32*, i32** %7, align 8, !dbg !9133
  %3504 = load i32, i32* %9, align 4, !dbg !9133
  %3505 = add nsw i32 %3504, 13, !dbg !9133
  %3506 = sext i32 %3505 to i64, !dbg !9133
  %3507 = getelementptr inbounds i32, i32* %3503, i64 %3506, !dbg !9133
  %3508 = load i32, i32* %3507, align 4, !dbg !9133
  %3509 = add i32 %3502, %3508, !dbg !9133
  %3510 = load i32*, i32** %7, align 8, !dbg !9133
  %3511 = load i32, i32* %9, align 4, !dbg !9133
  %3512 = add nsw i32 %3511, 13, !dbg !9133
  %3513 = add nsw i32 %3512, 16, !dbg !9133
  %3514 = sext i32 %3513 to i64, !dbg !9133
  %3515 = getelementptr inbounds i32, i32* %3510, i64 %3514, !dbg !9133
  store i32 %3509, i32* %3515, align 4, !dbg !9133
  %3516 = load i32*, i32** %7, align 8, !dbg !9134
  %3517 = load i32, i32* %9, align 4, !dbg !9134
  %3518 = add nsw i32 %3517, 14, !dbg !9134
  %3519 = add nsw i32 %3518, 14, !dbg !9134
  %3520 = sext i32 %3519 to i64, !dbg !9134
  %3521 = getelementptr inbounds i32, i32* %3516, i64 %3520, !dbg !9134
  %3522 = load i32, i32* %3521, align 4, !dbg !9134
  %3523 = lshr i32 %3522, 17, !dbg !9134
  %3524 = load i32*, i32** %7, align 8, !dbg !9134
  %3525 = load i32, i32* %9, align 4, !dbg !9134
  %3526 = add nsw i32 %3525, 14, !dbg !9134
  %3527 = add nsw i32 %3526, 14, !dbg !9134
  %3528 = sext i32 %3527 to i64, !dbg !9134
  %3529 = getelementptr inbounds i32, i32* %3524, i64 %3528, !dbg !9134
  %3530 = load i32, i32* %3529, align 4, !dbg !9134
  %3531 = shl i32 %3530, 15, !dbg !9134
  %3532 = or i32 %3523, %3531, !dbg !9134
  %3533 = load i32*, i32** %7, align 8, !dbg !9134
  %3534 = load i32, i32* %9, align 4, !dbg !9134
  %3535 = add nsw i32 %3534, 14, !dbg !9134
  %3536 = add nsw i32 %3535, 14, !dbg !9134
  %3537 = sext i32 %3536 to i64, !dbg !9134
  %3538 = getelementptr inbounds i32, i32* %3533, i64 %3537, !dbg !9134
  %3539 = load i32, i32* %3538, align 4, !dbg !9134
  %3540 = lshr i32 %3539, 19, !dbg !9134
  %3541 = load i32*, i32** %7, align 8, !dbg !9134
  %3542 = load i32, i32* %9, align 4, !dbg !9134
  %3543 = add nsw i32 %3542, 14, !dbg !9134
  %3544 = add nsw i32 %3543, 14, !dbg !9134
  %3545 = sext i32 %3544 to i64, !dbg !9134
  %3546 = getelementptr inbounds i32, i32* %3541, i64 %3545, !dbg !9134
  %3547 = load i32, i32* %3546, align 4, !dbg !9134
  %3548 = shl i32 %3547, 13, !dbg !9134
  %3549 = or i32 %3540, %3548, !dbg !9134
  %3550 = xor i32 %3532, %3549, !dbg !9134
  %3551 = load i32*, i32** %7, align 8, !dbg !9134
  %3552 = load i32, i32* %9, align 4, !dbg !9134
  %3553 = add nsw i32 %3552, 14, !dbg !9134
  %3554 = add nsw i32 %3553, 14, !dbg !9134
  %3555 = sext i32 %3554 to i64, !dbg !9134
  %3556 = getelementptr inbounds i32, i32* %3551, i64 %3555, !dbg !9134
  %3557 = load i32, i32* %3556, align 4, !dbg !9134
  %3558 = lshr i32 %3557, 10, !dbg !9134
  %3559 = xor i32 %3550, %3558, !dbg !9134
  %3560 = load i32*, i32** %7, align 8, !dbg !9134
  %3561 = load i32, i32* %9, align 4, !dbg !9134
  %3562 = add nsw i32 %3561, 14, !dbg !9134
  %3563 = add nsw i32 %3562, 9, !dbg !9134
  %3564 = sext i32 %3563 to i64, !dbg !9134
  %3565 = getelementptr inbounds i32, i32* %3560, i64 %3564, !dbg !9134
  %3566 = load i32, i32* %3565, align 4, !dbg !9134
  %3567 = add i32 %3559, %3566, !dbg !9134
  %3568 = load i32*, i32** %7, align 8, !dbg !9134
  %3569 = load i32, i32* %9, align 4, !dbg !9134
  %3570 = add nsw i32 %3569, 14, !dbg !9134
  %3571 = add nsw i32 %3570, 1, !dbg !9134
  %3572 = sext i32 %3571 to i64, !dbg !9134
  %3573 = getelementptr inbounds i32, i32* %3568, i64 %3572, !dbg !9134
  %3574 = load i32, i32* %3573, align 4, !dbg !9134
  %3575 = lshr i32 %3574, 7, !dbg !9134
  %3576 = load i32*, i32** %7, align 8, !dbg !9134
  %3577 = load i32, i32* %9, align 4, !dbg !9134
  %3578 = add nsw i32 %3577, 14, !dbg !9134
  %3579 = add nsw i32 %3578, 1, !dbg !9134
  %3580 = sext i32 %3579 to i64, !dbg !9134
  %3581 = getelementptr inbounds i32, i32* %3576, i64 %3580, !dbg !9134
  %3582 = load i32, i32* %3581, align 4, !dbg !9134
  %3583 = shl i32 %3582, 25, !dbg !9134
  %3584 = or i32 %3575, %3583, !dbg !9134
  %3585 = load i32*, i32** %7, align 8, !dbg !9134
  %3586 = load i32, i32* %9, align 4, !dbg !9134
  %3587 = add nsw i32 %3586, 14, !dbg !9134
  %3588 = add nsw i32 %3587, 1, !dbg !9134
  %3589 = sext i32 %3588 to i64, !dbg !9134
  %3590 = getelementptr inbounds i32, i32* %3585, i64 %3589, !dbg !9134
  %3591 = load i32, i32* %3590, align 4, !dbg !9134
  %3592 = lshr i32 %3591, 18, !dbg !9134
  %3593 = load i32*, i32** %7, align 8, !dbg !9134
  %3594 = load i32, i32* %9, align 4, !dbg !9134
  %3595 = add nsw i32 %3594, 14, !dbg !9134
  %3596 = add nsw i32 %3595, 1, !dbg !9134
  %3597 = sext i32 %3596 to i64, !dbg !9134
  %3598 = getelementptr inbounds i32, i32* %3593, i64 %3597, !dbg !9134
  %3599 = load i32, i32* %3598, align 4, !dbg !9134
  %3600 = shl i32 %3599, 14, !dbg !9134
  %3601 = or i32 %3592, %3600, !dbg !9134
  %3602 = xor i32 %3584, %3601, !dbg !9134
  %3603 = load i32*, i32** %7, align 8, !dbg !9134
  %3604 = load i32, i32* %9, align 4, !dbg !9134
  %3605 = add nsw i32 %3604, 14, !dbg !9134
  %3606 = add nsw i32 %3605, 1, !dbg !9134
  %3607 = sext i32 %3606 to i64, !dbg !9134
  %3608 = getelementptr inbounds i32, i32* %3603, i64 %3607, !dbg !9134
  %3609 = load i32, i32* %3608, align 4, !dbg !9134
  %3610 = lshr i32 %3609, 3, !dbg !9134
  %3611 = xor i32 %3602, %3610, !dbg !9134
  %3612 = add i32 %3567, %3611, !dbg !9134
  %3613 = load i32*, i32** %7, align 8, !dbg !9134
  %3614 = load i32, i32* %9, align 4, !dbg !9134
  %3615 = add nsw i32 %3614, 14, !dbg !9134
  %3616 = sext i32 %3615 to i64, !dbg !9134
  %3617 = getelementptr inbounds i32, i32* %3613, i64 %3616, !dbg !9134
  %3618 = load i32, i32* %3617, align 4, !dbg !9134
  %3619 = add i32 %3612, %3618, !dbg !9134
  %3620 = load i32*, i32** %7, align 8, !dbg !9134
  %3621 = load i32, i32* %9, align 4, !dbg !9134
  %3622 = add nsw i32 %3621, 14, !dbg !9134
  %3623 = add nsw i32 %3622, 16, !dbg !9134
  %3624 = sext i32 %3623 to i64, !dbg !9134
  %3625 = getelementptr inbounds i32, i32* %3620, i64 %3624, !dbg !9134
  store i32 %3619, i32* %3625, align 4, !dbg !9134
  %3626 = load i32*, i32** %7, align 8, !dbg !9135
  %3627 = load i32, i32* %9, align 4, !dbg !9135
  %3628 = add nsw i32 %3627, 15, !dbg !9135
  %3629 = add nsw i32 %3628, 14, !dbg !9135
  %3630 = sext i32 %3629 to i64, !dbg !9135
  %3631 = getelementptr inbounds i32, i32* %3626, i64 %3630, !dbg !9135
  %3632 = load i32, i32* %3631, align 4, !dbg !9135
  %3633 = lshr i32 %3632, 17, !dbg !9135
  %3634 = load i32*, i32** %7, align 8, !dbg !9135
  %3635 = load i32, i32* %9, align 4, !dbg !9135
  %3636 = add nsw i32 %3635, 15, !dbg !9135
  %3637 = add nsw i32 %3636, 14, !dbg !9135
  %3638 = sext i32 %3637 to i64, !dbg !9135
  %3639 = getelementptr inbounds i32, i32* %3634, i64 %3638, !dbg !9135
  %3640 = load i32, i32* %3639, align 4, !dbg !9135
  %3641 = shl i32 %3640, 15, !dbg !9135
  %3642 = or i32 %3633, %3641, !dbg !9135
  %3643 = load i32*, i32** %7, align 8, !dbg !9135
  %3644 = load i32, i32* %9, align 4, !dbg !9135
  %3645 = add nsw i32 %3644, 15, !dbg !9135
  %3646 = add nsw i32 %3645, 14, !dbg !9135
  %3647 = sext i32 %3646 to i64, !dbg !9135
  %3648 = getelementptr inbounds i32, i32* %3643, i64 %3647, !dbg !9135
  %3649 = load i32, i32* %3648, align 4, !dbg !9135
  %3650 = lshr i32 %3649, 19, !dbg !9135
  %3651 = load i32*, i32** %7, align 8, !dbg !9135
  %3652 = load i32, i32* %9, align 4, !dbg !9135
  %3653 = add nsw i32 %3652, 15, !dbg !9135
  %3654 = add nsw i32 %3653, 14, !dbg !9135
  %3655 = sext i32 %3654 to i64, !dbg !9135
  %3656 = getelementptr inbounds i32, i32* %3651, i64 %3655, !dbg !9135
  %3657 = load i32, i32* %3656, align 4, !dbg !9135
  %3658 = shl i32 %3657, 13, !dbg !9135
  %3659 = or i32 %3650, %3658, !dbg !9135
  %3660 = xor i32 %3642, %3659, !dbg !9135
  %3661 = load i32*, i32** %7, align 8, !dbg !9135
  %3662 = load i32, i32* %9, align 4, !dbg !9135
  %3663 = add nsw i32 %3662, 15, !dbg !9135
  %3664 = add nsw i32 %3663, 14, !dbg !9135
  %3665 = sext i32 %3664 to i64, !dbg !9135
  %3666 = getelementptr inbounds i32, i32* %3661, i64 %3665, !dbg !9135
  %3667 = load i32, i32* %3666, align 4, !dbg !9135
  %3668 = lshr i32 %3667, 10, !dbg !9135
  %3669 = xor i32 %3660, %3668, !dbg !9135
  %3670 = load i32*, i32** %7, align 8, !dbg !9135
  %3671 = load i32, i32* %9, align 4, !dbg !9135
  %3672 = add nsw i32 %3671, 15, !dbg !9135
  %3673 = add nsw i32 %3672, 9, !dbg !9135
  %3674 = sext i32 %3673 to i64, !dbg !9135
  %3675 = getelementptr inbounds i32, i32* %3670, i64 %3674, !dbg !9135
  %3676 = load i32, i32* %3675, align 4, !dbg !9135
  %3677 = add i32 %3669, %3676, !dbg !9135
  %3678 = load i32*, i32** %7, align 8, !dbg !9135
  %3679 = load i32, i32* %9, align 4, !dbg !9135
  %3680 = add nsw i32 %3679, 15, !dbg !9135
  %3681 = add nsw i32 %3680, 1, !dbg !9135
  %3682 = sext i32 %3681 to i64, !dbg !9135
  %3683 = getelementptr inbounds i32, i32* %3678, i64 %3682, !dbg !9135
  %3684 = load i32, i32* %3683, align 4, !dbg !9135
  %3685 = lshr i32 %3684, 7, !dbg !9135
  %3686 = load i32*, i32** %7, align 8, !dbg !9135
  %3687 = load i32, i32* %9, align 4, !dbg !9135
  %3688 = add nsw i32 %3687, 15, !dbg !9135
  %3689 = add nsw i32 %3688, 1, !dbg !9135
  %3690 = sext i32 %3689 to i64, !dbg !9135
  %3691 = getelementptr inbounds i32, i32* %3686, i64 %3690, !dbg !9135
  %3692 = load i32, i32* %3691, align 4, !dbg !9135
  %3693 = shl i32 %3692, 25, !dbg !9135
  %3694 = or i32 %3685, %3693, !dbg !9135
  %3695 = load i32*, i32** %7, align 8, !dbg !9135
  %3696 = load i32, i32* %9, align 4, !dbg !9135
  %3697 = add nsw i32 %3696, 15, !dbg !9135
  %3698 = add nsw i32 %3697, 1, !dbg !9135
  %3699 = sext i32 %3698 to i64, !dbg !9135
  %3700 = getelementptr inbounds i32, i32* %3695, i64 %3699, !dbg !9135
  %3701 = load i32, i32* %3700, align 4, !dbg !9135
  %3702 = lshr i32 %3701, 18, !dbg !9135
  %3703 = load i32*, i32** %7, align 8, !dbg !9135
  %3704 = load i32, i32* %9, align 4, !dbg !9135
  %3705 = add nsw i32 %3704, 15, !dbg !9135
  %3706 = add nsw i32 %3705, 1, !dbg !9135
  %3707 = sext i32 %3706 to i64, !dbg !9135
  %3708 = getelementptr inbounds i32, i32* %3703, i64 %3707, !dbg !9135
  %3709 = load i32, i32* %3708, align 4, !dbg !9135
  %3710 = shl i32 %3709, 14, !dbg !9135
  %3711 = or i32 %3702, %3710, !dbg !9135
  %3712 = xor i32 %3694, %3711, !dbg !9135
  %3713 = load i32*, i32** %7, align 8, !dbg !9135
  %3714 = load i32, i32* %9, align 4, !dbg !9135
  %3715 = add nsw i32 %3714, 15, !dbg !9135
  %3716 = add nsw i32 %3715, 1, !dbg !9135
  %3717 = sext i32 %3716 to i64, !dbg !9135
  %3718 = getelementptr inbounds i32, i32* %3713, i64 %3717, !dbg !9135
  %3719 = load i32, i32* %3718, align 4, !dbg !9135
  %3720 = lshr i32 %3719, 3, !dbg !9135
  %3721 = xor i32 %3712, %3720, !dbg !9135
  %3722 = add i32 %3677, %3721, !dbg !9135
  %3723 = load i32*, i32** %7, align 8, !dbg !9135
  %3724 = load i32, i32* %9, align 4, !dbg !9135
  %3725 = add nsw i32 %3724, 15, !dbg !9135
  %3726 = sext i32 %3725 to i64, !dbg !9135
  %3727 = getelementptr inbounds i32, i32* %3723, i64 %3726, !dbg !9135
  %3728 = load i32, i32* %3727, align 4, !dbg !9135
  %3729 = add i32 %3722, %3728, !dbg !9135
  %3730 = load i32*, i32** %7, align 8, !dbg !9135
  %3731 = load i32, i32* %9, align 4, !dbg !9135
  %3732 = add nsw i32 %3731, 15, !dbg !9135
  %3733 = add nsw i32 %3732, 16, !dbg !9135
  %3734 = sext i32 %3733 to i64, !dbg !9135
  %3735 = getelementptr inbounds i32, i32* %3730, i64 %3734, !dbg !9135
  store i32 %3729, i32* %3735, align 4, !dbg !9135
  br label %3736, !dbg !9136

3736:                                             ; preds = %1975
  %3737 = load i32, i32* %9, align 4, !dbg !9137
  %3738 = add nsw i32 %3737, 16, !dbg !9137
  store i32 %3738, i32* %9, align 4, !dbg !9137
  br label %16, !dbg !9138, !llvm.loop !9139

3739:                                             ; preds = %1974, %16
  store i32 0, i32* %9, align 4, !dbg !9141
  br label %3740, !dbg !9143

3740:                                             ; preds = %3755, %3739
  %3741 = load i32, i32* %9, align 4, !dbg !9144
  %3742 = icmp slt i32 %3741, 8, !dbg !9146
  br i1 %3742, label %3743, label %3758, !dbg !9147

3743:                                             ; preds = %3740
  %3744 = load i32*, i32** %8, align 8, !dbg !9148
  %3745 = load i32, i32* %9, align 4, !dbg !9149
  %3746 = sext i32 %3745 to i64, !dbg !9148
  %3747 = getelementptr inbounds i32, i32* %3744, i64 %3746, !dbg !9148
  %3748 = load i32, i32* %3747, align 4, !dbg !9148
  %3749 = load i32*, i32** %5, align 8, !dbg !9150
  %3750 = load i32, i32* %9, align 4, !dbg !9151
  %3751 = sext i32 %3750 to i64, !dbg !9150
  %3752 = getelementptr inbounds i32, i32* %3749, i64 %3751, !dbg !9150
  %3753 = load i32, i32* %3752, align 4, !dbg !9152
  %3754 = add i32 %3753, %3748, !dbg !9152
  store i32 %3754, i32* %3752, align 4, !dbg !9152
  br label %3755, !dbg !9150

3755:                                             ; preds = %3743
  %3756 = load i32, i32* %9, align 4, !dbg !9153
  %3757 = add nsw i32 %3756, 1, !dbg !9153
  store i32 %3757, i32* %9, align 4, !dbg !9153
  br label %3740, !dbg !9154, !llvm.loop !9155

3758:                                             ; preds = %3740
  ret void, !dbg !9157
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL12be32dec_vectPjPKhm(i32* %0, i8* %1, i64 %2) #6 !dbg !9158 {
  %4 = alloca i32*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i32* %0, i32** %4, align 8
  call void @llvm.dbg.declare(metadata i32** %4, metadata !9161, metadata !DIExpression()), !dbg !9162
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !9163, metadata !DIExpression()), !dbg !9164
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !9165, metadata !DIExpression()), !dbg !9166
  call void @llvm.dbg.declare(metadata i64* %7, metadata !9167, metadata !DIExpression()), !dbg !9168
  %8 = load i64, i64* %6, align 8, !dbg !9169
  %9 = urem i64 %8, 4, !dbg !9169
  %10 = icmp eq i64 %9, 0, !dbg !9169
  br i1 %10, label %11, label %12, !dbg !9169

11:                                               ; preds = %3
  br label %13, !dbg !9169

12:                                               ; preds = %3
  call void @__assert(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i64 0, i64 0), i32 41, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__func__._ZL12be32dec_vectPjPKhm, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.41, i64 0, i64 0)), !dbg !9169
  br label %13, !dbg !9169

13:                                               ; preds = %12, %11
  store i64 0, i64* %7, align 8, !dbg !9170
  br label %14, !dbg !9172

14:                                               ; preds = %28, %13
  %15 = load i64, i64* %7, align 8, !dbg !9173
  %16 = load i64, i64* %6, align 8, !dbg !9175
  %17 = udiv i64 %16, 4, !dbg !9176
  %18 = icmp ult i64 %15, %17, !dbg !9177
  br i1 %18, label %19, label %31, !dbg !9178

19:                                               ; preds = %14
  %20 = load i8*, i8** %5, align 8, !dbg !9179
  %21 = load i64, i64* %7, align 8, !dbg !9180
  %22 = mul i64 %21, 4, !dbg !9181
  %23 = getelementptr inbounds i8, i8* %20, i64 %22, !dbg !9182
  %24 = call i32 @_ZL19libcperciva_be32decPKv(i8* %23), !dbg !9183
  %25 = load i32*, i32** %4, align 8, !dbg !9184
  %26 = load i64, i64* %7, align 8, !dbg !9185
  %27 = getelementptr inbounds i32, i32* %25, i64 %26, !dbg !9184
  store i32 %24, i32* %27, align 4, !dbg !9186
  br label %28, !dbg !9184

28:                                               ; preds = %19
  %29 = load i64, i64* %7, align 8, !dbg !9187
  %30 = add i64 %29, 1, !dbg !9187
  store i64 %30, i64* %7, align 8, !dbg !9187
  br label %14, !dbg !9188, !llvm.loop !9189

31:                                               ; preds = %14
  ret void, !dbg !9191
}

declare void @__assert(i8*, i32, i8*, i8*) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL19libcperciva_be32decPKv(i8* %0) #0 !dbg !9192 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !9196, metadata !DIExpression()), !dbg !9197
  call void @llvm.dbg.declare(metadata i8** %3, metadata !9198, metadata !DIExpression()), !dbg !9199
  %4 = load i8*, i8** %2, align 8, !dbg !9200
  store i8* %4, i8** %3, align 8, !dbg !9199
  %5 = load i8*, i8** %3, align 8, !dbg !9201
  %6 = getelementptr inbounds i8, i8* %5, i64 3, !dbg !9201
  %7 = load i8, i8* %6, align 1, !dbg !9201
  %8 = zext i8 %7 to i32, !dbg !9202
  %9 = load i8*, i8** %3, align 8, !dbg !9203
  %10 = getelementptr inbounds i8, i8* %9, i64 2, !dbg !9203
  %11 = load i8, i8* %10, align 1, !dbg !9203
  %12 = zext i8 %11 to i32, !dbg !9204
  %13 = shl i32 %12, 8, !dbg !9205
  %14 = add i32 %8, %13, !dbg !9206
  %15 = load i8*, i8** %3, align 8, !dbg !9207
  %16 = getelementptr inbounds i8, i8* %15, i64 1, !dbg !9207
  %17 = load i8, i8* %16, align 1, !dbg !9207
  %18 = zext i8 %17 to i32, !dbg !9208
  %19 = shl i32 %18, 16, !dbg !9209
  %20 = add i32 %14, %19, !dbg !9210
  %21 = load i8*, i8** %3, align 8, !dbg !9211
  %22 = getelementptr inbounds i8, i8* %21, i64 0, !dbg !9211
  %23 = load i8, i8* %22, align 1, !dbg !9211
  %24 = zext i8 %23 to i32, !dbg !9212
  %25 = shl i32 %24, 24, !dbg !9213
  %26 = add i32 %20, %25, !dbg !9214
  ret i32 %26, !dbg !9215
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z24libcperciva_SHA256_FinalPhP22libcperciva_SHA256_CTX(i8* %0, %struct.libcperciva_SHA256_CTX* %1) #6 !dbg !9216 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.libcperciva_SHA256_CTX*, align 8
  %5 = alloca [72 x i32], align 16
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !9219, metadata !DIExpression()), !dbg !9220
  store %struct.libcperciva_SHA256_CTX* %1, %struct.libcperciva_SHA256_CTX** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_SHA256_CTX** %4, metadata !9221, metadata !DIExpression()), !dbg !9222
  call void @llvm.dbg.declare(metadata [72 x i32]* %5, metadata !9223, metadata !DIExpression()), !dbg !9224
  %6 = load i8*, i8** %3, align 8, !dbg !9225
  %7 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %4, align 8, !dbg !9226
  %8 = getelementptr inbounds [72 x i32], [72 x i32]* %5, i64 0, i64 0, !dbg !9227
  call void @_ZL13_SHA256_FinalPhP22libcperciva_SHA256_CTXPj(i8* %6, %struct.libcperciva_SHA256_CTX* %7, i32* %8), !dbg !9228
  %9 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %4, align 8, !dbg !9229
  %10 = bitcast %struct.libcperciva_SHA256_CTX* %9 to i8*, !dbg !9229
  call void @_ZL16insecure_memzeroPVvm(i8* %10, i64 104), !dbg !9230
  %11 = getelementptr inbounds [72 x i32], [72 x i32]* %5, i64 0, i64 0, !dbg !9231
  %12 = bitcast i32* %11 to i8*, !dbg !9231
  call void @_ZL16insecure_memzeroPVvm(i8* %12, i64 288), !dbg !9232
  ret void, !dbg !9233
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL13_SHA256_FinalPhP22libcperciva_SHA256_CTXPj(i8* %0, %struct.libcperciva_SHA256_CTX* %1, i32* %2) #6 !dbg !9234 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.libcperciva_SHA256_CTX*, align 8
  %6 = alloca i32*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !9237, metadata !DIExpression()), !dbg !9238
  store %struct.libcperciva_SHA256_CTX* %1, %struct.libcperciva_SHA256_CTX** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_SHA256_CTX** %5, metadata !9239, metadata !DIExpression()), !dbg !9240
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !9241, metadata !DIExpression()), !dbg !9242
  %7 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !9243
  %8 = load i32*, i32** %6, align 8, !dbg !9244
  call void @_ZL10SHA256_PadP22libcperciva_SHA256_CTXPj(%struct.libcperciva_SHA256_CTX* %7, i32* %8), !dbg !9245
  %9 = load i8*, i8** %4, align 8, !dbg !9246
  %10 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %5, align 8, !dbg !9247
  %11 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %10, i32 0, i32 0, !dbg !9248
  %12 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 0, !dbg !9247
  call void @_ZL12be32enc_vectPhPKjm(i8* %9, i32* %12, i64 32), !dbg !9249
  ret void, !dbg !9250
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL10SHA256_PadP22libcperciva_SHA256_CTXPj(%struct.libcperciva_SHA256_CTX* %0, i32* %1) #6 !dbg !9251 {
  %3 = alloca %struct.libcperciva_SHA256_CTX*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i64, align 8
  store %struct.libcperciva_SHA256_CTX* %0, %struct.libcperciva_SHA256_CTX** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_SHA256_CTX** %3, metadata !9254, metadata !DIExpression()), !dbg !9255
  store i32* %1, i32** %4, align 8
  call void @llvm.dbg.declare(metadata i32** %4, metadata !9256, metadata !DIExpression()), !dbg !9257
  call void @llvm.dbg.declare(metadata i64* %5, metadata !9258, metadata !DIExpression()), !dbg !9259
  %6 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9260
  %7 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %6, i32 0, i32 1, !dbg !9261
  %8 = load i64, i64* %7, align 8, !dbg !9261
  %9 = lshr i64 %8, 3, !dbg !9262
  %10 = and i64 %9, 63, !dbg !9263
  store i64 %10, i64* %5, align 8, !dbg !9264
  %11 = load i64, i64* %5, align 8, !dbg !9265
  %12 = icmp ult i64 %11, 56, !dbg !9267
  br i1 %12, label %13, label %20, !dbg !9268

13:                                               ; preds = %2
  %14 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9269
  %15 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %14, i32 0, i32 2, !dbg !9271
  %16 = load i64, i64* %5, align 8, !dbg !9272
  %17 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 %16, !dbg !9269
  %18 = load i64, i64* %5, align 8, !dbg !9273
  %19 = sub i64 56, %18, !dbg !9274
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @_ZL3PAD to [64 x i8]*), i64 0, i64 0), i64 %19, i1 false), !dbg !9275
  br label %40, !dbg !9276

20:                                               ; preds = %2
  %21 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9277
  %22 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %21, i32 0, i32 2, !dbg !9279
  %23 = load i64, i64* %5, align 8, !dbg !9280
  %24 = getelementptr inbounds [64 x i8], [64 x i8]* %22, i64 0, i64 %23, !dbg !9277
  %25 = load i64, i64* %5, align 8, !dbg !9281
  %26 = sub i64 64, %25, !dbg !9282
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @_ZL3PAD to [64 x i8]*), i64 0, i64 0), i64 %26, i1 false), !dbg !9283
  %27 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9284
  %28 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %27, i32 0, i32 0, !dbg !9285
  %29 = getelementptr inbounds [8 x i32], [8 x i32]* %28, i64 0, i64 0, !dbg !9284
  %30 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9286
  %31 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %30, i32 0, i32 2, !dbg !9287
  %32 = getelementptr inbounds [64 x i8], [64 x i8]* %31, i64 0, i64 0, !dbg !9286
  %33 = load i32*, i32** %4, align 8, !dbg !9288
  %34 = getelementptr inbounds i32, i32* %33, i64 0, !dbg !9288
  %35 = load i32*, i32** %4, align 8, !dbg !9289
  %36 = getelementptr inbounds i32, i32* %35, i64 64, !dbg !9289
  call void @_ZL16SHA256_TransformPjPKhS_S_(i32* %29, i8* %32, i32* %34, i32* %36), !dbg !9290
  %37 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9291
  %38 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %37, i32 0, i32 2, !dbg !9292
  %39 = getelementptr inbounds [64 x i8], [64 x i8]* %38, i64 0, i64 0, !dbg !9291
  call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 56, i1 false), !dbg !9293
  br label %40

40:                                               ; preds = %20, %13
  %41 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9294
  %42 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %41, i32 0, i32 2, !dbg !9295
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %42, i64 0, i64 56, !dbg !9294
  %44 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9296
  %45 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %44, i32 0, i32 1, !dbg !9297
  %46 = load i64, i64* %45, align 8, !dbg !9297
  call void @_ZL19libcperciva_be64encPvm(i8* %43, i64 %46), !dbg !9298
  %47 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9299
  %48 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %47, i32 0, i32 0, !dbg !9300
  %49 = getelementptr inbounds [8 x i32], [8 x i32]* %48, i64 0, i64 0, !dbg !9299
  %50 = load %struct.libcperciva_SHA256_CTX*, %struct.libcperciva_SHA256_CTX** %3, align 8, !dbg !9301
  %51 = getelementptr inbounds %struct.libcperciva_SHA256_CTX, %struct.libcperciva_SHA256_CTX* %50, i32 0, i32 2, !dbg !9302
  %52 = getelementptr inbounds [64 x i8], [64 x i8]* %51, i64 0, i64 0, !dbg !9301
  %53 = load i32*, i32** %4, align 8, !dbg !9303
  %54 = getelementptr inbounds i32, i32* %53, i64 0, !dbg !9303
  %55 = load i32*, i32** %4, align 8, !dbg !9304
  %56 = getelementptr inbounds i32, i32* %55, i64 64, !dbg !9304
  call void @_ZL16SHA256_TransformPjPKhS_S_(i32* %49, i8* %52, i32* %54, i32* %56), !dbg !9305
  ret void, !dbg !9306
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL12be32enc_vectPhPKjm(i8* %0, i32* %1, i64 %2) #6 !dbg !9307 {
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !9310, metadata !DIExpression()), !dbg !9311
  store i32* %1, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !9312, metadata !DIExpression()), !dbg !9313
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !9314, metadata !DIExpression()), !dbg !9315
  call void @llvm.dbg.declare(metadata i64* %7, metadata !9316, metadata !DIExpression()), !dbg !9317
  %8 = load i64, i64* %6, align 8, !dbg !9318
  %9 = urem i64 %8, 4, !dbg !9318
  %10 = icmp eq i64 %9, 0, !dbg !9318
  br i1 %10, label %11, label %12, !dbg !9318

11:                                               ; preds = %3
  br label %13, !dbg !9318

12:                                               ; preds = %3
  call void @__assert(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i64 0, i64 0), i32 24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__func__._ZL12be32enc_vectPhPKjm, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.41, i64 0, i64 0)), !dbg !9318
  br label %13, !dbg !9318

13:                                               ; preds = %12, %11
  store i64 0, i64* %7, align 8, !dbg !9319
  br label %14, !dbg !9321

14:                                               ; preds = %28, %13
  %15 = load i64, i64* %7, align 8, !dbg !9322
  %16 = load i64, i64* %6, align 8, !dbg !9324
  %17 = udiv i64 %16, 4, !dbg !9325
  %18 = icmp ult i64 %15, %17, !dbg !9326
  br i1 %18, label %19, label %31, !dbg !9327

19:                                               ; preds = %14
  %20 = load i8*, i8** %4, align 8, !dbg !9328
  %21 = load i64, i64* %7, align 8, !dbg !9329
  %22 = mul i64 %21, 4, !dbg !9330
  %23 = getelementptr inbounds i8, i8* %20, i64 %22, !dbg !9331
  %24 = load i32*, i32** %5, align 8, !dbg !9332
  %25 = load i64, i64* %7, align 8, !dbg !9333
  %26 = getelementptr inbounds i32, i32* %24, i64 %25, !dbg !9332
  %27 = load i32, i32* %26, align 4, !dbg !9332
  call void @_ZL19libcperciva_be32encPvj(i8* %23, i32 %27), !dbg !9334
  br label %28, !dbg !9334

28:                                               ; preds = %19
  %29 = load i64, i64* %7, align 8, !dbg !9335
  %30 = add i64 %29, 1, !dbg !9335
  store i64 %30, i64* %7, align 8, !dbg !9335
  br label %14, !dbg !9336, !llvm.loop !9337

31:                                               ; preds = %14
  ret void, !dbg !9339
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL19libcperciva_be32encPvj(i8* %0, i32 %1) #0 !dbg !9340 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !9343, metadata !DIExpression()), !dbg !9344
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !9345, metadata !DIExpression()), !dbg !9346
  call void @llvm.dbg.declare(metadata i8** %5, metadata !9347, metadata !DIExpression()), !dbg !9348
  %6 = load i8*, i8** %3, align 8, !dbg !9349
  store i8* %6, i8** %5, align 8, !dbg !9348
  %7 = load i32, i32* %4, align 4, !dbg !9350
  %8 = and i32 %7, 255, !dbg !9351
  %9 = trunc i32 %8 to i8, !dbg !9350
  %10 = load i8*, i8** %5, align 8, !dbg !9352
  %11 = getelementptr inbounds i8, i8* %10, i64 3, !dbg !9352
  store i8 %9, i8* %11, align 1, !dbg !9353
  %12 = load i32, i32* %4, align 4, !dbg !9354
  %13 = lshr i32 %12, 8, !dbg !9355
  %14 = and i32 %13, 255, !dbg !9356
  %15 = trunc i32 %14 to i8, !dbg !9357
  %16 = load i8*, i8** %5, align 8, !dbg !9358
  %17 = getelementptr inbounds i8, i8* %16, i64 2, !dbg !9358
  store i8 %15, i8* %17, align 1, !dbg !9359
  %18 = load i32, i32* %4, align 4, !dbg !9360
  %19 = lshr i32 %18, 16, !dbg !9361
  %20 = and i32 %19, 255, !dbg !9362
  %21 = trunc i32 %20 to i8, !dbg !9363
  %22 = load i8*, i8** %5, align 8, !dbg !9364
  %23 = getelementptr inbounds i8, i8* %22, i64 1, !dbg !9364
  store i8 %21, i8* %23, align 1, !dbg !9365
  %24 = load i32, i32* %4, align 4, !dbg !9366
  %25 = lshr i32 %24, 24, !dbg !9367
  %26 = and i32 %25, 255, !dbg !9368
  %27 = trunc i32 %26 to i8, !dbg !9369
  %28 = load i8*, i8** %5, align 8, !dbg !9370
  %29 = getelementptr inbounds i8, i8* %28, i64 0, !dbg !9370
  store i8 %27, i8* %29, align 1, !dbg !9371
  ret void, !dbg !9372
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL19libcperciva_be64encPvm(i8* %0, i64 %1) #0 !dbg !9373 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !9376, metadata !DIExpression()), !dbg !9377
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !9378, metadata !DIExpression()), !dbg !9379
  call void @llvm.dbg.declare(metadata i8** %5, metadata !9380, metadata !DIExpression()), !dbg !9381
  %6 = load i8*, i8** %3, align 8, !dbg !9382
  store i8* %6, i8** %5, align 8, !dbg !9381
  %7 = load i64, i64* %4, align 8, !dbg !9383
  %8 = and i64 %7, 255, !dbg !9384
  %9 = trunc i64 %8 to i8, !dbg !9383
  %10 = load i8*, i8** %5, align 8, !dbg !9385
  %11 = getelementptr inbounds i8, i8* %10, i64 7, !dbg !9385
  store i8 %9, i8* %11, align 1, !dbg !9386
  %12 = load i64, i64* %4, align 8, !dbg !9387
  %13 = lshr i64 %12, 8, !dbg !9388
  %14 = and i64 %13, 255, !dbg !9389
  %15 = trunc i64 %14 to i8, !dbg !9390
  %16 = load i8*, i8** %5, align 8, !dbg !9391
  %17 = getelementptr inbounds i8, i8* %16, i64 6, !dbg !9391
  store i8 %15, i8* %17, align 1, !dbg !9392
  %18 = load i64, i64* %4, align 8, !dbg !9393
  %19 = lshr i64 %18, 16, !dbg !9394
  %20 = and i64 %19, 255, !dbg !9395
  %21 = trunc i64 %20 to i8, !dbg !9396
  %22 = load i8*, i8** %5, align 8, !dbg !9397
  %23 = getelementptr inbounds i8, i8* %22, i64 5, !dbg !9397
  store i8 %21, i8* %23, align 1, !dbg !9398
  %24 = load i64, i64* %4, align 8, !dbg !9399
  %25 = lshr i64 %24, 24, !dbg !9400
  %26 = and i64 %25, 255, !dbg !9401
  %27 = trunc i64 %26 to i8, !dbg !9402
  %28 = load i8*, i8** %5, align 8, !dbg !9403
  %29 = getelementptr inbounds i8, i8* %28, i64 4, !dbg !9403
  store i8 %27, i8* %29, align 1, !dbg !9404
  %30 = load i64, i64* %4, align 8, !dbg !9405
  %31 = lshr i64 %30, 32, !dbg !9406
  %32 = and i64 %31, 255, !dbg !9407
  %33 = trunc i64 %32 to i8, !dbg !9408
  %34 = load i8*, i8** %5, align 8, !dbg !9409
  %35 = getelementptr inbounds i8, i8* %34, i64 3, !dbg !9409
  store i8 %33, i8* %35, align 1, !dbg !9410
  %36 = load i64, i64* %4, align 8, !dbg !9411
  %37 = lshr i64 %36, 40, !dbg !9412
  %38 = and i64 %37, 255, !dbg !9413
  %39 = trunc i64 %38 to i8, !dbg !9414
  %40 = load i8*, i8** %5, align 8, !dbg !9415
  %41 = getelementptr inbounds i8, i8* %40, i64 2, !dbg !9415
  store i8 %39, i8* %41, align 1, !dbg !9416
  %42 = load i64, i64* %4, align 8, !dbg !9417
  %43 = lshr i64 %42, 48, !dbg !9418
  %44 = and i64 %43, 255, !dbg !9419
  %45 = trunc i64 %44 to i8, !dbg !9420
  %46 = load i8*, i8** %5, align 8, !dbg !9421
  %47 = getelementptr inbounds i8, i8* %46, i64 1, !dbg !9421
  store i8 %45, i8* %47, align 1, !dbg !9422
  %48 = load i64, i64* %4, align 8, !dbg !9423
  %49 = lshr i64 %48, 56, !dbg !9424
  %50 = and i64 %49, 255, !dbg !9425
  %51 = trunc i64 %50 to i8, !dbg !9426
  %52 = load i8*, i8** %5, align 8, !dbg !9427
  %53 = getelementptr inbounds i8, i8* %52, i64 0, !dbg !9427
  store i8 %51, i8* %53, align 1, !dbg !9428
  ret void, !dbg !9429
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z22libcperciva_SHA256_BufPKvmPh(i8* %0, i64 %1, i8* %2) #6 !dbg !9430 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.libcperciva_SHA256_CTX, align 8
  %8 = alloca [72 x i32], align 16
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !9433, metadata !DIExpression()), !dbg !9434
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !9435, metadata !DIExpression()), !dbg !9436
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !9437, metadata !DIExpression()), !dbg !9438
  call void @llvm.dbg.declare(metadata %struct.libcperciva_SHA256_CTX* %7, metadata !9439, metadata !DIExpression()), !dbg !9440
  call void @llvm.dbg.declare(metadata [72 x i32]* %8, metadata !9441, metadata !DIExpression()), !dbg !9442
  call void @_Z23libcperciva_SHA256_InitP22libcperciva_SHA256_CTX(%struct.libcperciva_SHA256_CTX* %7), !dbg !9443
  %9 = load i8*, i8** %4, align 8, !dbg !9444
  %10 = load i64, i64* %5, align 8, !dbg !9445
  %11 = getelementptr inbounds [72 x i32], [72 x i32]* %8, i64 0, i64 0, !dbg !9446
  call void @_ZL14_SHA256_UpdateP22libcperciva_SHA256_CTXPKvmPj(%struct.libcperciva_SHA256_CTX* %7, i8* %9, i64 %10, i32* %11), !dbg !9447
  %12 = load i8*, i8** %6, align 8, !dbg !9448
  %13 = getelementptr inbounds [72 x i32], [72 x i32]* %8, i64 0, i64 0, !dbg !9449
  call void @_ZL13_SHA256_FinalPhP22libcperciva_SHA256_CTXPj(i8* %12, %struct.libcperciva_SHA256_CTX* %7, i32* %13), !dbg !9450
  %14 = bitcast %struct.libcperciva_SHA256_CTX* %7 to i8*, !dbg !9451
  call void @_ZL16insecure_memzeroPVvm(i8* %14, i64 104), !dbg !9452
  %15 = getelementptr inbounds [72 x i32], [72 x i32]* %8, i64 0, i64 0, !dbg !9453
  %16 = bitcast i32* %15 to i8*, !dbg !9453
  call void @_ZL16insecure_memzeroPVvm(i8* %16, i64 288), !dbg !9454
  ret void, !dbg !9455
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z28libcperciva_HMAC_SHA256_InitP27libcperciva_HMAC_SHA256_CTXPKvm(%struct.libcperciva_HMAC_SHA256_CTX* %0, i8* %1, i64 %2) #6 !dbg !9456 {
  %4 = alloca %struct.libcperciva_HMAC_SHA256_CTX*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca [72 x i32], align 16
  %8 = alloca [64 x i8], align 16
  %9 = alloca [32 x i8], align 16
  store %struct.libcperciva_HMAC_SHA256_CTX* %0, %struct.libcperciva_HMAC_SHA256_CTX** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX** %4, metadata !9465, metadata !DIExpression()), !dbg !9466
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !9467, metadata !DIExpression()), !dbg !9468
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !9469, metadata !DIExpression()), !dbg !9470
  call void @llvm.dbg.declare(metadata [72 x i32]* %7, metadata !9471, metadata !DIExpression()), !dbg !9472
  call void @llvm.dbg.declare(metadata [64 x i8]* %8, metadata !9473, metadata !DIExpression()), !dbg !9474
  call void @llvm.dbg.declare(metadata [32 x i8]* %9, metadata !9475, metadata !DIExpression()), !dbg !9476
  %10 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %4, align 8, !dbg !9477
  %11 = load i8*, i8** %5, align 8, !dbg !9478
  %12 = load i64, i64* %6, align 8, !dbg !9479
  %13 = getelementptr inbounds [72 x i32], [72 x i32]* %7, i64 0, i64 0, !dbg !9480
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0, !dbg !9481
  %15 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 0, !dbg !9482
  call void @_ZL17_HMAC_SHA256_InitP27libcperciva_HMAC_SHA256_CTXPKvmPjPhS4_(%struct.libcperciva_HMAC_SHA256_CTX* %10, i8* %11, i64 %12, i32* %13, i8* %14, i8* %15), !dbg !9483
  %16 = getelementptr inbounds [72 x i32], [72 x i32]* %7, i64 0, i64 0, !dbg !9484
  %17 = bitcast i32* %16 to i8*, !dbg !9484
  call void @_ZL16insecure_memzeroPVvm(i8* %17, i64 288), !dbg !9485
  %18 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 0, !dbg !9486
  call void @_ZL16insecure_memzeroPVvm(i8* %18, i64 32), !dbg !9487
  %19 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0, !dbg !9488
  call void @_ZL16insecure_memzeroPVvm(i8* %19, i64 64), !dbg !9489
  ret void, !dbg !9490
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL17_HMAC_SHA256_InitP27libcperciva_HMAC_SHA256_CTXPKvmPjPhS4_(%struct.libcperciva_HMAC_SHA256_CTX* %0, i8* %1, i64 %2, i32* %3, i8* %4, i8* %5) #6 !dbg !9491 {
  %7 = alloca %struct.libcperciva_HMAC_SHA256_CTX*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store %struct.libcperciva_HMAC_SHA256_CTX* %0, %struct.libcperciva_HMAC_SHA256_CTX** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX** %7, metadata !9494, metadata !DIExpression()), !dbg !9495
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !9496, metadata !DIExpression()), !dbg !9497
  store i64 %2, i64* %9, align 8
  call void @llvm.dbg.declare(metadata i64* %9, metadata !9498, metadata !DIExpression()), !dbg !9499
  store i32* %3, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !9500, metadata !DIExpression()), !dbg !9501
  store i8* %4, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !9502, metadata !DIExpression()), !dbg !9503
  store i8* %5, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !9504, metadata !DIExpression()), !dbg !9505
  call void @llvm.dbg.declare(metadata i8** %13, metadata !9506, metadata !DIExpression()), !dbg !9507
  %15 = load i8*, i8** %8, align 8, !dbg !9508
  store i8* %15, i8** %13, align 8, !dbg !9507
  call void @llvm.dbg.declare(metadata i64* %14, metadata !9509, metadata !DIExpression()), !dbg !9510
  %16 = load i64, i64* %9, align 8, !dbg !9511
  %17 = icmp ugt i64 %16, 64, !dbg !9513
  br i1 %17, label %18, label %31, !dbg !9514

18:                                               ; preds = %6
  %19 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %7, align 8, !dbg !9515
  %20 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %19, i32 0, i32 0, !dbg !9517
  call void @_Z23libcperciva_SHA256_InitP22libcperciva_SHA256_CTX(%struct.libcperciva_SHA256_CTX* %20), !dbg !9518
  %21 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %7, align 8, !dbg !9519
  %22 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %21, i32 0, i32 0, !dbg !9520
  %23 = load i8*, i8** %13, align 8, !dbg !9521
  %24 = load i64, i64* %9, align 8, !dbg !9522
  %25 = load i32*, i32** %10, align 8, !dbg !9523
  call void @_ZL14_SHA256_UpdateP22libcperciva_SHA256_CTXPKvmPj(%struct.libcperciva_SHA256_CTX* %22, i8* %23, i64 %24, i32* %25), !dbg !9524
  %26 = load i8*, i8** %12, align 8, !dbg !9525
  %27 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %7, align 8, !dbg !9526
  %28 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %27, i32 0, i32 0, !dbg !9527
  %29 = load i32*, i32** %10, align 8, !dbg !9528
  call void @_ZL13_SHA256_FinalPhP22libcperciva_SHA256_CTXPj(i8* %26, %struct.libcperciva_SHA256_CTX* %28, i32* %29), !dbg !9529
  %30 = load i8*, i8** %12, align 8, !dbg !9530
  store i8* %30, i8** %13, align 8, !dbg !9531
  store i64 32, i64* %9, align 8, !dbg !9532
  br label %31, !dbg !9533

31:                                               ; preds = %18, %6
  %32 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %7, align 8, !dbg !9534
  %33 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %32, i32 0, i32 0, !dbg !9535
  call void @_Z23libcperciva_SHA256_InitP22libcperciva_SHA256_CTX(%struct.libcperciva_SHA256_CTX* %33), !dbg !9536
  %34 = load i8*, i8** %11, align 8, !dbg !9537
  call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 54, i64 64, i1 false), !dbg !9538
  store i64 0, i64* %14, align 8, !dbg !9539
  br label %35, !dbg !9541

35:                                               ; preds = %52, %31
  %36 = load i64, i64* %14, align 8, !dbg !9542
  %37 = load i64, i64* %9, align 8, !dbg !9544
  %38 = icmp ult i64 %36, %37, !dbg !9545
  br i1 %38, label %39, label %55, !dbg !9546

39:                                               ; preds = %35
  %40 = load i8*, i8** %13, align 8, !dbg !9547
  %41 = load i64, i64* %14, align 8, !dbg !9548
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !9547
  %43 = load i8, i8* %42, align 1, !dbg !9547
  %44 = zext i8 %43 to i32, !dbg !9547
  %45 = load i8*, i8** %11, align 8, !dbg !9549
  %46 = load i64, i64* %14, align 8, !dbg !9550
  %47 = getelementptr inbounds i8, i8* %45, i64 %46, !dbg !9549
  %48 = load i8, i8* %47, align 1, !dbg !9551
  %49 = zext i8 %48 to i32, !dbg !9551
  %50 = xor i32 %49, %44, !dbg !9551
  %51 = trunc i32 %50 to i8, !dbg !9551
  store i8 %51, i8* %47, align 1, !dbg !9551
  br label %52, !dbg !9549

52:                                               ; preds = %39
  %53 = load i64, i64* %14, align 8, !dbg !9552
  %54 = add i64 %53, 1, !dbg !9552
  store i64 %54, i64* %14, align 8, !dbg !9552
  br label %35, !dbg !9553, !llvm.loop !9554

55:                                               ; preds = %35
  %56 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %7, align 8, !dbg !9556
  %57 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %56, i32 0, i32 0, !dbg !9557
  %58 = load i8*, i8** %11, align 8, !dbg !9558
  %59 = load i32*, i32** %10, align 8, !dbg !9559
  call void @_ZL14_SHA256_UpdateP22libcperciva_SHA256_CTXPKvmPj(%struct.libcperciva_SHA256_CTX* %57, i8* %58, i64 64, i32* %59), !dbg !9560
  %60 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %7, align 8, !dbg !9561
  %61 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %60, i32 0, i32 1, !dbg !9562
  call void @_Z23libcperciva_SHA256_InitP22libcperciva_SHA256_CTX(%struct.libcperciva_SHA256_CTX* %61), !dbg !9563
  %62 = load i8*, i8** %11, align 8, !dbg !9564
  call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 92, i64 64, i1 false), !dbg !9565
  store i64 0, i64* %14, align 8, !dbg !9566
  br label %63, !dbg !9568

63:                                               ; preds = %80, %55
  %64 = load i64, i64* %14, align 8, !dbg !9569
  %65 = load i64, i64* %9, align 8, !dbg !9571
  %66 = icmp ult i64 %64, %65, !dbg !9572
  br i1 %66, label %67, label %83, !dbg !9573

67:                                               ; preds = %63
  %68 = load i8*, i8** %13, align 8, !dbg !9574
  %69 = load i64, i64* %14, align 8, !dbg !9575
  %70 = getelementptr inbounds i8, i8* %68, i64 %69, !dbg !9574
  %71 = load i8, i8* %70, align 1, !dbg !9574
  %72 = zext i8 %71 to i32, !dbg !9574
  %73 = load i8*, i8** %11, align 8, !dbg !9576
  %74 = load i64, i64* %14, align 8, !dbg !9577
  %75 = getelementptr inbounds i8, i8* %73, i64 %74, !dbg !9576
  %76 = load i8, i8* %75, align 1, !dbg !9578
  %77 = zext i8 %76 to i32, !dbg !9578
  %78 = xor i32 %77, %72, !dbg !9578
  %79 = trunc i32 %78 to i8, !dbg !9578
  store i8 %79, i8* %75, align 1, !dbg !9578
  br label %80, !dbg !9576

80:                                               ; preds = %67
  %81 = load i64, i64* %14, align 8, !dbg !9579
  %82 = add i64 %81, 1, !dbg !9579
  store i64 %82, i64* %14, align 8, !dbg !9579
  br label %63, !dbg !9580, !llvm.loop !9581

83:                                               ; preds = %63
  %84 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %7, align 8, !dbg !9583
  %85 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %84, i32 0, i32 1, !dbg !9584
  %86 = load i8*, i8** %11, align 8, !dbg !9585
  %87 = load i32*, i32** %10, align 8, !dbg !9586
  call void @_ZL14_SHA256_UpdateP22libcperciva_SHA256_CTXPKvmPj(%struct.libcperciva_SHA256_CTX* %85, i8* %86, i64 64, i32* %87), !dbg !9587
  ret void, !dbg !9588
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z30libcperciva_HMAC_SHA256_UpdateP27libcperciva_HMAC_SHA256_CTXPKvm(%struct.libcperciva_HMAC_SHA256_CTX* %0, i8* %1, i64 %2) #6 !dbg !9589 {
  %4 = alloca %struct.libcperciva_HMAC_SHA256_CTX*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca [72 x i32], align 16
  store %struct.libcperciva_HMAC_SHA256_CTX* %0, %struct.libcperciva_HMAC_SHA256_CTX** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX** %4, metadata !9590, metadata !DIExpression()), !dbg !9591
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !9592, metadata !DIExpression()), !dbg !9593
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !9594, metadata !DIExpression()), !dbg !9595
  call void @llvm.dbg.declare(metadata [72 x i32]* %7, metadata !9596, metadata !DIExpression()), !dbg !9597
  %8 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %4, align 8, !dbg !9598
  %9 = load i8*, i8** %5, align 8, !dbg !9599
  %10 = load i64, i64* %6, align 8, !dbg !9600
  %11 = getelementptr inbounds [72 x i32], [72 x i32]* %7, i64 0, i64 0, !dbg !9601
  call void @_ZL19_HMAC_SHA256_UpdateP27libcperciva_HMAC_SHA256_CTXPKvmPj(%struct.libcperciva_HMAC_SHA256_CTX* %8, i8* %9, i64 %10, i32* %11), !dbg !9602
  %12 = getelementptr inbounds [72 x i32], [72 x i32]* %7, i64 0, i64 0, !dbg !9603
  %13 = bitcast i32* %12 to i8*, !dbg !9603
  call void @_ZL16insecure_memzeroPVvm(i8* %13, i64 288), !dbg !9604
  ret void, !dbg !9605
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL19_HMAC_SHA256_UpdateP27libcperciva_HMAC_SHA256_CTXPKvmPj(%struct.libcperciva_HMAC_SHA256_CTX* %0, i8* %1, i64 %2, i32* %3) #6 !dbg !9606 {
  %5 = alloca %struct.libcperciva_HMAC_SHA256_CTX*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  store %struct.libcperciva_HMAC_SHA256_CTX* %0, %struct.libcperciva_HMAC_SHA256_CTX** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX** %5, metadata !9609, metadata !DIExpression()), !dbg !9610
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !9611, metadata !DIExpression()), !dbg !9612
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !9613, metadata !DIExpression()), !dbg !9614
  store i32* %3, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !9615, metadata !DIExpression()), !dbg !9616
  %9 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %5, align 8, !dbg !9617
  %10 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %9, i32 0, i32 0, !dbg !9618
  %11 = load i8*, i8** %6, align 8, !dbg !9619
  %12 = load i64, i64* %7, align 8, !dbg !9620
  %13 = load i32*, i32** %8, align 8, !dbg !9621
  call void @_ZL14_SHA256_UpdateP22libcperciva_SHA256_CTXPKvmPj(%struct.libcperciva_SHA256_CTX* %10, i8* %11, i64 %12, i32* %13), !dbg !9622
  ret void, !dbg !9623
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z29libcperciva_HMAC_SHA256_FinalPhP27libcperciva_HMAC_SHA256_CTX(i8* %0, %struct.libcperciva_HMAC_SHA256_CTX* %1) #6 !dbg !9624 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.libcperciva_HMAC_SHA256_CTX*, align 8
  %5 = alloca [72 x i32], align 16
  %6 = alloca [32 x i8], align 16
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !9627, metadata !DIExpression()), !dbg !9628
  store %struct.libcperciva_HMAC_SHA256_CTX* %1, %struct.libcperciva_HMAC_SHA256_CTX** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX** %4, metadata !9629, metadata !DIExpression()), !dbg !9630
  call void @llvm.dbg.declare(metadata [72 x i32]* %5, metadata !9631, metadata !DIExpression()), !dbg !9632
  call void @llvm.dbg.declare(metadata [32 x i8]* %6, metadata !9633, metadata !DIExpression()), !dbg !9634
  %7 = load i8*, i8** %3, align 8, !dbg !9635
  %8 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %4, align 8, !dbg !9636
  %9 = getelementptr inbounds [72 x i32], [72 x i32]* %5, i64 0, i64 0, !dbg !9637
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0, !dbg !9638
  call void @_ZL18_HMAC_SHA256_FinalPhP27libcperciva_HMAC_SHA256_CTXPjS_(i8* %7, %struct.libcperciva_HMAC_SHA256_CTX* %8, i32* %9, i8* %10), !dbg !9639
  %11 = getelementptr inbounds [72 x i32], [72 x i32]* %5, i64 0, i64 0, !dbg !9640
  %12 = bitcast i32* %11 to i8*, !dbg !9640
  call void @_ZL16insecure_memzeroPVvm(i8* %12, i64 288), !dbg !9641
  %13 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0, !dbg !9642
  call void @_ZL16insecure_memzeroPVvm(i8* %13, i64 32), !dbg !9643
  ret void, !dbg !9644
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL18_HMAC_SHA256_FinalPhP27libcperciva_HMAC_SHA256_CTXPjS_(i8* %0, %struct.libcperciva_HMAC_SHA256_CTX* %1, i32* %2, i8* %3) #6 !dbg !9645 {
  %5 = alloca i8*, align 8
  %6 = alloca %struct.libcperciva_HMAC_SHA256_CTX*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !9648, metadata !DIExpression()), !dbg !9649
  store %struct.libcperciva_HMAC_SHA256_CTX* %1, %struct.libcperciva_HMAC_SHA256_CTX** %6, align 8
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX** %6, metadata !9650, metadata !DIExpression()), !dbg !9651
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !9652, metadata !DIExpression()), !dbg !9653
  store i8* %3, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !9654, metadata !DIExpression()), !dbg !9655
  %9 = load i8*, i8** %8, align 8, !dbg !9656
  %10 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %6, align 8, !dbg !9657
  %11 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %10, i32 0, i32 0, !dbg !9658
  %12 = load i32*, i32** %7, align 8, !dbg !9659
  call void @_ZL13_SHA256_FinalPhP22libcperciva_SHA256_CTXPj(i8* %9, %struct.libcperciva_SHA256_CTX* %11, i32* %12), !dbg !9660
  %13 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %6, align 8, !dbg !9661
  %14 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %13, i32 0, i32 1, !dbg !9662
  %15 = load i8*, i8** %8, align 8, !dbg !9663
  %16 = load i32*, i32** %7, align 8, !dbg !9664
  call void @_ZL14_SHA256_UpdateP22libcperciva_SHA256_CTXPKvmPj(%struct.libcperciva_SHA256_CTX* %14, i8* %15, i64 32, i32* %16), !dbg !9665
  %17 = load i8*, i8** %5, align 8, !dbg !9666
  %18 = load %struct.libcperciva_HMAC_SHA256_CTX*, %struct.libcperciva_HMAC_SHA256_CTX** %6, align 8, !dbg !9667
  %19 = getelementptr inbounds %struct.libcperciva_HMAC_SHA256_CTX, %struct.libcperciva_HMAC_SHA256_CTX* %18, i32 0, i32 1, !dbg !9668
  %20 = load i32*, i32** %7, align 8, !dbg !9669
  call void @_ZL13_SHA256_FinalPhP22libcperciva_SHA256_CTXPj(i8* %17, %struct.libcperciva_SHA256_CTX* %19, i32* %20), !dbg !9670
  ret void, !dbg !9671
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z27libcperciva_HMAC_SHA256_BufPKvmS0_mPh(i8* %0, i64 %1, i8* %2, i64 %3, i8* %4) #6 !dbg !9672 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca %struct.libcperciva_HMAC_SHA256_CTX, align 8
  %12 = alloca [72 x i32], align 16
  %13 = alloca [96 x i8], align 16
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !9675, metadata !DIExpression()), !dbg !9676
  store i64 %1, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !9677, metadata !DIExpression()), !dbg !9678
  store i8* %2, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !9679, metadata !DIExpression()), !dbg !9680
  store i64 %3, i64* %9, align 8
  call void @llvm.dbg.declare(metadata i64* %9, metadata !9681, metadata !DIExpression()), !dbg !9682
  store i8* %4, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !9683, metadata !DIExpression()), !dbg !9684
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX* %11, metadata !9685, metadata !DIExpression()), !dbg !9686
  call void @llvm.dbg.declare(metadata [72 x i32]* %12, metadata !9687, metadata !DIExpression()), !dbg !9688
  call void @llvm.dbg.declare(metadata [96 x i8]* %13, metadata !9689, metadata !DIExpression()), !dbg !9693
  %14 = load i8*, i8** %6, align 8, !dbg !9694
  %15 = load i64, i64* %7, align 8, !dbg !9695
  %16 = getelementptr inbounds [72 x i32], [72 x i32]* %12, i64 0, i64 0, !dbg !9696
  %17 = getelementptr inbounds [96 x i8], [96 x i8]* %13, i64 0, i64 0, !dbg !9697
  %18 = getelementptr inbounds [96 x i8], [96 x i8]* %13, i64 0, i64 64, !dbg !9698
  call void @_ZL17_HMAC_SHA256_InitP27libcperciva_HMAC_SHA256_CTXPKvmPjPhS4_(%struct.libcperciva_HMAC_SHA256_CTX* %11, i8* %14, i64 %15, i32* %16, i8* %17, i8* %18), !dbg !9699
  %19 = load i8*, i8** %8, align 8, !dbg !9700
  %20 = load i64, i64* %9, align 8, !dbg !9701
  %21 = getelementptr inbounds [72 x i32], [72 x i32]* %12, i64 0, i64 0, !dbg !9702
  call void @_ZL19_HMAC_SHA256_UpdateP27libcperciva_HMAC_SHA256_CTXPKvmPj(%struct.libcperciva_HMAC_SHA256_CTX* %11, i8* %19, i64 %20, i32* %21), !dbg !9703
  %22 = load i8*, i8** %10, align 8, !dbg !9704
  %23 = getelementptr inbounds [72 x i32], [72 x i32]* %12, i64 0, i64 0, !dbg !9705
  %24 = getelementptr inbounds [96 x i8], [96 x i8]* %13, i64 0, i64 0, !dbg !9706
  call void @_ZL18_HMAC_SHA256_FinalPhP27libcperciva_HMAC_SHA256_CTXPjS_(i8* %22, %struct.libcperciva_HMAC_SHA256_CTX* %11, i32* %23, i8* %24), !dbg !9707
  %25 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %11 to i8*, !dbg !9708
  call void @_ZL16insecure_memzeroPVvm(i8* %25, i64 208), !dbg !9709
  %26 = getelementptr inbounds [72 x i32], [72 x i32]* %12, i64 0, i64 0, !dbg !9710
  %27 = bitcast i32* %26 to i8*, !dbg !9710
  call void @_ZL16insecure_memzeroPVvm(i8* %27, i64 288), !dbg !9711
  %28 = getelementptr inbounds [96 x i8], [96 x i8]* %13, i64 0, i64 0, !dbg !9712
  call void @_ZL16insecure_memzeroPVvm(i8* %28, i64 96), !dbg !9713
  ret void, !dbg !9714
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z13PBKDF2_SHA256PKhmS0_mmPhm(i8* %0, i64 %1, i8* %2, i64 %3, i64 %4, i8* %5, i64 %6) #6 !dbg !9715 {
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca %struct.libcperciva_HMAC_SHA256_CTX, align 8
  %16 = alloca %struct.libcperciva_HMAC_SHA256_CTX, align 8
  %17 = alloca %struct.libcperciva_HMAC_SHA256_CTX, align 8
  %18 = alloca [72 x i32], align 16
  %19 = alloca [96 x i8], align 16
  %20 = alloca i64, align 8
  %21 = alloca [4 x i8], align 1
  %22 = alloca [32 x i8], align 16
  %23 = alloca [32 x i8], align 16
  %24 = alloca i64, align 8
  %25 = alloca i32, align 4
  %26 = alloca i64, align 8
  %27 = alloca [1024 x i8], align 16
  store i8* %0, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !9718, metadata !DIExpression()), !dbg !9719
  store i64 %1, i64* %9, align 8
  call void @llvm.dbg.declare(metadata i64* %9, metadata !9720, metadata !DIExpression()), !dbg !9721
  store i8* %2, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !9722, metadata !DIExpression()), !dbg !9723
  store i64 %3, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !9724, metadata !DIExpression()), !dbg !9725
  store i64 %4, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !9726, metadata !DIExpression()), !dbg !9727
  store i8* %5, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !9728, metadata !DIExpression()), !dbg !9729
  store i64 %6, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !9730, metadata !DIExpression()), !dbg !9731
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX* %15, metadata !9732, metadata !DIExpression()), !dbg !9733
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX* %16, metadata !9734, metadata !DIExpression()), !dbg !9735
  call void @llvm.dbg.declare(metadata %struct.libcperciva_HMAC_SHA256_CTX* %17, metadata !9736, metadata !DIExpression()), !dbg !9737
  call void @llvm.dbg.declare(metadata [72 x i32]* %18, metadata !9738, metadata !DIExpression()), !dbg !9739
  call void @llvm.dbg.declare(metadata [96 x i8]* %19, metadata !9740, metadata !DIExpression()), !dbg !9741
  call void @llvm.dbg.declare(metadata i64* %20, metadata !9742, metadata !DIExpression()), !dbg !9743
  call void @llvm.dbg.declare(metadata [4 x i8]* %21, metadata !9744, metadata !DIExpression()), !dbg !9748
  call void @llvm.dbg.declare(metadata [32 x i8]* %22, metadata !9749, metadata !DIExpression()), !dbg !9750
  call void @llvm.dbg.declare(metadata [32 x i8]* %23, metadata !9751, metadata !DIExpression()), !dbg !9752
  call void @llvm.dbg.declare(metadata i64* %24, metadata !9753, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.declare(metadata i32* %25, metadata !9755, metadata !DIExpression()), !dbg !9756
  call void @llvm.dbg.declare(metadata i64* %26, metadata !9757, metadata !DIExpression()), !dbg !9758
  %28 = load i64, i64* %14, align 8, !dbg !9759
  %29 = icmp ule i64 %28, 137438953440, !dbg !9759
  br i1 %29, label %30, label %31, !dbg !9759

30:                                               ; preds = %7
  br label %32, !dbg !9759

31:                                               ; preds = %7
  call void @__assert(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i64 0, i64 0), i32 520, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._Z13PBKDF2_SHA256PKhmS0_mmPhm, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1.44, i64 0, i64 0)), !dbg !9759
  br label %32, !dbg !9759

32:                                               ; preds = %31, %30
  %33 = load i8*, i8** %8, align 8, !dbg !9760
  %34 = load i64, i64* %9, align 8, !dbg !9761
  %35 = getelementptr inbounds [72 x i32], [72 x i32]* %18, i64 0, i64 0, !dbg !9762
  %36 = getelementptr inbounds [96 x i8], [96 x i8]* %19, i64 0, i64 0, !dbg !9763
  %37 = getelementptr inbounds [96 x i8], [96 x i8]* %19, i64 0, i64 64, !dbg !9764
  call void @_ZL17_HMAC_SHA256_InitP27libcperciva_HMAC_SHA256_CTXPKvmPjPhS4_(%struct.libcperciva_HMAC_SHA256_CTX* %15, i8* %33, i64 %34, i32* %35, i8* %36, i8* %37), !dbg !9765
  %38 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %16 to i8*, !dbg !9766
  %39 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %15 to i8*, !dbg !9766
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 208, i1 false), !dbg !9766
  %40 = load i8*, i8** %10, align 8, !dbg !9767
  %41 = load i64, i64* %11, align 8, !dbg !9768
  %42 = getelementptr inbounds [72 x i32], [72 x i32]* %18, i64 0, i64 0, !dbg !9769
  call void @_ZL19_HMAC_SHA256_UpdateP27libcperciva_HMAC_SHA256_CTXPKvmPj(%struct.libcperciva_HMAC_SHA256_CTX* %16, i8* %40, i64 %41, i32* %42), !dbg !9770
  store i64 0, i64* %20, align 8, !dbg !9771
  br label %43, !dbg !9773

43:                                               ; preds = %113, %32
  %44 = load i64, i64* %20, align 8, !dbg !9774
  %45 = mul i64 %44, 32, !dbg !9776
  %46 = load i64, i64* %14, align 8, !dbg !9777
  %47 = icmp ult i64 %45, %46, !dbg !9778
  br i1 %47, label %48, label %116, !dbg !9779

48:                                               ; preds = %43
  call void @llvm.dbg.declare(metadata [1024 x i8]* %27, metadata !9780, metadata !DIExpression()), !dbg !9782
  %49 = getelementptr inbounds [1024 x i8], [1024 x i8]* %27, i64 0, i64 1023, !dbg !9783
  store i8 0, i8* %49, align 1, !dbg !9784
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* %21, i64 0, i64 0, !dbg !9785
  %51 = load i64, i64* %20, align 8, !dbg !9786
  %52 = add i64 %51, 1, !dbg !9787
  %53 = trunc i64 %52 to i32, !dbg !9788
  call void @_ZL19libcperciva_be32encPvj(i8* %50, i32 %53), !dbg !9789
  %54 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %17 to i8*, !dbg !9790
  %55 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %16 to i8*, !dbg !9790
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 208, i1 false), !dbg !9790
  %56 = getelementptr inbounds [4 x i8], [4 x i8]* %21, i64 0, i64 0, !dbg !9791
  %57 = getelementptr inbounds [72 x i32], [72 x i32]* %18, i64 0, i64 0, !dbg !9792
  call void @_ZL19_HMAC_SHA256_UpdateP27libcperciva_HMAC_SHA256_CTXPKvmPj(%struct.libcperciva_HMAC_SHA256_CTX* %17, i8* %56, i64 4, i32* %57), !dbg !9793
  %58 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 0, !dbg !9794
  %59 = getelementptr inbounds [72 x i32], [72 x i32]* %18, i64 0, i64 0, !dbg !9795
  %60 = getelementptr inbounds [96 x i8], [96 x i8]* %19, i64 0, i64 0, !dbg !9796
  call void @_ZL18_HMAC_SHA256_FinalPhP27libcperciva_HMAC_SHA256_CTXPjS_(i8* %58, %struct.libcperciva_HMAC_SHA256_CTX* %17, i32* %59, i8* %60), !dbg !9797
  %61 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0, !dbg !9798
  %62 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 0, !dbg !9798
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %61, i8* align 16 %62, i64 32, i1 false), !dbg !9798
  store i64 2, i64* %24, align 8, !dbg !9799
  br label %63, !dbg !9801

63:                                               ; preds = %95, %48
  %64 = load i64, i64* %24, align 8, !dbg !9802
  %65 = load i64, i64* %12, align 8, !dbg !9804
  %66 = icmp ule i64 %64, %65, !dbg !9805
  br i1 %66, label %67, label %98, !dbg !9806

67:                                               ; preds = %63
  %68 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %17 to i8*, !dbg !9807
  %69 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %15 to i8*, !dbg !9807
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 208, i1 false), !dbg !9807
  %70 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 0, !dbg !9809
  %71 = getelementptr inbounds [72 x i32], [72 x i32]* %18, i64 0, i64 0, !dbg !9810
  call void @_ZL19_HMAC_SHA256_UpdateP27libcperciva_HMAC_SHA256_CTXPKvmPj(%struct.libcperciva_HMAC_SHA256_CTX* %17, i8* %70, i64 32, i32* %71), !dbg !9811
  %72 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 0, !dbg !9812
  %73 = getelementptr inbounds [72 x i32], [72 x i32]* %18, i64 0, i64 0, !dbg !9813
  %74 = getelementptr inbounds [96 x i8], [96 x i8]* %19, i64 0, i64 0, !dbg !9814
  call void @_ZL18_HMAC_SHA256_FinalPhP27libcperciva_HMAC_SHA256_CTXPjS_(i8* %72, %struct.libcperciva_HMAC_SHA256_CTX* %17, i32* %73, i8* %74), !dbg !9815
  store i32 0, i32* %25, align 4, !dbg !9816
  br label %75, !dbg !9818

75:                                               ; preds = %91, %67
  %76 = load i32, i32* %25, align 4, !dbg !9819
  %77 = icmp slt i32 %76, 32, !dbg !9821
  br i1 %77, label %78, label %94, !dbg !9822

78:                                               ; preds = %75
  %79 = load i32, i32* %25, align 4, !dbg !9823
  %80 = sext i32 %79 to i64, !dbg !9824
  %81 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 %80, !dbg !9824
  %82 = load i8, i8* %81, align 1, !dbg !9824
  %83 = zext i8 %82 to i32, !dbg !9824
  %84 = load i32, i32* %25, align 4, !dbg !9825
  %85 = sext i32 %84 to i64, !dbg !9826
  %86 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 %85, !dbg !9826
  %87 = load i8, i8* %86, align 1, !dbg !9827
  %88 = zext i8 %87 to i32, !dbg !9827
  %89 = xor i32 %88, %83, !dbg !9827
  %90 = trunc i32 %89 to i8, !dbg !9827
  store i8 %90, i8* %86, align 1, !dbg !9827
  br label %91, !dbg !9826

91:                                               ; preds = %78
  %92 = load i32, i32* %25, align 4, !dbg !9828
  %93 = add nsw i32 %92, 1, !dbg !9828
  store i32 %93, i32* %25, align 4, !dbg !9828
  br label %75, !dbg !9829, !llvm.loop !9830

94:                                               ; preds = %75
  br label %95, !dbg !9832

95:                                               ; preds = %94
  %96 = load i64, i64* %24, align 8, !dbg !9833
  %97 = add i64 %96, 1, !dbg !9833
  store i64 %97, i64* %24, align 8, !dbg !9833
  br label %63, !dbg !9834, !llvm.loop !9835

98:                                               ; preds = %63
  %99 = load i64, i64* %14, align 8, !dbg !9837
  %100 = load i64, i64* %20, align 8, !dbg !9838
  %101 = mul i64 %100, 32, !dbg !9839
  %102 = sub i64 %99, %101, !dbg !9840
  store i64 %102, i64* %26, align 8, !dbg !9841
  %103 = load i64, i64* %26, align 8, !dbg !9842
  %104 = icmp ugt i64 %103, 32, !dbg !9844
  br i1 %104, label %105, label %106, !dbg !9845

105:                                              ; preds = %98
  store i64 32, i64* %26, align 8, !dbg !9846
  br label %106, !dbg !9847

106:                                              ; preds = %105, %98
  %107 = load i8*, i8** %13, align 8, !dbg !9848
  %108 = load i64, i64* %20, align 8, !dbg !9849
  %109 = mul i64 %108, 32, !dbg !9850
  %110 = getelementptr inbounds i8, i8* %107, i64 %109, !dbg !9848
  %111 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0, !dbg !9851
  %112 = load i64, i64* %26, align 8, !dbg !9852
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 16 %111, i64 %112, i1 false), !dbg !9851
  br label %113, !dbg !9853

113:                                              ; preds = %106
  %114 = load i64, i64* %20, align 8, !dbg !9854
  %115 = add i64 %114, 1, !dbg !9854
  store i64 %115, i64* %20, align 8, !dbg !9854
  br label %43, !dbg !9855, !llvm.loop !9856

116:                                              ; preds = %43
  %117 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %15 to i8*, !dbg !9858
  call void @_ZL16insecure_memzeroPVvm(i8* %117, i64 208), !dbg !9859
  %118 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %16 to i8*, !dbg !9860
  call void @_ZL16insecure_memzeroPVvm(i8* %118, i64 208), !dbg !9861
  %119 = bitcast %struct.libcperciva_HMAC_SHA256_CTX* %17 to i8*, !dbg !9862
  call void @_ZL16insecure_memzeroPVvm(i8* %119, i64 208), !dbg !9863
  %120 = getelementptr inbounds [72 x i32], [72 x i32]* %18, i64 0, i64 0, !dbg !9864
  %121 = bitcast i32* %120 to i8*, !dbg !9864
  call void @_ZL16insecure_memzeroPVvm(i8* %121, i64 288), !dbg !9865
  %122 = getelementptr inbounds [96 x i8], [96 x i8]* %19, i64 0, i64 0, !dbg !9866
  call void @_ZL16insecure_memzeroPVvm(i8* %122, i64 96), !dbg !9867
  %123 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 0, !dbg !9868
  call void @_ZL16insecure_memzeroPVvm(i8* %123, i64 32), !dbg !9869
  %124 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0, !dbg !9870
  call void @_ZL16insecure_memzeroPVvm(i8* %124, i64 32), !dbg !9871
  ret void, !dbg !9872
}

; Function Attrs: noinline optnone ssp uwtable
define hidden void @_Z18crypto_scrypt_smixPhmmPvS0_(i8* %0, i64 %1, i64 %2, i8* %3, i8* %4) #6 !dbg !9873 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !9876, metadata !DIExpression()), !dbg !9877
  store i64 %1, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !9878, metadata !DIExpression()), !dbg !9879
  store i64 %2, i64* %8, align 8
  call void @llvm.dbg.declare(metadata i64* %8, metadata !9880, metadata !DIExpression()), !dbg !9881
  store i8* %3, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !9882, metadata !DIExpression()), !dbg !9883
  store i8* %4, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !9884, metadata !DIExpression()), !dbg !9885
  call void @llvm.dbg.declare(metadata i32** %11, metadata !9886, metadata !DIExpression()), !dbg !9887
  %18 = load i8*, i8** %10, align 8, !dbg !9888
  %19 = bitcast i8* %18 to i32*, !dbg !9889
  store i32* %19, i32** %11, align 8, !dbg !9887
  call void @llvm.dbg.declare(metadata i32** %12, metadata !9890, metadata !DIExpression()), !dbg !9891
  %20 = load i8*, i8** %10, align 8, !dbg !9892
  %21 = load i64, i64* %7, align 8, !dbg !9893
  %22 = mul i64 128, %21, !dbg !9894
  %23 = getelementptr inbounds i8, i8* %20, i64 %22, !dbg !9895
  %24 = bitcast i8* %23 to i32*, !dbg !9896
  store i32* %24, i32** %12, align 8, !dbg !9891
  call void @llvm.dbg.declare(metadata i32** %13, metadata !9897, metadata !DIExpression()), !dbg !9898
  %25 = load i8*, i8** %10, align 8, !dbg !9899
  %26 = load i64, i64* %7, align 8, !dbg !9900
  %27 = mul i64 256, %26, !dbg !9901
  %28 = getelementptr inbounds i8, i8* %25, i64 %27, !dbg !9902
  %29 = bitcast i8* %28 to i32*, !dbg !9903
  store i32* %29, i32** %13, align 8, !dbg !9898
  call void @llvm.dbg.declare(metadata i32** %14, metadata !9904, metadata !DIExpression()), !dbg !9905
  %30 = load i8*, i8** %9, align 8, !dbg !9906
  %31 = bitcast i8* %30 to i32*, !dbg !9907
  store i32* %31, i32** %14, align 8, !dbg !9905
  call void @llvm.dbg.declare(metadata i64* %15, metadata !9908, metadata !DIExpression()), !dbg !9909
  call void @llvm.dbg.declare(metadata i64* %16, metadata !9910, metadata !DIExpression()), !dbg !9911
  call void @llvm.dbg.declare(metadata i64* %17, metadata !9912, metadata !DIExpression()), !dbg !9913
  store i64 0, i64* %17, align 8, !dbg !9914
  br label %32, !dbg !9916

32:                                               ; preds = %46, %5
  %33 = load i64, i64* %17, align 8, !dbg !9917
  %34 = load i64, i64* %7, align 8, !dbg !9919
  %35 = mul i64 32, %34, !dbg !9920
  %36 = icmp ult i64 %33, %35, !dbg !9921
  br i1 %36, label %37, label %49, !dbg !9922

37:                                               ; preds = %32
  %38 = load i8*, i8** %6, align 8, !dbg !9923
  %39 = load i64, i64* %17, align 8, !dbg !9924
  %40 = mul i64 4, %39, !dbg !9925
  %41 = getelementptr inbounds i8, i8* %38, i64 %40, !dbg !9923
  %42 = call i32 @_ZL19libcperciva_le32decPKv(i8* %41), !dbg !9926
  %43 = load i32*, i32** %11, align 8, !dbg !9927
  %44 = load i64, i64* %17, align 8, !dbg !9928
  %45 = getelementptr inbounds i32, i32* %43, i64 %44, !dbg !9927
  store i32 %42, i32* %45, align 4, !dbg !9929
  br label %46, !dbg !9927

46:                                               ; preds = %37
  %47 = load i64, i64* %17, align 8, !dbg !9930
  %48 = add i64 %47, 1, !dbg !9930
  store i64 %48, i64* %17, align 8, !dbg !9930
  br label %32, !dbg !9931, !llvm.loop !9932

49:                                               ; preds = %32
  store i64 0, i64* %15, align 8, !dbg !9934
  br label %50, !dbg !9936

50:                                               ; preds = %86, %49
  %51 = load i64, i64* %15, align 8, !dbg !9937
  %52 = load i64, i64* %8, align 8, !dbg !9939
  %53 = icmp ult i64 %51, %52, !dbg !9940
  br i1 %53, label %54, label %89, !dbg !9941

54:                                               ; preds = %50
  %55 = load i32*, i32** %14, align 8, !dbg !9942
  %56 = load i64, i64* %15, align 8, !dbg !9944
  %57 = load i64, i64* %7, align 8, !dbg !9945
  %58 = mul i64 32, %57, !dbg !9946
  %59 = mul i64 %56, %58, !dbg !9947
  %60 = getelementptr inbounds i32, i32* %55, i64 %59, !dbg !9942
  %61 = bitcast i32* %60 to i8*, !dbg !9948
  %62 = load i32*, i32** %11, align 8, !dbg !9949
  %63 = bitcast i32* %62 to i8*, !dbg !9949
  %64 = load i64, i64* %7, align 8, !dbg !9950
  %65 = mul i64 128, %64, !dbg !9951
  call void @_ZL6blkcpyPvPKvm(i8* %61, i8* %63, i64 %65), !dbg !9952
  %66 = load i32*, i32** %11, align 8, !dbg !9953
  %67 = load i32*, i32** %12, align 8, !dbg !9954
  %68 = load i32*, i32** %13, align 8, !dbg !9955
  %69 = load i64, i64* %7, align 8, !dbg !9956
  call void @_ZL15blockmix_salsa8PKjPjS1_m(i32* %66, i32* %67, i32* %68, i64 %69), !dbg !9957
  %70 = load i32*, i32** %14, align 8, !dbg !9958
  %71 = load i64, i64* %15, align 8, !dbg !9959
  %72 = add i64 %71, 1, !dbg !9960
  %73 = load i64, i64* %7, align 8, !dbg !9961
  %74 = mul i64 32, %73, !dbg !9962
  %75 = mul i64 %72, %74, !dbg !9963
  %76 = getelementptr inbounds i32, i32* %70, i64 %75, !dbg !9958
  %77 = bitcast i32* %76 to i8*, !dbg !9964
  %78 = load i32*, i32** %12, align 8, !dbg !9965
  %79 = bitcast i32* %78 to i8*, !dbg !9965
  %80 = load i64, i64* %7, align 8, !dbg !9966
  %81 = mul i64 128, %80, !dbg !9967
  call void @_ZL6blkcpyPvPKvm(i8* %77, i8* %79, i64 %81), !dbg !9968
  %82 = load i32*, i32** %12, align 8, !dbg !9969
  %83 = load i32*, i32** %11, align 8, !dbg !9970
  %84 = load i32*, i32** %13, align 8, !dbg !9971
  %85 = load i64, i64* %7, align 8, !dbg !9972
  call void @_ZL15blockmix_salsa8PKjPjS1_m(i32* %82, i32* %83, i32* %84, i64 %85), !dbg !9973
  br label %86, !dbg !9974

86:                                               ; preds = %54
  %87 = load i64, i64* %15, align 8, !dbg !9975
  %88 = add i64 %87, 2, !dbg !9975
  store i64 %88, i64* %15, align 8, !dbg !9975
  br label %50, !dbg !9976, !llvm.loop !9977

89:                                               ; preds = %50
  store i64 0, i64* %15, align 8, !dbg !9979
  br label %90, !dbg !9981

90:                                               ; preds = %139, %89
  %91 = load i64, i64* %15, align 8, !dbg !9982
  %92 = load i64, i64* %8, align 8, !dbg !9984
  %93 = icmp ult i64 %91, %92, !dbg !9985
  br i1 %93, label %94, label %142, !dbg !9986

94:                                               ; preds = %90
  %95 = load i32*, i32** %11, align 8, !dbg !9987
  %96 = bitcast i32* %95 to i8*, !dbg !9987
  %97 = load i64, i64* %7, align 8, !dbg !9989
  %98 = call i64 @_ZL10integerifyPKvm(i8* %96, i64 %97), !dbg !9990
  %99 = load i64, i64* %8, align 8, !dbg !9991
  %100 = sub i64 %99, 1, !dbg !9992
  %101 = and i64 %98, %100, !dbg !9993
  store i64 %101, i64* %16, align 8, !dbg !9994
  %102 = load i32*, i32** %11, align 8, !dbg !9995
  %103 = bitcast i32* %102 to i8*, !dbg !9995
  %104 = load i32*, i32** %14, align 8, !dbg !9996
  %105 = load i64, i64* %16, align 8, !dbg !9997
  %106 = load i64, i64* %7, align 8, !dbg !9998
  %107 = mul i64 32, %106, !dbg !9999
  %108 = mul i64 %105, %107, !dbg !10000
  %109 = getelementptr inbounds i32, i32* %104, i64 %108, !dbg !9996
  %110 = bitcast i32* %109 to i8*, !dbg !10001
  %111 = load i64, i64* %7, align 8, !dbg !10002
  %112 = mul i64 128, %111, !dbg !10003
  call void @_ZL6blkxorPvPKvm(i8* %103, i8* %110, i64 %112), !dbg !10004
  %113 = load i32*, i32** %11, align 8, !dbg !10005
  %114 = load i32*, i32** %12, align 8, !dbg !10006
  %115 = load i32*, i32** %13, align 8, !dbg !10007
  %116 = load i64, i64* %7, align 8, !dbg !10008
  call void @_ZL15blockmix_salsa8PKjPjS1_m(i32* %113, i32* %114, i32* %115, i64 %116), !dbg !10009
  %117 = load i32*, i32** %12, align 8, !dbg !10010
  %118 = bitcast i32* %117 to i8*, !dbg !10010
  %119 = load i64, i64* %7, align 8, !dbg !10011
  %120 = call i64 @_ZL10integerifyPKvm(i8* %118, i64 %119), !dbg !10012
  %121 = load i64, i64* %8, align 8, !dbg !10013
  %122 = sub i64 %121, 1, !dbg !10014
  %123 = and i64 %120, %122, !dbg !10015
  store i64 %123, i64* %16, align 8, !dbg !10016
  %124 = load i32*, i32** %12, align 8, !dbg !10017
  %125 = bitcast i32* %124 to i8*, !dbg !10017
  %126 = load i32*, i32** %14, align 8, !dbg !10018
  %127 = load i64, i64* %16, align 8, !dbg !10019
  %128 = load i64, i64* %7, align 8, !dbg !10020
  %129 = mul i64 32, %128, !dbg !10021
  %130 = mul i64 %127, %129, !dbg !10022
  %131 = getelementptr inbounds i32, i32* %126, i64 %130, !dbg !10018
  %132 = bitcast i32* %131 to i8*, !dbg !10023
  %133 = load i64, i64* %7, align 8, !dbg !10024
  %134 = mul i64 128, %133, !dbg !10025
  call void @_ZL6blkxorPvPKvm(i8* %125, i8* %132, i64 %134), !dbg !10026
  %135 = load i32*, i32** %12, align 8, !dbg !10027
  %136 = load i32*, i32** %11, align 8, !dbg !10028
  %137 = load i32*, i32** %13, align 8, !dbg !10029
  %138 = load i64, i64* %7, align 8, !dbg !10030
  call void @_ZL15blockmix_salsa8PKjPjS1_m(i32* %135, i32* %136, i32* %137, i64 %138), !dbg !10031
  br label %139, !dbg !10032

139:                                              ; preds = %94
  %140 = load i64, i64* %15, align 8, !dbg !10033
  %141 = add i64 %140, 2, !dbg !10033
  store i64 %141, i64* %15, align 8, !dbg !10033
  br label %90, !dbg !10034, !llvm.loop !10035

142:                                              ; preds = %90
  store i64 0, i64* %17, align 8, !dbg !10037
  br label %143, !dbg !10039

143:                                              ; preds = %157, %142
  %144 = load i64, i64* %17, align 8, !dbg !10040
  %145 = load i64, i64* %7, align 8, !dbg !10042
  %146 = mul i64 32, %145, !dbg !10043
  %147 = icmp ult i64 %144, %146, !dbg !10044
  br i1 %147, label %148, label %160, !dbg !10045

148:                                              ; preds = %143
  %149 = load i8*, i8** %6, align 8, !dbg !10046
  %150 = load i64, i64* %17, align 8, !dbg !10047
  %151 = mul i64 4, %150, !dbg !10048
  %152 = getelementptr inbounds i8, i8* %149, i64 %151, !dbg !10046
  %153 = load i32*, i32** %11, align 8, !dbg !10049
  %154 = load i64, i64* %17, align 8, !dbg !10050
  %155 = getelementptr inbounds i32, i32* %153, i64 %154, !dbg !10049
  %156 = load i32, i32* %155, align 4, !dbg !10049
  call void @_ZL19libcperciva_le32encPvj(i8* %152, i32 %156), !dbg !10051
  br label %157, !dbg !10051

157:                                              ; preds = %148
  %158 = load i64, i64* %17, align 8, !dbg !10052
  %159 = add i64 %158, 1, !dbg !10052
  store i64 %159, i64* %17, align 8, !dbg !10052
  br label %143, !dbg !10053, !llvm.loop !10054

160:                                              ; preds = %143
  ret void, !dbg !10056
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @_ZL19libcperciva_le32decPKv(i8* %0) #0 !dbg !10057 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !10058, metadata !DIExpression()), !dbg !10059
  call void @llvm.dbg.declare(metadata i8** %3, metadata !10060, metadata !DIExpression()), !dbg !10061
  %4 = load i8*, i8** %2, align 8, !dbg !10062
  store i8* %4, i8** %3, align 8, !dbg !10061
  %5 = load i8*, i8** %3, align 8, !dbg !10063
  %6 = getelementptr inbounds i8, i8* %5, i64 0, !dbg !10063
  %7 = load i8, i8* %6, align 1, !dbg !10063
  %8 = zext i8 %7 to i32, !dbg !10064
  %9 = load i8*, i8** %3, align 8, !dbg !10065
  %10 = getelementptr inbounds i8, i8* %9, i64 1, !dbg !10065
  %11 = load i8, i8* %10, align 1, !dbg !10065
  %12 = zext i8 %11 to i32, !dbg !10066
  %13 = shl i32 %12, 8, !dbg !10067
  %14 = add i32 %8, %13, !dbg !10068
  %15 = load i8*, i8** %3, align 8, !dbg !10069
  %16 = getelementptr inbounds i8, i8* %15, i64 2, !dbg !10069
  %17 = load i8, i8* %16, align 1, !dbg !10069
  %18 = zext i8 %17 to i32, !dbg !10070
  %19 = shl i32 %18, 16, !dbg !10071
  %20 = add i32 %14, %19, !dbg !10072
  %21 = load i8*, i8** %3, align 8, !dbg !10073
  %22 = getelementptr inbounds i8, i8* %21, i64 3, !dbg !10073
  %23 = load i8, i8* %22, align 1, !dbg !10073
  %24 = zext i8 %23 to i32, !dbg !10074
  %25 = shl i32 %24, 24, !dbg !10075
  %26 = add i32 %20, %25, !dbg !10076
  ret i32 %26, !dbg !10077
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL6blkcpyPvPKvm(i8* %0, i8* %1, i64 %2) #0 !dbg !10078 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !10081, metadata !DIExpression()), !dbg !10082
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !10083, metadata !DIExpression()), !dbg !10084
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !10085, metadata !DIExpression()), !dbg !10086
  call void @llvm.dbg.declare(metadata i64** %7, metadata !10087, metadata !DIExpression()), !dbg !10088
  %11 = load i8*, i8** %4, align 8, !dbg !10089
  %12 = bitcast i8* %11 to i64*, !dbg !10090
  store i64* %12, i64** %7, align 8, !dbg !10088
  call void @llvm.dbg.declare(metadata i64** %8, metadata !10091, metadata !DIExpression()), !dbg !10092
  %13 = load i8*, i8** %5, align 8, !dbg !10093
  %14 = bitcast i8* %13 to i64*, !dbg !10094
  store i64* %14, i64** %8, align 8, !dbg !10092
  call void @llvm.dbg.declare(metadata i64* %9, metadata !10095, metadata !DIExpression()), !dbg !10096
  %15 = load i64, i64* %6, align 8, !dbg !10097
  %16 = udiv i64 %15, 8, !dbg !10098
  store i64 %16, i64* %9, align 8, !dbg !10096
  call void @llvm.dbg.declare(metadata i64* %10, metadata !10099, metadata !DIExpression()), !dbg !10100
  store i64 0, i64* %10, align 8, !dbg !10101
  br label %17, !dbg !10103

17:                                               ; preds = %29, %3
  %18 = load i64, i64* %10, align 8, !dbg !10104
  %19 = load i64, i64* %9, align 8, !dbg !10106
  %20 = icmp ult i64 %18, %19, !dbg !10107
  br i1 %20, label %21, label %32, !dbg !10108

21:                                               ; preds = %17
  %22 = load i64*, i64** %8, align 8, !dbg !10109
  %23 = load i64, i64* %10, align 8, !dbg !10110
  %24 = getelementptr inbounds i64, i64* %22, i64 %23, !dbg !10109
  %25 = load i64, i64* %24, align 8, !dbg !10109
  %26 = load i64*, i64** %7, align 8, !dbg !10111
  %27 = load i64, i64* %10, align 8, !dbg !10112
  %28 = getelementptr inbounds i64, i64* %26, i64 %27, !dbg !10111
  store i64 %25, i64* %28, align 8, !dbg !10113
  br label %29, !dbg !10111

29:                                               ; preds = %21
  %30 = load i64, i64* %10, align 8, !dbg !10114
  %31 = add i64 %30, 1, !dbg !10114
  store i64 %31, i64* %10, align 8, !dbg !10114
  br label %17, !dbg !10115, !llvm.loop !10116

32:                                               ; preds = %17
  ret void, !dbg !10118
}

; Function Attrs: noinline optnone ssp uwtable
define internal void @_ZL15blockmix_salsa8PKjPjS1_m(i32* %0, i32* %1, i32* %2, i64 %3) #6 !dbg !10119 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  store i32* %0, i32** %5, align 8
  call void @llvm.dbg.declare(metadata i32** %5, metadata !10122, metadata !DIExpression()), !dbg !10123
  store i32* %1, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !10124, metadata !DIExpression()), !dbg !10125
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !10126, metadata !DIExpression()), !dbg !10127
  store i64 %3, i64* %8, align 8
  call void @llvm.dbg.declare(metadata i64* %8, metadata !10128, metadata !DIExpression()), !dbg !10129
  call void @llvm.dbg.declare(metadata i64* %9, metadata !10130, metadata !DIExpression()), !dbg !10131
  %10 = load i32*, i32** %7, align 8, !dbg !10132
  %11 = bitcast i32* %10 to i8*, !dbg !10132
  %12 = load i32*, i32** %5, align 8, !dbg !10133
  %13 = load i64, i64* %8, align 8, !dbg !10134
  %14 = mul i64 2, %13, !dbg !10135
  %15 = sub i64 %14, 1, !dbg !10136
  %16 = mul i64 %15, 16, !dbg !10137
  %17 = getelementptr inbounds i32, i32* %12, i64 %16, !dbg !10133
  %18 = bitcast i32* %17 to i8*, !dbg !10138
  call void @_ZL6blkcpyPvPKvm(i8* %11, i8* %18, i64 64), !dbg !10139
  store i64 0, i64* %9, align 8, !dbg !10140
  br label %19, !dbg !10142

19:                                               ; preds = %59, %4
  %20 = load i64, i64* %9, align 8, !dbg !10143
  %21 = load i64, i64* %8, align 8, !dbg !10145
  %22 = mul i64 2, %21, !dbg !10146
  %23 = icmp ult i64 %20, %22, !dbg !10147
  br i1 %23, label %24, label %62, !dbg !10148

24:                                               ; preds = %19
  %25 = load i32*, i32** %7, align 8, !dbg !10149
  %26 = bitcast i32* %25 to i8*, !dbg !10149
  %27 = load i32*, i32** %5, align 8, !dbg !10151
  %28 = load i64, i64* %9, align 8, !dbg !10152
  %29 = mul i64 %28, 16, !dbg !10153
  %30 = getelementptr inbounds i32, i32* %27, i64 %29, !dbg !10151
  %31 = bitcast i32* %30 to i8*, !dbg !10154
  call void @_ZL6blkxorPvPKvm(i8* %26, i8* %31, i64 64), !dbg !10155
  %32 = load i32*, i32** %7, align 8, !dbg !10156
  call void @_ZL9salsa20_8Pj(i32* %32), !dbg !10157
  %33 = load i32*, i32** %6, align 8, !dbg !10158
  %34 = load i64, i64* %9, align 8, !dbg !10159
  %35 = mul i64 %34, 8, !dbg !10160
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !10158
  %37 = bitcast i32* %36 to i8*, !dbg !10161
  %38 = load i32*, i32** %7, align 8, !dbg !10162
  %39 = bitcast i32* %38 to i8*, !dbg !10162
  call void @_ZL6blkcpyPvPKvm(i8* %37, i8* %39, i64 64), !dbg !10163
  %40 = load i32*, i32** %7, align 8, !dbg !10164
  %41 = bitcast i32* %40 to i8*, !dbg !10164
  %42 = load i32*, i32** %5, align 8, !dbg !10165
  %43 = load i64, i64* %9, align 8, !dbg !10166
  %44 = mul i64 %43, 16, !dbg !10167
  %45 = add i64 %44, 16, !dbg !10168
  %46 = getelementptr inbounds i32, i32* %42, i64 %45, !dbg !10165
  %47 = bitcast i32* %46 to i8*, !dbg !10169
  call void @_ZL6blkxorPvPKvm(i8* %41, i8* %47, i64 64), !dbg !10170
  %48 = load i32*, i32** %7, align 8, !dbg !10171
  call void @_ZL9salsa20_8Pj(i32* %48), !dbg !10172
  %49 = load i32*, i32** %6, align 8, !dbg !10173
  %50 = load i64, i64* %9, align 8, !dbg !10174
  %51 = mul i64 %50, 8, !dbg !10175
  %52 = load i64, i64* %8, align 8, !dbg !10176
  %53 = mul i64 %52, 16, !dbg !10177
  %54 = add i64 %51, %53, !dbg !10178
  %55 = getelementptr inbounds i32, i32* %49, i64 %54, !dbg !10173
  %56 = bitcast i32* %55 to i8*, !dbg !10179
  %57 = load i32*, i32** %7, align 8, !dbg !10180
  %58 = bitcast i32* %57 to i8*, !dbg !10180
  call void @_ZL6blkcpyPvPKvm(i8* %56, i8* %58, i64 64), !dbg !10181
  br label %59, !dbg !10182

59:                                               ; preds = %24
  %60 = load i64, i64* %9, align 8, !dbg !10183
  %61 = add i64 %60, 2, !dbg !10183
  store i64 %61, i64* %9, align 8, !dbg !10183
  br label %19, !dbg !10184, !llvm.loop !10185

62:                                               ; preds = %19
  ret void, !dbg !10187
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i64 @_ZL10integerifyPKvm(i8* %0, i64 %1) #0 !dbg !10188 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !10191, metadata !DIExpression()), !dbg !10192
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !10193, metadata !DIExpression()), !dbg !10194
  call void @llvm.dbg.declare(metadata i32** %5, metadata !10195, metadata !DIExpression()), !dbg !10196
  %6 = load i8*, i8** %3, align 8, !dbg !10197
  %7 = ptrtoint i8* %6 to i64, !dbg !10198
  %8 = load i64, i64* %4, align 8, !dbg !10199
  %9 = mul i64 2, %8, !dbg !10200
  %10 = sub i64 %9, 1, !dbg !10201
  %11 = mul i64 %10, 64, !dbg !10202
  %12 = add i64 %7, %11, !dbg !10203
  %13 = inttoptr i64 %12 to i32*, !dbg !10204
  store i32* %13, i32** %5, align 8, !dbg !10196
  %14 = load i32*, i32** %5, align 8, !dbg !10205
  %15 = getelementptr inbounds i32, i32* %14, i64 1, !dbg !10205
  %16 = load i32, i32* %15, align 4, !dbg !10205
  %17 = zext i32 %16 to i64, !dbg !10206
  %18 = shl i64 %17, 32, !dbg !10207
  %19 = load i32*, i32** %5, align 8, !dbg !10208
  %20 = getelementptr inbounds i32, i32* %19, i64 0, !dbg !10208
  %21 = load i32, i32* %20, align 4, !dbg !10208
  %22 = zext i32 %21 to i64, !dbg !10208
  %23 = add i64 %18, %22, !dbg !10209
  ret i64 %23, !dbg !10210
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL6blkxorPvPKvm(i8* %0, i8* %1, i64 %2) #0 !dbg !10211 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !10212, metadata !DIExpression()), !dbg !10213
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !10214, metadata !DIExpression()), !dbg !10215
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !10216, metadata !DIExpression()), !dbg !10217
  call void @llvm.dbg.declare(metadata i64** %7, metadata !10218, metadata !DIExpression()), !dbg !10219
  %11 = load i8*, i8** %4, align 8, !dbg !10220
  %12 = bitcast i8* %11 to i64*, !dbg !10221
  store i64* %12, i64** %7, align 8, !dbg !10219
  call void @llvm.dbg.declare(metadata i64** %8, metadata !10222, metadata !DIExpression()), !dbg !10223
  %13 = load i8*, i8** %5, align 8, !dbg !10224
  %14 = bitcast i8* %13 to i64*, !dbg !10225
  store i64* %14, i64** %8, align 8, !dbg !10223
  call void @llvm.dbg.declare(metadata i64* %9, metadata !10226, metadata !DIExpression()), !dbg !10227
  %15 = load i64, i64* %6, align 8, !dbg !10228
  %16 = udiv i64 %15, 8, !dbg !10229
  store i64 %16, i64* %9, align 8, !dbg !10227
  call void @llvm.dbg.declare(metadata i64* %10, metadata !10230, metadata !DIExpression()), !dbg !10231
  store i64 0, i64* %10, align 8, !dbg !10232
  br label %17, !dbg !10234

17:                                               ; preds = %31, %3
  %18 = load i64, i64* %10, align 8, !dbg !10235
  %19 = load i64, i64* %9, align 8, !dbg !10237
  %20 = icmp ult i64 %18, %19, !dbg !10238
  br i1 %20, label %21, label %34, !dbg !10239

21:                                               ; preds = %17
  %22 = load i64*, i64** %8, align 8, !dbg !10240
  %23 = load i64, i64* %10, align 8, !dbg !10241
  %24 = getelementptr inbounds i64, i64* %22, i64 %23, !dbg !10240
  %25 = load i64, i64* %24, align 8, !dbg !10240
  %26 = load i64*, i64** %7, align 8, !dbg !10242
  %27 = load i64, i64* %10, align 8, !dbg !10243
  %28 = getelementptr inbounds i64, i64* %26, i64 %27, !dbg !10242
  %29 = load i64, i64* %28, align 8, !dbg !10244
  %30 = xor i64 %29, %25, !dbg !10244
  store i64 %30, i64* %28, align 8, !dbg !10244
  br label %31, !dbg !10242

31:                                               ; preds = %21
  %32 = load i64, i64* %10, align 8, !dbg !10245
  %33 = add i64 %32, 1, !dbg !10245
  store i64 %33, i64* %10, align 8, !dbg !10245
  br label %17, !dbg !10246, !llvm.loop !10247

34:                                               ; preds = %17
  ret void, !dbg !10249
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL19libcperciva_le32encPvj(i8* %0, i32 %1) #0 !dbg !10250 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !10251, metadata !DIExpression()), !dbg !10252
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !10253, metadata !DIExpression()), !dbg !10254
  call void @llvm.dbg.declare(metadata i8** %5, metadata !10255, metadata !DIExpression()), !dbg !10256
  %6 = load i8*, i8** %3, align 8, !dbg !10257
  store i8* %6, i8** %5, align 8, !dbg !10256
  %7 = load i32, i32* %4, align 4, !dbg !10258
  %8 = and i32 %7, 255, !dbg !10259
  %9 = trunc i32 %8 to i8, !dbg !10258
  %10 = load i8*, i8** %5, align 8, !dbg !10260
  %11 = getelementptr inbounds i8, i8* %10, i64 0, !dbg !10260
  store i8 %9, i8* %11, align 1, !dbg !10261
  %12 = load i32, i32* %4, align 4, !dbg !10262
  %13 = lshr i32 %12, 8, !dbg !10263
  %14 = and i32 %13, 255, !dbg !10264
  %15 = trunc i32 %14 to i8, !dbg !10265
  %16 = load i8*, i8** %5, align 8, !dbg !10266
  %17 = getelementptr inbounds i8, i8* %16, i64 1, !dbg !10266
  store i8 %15, i8* %17, align 1, !dbg !10267
  %18 = load i32, i32* %4, align 4, !dbg !10268
  %19 = lshr i32 %18, 16, !dbg !10269
  %20 = and i32 %19, 255, !dbg !10270
  %21 = trunc i32 %20 to i8, !dbg !10271
  %22 = load i8*, i8** %5, align 8, !dbg !10272
  %23 = getelementptr inbounds i8, i8* %22, i64 2, !dbg !10272
  store i8 %21, i8* %23, align 1, !dbg !10273
  %24 = load i32, i32* %4, align 4, !dbg !10274
  %25 = lshr i32 %24, 24, !dbg !10275
  %26 = and i32 %25, 255, !dbg !10276
  %27 = trunc i32 %26 to i8, !dbg !10277
  %28 = load i8*, i8** %5, align 8, !dbg !10278
  %29 = getelementptr inbounds i8, i8* %28, i64 3, !dbg !10278
  store i8 %27, i8* %29, align 1, !dbg !10279
  ret void, !dbg !10280
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL9salsa20_8Pj(i32* %0) #0 !dbg !10281 {
  %2 = alloca i32*, align 8
  %3 = alloca [16 x i32], align 16
  %4 = alloca i64, align 8
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !10284, metadata !DIExpression()), !dbg !10285
  call void @llvm.dbg.declare(metadata [16 x i32]* %3, metadata !10286, metadata !DIExpression()), !dbg !10288
  call void @llvm.dbg.declare(metadata i64* %4, metadata !10289, metadata !DIExpression()), !dbg !10290
  %5 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10291
  %6 = bitcast i32* %5 to i8*, !dbg !10291
  %7 = load i32*, i32** %2, align 8, !dbg !10292
  %8 = bitcast i32* %7 to i8*, !dbg !10292
  call void @_ZL6blkcpyPvPKvm(i8* %6, i8* %8, i64 64), !dbg !10293
  store i64 0, i64* %4, align 8, !dbg !10294
  br label %9, !dbg !10296

9:                                                ; preds = %525, %1
  %10 = load i64, i64* %4, align 8, !dbg !10297
  %11 = icmp ult i64 %10, 8, !dbg !10299
  br i1 %11, label %12, label %528, !dbg !10300

12:                                               ; preds = %9
  %13 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10301
  %14 = load i32, i32* %13, align 16, !dbg !10301
  %15 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10301
  %16 = load i32, i32* %15, align 16, !dbg !10301
  %17 = add i32 %14, %16, !dbg !10301
  %18 = shl i32 %17, 7, !dbg !10301
  %19 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10301
  %20 = load i32, i32* %19, align 16, !dbg !10301
  %21 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10301
  %22 = load i32, i32* %21, align 16, !dbg !10301
  %23 = add i32 %20, %22, !dbg !10301
  %24 = lshr i32 %23, 25, !dbg !10301
  %25 = or i32 %18, %24, !dbg !10301
  %26 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10303
  %27 = load i32, i32* %26, align 16, !dbg !10304
  %28 = xor i32 %27, %25, !dbg !10304
  store i32 %28, i32* %26, align 16, !dbg !10304
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10305
  %30 = load i32, i32* %29, align 16, !dbg !10305
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10305
  %32 = load i32, i32* %31, align 16, !dbg !10305
  %33 = add i32 %30, %32, !dbg !10305
  %34 = shl i32 %33, 9, !dbg !10305
  %35 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10305
  %36 = load i32, i32* %35, align 16, !dbg !10305
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10305
  %38 = load i32, i32* %37, align 16, !dbg !10305
  %39 = add i32 %36, %38, !dbg !10305
  %40 = lshr i32 %39, 23, !dbg !10305
  %41 = or i32 %34, %40, !dbg !10305
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10306
  %43 = load i32, i32* %42, align 16, !dbg !10307
  %44 = xor i32 %43, %41, !dbg !10307
  store i32 %44, i32* %42, align 16, !dbg !10307
  %45 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10308
  %46 = load i32, i32* %45, align 16, !dbg !10308
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10308
  %48 = load i32, i32* %47, align 16, !dbg !10308
  %49 = add i32 %46, %48, !dbg !10308
  %50 = shl i32 %49, 13, !dbg !10308
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10308
  %52 = load i32, i32* %51, align 16, !dbg !10308
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10308
  %54 = load i32, i32* %53, align 16, !dbg !10308
  %55 = add i32 %52, %54, !dbg !10308
  %56 = lshr i32 %55, 19, !dbg !10308
  %57 = or i32 %50, %56, !dbg !10308
  %58 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10309
  %59 = load i32, i32* %58, align 16, !dbg !10310
  %60 = xor i32 %59, %57, !dbg !10310
  store i32 %60, i32* %58, align 16, !dbg !10310
  %61 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10311
  %62 = load i32, i32* %61, align 16, !dbg !10311
  %63 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10311
  %64 = load i32, i32* %63, align 16, !dbg !10311
  %65 = add i32 %62, %64, !dbg !10311
  %66 = shl i32 %65, 18, !dbg !10311
  %67 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10311
  %68 = load i32, i32* %67, align 16, !dbg !10311
  %69 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10311
  %70 = load i32, i32* %69, align 16, !dbg !10311
  %71 = add i32 %68, %70, !dbg !10311
  %72 = lshr i32 %71, 14, !dbg !10311
  %73 = or i32 %66, %72, !dbg !10311
  %74 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10312
  %75 = load i32, i32* %74, align 16, !dbg !10313
  %76 = xor i32 %75, %73, !dbg !10313
  store i32 %76, i32* %74, align 16, !dbg !10313
  %77 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10314
  %78 = load i32, i32* %77, align 4, !dbg !10314
  %79 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10314
  %80 = load i32, i32* %79, align 4, !dbg !10314
  %81 = add i32 %78, %80, !dbg !10314
  %82 = shl i32 %81, 7, !dbg !10314
  %83 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10314
  %84 = load i32, i32* %83, align 4, !dbg !10314
  %85 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10314
  %86 = load i32, i32* %85, align 4, !dbg !10314
  %87 = add i32 %84, %86, !dbg !10314
  %88 = lshr i32 %87, 25, !dbg !10314
  %89 = or i32 %82, %88, !dbg !10314
  %90 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10315
  %91 = load i32, i32* %90, align 4, !dbg !10316
  %92 = xor i32 %91, %89, !dbg !10316
  store i32 %92, i32* %90, align 4, !dbg !10316
  %93 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10317
  %94 = load i32, i32* %93, align 4, !dbg !10317
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10317
  %96 = load i32, i32* %95, align 4, !dbg !10317
  %97 = add i32 %94, %96, !dbg !10317
  %98 = shl i32 %97, 9, !dbg !10317
  %99 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10317
  %100 = load i32, i32* %99, align 4, !dbg !10317
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10317
  %102 = load i32, i32* %101, align 4, !dbg !10317
  %103 = add i32 %100, %102, !dbg !10317
  %104 = lshr i32 %103, 23, !dbg !10317
  %105 = or i32 %98, %104, !dbg !10317
  %106 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10318
  %107 = load i32, i32* %106, align 4, !dbg !10319
  %108 = xor i32 %107, %105, !dbg !10319
  store i32 %108, i32* %106, align 4, !dbg !10319
  %109 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10320
  %110 = load i32, i32* %109, align 4, !dbg !10320
  %111 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10320
  %112 = load i32, i32* %111, align 4, !dbg !10320
  %113 = add i32 %110, %112, !dbg !10320
  %114 = shl i32 %113, 13, !dbg !10320
  %115 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10320
  %116 = load i32, i32* %115, align 4, !dbg !10320
  %117 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10320
  %118 = load i32, i32* %117, align 4, !dbg !10320
  %119 = add i32 %116, %118, !dbg !10320
  %120 = lshr i32 %119, 19, !dbg !10320
  %121 = or i32 %114, %120, !dbg !10320
  %122 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10321
  %123 = load i32, i32* %122, align 4, !dbg !10322
  %124 = xor i32 %123, %121, !dbg !10322
  store i32 %124, i32* %122, align 4, !dbg !10322
  %125 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10323
  %126 = load i32, i32* %125, align 4, !dbg !10323
  %127 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10323
  %128 = load i32, i32* %127, align 4, !dbg !10323
  %129 = add i32 %126, %128, !dbg !10323
  %130 = shl i32 %129, 18, !dbg !10323
  %131 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10323
  %132 = load i32, i32* %131, align 4, !dbg !10323
  %133 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10323
  %134 = load i32, i32* %133, align 4, !dbg !10323
  %135 = add i32 %132, %134, !dbg !10323
  %136 = lshr i32 %135, 14, !dbg !10323
  %137 = or i32 %130, %136, !dbg !10323
  %138 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10324
  %139 = load i32, i32* %138, align 4, !dbg !10325
  %140 = xor i32 %139, %137, !dbg !10325
  store i32 %140, i32* %138, align 4, !dbg !10325
  %141 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10326
  %142 = load i32, i32* %141, align 8, !dbg !10326
  %143 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10326
  %144 = load i32, i32* %143, align 8, !dbg !10326
  %145 = add i32 %142, %144, !dbg !10326
  %146 = shl i32 %145, 7, !dbg !10326
  %147 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10326
  %148 = load i32, i32* %147, align 8, !dbg !10326
  %149 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10326
  %150 = load i32, i32* %149, align 8, !dbg !10326
  %151 = add i32 %148, %150, !dbg !10326
  %152 = lshr i32 %151, 25, !dbg !10326
  %153 = or i32 %146, %152, !dbg !10326
  %154 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10327
  %155 = load i32, i32* %154, align 8, !dbg !10328
  %156 = xor i32 %155, %153, !dbg !10328
  store i32 %156, i32* %154, align 8, !dbg !10328
  %157 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10329
  %158 = load i32, i32* %157, align 8, !dbg !10329
  %159 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10329
  %160 = load i32, i32* %159, align 8, !dbg !10329
  %161 = add i32 %158, %160, !dbg !10329
  %162 = shl i32 %161, 9, !dbg !10329
  %163 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10329
  %164 = load i32, i32* %163, align 8, !dbg !10329
  %165 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10329
  %166 = load i32, i32* %165, align 8, !dbg !10329
  %167 = add i32 %164, %166, !dbg !10329
  %168 = lshr i32 %167, 23, !dbg !10329
  %169 = or i32 %162, %168, !dbg !10329
  %170 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10330
  %171 = load i32, i32* %170, align 8, !dbg !10331
  %172 = xor i32 %171, %169, !dbg !10331
  store i32 %172, i32* %170, align 8, !dbg !10331
  %173 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10332
  %174 = load i32, i32* %173, align 8, !dbg !10332
  %175 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10332
  %176 = load i32, i32* %175, align 8, !dbg !10332
  %177 = add i32 %174, %176, !dbg !10332
  %178 = shl i32 %177, 13, !dbg !10332
  %179 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10332
  %180 = load i32, i32* %179, align 8, !dbg !10332
  %181 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10332
  %182 = load i32, i32* %181, align 8, !dbg !10332
  %183 = add i32 %180, %182, !dbg !10332
  %184 = lshr i32 %183, 19, !dbg !10332
  %185 = or i32 %178, %184, !dbg !10332
  %186 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10333
  %187 = load i32, i32* %186, align 8, !dbg !10334
  %188 = xor i32 %187, %185, !dbg !10334
  store i32 %188, i32* %186, align 8, !dbg !10334
  %189 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10335
  %190 = load i32, i32* %189, align 8, !dbg !10335
  %191 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10335
  %192 = load i32, i32* %191, align 8, !dbg !10335
  %193 = add i32 %190, %192, !dbg !10335
  %194 = shl i32 %193, 18, !dbg !10335
  %195 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10335
  %196 = load i32, i32* %195, align 8, !dbg !10335
  %197 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10335
  %198 = load i32, i32* %197, align 8, !dbg !10335
  %199 = add i32 %196, %198, !dbg !10335
  %200 = lshr i32 %199, 14, !dbg !10335
  %201 = or i32 %194, %200, !dbg !10335
  %202 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10336
  %203 = load i32, i32* %202, align 8, !dbg !10337
  %204 = xor i32 %203, %201, !dbg !10337
  store i32 %204, i32* %202, align 8, !dbg !10337
  %205 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10338
  %206 = load i32, i32* %205, align 4, !dbg !10338
  %207 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10338
  %208 = load i32, i32* %207, align 4, !dbg !10338
  %209 = add i32 %206, %208, !dbg !10338
  %210 = shl i32 %209, 7, !dbg !10338
  %211 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10338
  %212 = load i32, i32* %211, align 4, !dbg !10338
  %213 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10338
  %214 = load i32, i32* %213, align 4, !dbg !10338
  %215 = add i32 %212, %214, !dbg !10338
  %216 = lshr i32 %215, 25, !dbg !10338
  %217 = or i32 %210, %216, !dbg !10338
  %218 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10339
  %219 = load i32, i32* %218, align 4, !dbg !10340
  %220 = xor i32 %219, %217, !dbg !10340
  store i32 %220, i32* %218, align 4, !dbg !10340
  %221 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10341
  %222 = load i32, i32* %221, align 4, !dbg !10341
  %223 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10341
  %224 = load i32, i32* %223, align 4, !dbg !10341
  %225 = add i32 %222, %224, !dbg !10341
  %226 = shl i32 %225, 9, !dbg !10341
  %227 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10341
  %228 = load i32, i32* %227, align 4, !dbg !10341
  %229 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10341
  %230 = load i32, i32* %229, align 4, !dbg !10341
  %231 = add i32 %228, %230, !dbg !10341
  %232 = lshr i32 %231, 23, !dbg !10341
  %233 = or i32 %226, %232, !dbg !10341
  %234 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10342
  %235 = load i32, i32* %234, align 4, !dbg !10343
  %236 = xor i32 %235, %233, !dbg !10343
  store i32 %236, i32* %234, align 4, !dbg !10343
  %237 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10344
  %238 = load i32, i32* %237, align 4, !dbg !10344
  %239 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10344
  %240 = load i32, i32* %239, align 4, !dbg !10344
  %241 = add i32 %238, %240, !dbg !10344
  %242 = shl i32 %241, 13, !dbg !10344
  %243 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10344
  %244 = load i32, i32* %243, align 4, !dbg !10344
  %245 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10344
  %246 = load i32, i32* %245, align 4, !dbg !10344
  %247 = add i32 %244, %246, !dbg !10344
  %248 = lshr i32 %247, 19, !dbg !10344
  %249 = or i32 %242, %248, !dbg !10344
  %250 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10345
  %251 = load i32, i32* %250, align 4, !dbg !10346
  %252 = xor i32 %251, %249, !dbg !10346
  store i32 %252, i32* %250, align 4, !dbg !10346
  %253 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10347
  %254 = load i32, i32* %253, align 4, !dbg !10347
  %255 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10347
  %256 = load i32, i32* %255, align 4, !dbg !10347
  %257 = add i32 %254, %256, !dbg !10347
  %258 = shl i32 %257, 18, !dbg !10347
  %259 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10347
  %260 = load i32, i32* %259, align 4, !dbg !10347
  %261 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10347
  %262 = load i32, i32* %261, align 4, !dbg !10347
  %263 = add i32 %260, %262, !dbg !10347
  %264 = lshr i32 %263, 14, !dbg !10347
  %265 = or i32 %258, %264, !dbg !10347
  %266 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10348
  %267 = load i32, i32* %266, align 4, !dbg !10349
  %268 = xor i32 %267, %265, !dbg !10349
  store i32 %268, i32* %266, align 4, !dbg !10349
  %269 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10350
  %270 = load i32, i32* %269, align 16, !dbg !10350
  %271 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10350
  %272 = load i32, i32* %271, align 4, !dbg !10350
  %273 = add i32 %270, %272, !dbg !10350
  %274 = shl i32 %273, 7, !dbg !10350
  %275 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10350
  %276 = load i32, i32* %275, align 16, !dbg !10350
  %277 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10350
  %278 = load i32, i32* %277, align 4, !dbg !10350
  %279 = add i32 %276, %278, !dbg !10350
  %280 = lshr i32 %279, 25, !dbg !10350
  %281 = or i32 %274, %280, !dbg !10350
  %282 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10351
  %283 = load i32, i32* %282, align 4, !dbg !10352
  %284 = xor i32 %283, %281, !dbg !10352
  store i32 %284, i32* %282, align 4, !dbg !10352
  %285 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10353
  %286 = load i32, i32* %285, align 4, !dbg !10353
  %287 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10353
  %288 = load i32, i32* %287, align 16, !dbg !10353
  %289 = add i32 %286, %288, !dbg !10353
  %290 = shl i32 %289, 9, !dbg !10353
  %291 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10353
  %292 = load i32, i32* %291, align 4, !dbg !10353
  %293 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10353
  %294 = load i32, i32* %293, align 16, !dbg !10353
  %295 = add i32 %292, %294, !dbg !10353
  %296 = lshr i32 %295, 23, !dbg !10353
  %297 = or i32 %290, %296, !dbg !10353
  %298 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10354
  %299 = load i32, i32* %298, align 8, !dbg !10355
  %300 = xor i32 %299, %297, !dbg !10355
  store i32 %300, i32* %298, align 8, !dbg !10355
  %301 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10356
  %302 = load i32, i32* %301, align 8, !dbg !10356
  %303 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10356
  %304 = load i32, i32* %303, align 4, !dbg !10356
  %305 = add i32 %302, %304, !dbg !10356
  %306 = shl i32 %305, 13, !dbg !10356
  %307 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10356
  %308 = load i32, i32* %307, align 8, !dbg !10356
  %309 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1, !dbg !10356
  %310 = load i32, i32* %309, align 4, !dbg !10356
  %311 = add i32 %308, %310, !dbg !10356
  %312 = lshr i32 %311, 19, !dbg !10356
  %313 = or i32 %306, %312, !dbg !10356
  %314 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10357
  %315 = load i32, i32* %314, align 4, !dbg !10358
  %316 = xor i32 %315, %313, !dbg !10358
  store i32 %316, i32* %314, align 4, !dbg !10358
  %317 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10359
  %318 = load i32, i32* %317, align 4, !dbg !10359
  %319 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10359
  %320 = load i32, i32* %319, align 8, !dbg !10359
  %321 = add i32 %318, %320, !dbg !10359
  %322 = shl i32 %321, 18, !dbg !10359
  %323 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3, !dbg !10359
  %324 = load i32, i32* %323, align 4, !dbg !10359
  %325 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2, !dbg !10359
  %326 = load i32, i32* %325, align 8, !dbg !10359
  %327 = add i32 %324, %326, !dbg !10359
  %328 = lshr i32 %327, 14, !dbg !10359
  %329 = or i32 %322, %328, !dbg !10359
  %330 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0, !dbg !10360
  %331 = load i32, i32* %330, align 16, !dbg !10361
  %332 = xor i32 %331, %329, !dbg !10361
  store i32 %332, i32* %330, align 16, !dbg !10361
  %333 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10362
  %334 = load i32, i32* %333, align 4, !dbg !10362
  %335 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10362
  %336 = load i32, i32* %335, align 16, !dbg !10362
  %337 = add i32 %334, %336, !dbg !10362
  %338 = shl i32 %337, 7, !dbg !10362
  %339 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10362
  %340 = load i32, i32* %339, align 4, !dbg !10362
  %341 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10362
  %342 = load i32, i32* %341, align 16, !dbg !10362
  %343 = add i32 %340, %342, !dbg !10362
  %344 = lshr i32 %343, 25, !dbg !10362
  %345 = or i32 %338, %344, !dbg !10362
  %346 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10363
  %347 = load i32, i32* %346, align 8, !dbg !10364
  %348 = xor i32 %347, %345, !dbg !10364
  store i32 %348, i32* %346, align 8, !dbg !10364
  %349 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10365
  %350 = load i32, i32* %349, align 8, !dbg !10365
  %351 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10365
  %352 = load i32, i32* %351, align 4, !dbg !10365
  %353 = add i32 %350, %352, !dbg !10365
  %354 = shl i32 %353, 9, !dbg !10365
  %355 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10365
  %356 = load i32, i32* %355, align 8, !dbg !10365
  %357 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10365
  %358 = load i32, i32* %357, align 4, !dbg !10365
  %359 = add i32 %356, %358, !dbg !10365
  %360 = lshr i32 %359, 23, !dbg !10365
  %361 = or i32 %354, %360, !dbg !10365
  %362 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10366
  %363 = load i32, i32* %362, align 4, !dbg !10367
  %364 = xor i32 %363, %361, !dbg !10367
  store i32 %364, i32* %362, align 4, !dbg !10367
  %365 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10368
  %366 = load i32, i32* %365, align 4, !dbg !10368
  %367 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10368
  %368 = load i32, i32* %367, align 8, !dbg !10368
  %369 = add i32 %366, %368, !dbg !10368
  %370 = shl i32 %369, 13, !dbg !10368
  %371 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10368
  %372 = load i32, i32* %371, align 4, !dbg !10368
  %373 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6, !dbg !10368
  %374 = load i32, i32* %373, align 8, !dbg !10368
  %375 = add i32 %372, %374, !dbg !10368
  %376 = lshr i32 %375, 19, !dbg !10368
  %377 = or i32 %370, %376, !dbg !10368
  %378 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10369
  %379 = load i32, i32* %378, align 16, !dbg !10370
  %380 = xor i32 %379, %377, !dbg !10370
  store i32 %380, i32* %378, align 16, !dbg !10370
  %381 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10371
  %382 = load i32, i32* %381, align 16, !dbg !10371
  %383 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10371
  %384 = load i32, i32* %383, align 4, !dbg !10371
  %385 = add i32 %382, %384, !dbg !10371
  %386 = shl i32 %385, 18, !dbg !10371
  %387 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4, !dbg !10371
  %388 = load i32, i32* %387, align 16, !dbg !10371
  %389 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7, !dbg !10371
  %390 = load i32, i32* %389, align 4, !dbg !10371
  %391 = add i32 %388, %390, !dbg !10371
  %392 = lshr i32 %391, 14, !dbg !10371
  %393 = or i32 %386, %392, !dbg !10371
  %394 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5, !dbg !10372
  %395 = load i32, i32* %394, align 4, !dbg !10373
  %396 = xor i32 %395, %393, !dbg !10373
  store i32 %396, i32* %394, align 4, !dbg !10373
  %397 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10374
  %398 = load i32, i32* %397, align 8, !dbg !10374
  %399 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10374
  %400 = load i32, i32* %399, align 4, !dbg !10374
  %401 = add i32 %398, %400, !dbg !10374
  %402 = shl i32 %401, 7, !dbg !10374
  %403 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10374
  %404 = load i32, i32* %403, align 8, !dbg !10374
  %405 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10374
  %406 = load i32, i32* %405, align 4, !dbg !10374
  %407 = add i32 %404, %406, !dbg !10374
  %408 = lshr i32 %407, 25, !dbg !10374
  %409 = or i32 %402, %408, !dbg !10374
  %410 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10375
  %411 = load i32, i32* %410, align 4, !dbg !10376
  %412 = xor i32 %411, %409, !dbg !10376
  store i32 %412, i32* %410, align 4, !dbg !10376
  %413 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10377
  %414 = load i32, i32* %413, align 4, !dbg !10377
  %415 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10377
  %416 = load i32, i32* %415, align 8, !dbg !10377
  %417 = add i32 %414, %416, !dbg !10377
  %418 = shl i32 %417, 9, !dbg !10377
  %419 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10377
  %420 = load i32, i32* %419, align 4, !dbg !10377
  %421 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10377
  %422 = load i32, i32* %421, align 8, !dbg !10377
  %423 = add i32 %420, %422, !dbg !10377
  %424 = lshr i32 %423, 23, !dbg !10377
  %425 = or i32 %418, %424, !dbg !10377
  %426 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10378
  %427 = load i32, i32* %426, align 16, !dbg !10379
  %428 = xor i32 %427, %425, !dbg !10379
  store i32 %428, i32* %426, align 16, !dbg !10379
  %429 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10380
  %430 = load i32, i32* %429, align 16, !dbg !10380
  %431 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10380
  %432 = load i32, i32* %431, align 4, !dbg !10380
  %433 = add i32 %430, %432, !dbg !10380
  %434 = shl i32 %433, 13, !dbg !10380
  %435 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10380
  %436 = load i32, i32* %435, align 16, !dbg !10380
  %437 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11, !dbg !10380
  %438 = load i32, i32* %437, align 4, !dbg !10380
  %439 = add i32 %436, %438, !dbg !10380
  %440 = lshr i32 %439, 19, !dbg !10380
  %441 = or i32 %434, %440, !dbg !10380
  %442 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10381
  %443 = load i32, i32* %442, align 4, !dbg !10382
  %444 = xor i32 %443, %441, !dbg !10382
  store i32 %444, i32* %442, align 4, !dbg !10382
  %445 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10383
  %446 = load i32, i32* %445, align 4, !dbg !10383
  %447 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10383
  %448 = load i32, i32* %447, align 16, !dbg !10383
  %449 = add i32 %446, %448, !dbg !10383
  %450 = shl i32 %449, 18, !dbg !10383
  %451 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9, !dbg !10383
  %452 = load i32, i32* %451, align 4, !dbg !10383
  %453 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8, !dbg !10383
  %454 = load i32, i32* %453, align 16, !dbg !10383
  %455 = add i32 %452, %454, !dbg !10383
  %456 = lshr i32 %455, 14, !dbg !10383
  %457 = or i32 %450, %456, !dbg !10383
  %458 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10, !dbg !10384
  %459 = load i32, i32* %458, align 8, !dbg !10385
  %460 = xor i32 %459, %457, !dbg !10385
  store i32 %460, i32* %458, align 8, !dbg !10385
  %461 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10386
  %462 = load i32, i32* %461, align 4, !dbg !10386
  %463 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10386
  %464 = load i32, i32* %463, align 8, !dbg !10386
  %465 = add i32 %462, %464, !dbg !10386
  %466 = shl i32 %465, 7, !dbg !10386
  %467 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10386
  %468 = load i32, i32* %467, align 4, !dbg !10386
  %469 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10386
  %470 = load i32, i32* %469, align 8, !dbg !10386
  %471 = add i32 %468, %470, !dbg !10386
  %472 = lshr i32 %471, 25, !dbg !10386
  %473 = or i32 %466, %472, !dbg !10386
  %474 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10387
  %475 = load i32, i32* %474, align 16, !dbg !10388
  %476 = xor i32 %475, %473, !dbg !10388
  store i32 %476, i32* %474, align 16, !dbg !10388
  %477 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10389
  %478 = load i32, i32* %477, align 16, !dbg !10389
  %479 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10389
  %480 = load i32, i32* %479, align 4, !dbg !10389
  %481 = add i32 %478, %480, !dbg !10389
  %482 = shl i32 %481, 9, !dbg !10389
  %483 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10389
  %484 = load i32, i32* %483, align 16, !dbg !10389
  %485 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10389
  %486 = load i32, i32* %485, align 4, !dbg !10389
  %487 = add i32 %484, %486, !dbg !10389
  %488 = lshr i32 %487, 23, !dbg !10389
  %489 = or i32 %482, %488, !dbg !10389
  %490 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10390
  %491 = load i32, i32* %490, align 4, !dbg !10391
  %492 = xor i32 %491, %489, !dbg !10391
  store i32 %492, i32* %490, align 4, !dbg !10391
  %493 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10392
  %494 = load i32, i32* %493, align 4, !dbg !10392
  %495 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10392
  %496 = load i32, i32* %495, align 16, !dbg !10392
  %497 = add i32 %494, %496, !dbg !10392
  %498 = shl i32 %497, 13, !dbg !10392
  %499 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10392
  %500 = load i32, i32* %499, align 4, !dbg !10392
  %501 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12, !dbg !10392
  %502 = load i32, i32* %501, align 16, !dbg !10392
  %503 = add i32 %500, %502, !dbg !10392
  %504 = lshr i32 %503, 19, !dbg !10392
  %505 = or i32 %498, %504, !dbg !10392
  %506 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10393
  %507 = load i32, i32* %506, align 8, !dbg !10394
  %508 = xor i32 %507, %505, !dbg !10394
  store i32 %508, i32* %506, align 8, !dbg !10394
  %509 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10395
  %510 = load i32, i32* %509, align 8, !dbg !10395
  %511 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10395
  %512 = load i32, i32* %511, align 4, !dbg !10395
  %513 = add i32 %510, %512, !dbg !10395
  %514 = shl i32 %513, 18, !dbg !10395
  %515 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14, !dbg !10395
  %516 = load i32, i32* %515, align 8, !dbg !10395
  %517 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13, !dbg !10395
  %518 = load i32, i32* %517, align 4, !dbg !10395
  %519 = add i32 %516, %518, !dbg !10395
  %520 = lshr i32 %519, 14, !dbg !10395
  %521 = or i32 %514, %520, !dbg !10395
  %522 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15, !dbg !10396
  %523 = load i32, i32* %522, align 4, !dbg !10397
  %524 = xor i32 %523, %521, !dbg !10397
  store i32 %524, i32* %522, align 4, !dbg !10397
  br label %525, !dbg !10398

525:                                              ; preds = %12
  %526 = load i64, i64* %4, align 8, !dbg !10399
  %527 = add i64 %526, 2, !dbg !10399
  store i64 %527, i64* %4, align 8, !dbg !10399
  br label %9, !dbg !10400, !llvm.loop !10401

528:                                              ; preds = %9
  store i64 0, i64* %4, align 8, !dbg !10403
  br label %529, !dbg !10405

529:                                              ; preds = %541, %528
  %530 = load i64, i64* %4, align 8, !dbg !10406
  %531 = icmp ult i64 %530, 16, !dbg !10408
  br i1 %531, label %532, label %544, !dbg !10409

532:                                              ; preds = %529
  %533 = load i64, i64* %4, align 8, !dbg !10410
  %534 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 %533, !dbg !10411
  %535 = load i32, i32* %534, align 4, !dbg !10411
  %536 = load i32*, i32** %2, align 8, !dbg !10412
  %537 = load i64, i64* %4, align 8, !dbg !10413
  %538 = getelementptr inbounds i32, i32* %536, i64 %537, !dbg !10412
  %539 = load i32, i32* %538, align 4, !dbg !10414
  %540 = add i32 %539, %535, !dbg !10414
  store i32 %540, i32* %538, align 4, !dbg !10414
  br label %541, !dbg !10412

541:                                              ; preds = %532
  %542 = load i64, i64* %4, align 8, !dbg !10415
  %543 = add i64 %542, 1, !dbg !10415
  store i64 %543, i64* %4, align 8, !dbg !10415
  br label %529, !dbg !10416, !llvm.loop !10417

544:                                              ; preds = %529
  ret void, !dbg !10419
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @_ZL21insecure_memzero_funcPVvm(i8* %0, i64 %1) #0 !dbg !10420 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !10421, metadata !DIExpression()), !dbg !10422
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !10423, metadata !DIExpression()), !dbg !10424
  call void @llvm.dbg.declare(metadata i8** %5, metadata !10425, metadata !DIExpression()), !dbg !10426
  %7 = load i8*, i8** %3, align 8, !dbg !10427
  store i8* %7, i8** %5, align 8, !dbg !10426
  call void @llvm.dbg.declare(metadata i64* %6, metadata !10428, metadata !DIExpression()), !dbg !10429
  store i64 0, i64* %6, align 8, !dbg !10430
  br label %8, !dbg !10432

8:                                                ; preds = %16, %2
  %9 = load i64, i64* %6, align 8, !dbg !10433
  %10 = load i64, i64* %4, align 8, !dbg !10435
  %11 = icmp ult i64 %9, %10, !dbg !10436
  br i1 %11, label %12, label %19, !dbg !10437

12:                                               ; preds = %8
  %13 = load i8*, i8** %5, align 8, !dbg !10438
  %14 = load i64, i64* %6, align 8, !dbg !10439
  %15 = getelementptr inbounds i8, i8* %13, i64 %14, !dbg !10438
  store volatile i8 0, i8* %15, align 1, !dbg !10440
  br label %16, !dbg !10438

16:                                               ; preds = %12
  %17 = load i64, i64* %6, align 8, !dbg !10441
  %18 = add i64 %17, 1, !dbg !10441
  store i64 %18, i64* %6, align 8, !dbg !10441
  br label %8, !dbg !10442, !llvm.loop !10443

19:                                               ; preds = %8
  ret void, !dbg !10445
}

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }
attributes #4 = { argmemonly nofree nounwind willreturn writeonly }
attributes #5 = { noinline ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noinline optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { argmemonly nofree nounwind willreturn }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { noreturn }

!llvm.dbg.cu = !{!2, !261, !500, !383, !503, !468, !509, !486}
!llvm.ident = !{!516, !516, !516, !516, !516, !516, !516, !516}
!llvm.module.flags = !{!517, !518, !519, !520, !521, !522, !523}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g_ecall_table", scope: !2, file: !3, line: 563, type: !247, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !81, globals: !235, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "Enclave/Enclave_t.c", directory: "/home/yang/TODO/password-manager-master")
!4 = !{!5}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "_status_t", file: !6, line: 37, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "/opt/intel/sgxsdk/include/sgx_error.h", directory: "")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80}
!9 = !DIEnumerator(name: "SGX_SUCCESS", value: 0)
!10 = !DIEnumerator(name: "SGX_ERROR_UNEXPECTED", value: 1)
!11 = !DIEnumerator(name: "SGX_ERROR_INVALID_PARAMETER", value: 2)
!12 = !DIEnumerator(name: "SGX_ERROR_OUT_OF_MEMORY", value: 3)
!13 = !DIEnumerator(name: "SGX_ERROR_ENCLAVE_LOST", value: 4)
!14 = !DIEnumerator(name: "SGX_ERROR_INVALID_STATE", value: 5)
!15 = !DIEnumerator(name: "SGX_ERROR_FEATURE_NOT_SUPPORTED", value: 8)
!16 = !DIEnumerator(name: "SGX_PTHREAD_EXIT", value: 9)
!17 = !DIEnumerator(name: "SGX_ERROR_MEMORY_MAP_FAILURE", value: 10)
!18 = !DIEnumerator(name: "SGX_ERROR_INVALID_FUNCTION", value: 4097)
!19 = !DIEnumerator(name: "SGX_ERROR_OUT_OF_TCS", value: 4099)
!20 = !DIEnumerator(name: "SGX_ERROR_ENCLAVE_CRASHED", value: 4102)
!21 = !DIEnumerator(name: "SGX_ERROR_ECALL_NOT_ALLOWED", value: 4103)
!22 = !DIEnumerator(name: "SGX_ERROR_OCALL_NOT_ALLOWED", value: 4104)
!23 = !DIEnumerator(name: "SGX_ERROR_STACK_OVERRUN", value: 4105)
!24 = !DIEnumerator(name: "SGX_ERROR_UNDEFINED_SYMBOL", value: 8192)
!25 = !DIEnumerator(name: "SGX_ERROR_INVALID_ENCLAVE", value: 8193)
!26 = !DIEnumerator(name: "SGX_ERROR_INVALID_ENCLAVE_ID", value: 8194)
!27 = !DIEnumerator(name: "SGX_ERROR_INVALID_SIGNATURE", value: 8195)
!28 = !DIEnumerator(name: "SGX_ERROR_NDEBUG_ENCLAVE", value: 8196)
!29 = !DIEnumerator(name: "SGX_ERROR_OUT_OF_EPC", value: 8197)
!30 = !DIEnumerator(name: "SGX_ERROR_NO_DEVICE", value: 8198)
!31 = !DIEnumerator(name: "SGX_ERROR_MEMORY_MAP_CONFLICT", value: 8199)
!32 = !DIEnumerator(name: "SGX_ERROR_INVALID_METADATA", value: 8201)
!33 = !DIEnumerator(name: "SGX_ERROR_DEVICE_BUSY", value: 8204)
!34 = !DIEnumerator(name: "SGX_ERROR_INVALID_VERSION", value: 8205)
!35 = !DIEnumerator(name: "SGX_ERROR_MODE_INCOMPATIBLE", value: 8206)
!36 = !DIEnumerator(name: "SGX_ERROR_ENCLAVE_FILE_ACCESS", value: 8207)
!37 = !DIEnumerator(name: "SGX_ERROR_INVALID_MISC", value: 8208)
!38 = !DIEnumerator(name: "SGX_ERROR_INVALID_LAUNCH_TOKEN", value: 8209)
!39 = !DIEnumerator(name: "SGX_ERROR_MAC_MISMATCH", value: 12289)
!40 = !DIEnumerator(name: "SGX_ERROR_INVALID_ATTRIBUTE", value: 12290)
!41 = !DIEnumerator(name: "SGX_ERROR_INVALID_CPUSVN", value: 12291)
!42 = !DIEnumerator(name: "SGX_ERROR_INVALID_ISVSVN", value: 12292)
!43 = !DIEnumerator(name: "SGX_ERROR_INVALID_KEYNAME", value: 12293)
!44 = !DIEnumerator(name: "SGX_ERROR_SERVICE_UNAVAILABLE", value: 16385)
!45 = !DIEnumerator(name: "SGX_ERROR_SERVICE_TIMEOUT", value: 16386)
!46 = !DIEnumerator(name: "SGX_ERROR_AE_INVALID_EPIDBLOB", value: 16387)
!47 = !DIEnumerator(name: "SGX_ERROR_SERVICE_INVALID_PRIVILEGE", value: 16388)
!48 = !DIEnumerator(name: "SGX_ERROR_EPID_MEMBER_REVOKED", value: 16389)
!49 = !DIEnumerator(name: "SGX_ERROR_UPDATE_NEEDED", value: 16390)
!50 = !DIEnumerator(name: "SGX_ERROR_NETWORK_FAILURE", value: 16391)
!51 = !DIEnumerator(name: "SGX_ERROR_AE_SESSION_INVALID", value: 16392)
!52 = !DIEnumerator(name: "SGX_ERROR_BUSY", value: 16394)
!53 = !DIEnumerator(name: "SGX_ERROR_MC_NOT_FOUND", value: 16396)
!54 = !DIEnumerator(name: "SGX_ERROR_MC_NO_ACCESS_RIGHT", value: 16397)
!55 = !DIEnumerator(name: "SGX_ERROR_MC_USED_UP", value: 16398)
!56 = !DIEnumerator(name: "SGX_ERROR_MC_OVER_QUOTA", value: 16399)
!57 = !DIEnumerator(name: "SGX_ERROR_KDF_MISMATCH", value: 16401)
!58 = !DIEnumerator(name: "SGX_ERROR_UNRECOGNIZED_PLATFORM", value: 16402)
!59 = !DIEnumerator(name: "SGX_ERROR_UNSUPPORTED_CONFIG", value: 16403)
!60 = !DIEnumerator(name: "SGX_ERROR_NO_PRIVILEGE", value: 20482)
!61 = !DIEnumerator(name: "SGX_ERROR_PCL_ENCRYPTED", value: 24577)
!62 = !DIEnumerator(name: "SGX_ERROR_PCL_NOT_ENCRYPTED", value: 24578)
!63 = !DIEnumerator(name: "SGX_ERROR_PCL_MAC_MISMATCH", value: 24579)
!64 = !DIEnumerator(name: "SGX_ERROR_PCL_SHA_MISMATCH", value: 24580)
!65 = !DIEnumerator(name: "SGX_ERROR_PCL_GUID_MISMATCH", value: 24581)
!66 = !DIEnumerator(name: "SGX_ERROR_FILE_BAD_STATUS", value: 28673)
!67 = !DIEnumerator(name: "SGX_ERROR_FILE_NO_KEY_ID", value: 28674)
!68 = !DIEnumerator(name: "SGX_ERROR_FILE_NAME_MISMATCH", value: 28675)
!69 = !DIEnumerator(name: "SGX_ERROR_FILE_NOT_SGX_FILE", value: 28676)
!70 = !DIEnumerator(name: "SGX_ERROR_FILE_CANT_OPEN_RECOVERY_FILE", value: 28677)
!71 = !DIEnumerator(name: "SGX_ERROR_FILE_CANT_WRITE_RECOVERY_FILE", value: 28678)
!72 = !DIEnumerator(name: "SGX_ERROR_FILE_RECOVERY_NEEDED", value: 28679)
!73 = !DIEnumerator(name: "SGX_ERROR_FILE_FLUSH_FAILED", value: 28680)
!74 = !DIEnumerator(name: "SGX_ERROR_FILE_CLOSE_FAILED", value: 28681)
!75 = !DIEnumerator(name: "SGX_ERROR_UNSUPPORTED_ATT_KEY_ID", value: 32769)
!76 = !DIEnumerator(name: "SGX_ERROR_ATT_KEY_CERTIFICATION_FAILURE", value: 32770)
!77 = !DIEnumerator(name: "SGX_ERROR_ATT_KEY_UNINITIALIZED", value: 32771)
!78 = !DIEnumerator(name: "SGX_ERROR_INVALID_ATT_KEY_CERT_DATA", value: 32772)
!79 = !DIEnumerator(name: "SGX_ERROR_PLATFORM_CERT_UNAVAILABLE", value: 32773)
!80 = !DIEnumerator(name: "SGX_INTERNAL_ERROR_ENCLAVE_CREATE_INTERRUPTED", value: 61441)
!81 = !{!82, !83, !91, !88, !96, !103, !107, !114, !124, !130, !136, !142, !149, !156, !226}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !84, size: 64)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_ocall_print_t", file: !3, line: 86, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_ocall_print_t", file: !3, line: 84, size: 64, elements: !86)
!86 = !{!87}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "ms_str", scope: !85, file: !3, line: 85, baseType: !88, size: 64)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !90)
!90 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!91 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !92, line: 94, baseType: !93)
!92 = !DIFile(filename: "/opt/intel/sgxsdk/include/tlibc/wchar.h", directory: "")
!93 = !DIDerivedType(tag: DW_TAG_typedef, name: "__size_t", file: !94, line: 102, baseType: !95)
!94 = !DIFile(filename: "/opt/intel/sgxsdk/include/tlibc/sys/_types.h", directory: "")
!95 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!96 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !97, size: 64)
!97 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_add_password_t", file: !3, line: 36, baseType: !98)
!98 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_add_password_t", file: !3, line: 30, size: 320, elements: !99)
!99 = !{!100, !102, !104, !105, !106}
!100 = !DIDerivedType(tag: DW_TAG_member, name: "ms_retval", scope: !98, file: !3, line: 31, baseType: !101, size: 32)
!101 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "ms_website", scope: !98, file: !3, line: 32, baseType: !103, size: 64, offset: 64)
!103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !90, size: 64)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "ms_website_len", scope: !98, file: !3, line: 33, baseType: !91, size: 64, offset: 128)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "ms_password", scope: !98, file: !3, line: 34, baseType: !103, size: 64, offset: 192)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "ms_password_len", scope: !98, file: !3, line: 35, baseType: !91, size: 64, offset: 256)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_create_keystore_t", file: !3, line: 42, baseType: !109)
!109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_create_keystore_t", file: !3, line: 38, size: 192, elements: !110)
!110 = !{!111, !112, !113}
!111 = !DIDerivedType(tag: DW_TAG_member, name: "ms_retval", scope: !109, file: !3, line: 39, baseType: !101, size: 32)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "ms_main_password", scope: !109, file: !3, line: 40, baseType: !103, size: 64, offset: 64)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "ms_main_password_len", scope: !109, file: !3, line: 41, baseType: !91, size: 64, offset: 128)
!114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !115, size: 64)
!115 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_get_password_t", file: !3, line: 51, baseType: !116)
!116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_get_password_t", file: !3, line: 44, size: 384, elements: !117)
!117 = !{!118, !119, !120, !121, !122, !123}
!118 = !DIDerivedType(tag: DW_TAG_member, name: "ms_retval", scope: !116, file: !3, line: 45, baseType: !101, size: 32)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "ms_website", scope: !116, file: !3, line: 46, baseType: !103, size: 64, offset: 64)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "ms_website_len", scope: !116, file: !3, line: 47, baseType: !91, size: 64, offset: 128)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "ms_returnstr", scope: !116, file: !3, line: 48, baseType: !103, size: 64, offset: 192)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "ms_verification_password", scope: !116, file: !3, line: 49, baseType: !103, size: 64, offset: 256)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "ms_verification_password_len", scope: !116, file: !3, line: 50, baseType: !91, size: 64, offset: 320)
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_serialize_key_store_t", file: !3, line: 56, baseType: !126)
!126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_serialize_key_store_t", file: !3, line: 53, size: 128, elements: !127)
!127 = !{!128, !129}
!128 = !DIDerivedType(tag: DW_TAG_member, name: "ms_retval", scope: !126, file: !3, line: 54, baseType: !101, size: 32)
!129 = !DIDerivedType(tag: DW_TAG_member, name: "ms_p_dst", scope: !126, file: !3, line: 55, baseType: !82, size: 64, offset: 64)
!130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !131, size: 64)
!131 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_decrypt_and_set_key_store_t", file: !3, line: 61, baseType: !132)
!132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_decrypt_and_set_key_store_t", file: !3, line: 58, size: 128, elements: !133)
!133 = !{!134, !135}
!134 = !DIDerivedType(tag: DW_TAG_member, name: "ms_retval", scope: !132, file: !3, line: 59, baseType: !101, size: 32)
!135 = !DIDerivedType(tag: DW_TAG_member, name: "ms_key_store", scope: !132, file: !3, line: 60, baseType: !82, size: 64, offset: 64)
!136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !137, size: 64)
!137 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_encrypt_and_serialize_key_store_t", file: !3, line: 66, baseType: !138)
!138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_encrypt_and_serialize_key_store_t", file: !3, line: 63, size: 128, elements: !139)
!139 = !{!140, !141}
!140 = !DIDerivedType(tag: DW_TAG_member, name: "ms_retval", scope: !138, file: !3, line: 64, baseType: !101, size: 32)
!141 = !DIDerivedType(tag: DW_TAG_member, name: "ms_p_dst", scope: !138, file: !3, line: 65, baseType: !82, size: 64, offset: 64)
!142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !143, size: 64)
!143 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_seal_t", file: !3, line: 74, baseType: !144)
!144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_seal_t", file: !3, line: 68, size: 320, elements: !145)
!145 = !{!146, !148, !154, !155, !225}
!146 = !DIDerivedType(tag: DW_TAG_member, name: "ms_retval", scope: !144, file: !3, line: 69, baseType: !147, size: 32)
!147 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_status_t", file: !6, line: 125, baseType: !5)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "ms_plaintext", scope: !144, file: !3, line: 70, baseType: !149, size: 64, offset: 64)
!149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!150 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !151, line: 33, baseType: !152)
!151 = !DIFile(filename: "/opt/intel/sgxsdk/include/tlibc/sys/stdint.h", directory: "")
!152 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !94, line: 40, baseType: !153)
!153 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "ms_plaintext_len", scope: !144, file: !3, line: 71, baseType: !91, size: 64, offset: 128)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "ms_sealed_data", scope: !144, file: !3, line: 72, baseType: !156, size: 64, offset: 192)
!156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !157, size: 64)
!157 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_sealed_data_t", file: !158, line: 62, baseType: !159)
!158 = !DIFile(filename: "/opt/intel/sgxsdk/include/sgx_tseal.h", directory: "")
!159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sealed_data_t", file: !158, line: 56, size: 4480, elements: !160)
!160 = !{!161, !209, !210, !214}
!161 = !DIDerivedType(tag: DW_TAG_member, name: "key_request", scope: !159, file: !158, line: 58, baseType: !162, size: 4096)
!162 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_key_request_t", file: !163, line: 94, baseType: !164)
!163 = !DIFile(filename: "/opt/intel/sgxsdk/include/sgx_key.h", directory: "")
!164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_key_request_t", file: !163, line: 82, size: 4096, elements: !165)
!165 = !{!166, !170, !171, !173, !174, !182, !191, !199, !203, !205}
!166 = !DIDerivedType(tag: DW_TAG_member, name: "key_name", scope: !164, file: !163, line: 84, baseType: !167, size: 16)
!167 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !151, line: 43, baseType: !168)
!168 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint16_t", file: !94, line: 42, baseType: !169)
!169 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "key_policy", scope: !164, file: !163, line: 85, baseType: !167, size: 16, offset: 16)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "isv_svn", scope: !164, file: !163, line: 86, baseType: !172, size: 16, offset: 32)
!172 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_isv_svn_t", file: !163, line: 65, baseType: !167)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "reserved1", scope: !164, file: !163, line: 87, baseType: !167, size: 16, offset: 48)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_svn", scope: !164, file: !163, line: 88, baseType: !175, size: 128, offset: 64)
!175 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_cpu_svn_t", file: !163, line: 73, baseType: !176)
!176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sgx_cpu_svn_t", file: !163, line: 70, size: 128, elements: !177)
!177 = !{!178}
!178 = !DIDerivedType(tag: DW_TAG_member, name: "svn", scope: !176, file: !163, line: 72, baseType: !179, size: 128)
!179 = !DICompositeType(tag: DW_TAG_array_type, baseType: !150, size: 128, elements: !180)
!180 = !{!181}
!181 = !DISubrange(count: 16)
!182 = !DIDerivedType(tag: DW_TAG_member, name: "attribute_mask", scope: !164, file: !163, line: 89, baseType: !183, size: 128, offset: 192)
!183 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_attributes_t", file: !184, line: 57, baseType: !185)
!184 = !DIFile(filename: "/opt/intel/sgxsdk/include/sgx_attributes.h", directory: "")
!185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_attributes_t", file: !184, line: 53, size: 128, elements: !186)
!186 = !{!187, !190}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !185, file: !184, line: 55, baseType: !188, size: 64)
!188 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !151, line: 63, baseType: !189)
!189 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !94, line: 47, baseType: !95)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "xfrm", scope: !185, file: !184, line: 56, baseType: !188, size: 64, offset: 64)
!191 = !DIDerivedType(tag: DW_TAG_member, name: "key_id", scope: !164, file: !163, line: 90, baseType: !192, size: 256, offset: 320)
!192 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_key_id_t", file: !163, line: 78, baseType: !193)
!193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sgx_key_id_t", file: !163, line: 75, size: 256, elements: !194)
!194 = !{!195}
!195 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !193, file: !163, line: 77, baseType: !196, size: 256)
!196 = !DICompositeType(tag: DW_TAG_array_type, baseType: !150, size: 256, elements: !197)
!197 = !{!198}
!198 = !DISubrange(count: 32)
!199 = !DIDerivedType(tag: DW_TAG_member, name: "misc_mask", scope: !164, file: !163, line: 91, baseType: !200, size: 32, offset: 576)
!200 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_misc_select_t", file: !184, line: 60, baseType: !201)
!201 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !151, line: 53, baseType: !202)
!202 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !94, line: 44, baseType: !7)
!203 = !DIDerivedType(tag: DW_TAG_member, name: "config_svn", scope: !164, file: !163, line: 92, baseType: !204, size: 16, offset: 608)
!204 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_config_svn_t", file: !163, line: 66, baseType: !167)
!205 = !DIDerivedType(tag: DW_TAG_member, name: "reserved2", scope: !164, file: !163, line: 93, baseType: !206, size: 3472, offset: 624)
!206 = !DICompositeType(tag: DW_TAG_array_type, baseType: !150, size: 3472, elements: !207)
!207 = !{!208}
!208 = !DISubrange(count: 434)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "plain_text_offset", scope: !159, file: !158, line: 59, baseType: !201, size: 32, offset: 4096)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "reserved", scope: !159, file: !158, line: 60, baseType: !211, size: 96, offset: 4128)
!211 = !DICompositeType(tag: DW_TAG_array_type, baseType: !150, size: 96, elements: !212)
!212 = !{!213}
!213 = !DISubrange(count: 12)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "aes_data", scope: !159, file: !158, line: 61, baseType: !215, size: 256, offset: 4224)
!215 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_aes_gcm_data_t", file: !158, line: 54, baseType: !216)
!216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_aes_gcm_data_t", file: !158, line: 48, size: 256, elements: !217)
!217 = !{!218, !219, !220, !221}
!218 = !DIDerivedType(tag: DW_TAG_member, name: "payload_size", scope: !216, file: !158, line: 50, baseType: !201, size: 32)
!219 = !DIDerivedType(tag: DW_TAG_member, name: "reserved", scope: !216, file: !158, line: 51, baseType: !211, size: 96, offset: 32)
!220 = !DIDerivedType(tag: DW_TAG_member, name: "payload_tag", scope: !216, file: !158, line: 52, baseType: !179, size: 128, offset: 128)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "payload", scope: !216, file: !158, line: 53, baseType: !222, offset: 256)
!222 = !DICompositeType(tag: DW_TAG_array_type, baseType: !150, elements: !223)
!223 = !{!224}
!224 = !DISubrange(count: -1)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "ms_sealed_size", scope: !144, file: !3, line: 73, baseType: !91, size: 64, offset: 256)
!226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !227, size: 64)
!227 = !DIDerivedType(tag: DW_TAG_typedef, name: "ms_unseal_t", file: !3, line: 82, baseType: !228)
!228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ms_unseal_t", file: !3, line: 76, size: 320, elements: !229)
!229 = !{!230, !231, !232, !233, !234}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "ms_retval", scope: !228, file: !3, line: 77, baseType: !147, size: 32)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "ms_sealed_data", scope: !228, file: !3, line: 78, baseType: !156, size: 64, offset: 64)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "ms_sealed_size", scope: !228, file: !3, line: 79, baseType: !91, size: 64, offset: 128)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "ms_plaintext", scope: !228, file: !3, line: 80, baseType: !149, size: 64, offset: 192)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "ms_plaintext_len", scope: !228, file: !3, line: 81, baseType: !201, size: 32, offset: 256)
!235 = !{!0, !236}
!236 = !DIGlobalVariableExpression(var: !237, expr: !DIExpression())
!237 = distinct !DIGlobalVariable(name: "g_dyn_entry_table", scope: !2, file: !3, line: 580, type: !238, isLocal: false, isDefinition: true)
!238 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !239)
!239 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 577, size: 128, elements: !240)
!240 = !{!241, !242}
!241 = !DIDerivedType(tag: DW_TAG_member, name: "nr_ocall", scope: !239, file: !3, line: 578, baseType: !91, size: 64)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "entry_table", scope: !239, file: !3, line: 579, baseType: !243, size: 64, offset: 64)
!243 = !DICompositeType(tag: DW_TAG_array_type, baseType: !150, size: 64, elements: !244)
!244 = !{!245, !246}
!245 = !DISubrange(count: 1)
!246 = !DISubrange(count: 8)
!247 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !248)
!248 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 560, size: 1088, elements: !249)
!249 = !{!250, !251}
!250 = !DIDerivedType(tag: DW_TAG_member, name: "nr_ecall", scope: !248, file: !3, line: 561, baseType: !91, size: 64)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "ecall_table", scope: !248, file: !3, line: 562, baseType: !252, size: 1024, offset: 64)
!252 = !DICompositeType(tag: DW_TAG_array_type, baseType: !253, size: 1024, elements: !258)
!253 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !248, file: !3, line: 562, size: 128, elements: !254)
!254 = !{!255, !256, !257}
!255 = !DIDerivedType(tag: DW_TAG_member, name: "ecall_addr", scope: !253, file: !3, line: 562, baseType: !82, size: 64)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "is_priv", scope: !253, file: !3, line: 562, baseType: !150, size: 8, offset: 64)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "is_switchless", scope: !253, file: !3, line: 562, baseType: !150, size: 8, offset: 72)
!258 = !{!246}
!259 = !DIGlobalVariableExpression(var: !260, expr: !DIExpression())
!260 = distinct !DIGlobalVariable(name: "password", scope: !261, file: !262, line: 11, type: !103, isLocal: false, isDefinition: true)
!261 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !262, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !263, retainedTypes: !338, globals: !350, splitDebugInlining: false, nameTableKind: None)
!262 = !DIFile(filename: "Enclave/Enclave.cpp", directory: "/home/yang/TODO/password-manager-master")
!263 = !{!264}
!264 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "_status_t", file: !6, line: 37, baseType: !7, size: 32, elements: !265, identifier: "_ZTS9_status_t")
!265 = !{!266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337}
!266 = !DIEnumerator(name: "SGX_SUCCESS", value: 0, isUnsigned: true)
!267 = !DIEnumerator(name: "SGX_ERROR_UNEXPECTED", value: 1, isUnsigned: true)
!268 = !DIEnumerator(name: "SGX_ERROR_INVALID_PARAMETER", value: 2, isUnsigned: true)
!269 = !DIEnumerator(name: "SGX_ERROR_OUT_OF_MEMORY", value: 3, isUnsigned: true)
!270 = !DIEnumerator(name: "SGX_ERROR_ENCLAVE_LOST", value: 4, isUnsigned: true)
!271 = !DIEnumerator(name: "SGX_ERROR_INVALID_STATE", value: 5, isUnsigned: true)
!272 = !DIEnumerator(name: "SGX_ERROR_FEATURE_NOT_SUPPORTED", value: 8, isUnsigned: true)
!273 = !DIEnumerator(name: "SGX_PTHREAD_EXIT", value: 9, isUnsigned: true)
!274 = !DIEnumerator(name: "SGX_ERROR_MEMORY_MAP_FAILURE", value: 10, isUnsigned: true)
!275 = !DIEnumerator(name: "SGX_ERROR_INVALID_FUNCTION", value: 4097, isUnsigned: true)
!276 = !DIEnumerator(name: "SGX_ERROR_OUT_OF_TCS", value: 4099, isUnsigned: true)
!277 = !DIEnumerator(name: "SGX_ERROR_ENCLAVE_CRASHED", value: 4102, isUnsigned: true)
!278 = !DIEnumerator(name: "SGX_ERROR_ECALL_NOT_ALLOWED", value: 4103, isUnsigned: true)
!279 = !DIEnumerator(name: "SGX_ERROR_OCALL_NOT_ALLOWED", value: 4104, isUnsigned: true)
!280 = !DIEnumerator(name: "SGX_ERROR_STACK_OVERRUN", value: 4105, isUnsigned: true)
!281 = !DIEnumerator(name: "SGX_ERROR_UNDEFINED_SYMBOL", value: 8192, isUnsigned: true)
!282 = !DIEnumerator(name: "SGX_ERROR_INVALID_ENCLAVE", value: 8193, isUnsigned: true)
!283 = !DIEnumerator(name: "SGX_ERROR_INVALID_ENCLAVE_ID", value: 8194, isUnsigned: true)
!284 = !DIEnumerator(name: "SGX_ERROR_INVALID_SIGNATURE", value: 8195, isUnsigned: true)
!285 = !DIEnumerator(name: "SGX_ERROR_NDEBUG_ENCLAVE", value: 8196, isUnsigned: true)
!286 = !DIEnumerator(name: "SGX_ERROR_OUT_OF_EPC", value: 8197, isUnsigned: true)
!287 = !DIEnumerator(name: "SGX_ERROR_NO_DEVICE", value: 8198, isUnsigned: true)
!288 = !DIEnumerator(name: "SGX_ERROR_MEMORY_MAP_CONFLICT", value: 8199, isUnsigned: true)
!289 = !DIEnumerator(name: "SGX_ERROR_INVALID_METADATA", value: 8201, isUnsigned: true)
!290 = !DIEnumerator(name: "SGX_ERROR_DEVICE_BUSY", value: 8204, isUnsigned: true)
!291 = !DIEnumerator(name: "SGX_ERROR_INVALID_VERSION", value: 8205, isUnsigned: true)
!292 = !DIEnumerator(name: "SGX_ERROR_MODE_INCOMPATIBLE", value: 8206, isUnsigned: true)
!293 = !DIEnumerator(name: "SGX_ERROR_ENCLAVE_FILE_ACCESS", value: 8207, isUnsigned: true)
!294 = !DIEnumerator(name: "SGX_ERROR_INVALID_MISC", value: 8208, isUnsigned: true)
!295 = !DIEnumerator(name: "SGX_ERROR_INVALID_LAUNCH_TOKEN", value: 8209, isUnsigned: true)
!296 = !DIEnumerator(name: "SGX_ERROR_MAC_MISMATCH", value: 12289, isUnsigned: true)
!297 = !DIEnumerator(name: "SGX_ERROR_INVALID_ATTRIBUTE", value: 12290, isUnsigned: true)
!298 = !DIEnumerator(name: "SGX_ERROR_INVALID_CPUSVN", value: 12291, isUnsigned: true)
!299 = !DIEnumerator(name: "SGX_ERROR_INVALID_ISVSVN", value: 12292, isUnsigned: true)
!300 = !DIEnumerator(name: "SGX_ERROR_INVALID_KEYNAME", value: 12293, isUnsigned: true)
!301 = !DIEnumerator(name: "SGX_ERROR_SERVICE_UNAVAILABLE", value: 16385, isUnsigned: true)
!302 = !DIEnumerator(name: "SGX_ERROR_SERVICE_TIMEOUT", value: 16386, isUnsigned: true)
!303 = !DIEnumerator(name: "SGX_ERROR_AE_INVALID_EPIDBLOB", value: 16387, isUnsigned: true)
!304 = !DIEnumerator(name: "SGX_ERROR_SERVICE_INVALID_PRIVILEGE", value: 16388, isUnsigned: true)
!305 = !DIEnumerator(name: "SGX_ERROR_EPID_MEMBER_REVOKED", value: 16389, isUnsigned: true)
!306 = !DIEnumerator(name: "SGX_ERROR_UPDATE_NEEDED", value: 16390, isUnsigned: true)
!307 = !DIEnumerator(name: "SGX_ERROR_NETWORK_FAILURE", value: 16391, isUnsigned: true)
!308 = !DIEnumerator(name: "SGX_ERROR_AE_SESSION_INVALID", value: 16392, isUnsigned: true)
!309 = !DIEnumerator(name: "SGX_ERROR_BUSY", value: 16394, isUnsigned: true)
!310 = !DIEnumerator(name: "SGX_ERROR_MC_NOT_FOUND", value: 16396, isUnsigned: true)
!311 = !DIEnumerator(name: "SGX_ERROR_MC_NO_ACCESS_RIGHT", value: 16397, isUnsigned: true)
!312 = !DIEnumerator(name: "SGX_ERROR_MC_USED_UP", value: 16398, isUnsigned: true)
!313 = !DIEnumerator(name: "SGX_ERROR_MC_OVER_QUOTA", value: 16399, isUnsigned: true)
!314 = !DIEnumerator(name: "SGX_ERROR_KDF_MISMATCH", value: 16401, isUnsigned: true)
!315 = !DIEnumerator(name: "SGX_ERROR_UNRECOGNIZED_PLATFORM", value: 16402, isUnsigned: true)
!316 = !DIEnumerator(name: "SGX_ERROR_UNSUPPORTED_CONFIG", value: 16403, isUnsigned: true)
!317 = !DIEnumerator(name: "SGX_ERROR_NO_PRIVILEGE", value: 20482, isUnsigned: true)
!318 = !DIEnumerator(name: "SGX_ERROR_PCL_ENCRYPTED", value: 24577, isUnsigned: true)
!319 = !DIEnumerator(name: "SGX_ERROR_PCL_NOT_ENCRYPTED", value: 24578, isUnsigned: true)
!320 = !DIEnumerator(name: "SGX_ERROR_PCL_MAC_MISMATCH", value: 24579, isUnsigned: true)
!321 = !DIEnumerator(name: "SGX_ERROR_PCL_SHA_MISMATCH", value: 24580, isUnsigned: true)
!322 = !DIEnumerator(name: "SGX_ERROR_PCL_GUID_MISMATCH", value: 24581, isUnsigned: true)
!323 = !DIEnumerator(name: "SGX_ERROR_FILE_BAD_STATUS", value: 28673, isUnsigned: true)
!324 = !DIEnumerator(name: "SGX_ERROR_FILE_NO_KEY_ID", value: 28674, isUnsigned: true)
!325 = !DIEnumerator(name: "SGX_ERROR_FILE_NAME_MISMATCH", value: 28675, isUnsigned: true)
!326 = !DIEnumerator(name: "SGX_ERROR_FILE_NOT_SGX_FILE", value: 28676, isUnsigned: true)
!327 = !DIEnumerator(name: "SGX_ERROR_FILE_CANT_OPEN_RECOVERY_FILE", value: 28677, isUnsigned: true)
!328 = !DIEnumerator(name: "SGX_ERROR_FILE_CANT_WRITE_RECOVERY_FILE", value: 28678, isUnsigned: true)
!329 = !DIEnumerator(name: "SGX_ERROR_FILE_RECOVERY_NEEDED", value: 28679, isUnsigned: true)
!330 = !DIEnumerator(name: "SGX_ERROR_FILE_FLUSH_FAILED", value: 28680, isUnsigned: true)
!331 = !DIEnumerator(name: "SGX_ERROR_FILE_CLOSE_FAILED", value: 28681, isUnsigned: true)
!332 = !DIEnumerator(name: "SGX_ERROR_UNSUPPORTED_ATT_KEY_ID", value: 32769, isUnsigned: true)
!333 = !DIEnumerator(name: "SGX_ERROR_ATT_KEY_CERTIFICATION_FAILURE", value: 32770, isUnsigned: true)
!334 = !DIEnumerator(name: "SGX_ERROR_ATT_KEY_UNINITIALIZED", value: 32771, isUnsigned: true)
!335 = !DIEnumerator(name: "SGX_ERROR_INVALID_ATT_KEY_CERT_DATA", value: 32772, isUnsigned: true)
!336 = !DIEnumerator(name: "SGX_ERROR_PLATFORM_CERT_UNAVAILABLE", value: 32773, isUnsigned: true)
!337 = !DIEnumerator(name: "SGX_INTERNAL_ERROR_ENCLAVE_CREATE_INTERRUPTED", value: 61441, isUnsigned: true)
!338 = !{!339, !103, !345, !149, !347, !82}
!339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "KeyStoreBank", file: !262, line: 16, size: 192, flags: DIFlagTypePassByValue, elements: !341, identifier: "_ZTS12KeyStoreBank")
!341 = !{!342, !343, !344}
!342 = !DIDerivedType(tag: DW_TAG_member, name: "website", scope: !340, file: !262, line: 18, baseType: !103, size: 64)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "password", scope: !340, file: !262, line: 19, baseType: !103, size: 64, offset: 64)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !340, file: !262, line: 20, baseType: !339, size: 64, offset: 128)
!345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !346, size: 64)
!346 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !150)
!347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !348, size: 64)
!348 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_aes_gcm_128bit_tag_t", file: !349, line: 110, baseType: !179)
!349 = !DIFile(filename: "/opt/intel/sgxsdk/include/sgx_tcrypto.h", directory: "")
!350 = !{!259, !351, !353, !358, !360, !362, !365, !372, !378}
!351 = !DIGlobalVariableExpression(var: !352, expr: !DIExpression())
!352 = distinct !DIGlobalVariable(name: "numPasswords", scope: !261, file: !262, line: 12, type: !101, isLocal: false, isDefinition: true)
!353 = !DIGlobalVariableExpression(var: !354, expr: !DIExpression())
!354 = distinct !DIGlobalVariable(name: "buffer", scope: !261, file: !262, line: 14, type: !355, isLocal: false, isDefinition: true)
!355 = !DICompositeType(tag: DW_TAG_array_type, baseType: !150, size: 8192, elements: !356)
!356 = !{!357}
!357 = !DISubrange(count: 1024)
!358 = !DIGlobalVariableExpression(var: !359, expr: !DIExpression())
!359 = distinct !DIGlobalVariable(name: "firstKey", scope: !261, file: !262, line: 23, type: !339, isLocal: false, isDefinition: true)
!360 = !DIGlobalVariableExpression(var: !361, expr: !DIExpression())
!361 = distinct !DIGlobalVariable(name: "currentKey", scope: !261, file: !262, line: 24, type: !339, isLocal: false, isDefinition: true)
!362 = !DIGlobalVariableExpression(var: !363, expr: !DIExpression(DW_OP_constu, 1024, DW_OP_stack_value))
!363 = distinct !DIGlobalVariable(name: "MAX_PASSWORD_SIZE", scope: !261, file: !262, line: 7, type: !364, isLocal: true, isDefinition: true)
!364 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!365 = !DIGlobalVariableExpression(var: !366, expr: !DIExpression())
!366 = distinct !DIGlobalVariable(name: "buf", scope: !367, file: !262, line: 131, type: !371, isLocal: true, isDefinition: true)
!367 = distinct !DISubprogram(name: "itoa", linkageName: "_Z4itoaii", scope: !262, file: !262, line: 129, type: !368, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!368 = !DISubroutineType(types: !369)
!369 = !{!103, !101, !101}
!370 = !{}
!371 = !DICompositeType(tag: DW_TAG_array_type, baseType: !90, size: 256, elements: !197)
!372 = !DIGlobalVariableExpression(var: !373, expr: !DIExpression())
!373 = distinct !DIGlobalVariable(name: "g_region_key", scope: !374, file: !262, line: 178, type: !377, isLocal: true, isDefinition: true)
!374 = distinct !DISubprogram(name: "encrypt_and_serialize_key_store", scope: !262, file: !262, line: 176, type: !375, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!375 = !DISubroutineType(types: !376)
!376 = !{!101, !82}
!377 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_aes_ctr_128bit_key_t", file: !349, line: 115, baseType: !179)
!378 = !DIGlobalVariableExpression(var: !379, expr: !DIExpression())
!379 = distinct !DIGlobalVariable(name: "g_region_key", scope: !380, file: !262, line: 246, type: !377, isLocal: true, isDefinition: true)
!380 = distinct !DISubprogram(name: "decrypt_and_set_key_store", scope: !262, file: !262, line: 239, type: !375, scopeLine: 239, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!381 = !DIGlobalVariableExpression(var: !382, expr: !DIExpression())
!382 = distinct !DIGlobalVariable(name: "malloc_fn", scope: !383, file: !384, line: 21, type: !463, isLocal: false, isDefinition: true)
!383 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !384, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !370, retainedTypes: !385, globals: !451, splitDebugInlining: false, nameTableKind: None)
!384 = !DIFile(filename: "Enclave/binn/binn.cpp", directory: "/home/yang/TODO/password-manager-master")
!385 = !{!386, !438, !439, !103, !405, !101, !435, !440, !153, !441, !442, !443, !90, !445, !446, !447, !448, !449, !433, !450, !413, !415, !169, !7}
!386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !387, size: 64)
!387 = !DIDerivedType(tag: DW_TAG_typedef, name: "binn", file: !388, line: 257, baseType: !389)
!388 = !DIFile(filename: "Enclave/binn/binn.h", directory: "/home/yang/TODO/password-manager-master")
!389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "binn_struct", file: !388, line: 213, size: 640, flags: DIFlagTypePassByValue, elements: !390, identifier: "_ZTS11binn_struct")
!390 = !{!391, !392, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !409, !437}
!391 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !389, file: !388, line: 214, baseType: !101, size: 32)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !389, file: !388, line: 215, baseType: !393, size: 32, offset: 32)
!393 = !DIDerivedType(tag: DW_TAG_typedef, name: "BOOL", file: !388, line: 34, baseType: !101)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "writable", scope: !389, file: !388, line: 216, baseType: !393, size: 32, offset: 64)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "dirty", scope: !389, file: !388, line: 217, baseType: !393, size: 32, offset: 96)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "pbuf", scope: !389, file: !388, line: 219, baseType: !82, size: 64, offset: 128)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "pre_allocated", scope: !389, file: !388, line: 220, baseType: !393, size: 32, offset: 192)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_size", scope: !389, file: !388, line: 221, baseType: !101, size: 32, offset: 224)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "used_size", scope: !389, file: !388, line: 222, baseType: !101, size: 32, offset: 256)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !389, file: !388, line: 224, baseType: !101, size: 32, offset: 288)
!401 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !389, file: !388, line: 225, baseType: !82, size: 64, offset: 320)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !389, file: !388, line: 226, baseType: !101, size: 32, offset: 384)
!403 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !389, file: !388, line: 227, baseType: !101, size: 32, offset: 416)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "freefn", scope: !389, file: !388, line: 229, baseType: !405, size: 64, offset: 448)
!405 = !DIDerivedType(tag: DW_TAG_typedef, name: "binn_mem_free", file: !388, line: 205, baseType: !406)
!406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !407, size: 64)
!407 = !DISubroutineType(types: !408)
!408 = !{null, !82}
!409 = !DIDerivedType(tag: DW_TAG_member, scope: !389, file: !388, line: 231, baseType: !410, size: 64, offset: 512)
!410 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !389, file: !388, line: 231, size: 64, flags: DIFlagExportSymbols | DIFlagTypePassByValue, elements: !411, identifier: "_ZTSN11binn_structUt_E")
!411 = !{!412, !414, !416, !417, !420, !421, !422, !423, !426, !427, !428, !429, !430, !431, !432, !434, !436}
!412 = !DIDerivedType(tag: DW_TAG_member, name: "vint8", scope: !410, file: !388, line: 232, baseType: !413, size: 8)
!413 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!414 = !DIDerivedType(tag: DW_TAG_member, name: "vint16", scope: !410, file: !388, line: 233, baseType: !415, size: 16)
!415 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "vint32", scope: !410, file: !388, line: 234, baseType: !101, size: 32)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "vint64", scope: !410, file: !388, line: 235, baseType: !418, size: 64)
!418 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64", file: !388, line: 68, baseType: !419)
!419 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "vuint8", scope: !410, file: !388, line: 236, baseType: !153, size: 8)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "vuint16", scope: !410, file: !388, line: 237, baseType: !169, size: 16)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "vuint32", scope: !410, file: !388, line: 238, baseType: !7, size: 32)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "vuint64", scope: !410, file: !388, line: 239, baseType: !424, size: 64)
!424 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64", file: !388, line: 69, baseType: !425)
!425 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "vchar", scope: !410, file: !388, line: 241, baseType: !413, size: 8)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "vuchar", scope: !410, file: !388, line: 242, baseType: !153, size: 8)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "vshort", scope: !410, file: !388, line: 243, baseType: !415, size: 16)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "vushort", scope: !410, file: !388, line: 244, baseType: !169, size: 16)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "vint", scope: !410, file: !388, line: 245, baseType: !101, size: 32)
!431 = !DIDerivedType(tag: DW_TAG_member, name: "vuint", scope: !410, file: !388, line: 246, baseType: !7, size: 32)
!432 = !DIDerivedType(tag: DW_TAG_member, name: "vfloat", scope: !410, file: !388, line: 248, baseType: !433, size: 32)
!433 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "vdouble", scope: !410, file: !388, line: 249, baseType: !435, size: 64)
!435 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "vbool", scope: !410, file: !388, line: 251, baseType: !393, size: 32)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "disable_int_compression", scope: !389, file: !388, line: 254, baseType: !393, size: 32, offset: 576)
!438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !153, size: 64)
!440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !101, size: 64)
!441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !424, size: 64)
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !444, size: 64)
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !393, size: 64)
!445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !418, size: 64)
!446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !169, size: 64)
!447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !103, size: 64)
!448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !433, size: 64)
!449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !435, size: 64)
!450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !413, size: 64)
!451 = !{!381, !452, !459, !461}
!452 = !DIGlobalVariableExpression(var: !453, expr: !DIExpression())
!453 = distinct !DIGlobalVariable(name: "realloc_fn", scope: !383, file: !384, line: 22, type: !454, isLocal: false, isDefinition: true)
!454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !455, size: 64)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !82, !457}
!457 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !458, line: 47, baseType: !93)
!458 = !DIFile(filename: "/opt/intel/sgxsdk/include/tlibc/stdio.h", directory: "")
!459 = !DIGlobalVariableExpression(var: !460, expr: !DIExpression())
!460 = distinct !DIGlobalVariable(name: "free_fn", scope: !383, file: !384, line: 23, type: !406, isLocal: false, isDefinition: true)
!461 = !DIGlobalVariableExpression(var: !462, expr: !DIExpression())
!462 = distinct !DIGlobalVariable(name: "local_value", scope: !383, file: !384, line: 1433, type: !387, isLocal: false, isDefinition: true)
!463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !464, size: 64)
!464 = !DISubroutineType(types: !465)
!465 = !{!82, !457}
!466 = !DIGlobalVariableExpression(var: !467, expr: !DIExpression())
!467 = distinct !DIGlobalVariable(name: "initial_state", linkageName: "_ZL13initial_state", scope: !468, file: !469, line: 204, type: !483, isLocal: true, isDefinition: true)
!468 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !469, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !370, retainedTypes: !470, globals: !473, splitDebugInlining: false, nameTableKind: None)
!469 = !DIFile(filename: "Enclave/scrypt/sha256.cpp", directory: "/home/yang/TODO/password-manager-master")
!470 = !{!471, !201, !345, !188, !149}
!471 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !472, line: 42, baseType: !93)
!472 = !DIFile(filename: "/opt/intel/sgxsdk/include/tlibc/string.h", directory: "")
!473 = !{!466, !474, !480}
!474 = !DIGlobalVariableExpression(var: !475, expr: !DIExpression())
!475 = distinct !DIGlobalVariable(name: "Krnd", linkageName: "_ZL4Krnd", scope: !468, file: !469, line: 49, type: !476, isLocal: true, isDefinition: true)
!476 = !DICompositeType(tag: DW_TAG_array_type, baseType: !477, size: 2048, elements: !478)
!477 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !201)
!478 = !{!479}
!479 = !DISubrange(count: 64)
!480 = !DIGlobalVariableExpression(var: !481, expr: !DIExpression())
!481 = distinct !DIGlobalVariable(name: "PAD", linkageName: "_ZL3PAD", scope: !468, file: !469, line: 163, type: !482, isLocal: true, isDefinition: true)
!482 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 512, elements: !478)
!483 = !DICompositeType(tag: DW_TAG_array_type, baseType: !477, size: 256, elements: !258)
!484 = !DIGlobalVariableExpression(var: !485, expr: !DIExpression())
!485 = distinct !DIGlobalVariable(name: "insecure_memzero_ptr", scope: !486, file: !487, line: 18, type: !492, isLocal: false, isDefinition: true)
!486 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !487, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !370, retainedTypes: !488, globals: !491, splitDebugInlining: false, nameTableKind: None)
!487 = !DIFile(filename: "Enclave/scrypt/insecure_memzero.cpp", directory: "/home/yang/TODO/password-manager-master")
!488 = !{!489}
!489 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !490, size: 64)
!490 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !150)
!491 = !{!484}
!492 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !493)
!493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !494, size: 64)
!494 = !DISubroutineType(types: !495)
!495 = !{null, !496, !498}
!496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !497, size: 64)
!497 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: null)
!498 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !499, line: 48, baseType: !93)
!499 = !DIFile(filename: "/opt/intel/sgxsdk/include/tlibc/stddef.h", directory: "")
!500 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !501, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !263, retainedTypes: !502, splitDebugInlining: false, nameTableKind: None)
!501 = !DIFile(filename: "Enclave/Sealing/Sealing.cpp", directory: "/home/yang/TODO/password-manager-master")
!502 = !{!149}
!503 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !504, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !370, retainedTypes: !505, splitDebugInlining: false, nameTableKind: None)
!504 = !DIFile(filename: "Enclave/scrypt/crypto_scrypt.cpp", directory: "/home/yang/TODO/password-manager-master")
!505 = !{!188, !149, !506, !508}
!506 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !151, line: 94, baseType: !507)
!507 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintptr_t", file: !94, line: 98, baseType: !189)
!508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !201, size: 64)
!509 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !510, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !370, retainedTypes: !511, splitDebugInlining: false, nameTableKind: None)
!510 = !DIFile(filename: "Enclave/scrypt/crypto_scrypt_smix.cpp", directory: "/home/yang/TODO/password-manager-master")
!511 = !{!508, !149, !345, !201, !512, !513, !515, !506, !188}
!512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !498, size: 64)
!513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !514, size: 64)
!514 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !498)
!515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !477, size: 64)
!516 = !{!"clang version 13.0.0"}
!517 = !{i32 7, !"Dwarf Version", i32 4}
!518 = !{i32 2, !"Debug Info Version", i32 3}
!519 = !{i32 1, !"wchar_size", i32 4}
!520 = !{i32 7, !"PIC Level", i32 1}
!521 = !{i32 7, !"PIE Level", i32 1}
!522 = !{i32 7, !"uwtable", i32 1}
!523 = !{i32 7, !"frame-pointer", i32 2}
!524 = distinct !DISubprogram(name: "sgx_add_password", scope: !3, file: !3, line: 88, type: !525, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !370)
!525 = !DISubroutineType(types: !526)
!526 = !{!147, !82}
!527 = !DILocalVariable(name: "pms", arg: 1, scope: !524, file: !3, line: 88, type: !82)
!528 = !DILocation(line: 88, column: 54, scope: !524)
!529 = !DILocation(line: 90, column: 2, scope: !524)
!530 = !DILocation(line: 90, column: 2, scope: !531)
!531 = distinct !DILexicalBlock(scope: !532, file: !3, line: 90, column: 2)
!532 = distinct !DILexicalBlock(scope: !524, file: !3, line: 90, column: 2)
!533 = !DILocation(line: 90, column: 2, scope: !532)
!534 = !DILocation(line: 94, column: 2, scope: !524)
!535 = !DILocalVariable(name: "ms", scope: !524, file: !3, line: 95, type: !96)
!536 = !DILocation(line: 95, column: 21, scope: !524)
!537 = !DILocation(line: 95, column: 26, scope: !524)
!538 = !DILocalVariable(name: "status", scope: !524, file: !3, line: 96, type: !147)
!539 = !DILocation(line: 96, column: 15, scope: !524)
!540 = !DILocalVariable(name: "_tmp_website", scope: !524, file: !3, line: 97, type: !103)
!541 = !DILocation(line: 97, column: 8, scope: !524)
!542 = !DILocation(line: 97, column: 23, scope: !524)
!543 = !DILocation(line: 97, column: 27, scope: !524)
!544 = !DILocalVariable(name: "_len_website", scope: !524, file: !3, line: 98, type: !91)
!545 = !DILocation(line: 98, column: 9, scope: !524)
!546 = !DILocation(line: 98, column: 24, scope: !524)
!547 = !DILocation(line: 98, column: 28, scope: !524)
!548 = !DILocalVariable(name: "_in_website", scope: !524, file: !3, line: 99, type: !103)
!549 = !DILocation(line: 99, column: 8, scope: !524)
!550 = !DILocalVariable(name: "_tmp_password", scope: !524, file: !3, line: 100, type: !103)
!551 = !DILocation(line: 100, column: 8, scope: !524)
!552 = !DILocation(line: 100, column: 24, scope: !524)
!553 = !DILocation(line: 100, column: 28, scope: !524)
!554 = !DILocalVariable(name: "_len_password", scope: !524, file: !3, line: 101, type: !91)
!555 = !DILocation(line: 101, column: 9, scope: !524)
!556 = !DILocation(line: 101, column: 25, scope: !524)
!557 = !DILocation(line: 101, column: 29, scope: !524)
!558 = !DILocalVariable(name: "_in_password", scope: !524, file: !3, line: 102, type: !103)
!559 = !DILocation(line: 102, column: 8, scope: !524)
!560 = !DILocation(line: 104, column: 2, scope: !524)
!561 = !DILocation(line: 104, column: 2, scope: !562)
!562 = distinct !DILexicalBlock(scope: !563, file: !3, line: 104, column: 2)
!563 = distinct !DILexicalBlock(scope: !524, file: !3, line: 104, column: 2)
!564 = !DILocation(line: 104, column: 2, scope: !563)
!565 = !DILocation(line: 105, column: 2, scope: !524)
!566 = !DILocation(line: 105, column: 2, scope: !567)
!567 = distinct !DILexicalBlock(scope: !568, file: !3, line: 105, column: 2)
!568 = distinct !DILexicalBlock(scope: !524, file: !3, line: 105, column: 2)
!569 = !DILocation(line: 105, column: 2, scope: !568)
!570 = !DILocation(line: 110, column: 2, scope: !524)
!571 = !DILocation(line: 112, column: 6, scope: !572)
!572 = distinct !DILexicalBlock(scope: !524, file: !3, line: 112, column: 6)
!573 = !DILocation(line: 112, column: 19, scope: !572)
!574 = !DILocation(line: 112, column: 27, scope: !572)
!575 = !DILocation(line: 112, column: 30, scope: !572)
!576 = !DILocation(line: 112, column: 43, scope: !572)
!577 = !DILocation(line: 112, column: 6, scope: !524)
!578 = !DILocation(line: 113, column: 31, scope: !579)
!579 = distinct !DILexicalBlock(scope: !572, file: !3, line: 112, column: 49)
!580 = !DILocation(line: 113, column: 24, scope: !579)
!581 = !DILocation(line: 113, column: 15, scope: !579)
!582 = !DILocation(line: 114, column: 7, scope: !583)
!583 = distinct !DILexicalBlock(scope: !579, file: !3, line: 114, column: 7)
!584 = !DILocation(line: 114, column: 19, scope: !583)
!585 = !DILocation(line: 114, column: 7, scope: !579)
!586 = !DILocation(line: 115, column: 11, scope: !587)
!587 = distinct !DILexicalBlock(scope: !583, file: !3, line: 114, column: 28)
!588 = !DILocation(line: 116, column: 4, scope: !587)
!589 = !DILocation(line: 119, column: 16, scope: !590)
!590 = distinct !DILexicalBlock(scope: !579, file: !3, line: 119, column: 7)
!591 = !DILocation(line: 119, column: 29, scope: !590)
!592 = !DILocation(line: 119, column: 43, scope: !590)
!593 = !DILocation(line: 119, column: 57, scope: !590)
!594 = !DILocation(line: 119, column: 7, scope: !590)
!595 = !DILocation(line: 119, column: 7, scope: !579)
!596 = !DILocation(line: 120, column: 11, scope: !597)
!597 = distinct !DILexicalBlock(scope: !590, file: !3, line: 119, column: 72)
!598 = !DILocation(line: 121, column: 4, scope: !597)
!599 = !DILocation(line: 124, column: 3, scope: !579)
!600 = !DILocation(line: 124, column: 15, scope: !579)
!601 = !DILocation(line: 124, column: 28, scope: !579)
!602 = !DILocation(line: 124, column: 33, scope: !579)
!603 = !DILocation(line: 125, column: 7, scope: !604)
!604 = distinct !DILexicalBlock(scope: !579, file: !3, line: 125, column: 7)
!605 = !DILocation(line: 125, column: 30, scope: !604)
!606 = !DILocation(line: 125, column: 23, scope: !604)
!607 = !DILocation(line: 125, column: 43, scope: !604)
!608 = !DILocation(line: 125, column: 20, scope: !604)
!609 = !DILocation(line: 125, column: 7, scope: !579)
!610 = !DILocation(line: 127, column: 11, scope: !611)
!611 = distinct !DILexicalBlock(scope: !604, file: !3, line: 126, column: 3)
!612 = !DILocation(line: 128, column: 4, scope: !611)
!613 = !DILocation(line: 130, column: 2, scope: !579)
!614 = !DILocation(line: 131, column: 6, scope: !615)
!615 = distinct !DILexicalBlock(scope: !524, file: !3, line: 131, column: 6)
!616 = !DILocation(line: 131, column: 20, scope: !615)
!617 = !DILocation(line: 131, column: 28, scope: !615)
!618 = !DILocation(line: 131, column: 31, scope: !615)
!619 = !DILocation(line: 131, column: 45, scope: !615)
!620 = !DILocation(line: 131, column: 6, scope: !524)
!621 = !DILocation(line: 132, column: 32, scope: !622)
!622 = distinct !DILexicalBlock(scope: !615, file: !3, line: 131, column: 51)
!623 = !DILocation(line: 132, column: 25, scope: !622)
!624 = !DILocation(line: 132, column: 16, scope: !622)
!625 = !DILocation(line: 133, column: 7, scope: !626)
!626 = distinct !DILexicalBlock(scope: !622, file: !3, line: 133, column: 7)
!627 = !DILocation(line: 133, column: 20, scope: !626)
!628 = !DILocation(line: 133, column: 7, scope: !622)
!629 = !DILocation(line: 134, column: 11, scope: !630)
!630 = distinct !DILexicalBlock(scope: !626, file: !3, line: 133, column: 29)
!631 = !DILocation(line: 135, column: 4, scope: !630)
!632 = !DILocation(line: 138, column: 16, scope: !633)
!633 = distinct !DILexicalBlock(scope: !622, file: !3, line: 138, column: 7)
!634 = !DILocation(line: 138, column: 30, scope: !633)
!635 = !DILocation(line: 138, column: 45, scope: !633)
!636 = !DILocation(line: 138, column: 60, scope: !633)
!637 = !DILocation(line: 138, column: 7, scope: !633)
!638 = !DILocation(line: 138, column: 7, scope: !622)
!639 = !DILocation(line: 139, column: 11, scope: !640)
!640 = distinct !DILexicalBlock(scope: !633, file: !3, line: 138, column: 76)
!641 = !DILocation(line: 140, column: 4, scope: !640)
!642 = !DILocation(line: 143, column: 3, scope: !622)
!643 = !DILocation(line: 143, column: 16, scope: !622)
!644 = !DILocation(line: 143, column: 30, scope: !622)
!645 = !DILocation(line: 143, column: 35, scope: !622)
!646 = !DILocation(line: 144, column: 7, scope: !647)
!647 = distinct !DILexicalBlock(scope: !622, file: !3, line: 144, column: 7)
!648 = !DILocation(line: 144, column: 31, scope: !647)
!649 = !DILocation(line: 144, column: 24, scope: !647)
!650 = !DILocation(line: 144, column: 45, scope: !647)
!651 = !DILocation(line: 144, column: 21, scope: !647)
!652 = !DILocation(line: 144, column: 7, scope: !622)
!653 = !DILocation(line: 146, column: 11, scope: !654)
!654 = distinct !DILexicalBlock(scope: !647, file: !3, line: 145, column: 3)
!655 = !DILocation(line: 147, column: 4, scope: !654)
!656 = !DILocation(line: 149, column: 2, scope: !622)
!657 = !DILocation(line: 151, column: 31, scope: !524)
!658 = !DILocation(line: 151, column: 44, scope: !524)
!659 = !DILocation(line: 151, column: 18, scope: !524)
!660 = !DILocation(line: 151, column: 2, scope: !524)
!661 = !DILocation(line: 151, column: 6, scope: !524)
!662 = !DILocation(line: 151, column: 16, scope: !524)
!663 = !DILabel(scope: !524, name: "err", file: !3, line: 153)
!664 = !DILocation(line: 153, column: 1, scope: !524)
!665 = !DILocation(line: 154, column: 6, scope: !666)
!666 = distinct !DILexicalBlock(scope: !524, file: !3, line: 154, column: 6)
!667 = !DILocation(line: 154, column: 6, scope: !524)
!668 = !DILocation(line: 154, column: 24, scope: !666)
!669 = !DILocation(line: 154, column: 19, scope: !666)
!670 = !DILocation(line: 155, column: 6, scope: !671)
!671 = distinct !DILexicalBlock(scope: !524, file: !3, line: 155, column: 6)
!672 = !DILocation(line: 155, column: 6, scope: !524)
!673 = !DILocation(line: 155, column: 25, scope: !671)
!674 = !DILocation(line: 155, column: 20, scope: !671)
!675 = !DILocation(line: 156, column: 9, scope: !524)
!676 = !DILocation(line: 156, column: 2, scope: !524)
!677 = !DILocation(line: 157, column: 1, scope: !524)
!678 = distinct !DISubprogram(name: "sgx_create_keystore", scope: !3, file: !3, line: 159, type: !525, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !370)
!679 = !DILocalVariable(name: "pms", arg: 1, scope: !678, file: !3, line: 159, type: !82)
!680 = !DILocation(line: 159, column: 57, scope: !678)
!681 = !DILocation(line: 161, column: 2, scope: !678)
!682 = !DILocation(line: 161, column: 2, scope: !683)
!683 = distinct !DILexicalBlock(scope: !684, file: !3, line: 161, column: 2)
!684 = distinct !DILexicalBlock(scope: !678, file: !3, line: 161, column: 2)
!685 = !DILocation(line: 161, column: 2, scope: !684)
!686 = !DILocation(line: 165, column: 2, scope: !678)
!687 = !DILocalVariable(name: "ms", scope: !678, file: !3, line: 166, type: !107)
!688 = !DILocation(line: 166, column: 24, scope: !678)
!689 = !DILocation(line: 166, column: 29, scope: !678)
!690 = !DILocalVariable(name: "status", scope: !678, file: !3, line: 167, type: !147)
!691 = !DILocation(line: 167, column: 15, scope: !678)
!692 = !DILocalVariable(name: "_tmp_main_password", scope: !678, file: !3, line: 168, type: !103)
!693 = !DILocation(line: 168, column: 8, scope: !678)
!694 = !DILocation(line: 168, column: 29, scope: !678)
!695 = !DILocation(line: 168, column: 33, scope: !678)
!696 = !DILocalVariable(name: "_len_main_password", scope: !678, file: !3, line: 169, type: !91)
!697 = !DILocation(line: 169, column: 9, scope: !678)
!698 = !DILocation(line: 169, column: 30, scope: !678)
!699 = !DILocation(line: 169, column: 34, scope: !678)
!700 = !DILocalVariable(name: "_in_main_password", scope: !678, file: !3, line: 170, type: !103)
!701 = !DILocation(line: 170, column: 8, scope: !678)
!702 = !DILocation(line: 172, column: 2, scope: !678)
!703 = !DILocation(line: 172, column: 2, scope: !704)
!704 = distinct !DILexicalBlock(scope: !705, file: !3, line: 172, column: 2)
!705 = distinct !DILexicalBlock(scope: !678, file: !3, line: 172, column: 2)
!706 = !DILocation(line: 172, column: 2, scope: !705)
!707 = !DILocation(line: 177, column: 2, scope: !678)
!708 = !DILocation(line: 179, column: 6, scope: !709)
!709 = distinct !DILexicalBlock(scope: !678, file: !3, line: 179, column: 6)
!710 = !DILocation(line: 179, column: 25, scope: !709)
!711 = !DILocation(line: 179, column: 33, scope: !709)
!712 = !DILocation(line: 179, column: 36, scope: !709)
!713 = !DILocation(line: 179, column: 55, scope: !709)
!714 = !DILocation(line: 179, column: 6, scope: !678)
!715 = !DILocation(line: 180, column: 37, scope: !716)
!716 = distinct !DILexicalBlock(scope: !709, file: !3, line: 179, column: 61)
!717 = !DILocation(line: 180, column: 30, scope: !716)
!718 = !DILocation(line: 180, column: 21, scope: !716)
!719 = !DILocation(line: 181, column: 7, scope: !720)
!720 = distinct !DILexicalBlock(scope: !716, file: !3, line: 181, column: 7)
!721 = !DILocation(line: 181, column: 25, scope: !720)
!722 = !DILocation(line: 181, column: 7, scope: !716)
!723 = !DILocation(line: 182, column: 11, scope: !724)
!724 = distinct !DILexicalBlock(scope: !720, file: !3, line: 181, column: 34)
!725 = !DILocation(line: 183, column: 4, scope: !724)
!726 = !DILocation(line: 186, column: 16, scope: !727)
!727 = distinct !DILexicalBlock(scope: !716, file: !3, line: 186, column: 7)
!728 = !DILocation(line: 186, column: 35, scope: !727)
!729 = !DILocation(line: 186, column: 55, scope: !727)
!730 = !DILocation(line: 186, column: 75, scope: !727)
!731 = !DILocation(line: 186, column: 7, scope: !727)
!732 = !DILocation(line: 186, column: 7, scope: !716)
!733 = !DILocation(line: 187, column: 11, scope: !734)
!734 = distinct !DILexicalBlock(scope: !727, file: !3, line: 186, column: 96)
!735 = !DILocation(line: 188, column: 4, scope: !734)
!736 = !DILocation(line: 191, column: 3, scope: !716)
!737 = !DILocation(line: 191, column: 21, scope: !716)
!738 = !DILocation(line: 191, column: 40, scope: !716)
!739 = !DILocation(line: 191, column: 45, scope: !716)
!740 = !DILocation(line: 192, column: 7, scope: !741)
!741 = distinct !DILexicalBlock(scope: !716, file: !3, line: 192, column: 7)
!742 = !DILocation(line: 192, column: 36, scope: !741)
!743 = !DILocation(line: 192, column: 29, scope: !741)
!744 = !DILocation(line: 192, column: 55, scope: !741)
!745 = !DILocation(line: 192, column: 26, scope: !741)
!746 = !DILocation(line: 192, column: 7, scope: !716)
!747 = !DILocation(line: 194, column: 11, scope: !748)
!748 = distinct !DILexicalBlock(scope: !741, file: !3, line: 193, column: 3)
!749 = !DILocation(line: 195, column: 4, scope: !748)
!750 = !DILocation(line: 197, column: 2, scope: !716)
!751 = !DILocation(line: 199, column: 34, scope: !678)
!752 = !DILocation(line: 199, column: 18, scope: !678)
!753 = !DILocation(line: 199, column: 2, scope: !678)
!754 = !DILocation(line: 199, column: 6, scope: !678)
!755 = !DILocation(line: 199, column: 16, scope: !678)
!756 = !DILabel(scope: !678, name: "err", file: !3, line: 201)
!757 = !DILocation(line: 201, column: 1, scope: !678)
!758 = !DILocation(line: 202, column: 6, scope: !759)
!759 = distinct !DILexicalBlock(scope: !678, file: !3, line: 202, column: 6)
!760 = !DILocation(line: 202, column: 6, scope: !678)
!761 = !DILocation(line: 202, column: 30, scope: !759)
!762 = !DILocation(line: 202, column: 25, scope: !759)
!763 = !DILocation(line: 203, column: 9, scope: !678)
!764 = !DILocation(line: 203, column: 2, scope: !678)
!765 = !DILocation(line: 204, column: 1, scope: !678)
!766 = distinct !DISubprogram(name: "sgx_get_password", scope: !3, file: !3, line: 206, type: !525, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !370)
!767 = !DILocalVariable(name: "pms", arg: 1, scope: !766, file: !3, line: 206, type: !82)
!768 = !DILocation(line: 206, column: 54, scope: !766)
!769 = !DILocation(line: 208, column: 2, scope: !766)
!770 = !DILocation(line: 208, column: 2, scope: !771)
!771 = distinct !DILexicalBlock(scope: !772, file: !3, line: 208, column: 2)
!772 = distinct !DILexicalBlock(scope: !766, file: !3, line: 208, column: 2)
!773 = !DILocation(line: 208, column: 2, scope: !772)
!774 = !DILocation(line: 212, column: 2, scope: !766)
!775 = !DILocalVariable(name: "ms", scope: !766, file: !3, line: 213, type: !114)
!776 = !DILocation(line: 213, column: 21, scope: !766)
!777 = !DILocation(line: 213, column: 26, scope: !766)
!778 = !DILocalVariable(name: "status", scope: !766, file: !3, line: 214, type: !147)
!779 = !DILocation(line: 214, column: 15, scope: !766)
!780 = !DILocalVariable(name: "_tmp_website", scope: !766, file: !3, line: 215, type: !103)
!781 = !DILocation(line: 215, column: 8, scope: !766)
!782 = !DILocation(line: 215, column: 23, scope: !766)
!783 = !DILocation(line: 215, column: 27, scope: !766)
!784 = !DILocalVariable(name: "_len_website", scope: !766, file: !3, line: 216, type: !91)
!785 = !DILocation(line: 216, column: 9, scope: !766)
!786 = !DILocation(line: 216, column: 24, scope: !766)
!787 = !DILocation(line: 216, column: 28, scope: !766)
!788 = !DILocalVariable(name: "_in_website", scope: !766, file: !3, line: 217, type: !103)
!789 = !DILocation(line: 217, column: 8, scope: !766)
!790 = !DILocalVariable(name: "_tmp_returnstr", scope: !766, file: !3, line: 218, type: !103)
!791 = !DILocation(line: 218, column: 8, scope: !766)
!792 = !DILocation(line: 218, column: 25, scope: !766)
!793 = !DILocation(line: 218, column: 29, scope: !766)
!794 = !DILocalVariable(name: "_len_returnstr", scope: !766, file: !3, line: 219, type: !91)
!795 = !DILocation(line: 219, column: 9, scope: !766)
!796 = !DILocalVariable(name: "_in_returnstr", scope: !766, file: !3, line: 220, type: !103)
!797 = !DILocation(line: 220, column: 8, scope: !766)
!798 = !DILocalVariable(name: "_tmp_verification_password", scope: !766, file: !3, line: 221, type: !103)
!799 = !DILocation(line: 221, column: 8, scope: !766)
!800 = !DILocation(line: 221, column: 37, scope: !766)
!801 = !DILocation(line: 221, column: 41, scope: !766)
!802 = !DILocalVariable(name: "_len_verification_password", scope: !766, file: !3, line: 222, type: !91)
!803 = !DILocation(line: 222, column: 9, scope: !766)
!804 = !DILocation(line: 222, column: 38, scope: !766)
!805 = !DILocation(line: 222, column: 42, scope: !766)
!806 = !DILocalVariable(name: "_in_verification_password", scope: !766, file: !3, line: 223, type: !103)
!807 = !DILocation(line: 223, column: 8, scope: !766)
!808 = !DILocation(line: 225, column: 2, scope: !766)
!809 = !DILocation(line: 225, column: 2, scope: !810)
!810 = distinct !DILexicalBlock(scope: !811, file: !3, line: 225, column: 2)
!811 = distinct !DILexicalBlock(scope: !766, file: !3, line: 225, column: 2)
!812 = !DILocation(line: 225, column: 2, scope: !811)
!813 = !DILocation(line: 226, column: 2, scope: !766)
!814 = !DILocation(line: 226, column: 2, scope: !815)
!815 = distinct !DILexicalBlock(scope: !816, file: !3, line: 226, column: 2)
!816 = distinct !DILexicalBlock(scope: !766, file: !3, line: 226, column: 2)
!817 = !DILocation(line: 226, column: 2, scope: !816)
!818 = !DILocation(line: 227, column: 2, scope: !766)
!819 = !DILocation(line: 227, column: 2, scope: !820)
!820 = distinct !DILexicalBlock(scope: !821, file: !3, line: 227, column: 2)
!821 = distinct !DILexicalBlock(scope: !766, file: !3, line: 227, column: 2)
!822 = !DILocation(line: 227, column: 2, scope: !821)
!823 = !DILocation(line: 232, column: 2, scope: !766)
!824 = !DILocation(line: 234, column: 6, scope: !825)
!825 = distinct !DILexicalBlock(scope: !766, file: !3, line: 234, column: 6)
!826 = !DILocation(line: 234, column: 19, scope: !825)
!827 = !DILocation(line: 234, column: 27, scope: !825)
!828 = !DILocation(line: 234, column: 30, scope: !825)
!829 = !DILocation(line: 234, column: 43, scope: !825)
!830 = !DILocation(line: 234, column: 6, scope: !766)
!831 = !DILocation(line: 235, column: 31, scope: !832)
!832 = distinct !DILexicalBlock(scope: !825, file: !3, line: 234, column: 49)
!833 = !DILocation(line: 235, column: 24, scope: !832)
!834 = !DILocation(line: 235, column: 15, scope: !832)
!835 = !DILocation(line: 236, column: 7, scope: !836)
!836 = distinct !DILexicalBlock(scope: !832, file: !3, line: 236, column: 7)
!837 = !DILocation(line: 236, column: 19, scope: !836)
!838 = !DILocation(line: 236, column: 7, scope: !832)
!839 = !DILocation(line: 237, column: 11, scope: !840)
!840 = distinct !DILexicalBlock(scope: !836, file: !3, line: 236, column: 28)
!841 = !DILocation(line: 238, column: 4, scope: !840)
!842 = !DILocation(line: 241, column: 16, scope: !843)
!843 = distinct !DILexicalBlock(scope: !832, file: !3, line: 241, column: 7)
!844 = !DILocation(line: 241, column: 29, scope: !843)
!845 = !DILocation(line: 241, column: 43, scope: !843)
!846 = !DILocation(line: 241, column: 57, scope: !843)
!847 = !DILocation(line: 241, column: 7, scope: !843)
!848 = !DILocation(line: 241, column: 7, scope: !832)
!849 = !DILocation(line: 242, column: 11, scope: !850)
!850 = distinct !DILexicalBlock(scope: !843, file: !3, line: 241, column: 72)
!851 = !DILocation(line: 243, column: 4, scope: !850)
!852 = !DILocation(line: 246, column: 3, scope: !832)
!853 = !DILocation(line: 246, column: 15, scope: !832)
!854 = !DILocation(line: 246, column: 28, scope: !832)
!855 = !DILocation(line: 246, column: 33, scope: !832)
!856 = !DILocation(line: 247, column: 7, scope: !857)
!857 = distinct !DILexicalBlock(scope: !832, file: !3, line: 247, column: 7)
!858 = !DILocation(line: 247, column: 30, scope: !857)
!859 = !DILocation(line: 247, column: 23, scope: !857)
!860 = !DILocation(line: 247, column: 43, scope: !857)
!861 = !DILocation(line: 247, column: 20, scope: !857)
!862 = !DILocation(line: 247, column: 7, scope: !832)
!863 = !DILocation(line: 249, column: 11, scope: !864)
!864 = distinct !DILexicalBlock(scope: !857, file: !3, line: 248, column: 3)
!865 = !DILocation(line: 250, column: 4, scope: !864)
!866 = !DILocation(line: 252, column: 2, scope: !832)
!867 = !DILocation(line: 253, column: 6, scope: !868)
!868 = distinct !DILexicalBlock(scope: !766, file: !3, line: 253, column: 6)
!869 = !DILocation(line: 253, column: 21, scope: !868)
!870 = !DILocation(line: 253, column: 29, scope: !868)
!871 = !DILocation(line: 253, column: 32, scope: !868)
!872 = !DILocation(line: 253, column: 47, scope: !868)
!873 = !DILocation(line: 253, column: 6, scope: !766)
!874 = !DILocation(line: 254, column: 8, scope: !875)
!875 = distinct !DILexicalBlock(scope: !876, file: !3, line: 254, column: 8)
!876 = distinct !DILexicalBlock(scope: !868, file: !3, line: 253, column: 53)
!877 = !DILocation(line: 254, column: 23, scope: !875)
!878 = !DILocation(line: 254, column: 49, scope: !875)
!879 = !DILocation(line: 254, column: 8, scope: !876)
!880 = !DILocation(line: 256, column: 11, scope: !881)
!881 = distinct !DILexicalBlock(scope: !875, file: !3, line: 255, column: 3)
!882 = !DILocation(line: 257, column: 4, scope: !881)
!883 = !DILocation(line: 259, column: 38, scope: !884)
!884 = distinct !DILexicalBlock(scope: !876, file: !3, line: 259, column: 7)
!885 = !DILocation(line: 259, column: 31, scope: !884)
!886 = !DILocation(line: 259, column: 22, scope: !884)
!887 = !DILocation(line: 259, column: 55, scope: !884)
!888 = !DILocation(line: 259, column: 7, scope: !876)
!889 = !DILocation(line: 260, column: 11, scope: !890)
!890 = distinct !DILexicalBlock(scope: !884, file: !3, line: 259, column: 64)
!891 = !DILocation(line: 261, column: 4, scope: !890)
!892 = !DILocation(line: 264, column: 17, scope: !876)
!893 = !DILocation(line: 264, column: 35, scope: !876)
!894 = !DILocation(line: 264, column: 3, scope: !876)
!895 = !DILocation(line: 265, column: 2, scope: !876)
!896 = !DILocation(line: 266, column: 6, scope: !897)
!897 = distinct !DILexicalBlock(scope: !766, file: !3, line: 266, column: 6)
!898 = !DILocation(line: 266, column: 33, scope: !897)
!899 = !DILocation(line: 266, column: 41, scope: !897)
!900 = !DILocation(line: 266, column: 44, scope: !897)
!901 = !DILocation(line: 266, column: 71, scope: !897)
!902 = !DILocation(line: 266, column: 6, scope: !766)
!903 = !DILocation(line: 267, column: 45, scope: !904)
!904 = distinct !DILexicalBlock(scope: !897, file: !3, line: 266, column: 77)
!905 = !DILocation(line: 267, column: 38, scope: !904)
!906 = !DILocation(line: 267, column: 29, scope: !904)
!907 = !DILocation(line: 268, column: 7, scope: !908)
!908 = distinct !DILexicalBlock(scope: !904, file: !3, line: 268, column: 7)
!909 = !DILocation(line: 268, column: 33, scope: !908)
!910 = !DILocation(line: 268, column: 7, scope: !904)
!911 = !DILocation(line: 269, column: 11, scope: !912)
!912 = distinct !DILexicalBlock(scope: !908, file: !3, line: 268, column: 42)
!913 = !DILocation(line: 270, column: 4, scope: !912)
!914 = !DILocation(line: 273, column: 16, scope: !915)
!915 = distinct !DILexicalBlock(scope: !904, file: !3, line: 273, column: 7)
!916 = !DILocation(line: 273, column: 43, scope: !915)
!917 = !DILocation(line: 273, column: 71, scope: !915)
!918 = !DILocation(line: 273, column: 99, scope: !915)
!919 = !DILocation(line: 273, column: 7, scope: !915)
!920 = !DILocation(line: 273, column: 7, scope: !904)
!921 = !DILocation(line: 274, column: 11, scope: !922)
!922 = distinct !DILexicalBlock(scope: !915, file: !3, line: 273, column: 128)
!923 = !DILocation(line: 275, column: 4, scope: !922)
!924 = !DILocation(line: 278, column: 3, scope: !904)
!925 = !DILocation(line: 278, column: 29, scope: !904)
!926 = !DILocation(line: 278, column: 56, scope: !904)
!927 = !DILocation(line: 278, column: 61, scope: !904)
!928 = !DILocation(line: 279, column: 7, scope: !929)
!929 = distinct !DILexicalBlock(scope: !904, file: !3, line: 279, column: 7)
!930 = !DILocation(line: 279, column: 44, scope: !929)
!931 = !DILocation(line: 279, column: 37, scope: !929)
!932 = !DILocation(line: 279, column: 71, scope: !929)
!933 = !DILocation(line: 279, column: 34, scope: !929)
!934 = !DILocation(line: 279, column: 7, scope: !904)
!935 = !DILocation(line: 281, column: 11, scope: !936)
!936 = distinct !DILexicalBlock(scope: !929, file: !3, line: 280, column: 3)
!937 = !DILocation(line: 282, column: 4, scope: !936)
!938 = !DILocation(line: 284, column: 2, scope: !904)
!939 = !DILocation(line: 286, column: 31, scope: !766)
!940 = !DILocation(line: 286, column: 44, scope: !766)
!941 = !DILocation(line: 286, column: 59, scope: !766)
!942 = !DILocation(line: 286, column: 18, scope: !766)
!943 = !DILocation(line: 286, column: 2, scope: !766)
!944 = !DILocation(line: 286, column: 6, scope: !766)
!945 = !DILocation(line: 286, column: 16, scope: !766)
!946 = !DILocation(line: 287, column: 6, scope: !947)
!947 = distinct !DILexicalBlock(scope: !766, file: !3, line: 287, column: 6)
!948 = !DILocation(line: 287, column: 6, scope: !766)
!949 = !DILocation(line: 288, column: 16, scope: !950)
!950 = distinct !DILexicalBlock(scope: !951, file: !3, line: 288, column: 7)
!951 = distinct !DILexicalBlock(scope: !947, file: !3, line: 287, column: 21)
!952 = !DILocation(line: 288, column: 32, scope: !950)
!953 = !DILocation(line: 288, column: 48, scope: !950)
!954 = !DILocation(line: 288, column: 63, scope: !950)
!955 = !DILocation(line: 288, column: 7, scope: !950)
!956 = !DILocation(line: 288, column: 7, scope: !951)
!957 = !DILocation(line: 289, column: 11, scope: !958)
!958 = distinct !DILexicalBlock(scope: !950, file: !3, line: 288, column: 80)
!959 = !DILocation(line: 290, column: 4, scope: !958)
!960 = !DILocation(line: 292, column: 2, scope: !951)
!961 = !DILabel(scope: !766, name: "err", file: !3, line: 294)
!962 = !DILocation(line: 294, column: 1, scope: !766)
!963 = !DILocation(line: 295, column: 6, scope: !964)
!964 = distinct !DILexicalBlock(scope: !766, file: !3, line: 295, column: 6)
!965 = !DILocation(line: 295, column: 6, scope: !766)
!966 = !DILocation(line: 295, column: 24, scope: !964)
!967 = !DILocation(line: 295, column: 19, scope: !964)
!968 = !DILocation(line: 296, column: 6, scope: !969)
!969 = distinct !DILexicalBlock(scope: !766, file: !3, line: 296, column: 6)
!970 = !DILocation(line: 296, column: 6, scope: !766)
!971 = !DILocation(line: 296, column: 26, scope: !969)
!972 = !DILocation(line: 296, column: 21, scope: !969)
!973 = !DILocation(line: 297, column: 6, scope: !974)
!974 = distinct !DILexicalBlock(scope: !766, file: !3, line: 297, column: 6)
!975 = !DILocation(line: 297, column: 6, scope: !766)
!976 = !DILocation(line: 297, column: 38, scope: !974)
!977 = !DILocation(line: 297, column: 33, scope: !974)
!978 = !DILocation(line: 298, column: 9, scope: !766)
!979 = !DILocation(line: 298, column: 2, scope: !766)
!980 = !DILocation(line: 299, column: 1, scope: !766)
!981 = distinct !DISubprogram(name: "sgx_serialize_key_store", scope: !3, file: !3, line: 301, type: !525, scopeLine: 302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !370)
!982 = !DILocalVariable(name: "pms", arg: 1, scope: !981, file: !3, line: 301, type: !82)
!983 = !DILocation(line: 301, column: 61, scope: !981)
!984 = !DILocation(line: 303, column: 2, scope: !981)
!985 = !DILocation(line: 303, column: 2, scope: !986)
!986 = distinct !DILexicalBlock(scope: !987, file: !3, line: 303, column: 2)
!987 = distinct !DILexicalBlock(scope: !981, file: !3, line: 303, column: 2)
!988 = !DILocation(line: 303, column: 2, scope: !987)
!989 = !DILocation(line: 307, column: 2, scope: !981)
!990 = !DILocalVariable(name: "ms", scope: !981, file: !3, line: 308, type: !124)
!991 = !DILocation(line: 308, column: 28, scope: !981)
!992 = !DILocation(line: 308, column: 33, scope: !981)
!993 = !DILocalVariable(name: "status", scope: !981, file: !3, line: 309, type: !147)
!994 = !DILocation(line: 309, column: 15, scope: !981)
!995 = !DILocalVariable(name: "_tmp_p_dst", scope: !981, file: !3, line: 310, type: !82)
!996 = !DILocation(line: 310, column: 8, scope: !981)
!997 = !DILocation(line: 310, column: 21, scope: !981)
!998 = !DILocation(line: 310, column: 25, scope: !981)
!999 = !DILocalVariable(name: "_len_p_dst", scope: !981, file: !3, line: 311, type: !91)
!1000 = !DILocation(line: 311, column: 9, scope: !981)
!1001 = !DILocalVariable(name: "_in_p_dst", scope: !981, file: !3, line: 312, type: !82)
!1002 = !DILocation(line: 312, column: 8, scope: !981)
!1003 = !DILocation(line: 314, column: 2, scope: !981)
!1004 = !DILocation(line: 314, column: 2, scope: !1005)
!1005 = distinct !DILexicalBlock(scope: !1006, file: !3, line: 314, column: 2)
!1006 = distinct !DILexicalBlock(scope: !981, file: !3, line: 314, column: 2)
!1007 = !DILocation(line: 314, column: 2, scope: !1006)
!1008 = !DILocation(line: 319, column: 2, scope: !981)
!1009 = !DILocation(line: 321, column: 6, scope: !1010)
!1010 = distinct !DILexicalBlock(scope: !981, file: !3, line: 321, column: 6)
!1011 = !DILocation(line: 321, column: 17, scope: !1010)
!1012 = !DILocation(line: 321, column: 25, scope: !1010)
!1013 = !DILocation(line: 321, column: 28, scope: !1010)
!1014 = !DILocation(line: 321, column: 39, scope: !1010)
!1015 = !DILocation(line: 321, column: 6, scope: !981)
!1016 = !DILocation(line: 322, column: 34, scope: !1017)
!1017 = distinct !DILexicalBlock(scope: !1018, file: !3, line: 322, column: 7)
!1018 = distinct !DILexicalBlock(scope: !1010, file: !3, line: 321, column: 45)
!1019 = !DILocation(line: 322, column: 27, scope: !1017)
!1020 = !DILocation(line: 322, column: 18, scope: !1017)
!1021 = !DILocation(line: 322, column: 47, scope: !1017)
!1022 = !DILocation(line: 322, column: 7, scope: !1018)
!1023 = !DILocation(line: 323, column: 11, scope: !1024)
!1024 = distinct !DILexicalBlock(scope: !1017, file: !3, line: 322, column: 56)
!1025 = !DILocation(line: 324, column: 4, scope: !1024)
!1026 = !DILocation(line: 327, column: 17, scope: !1018)
!1027 = !DILocation(line: 327, column: 31, scope: !1018)
!1028 = !DILocation(line: 327, column: 3, scope: !1018)
!1029 = !DILocation(line: 328, column: 2, scope: !1018)
!1030 = !DILocation(line: 330, column: 38, scope: !981)
!1031 = !DILocation(line: 330, column: 18, scope: !981)
!1032 = !DILocation(line: 330, column: 2, scope: !981)
!1033 = !DILocation(line: 330, column: 6, scope: !981)
!1034 = !DILocation(line: 330, column: 16, scope: !981)
!1035 = !DILocation(line: 331, column: 6, scope: !1036)
!1036 = distinct !DILexicalBlock(scope: !981, file: !3, line: 331, column: 6)
!1037 = !DILocation(line: 331, column: 6, scope: !981)
!1038 = !DILocation(line: 332, column: 16, scope: !1039)
!1039 = distinct !DILexicalBlock(scope: !1040, file: !3, line: 332, column: 7)
!1040 = distinct !DILexicalBlock(scope: !1036, file: !3, line: 331, column: 17)
!1041 = !DILocation(line: 332, column: 28, scope: !1039)
!1042 = !DILocation(line: 332, column: 40, scope: !1039)
!1043 = !DILocation(line: 332, column: 51, scope: !1039)
!1044 = !DILocation(line: 332, column: 7, scope: !1039)
!1045 = !DILocation(line: 332, column: 7, scope: !1040)
!1046 = !DILocation(line: 333, column: 11, scope: !1047)
!1047 = distinct !DILexicalBlock(scope: !1039, file: !3, line: 332, column: 64)
!1048 = !DILocation(line: 334, column: 4, scope: !1047)
!1049 = !DILocation(line: 336, column: 2, scope: !1040)
!1050 = !DILabel(scope: !981, name: "err", file: !3, line: 338)
!1051 = !DILocation(line: 338, column: 1, scope: !981)
!1052 = !DILocation(line: 339, column: 6, scope: !1053)
!1053 = distinct !DILexicalBlock(scope: !981, file: !3, line: 339, column: 6)
!1054 = !DILocation(line: 339, column: 6, scope: !981)
!1055 = !DILocation(line: 339, column: 22, scope: !1053)
!1056 = !DILocation(line: 339, column: 17, scope: !1053)
!1057 = !DILocation(line: 340, column: 9, scope: !981)
!1058 = !DILocation(line: 340, column: 2, scope: !981)
!1059 = !DILocation(line: 341, column: 1, scope: !981)
!1060 = distinct !DISubprogram(name: "sgx_decrypt_and_set_key_store", scope: !3, file: !3, line: 343, type: !525, scopeLine: 344, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !370)
!1061 = !DILocalVariable(name: "pms", arg: 1, scope: !1060, file: !3, line: 343, type: !82)
!1062 = !DILocation(line: 343, column: 67, scope: !1060)
!1063 = !DILocation(line: 345, column: 2, scope: !1060)
!1064 = !DILocation(line: 345, column: 2, scope: !1065)
!1065 = distinct !DILexicalBlock(scope: !1066, file: !3, line: 345, column: 2)
!1066 = distinct !DILexicalBlock(scope: !1060, file: !3, line: 345, column: 2)
!1067 = !DILocation(line: 345, column: 2, scope: !1066)
!1068 = !DILocation(line: 349, column: 2, scope: !1060)
!1069 = !DILocalVariable(name: "ms", scope: !1060, file: !3, line: 350, type: !130)
!1070 = !DILocation(line: 350, column: 34, scope: !1060)
!1071 = !DILocation(line: 350, column: 39, scope: !1060)
!1072 = !DILocalVariable(name: "status", scope: !1060, file: !3, line: 351, type: !147)
!1073 = !DILocation(line: 351, column: 15, scope: !1060)
!1074 = !DILocalVariable(name: "_tmp_key_store", scope: !1060, file: !3, line: 352, type: !82)
!1075 = !DILocation(line: 352, column: 8, scope: !1060)
!1076 = !DILocation(line: 352, column: 25, scope: !1060)
!1077 = !DILocation(line: 352, column: 29, scope: !1060)
!1078 = !DILocalVariable(name: "_len_key_store", scope: !1060, file: !3, line: 353, type: !91)
!1079 = !DILocation(line: 353, column: 9, scope: !1060)
!1080 = !DILocalVariable(name: "_in_key_store", scope: !1060, file: !3, line: 354, type: !82)
!1081 = !DILocation(line: 354, column: 8, scope: !1060)
!1082 = !DILocation(line: 356, column: 2, scope: !1060)
!1083 = !DILocation(line: 356, column: 2, scope: !1084)
!1084 = distinct !DILexicalBlock(scope: !1085, file: !3, line: 356, column: 2)
!1085 = distinct !DILexicalBlock(scope: !1060, file: !3, line: 356, column: 2)
!1086 = !DILocation(line: 356, column: 2, scope: !1085)
!1087 = !DILocation(line: 361, column: 2, scope: !1060)
!1088 = !DILocation(line: 363, column: 6, scope: !1089)
!1089 = distinct !DILexicalBlock(scope: !1060, file: !3, line: 363, column: 6)
!1090 = !DILocation(line: 363, column: 21, scope: !1089)
!1091 = !DILocation(line: 363, column: 29, scope: !1089)
!1092 = !DILocation(line: 363, column: 32, scope: !1089)
!1093 = !DILocation(line: 363, column: 47, scope: !1089)
!1094 = !DILocation(line: 363, column: 6, scope: !1060)
!1095 = !DILocation(line: 364, column: 33, scope: !1096)
!1096 = distinct !DILexicalBlock(scope: !1089, file: !3, line: 363, column: 53)
!1097 = !DILocation(line: 364, column: 26, scope: !1096)
!1098 = !DILocation(line: 364, column: 17, scope: !1096)
!1099 = !DILocation(line: 365, column: 7, scope: !1100)
!1100 = distinct !DILexicalBlock(scope: !1096, file: !3, line: 365, column: 7)
!1101 = !DILocation(line: 365, column: 21, scope: !1100)
!1102 = !DILocation(line: 365, column: 7, scope: !1096)
!1103 = !DILocation(line: 366, column: 11, scope: !1104)
!1104 = distinct !DILexicalBlock(scope: !1100, file: !3, line: 365, column: 30)
!1105 = !DILocation(line: 367, column: 4, scope: !1104)
!1106 = !DILocation(line: 370, column: 16, scope: !1107)
!1107 = distinct !DILexicalBlock(scope: !1096, file: !3, line: 370, column: 7)
!1108 = !DILocation(line: 370, column: 31, scope: !1107)
!1109 = !DILocation(line: 370, column: 47, scope: !1107)
!1110 = !DILocation(line: 370, column: 63, scope: !1107)
!1111 = !DILocation(line: 370, column: 7, scope: !1107)
!1112 = !DILocation(line: 370, column: 7, scope: !1096)
!1113 = !DILocation(line: 371, column: 11, scope: !1114)
!1114 = distinct !DILexicalBlock(scope: !1107, file: !3, line: 370, column: 80)
!1115 = !DILocation(line: 372, column: 4, scope: !1114)
!1116 = !DILocation(line: 375, column: 2, scope: !1096)
!1117 = !DILocation(line: 377, column: 44, scope: !1060)
!1118 = !DILocation(line: 377, column: 18, scope: !1060)
!1119 = !DILocation(line: 377, column: 2, scope: !1060)
!1120 = !DILocation(line: 377, column: 6, scope: !1060)
!1121 = !DILocation(line: 377, column: 16, scope: !1060)
!1122 = !DILabel(scope: !1060, name: "err", file: !3, line: 379)
!1123 = !DILocation(line: 379, column: 1, scope: !1060)
!1124 = !DILocation(line: 380, column: 6, scope: !1125)
!1125 = distinct !DILexicalBlock(scope: !1060, file: !3, line: 380, column: 6)
!1126 = !DILocation(line: 380, column: 6, scope: !1060)
!1127 = !DILocation(line: 380, column: 26, scope: !1125)
!1128 = !DILocation(line: 380, column: 21, scope: !1125)
!1129 = !DILocation(line: 381, column: 9, scope: !1060)
!1130 = !DILocation(line: 381, column: 2, scope: !1060)
!1131 = !DILocation(line: 382, column: 1, scope: !1060)
!1132 = distinct !DISubprogram(name: "sgx_encrypt_and_serialize_key_store", scope: !3, file: !3, line: 384, type: !525, scopeLine: 385, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !370)
!1133 = !DILocalVariable(name: "pms", arg: 1, scope: !1132, file: !3, line: 384, type: !82)
!1134 = !DILocation(line: 384, column: 73, scope: !1132)
!1135 = !DILocation(line: 386, column: 2, scope: !1132)
!1136 = !DILocation(line: 386, column: 2, scope: !1137)
!1137 = distinct !DILexicalBlock(scope: !1138, file: !3, line: 386, column: 2)
!1138 = distinct !DILexicalBlock(scope: !1132, file: !3, line: 386, column: 2)
!1139 = !DILocation(line: 386, column: 2, scope: !1138)
!1140 = !DILocation(line: 390, column: 2, scope: !1132)
!1141 = !DILocalVariable(name: "ms", scope: !1132, file: !3, line: 391, type: !136)
!1142 = !DILocation(line: 391, column: 40, scope: !1132)
!1143 = !DILocation(line: 391, column: 45, scope: !1132)
!1144 = !DILocalVariable(name: "status", scope: !1132, file: !3, line: 392, type: !147)
!1145 = !DILocation(line: 392, column: 15, scope: !1132)
!1146 = !DILocalVariable(name: "_tmp_p_dst", scope: !1132, file: !3, line: 393, type: !82)
!1147 = !DILocation(line: 393, column: 8, scope: !1132)
!1148 = !DILocation(line: 393, column: 21, scope: !1132)
!1149 = !DILocation(line: 393, column: 25, scope: !1132)
!1150 = !DILocalVariable(name: "_len_p_dst", scope: !1132, file: !3, line: 394, type: !91)
!1151 = !DILocation(line: 394, column: 9, scope: !1132)
!1152 = !DILocalVariable(name: "_in_p_dst", scope: !1132, file: !3, line: 395, type: !82)
!1153 = !DILocation(line: 395, column: 8, scope: !1132)
!1154 = !DILocation(line: 397, column: 2, scope: !1132)
!1155 = !DILocation(line: 397, column: 2, scope: !1156)
!1156 = distinct !DILexicalBlock(scope: !1157, file: !3, line: 397, column: 2)
!1157 = distinct !DILexicalBlock(scope: !1132, file: !3, line: 397, column: 2)
!1158 = !DILocation(line: 397, column: 2, scope: !1157)
!1159 = !DILocation(line: 402, column: 2, scope: !1132)
!1160 = !DILocation(line: 404, column: 6, scope: !1161)
!1161 = distinct !DILexicalBlock(scope: !1132, file: !3, line: 404, column: 6)
!1162 = !DILocation(line: 404, column: 17, scope: !1161)
!1163 = !DILocation(line: 404, column: 25, scope: !1161)
!1164 = !DILocation(line: 404, column: 28, scope: !1161)
!1165 = !DILocation(line: 404, column: 39, scope: !1161)
!1166 = !DILocation(line: 404, column: 6, scope: !1132)
!1167 = !DILocation(line: 405, column: 34, scope: !1168)
!1168 = distinct !DILexicalBlock(scope: !1169, file: !3, line: 405, column: 7)
!1169 = distinct !DILexicalBlock(scope: !1161, file: !3, line: 404, column: 45)
!1170 = !DILocation(line: 405, column: 27, scope: !1168)
!1171 = !DILocation(line: 405, column: 18, scope: !1168)
!1172 = !DILocation(line: 405, column: 47, scope: !1168)
!1173 = !DILocation(line: 405, column: 7, scope: !1169)
!1174 = !DILocation(line: 406, column: 11, scope: !1175)
!1175 = distinct !DILexicalBlock(scope: !1168, file: !3, line: 405, column: 56)
!1176 = !DILocation(line: 407, column: 4, scope: !1175)
!1177 = !DILocation(line: 410, column: 17, scope: !1169)
!1178 = !DILocation(line: 410, column: 31, scope: !1169)
!1179 = !DILocation(line: 410, column: 3, scope: !1169)
!1180 = !DILocation(line: 411, column: 2, scope: !1169)
!1181 = !DILocation(line: 413, column: 50, scope: !1132)
!1182 = !DILocation(line: 413, column: 18, scope: !1132)
!1183 = !DILocation(line: 413, column: 2, scope: !1132)
!1184 = !DILocation(line: 413, column: 6, scope: !1132)
!1185 = !DILocation(line: 413, column: 16, scope: !1132)
!1186 = !DILocation(line: 414, column: 6, scope: !1187)
!1187 = distinct !DILexicalBlock(scope: !1132, file: !3, line: 414, column: 6)
!1188 = !DILocation(line: 414, column: 6, scope: !1132)
!1189 = !DILocation(line: 415, column: 16, scope: !1190)
!1190 = distinct !DILexicalBlock(scope: !1191, file: !3, line: 415, column: 7)
!1191 = distinct !DILexicalBlock(scope: !1187, file: !3, line: 414, column: 17)
!1192 = !DILocation(line: 415, column: 28, scope: !1190)
!1193 = !DILocation(line: 415, column: 40, scope: !1190)
!1194 = !DILocation(line: 415, column: 51, scope: !1190)
!1195 = !DILocation(line: 415, column: 7, scope: !1190)
!1196 = !DILocation(line: 415, column: 7, scope: !1191)
!1197 = !DILocation(line: 416, column: 11, scope: !1198)
!1198 = distinct !DILexicalBlock(scope: !1190, file: !3, line: 415, column: 64)
!1199 = !DILocation(line: 417, column: 4, scope: !1198)
!1200 = !DILocation(line: 419, column: 2, scope: !1191)
!1201 = !DILabel(scope: !1132, name: "err", file: !3, line: 421)
!1202 = !DILocation(line: 421, column: 1, scope: !1132)
!1203 = !DILocation(line: 422, column: 6, scope: !1204)
!1204 = distinct !DILexicalBlock(scope: !1132, file: !3, line: 422, column: 6)
!1205 = !DILocation(line: 422, column: 6, scope: !1132)
!1206 = !DILocation(line: 422, column: 22, scope: !1204)
!1207 = !DILocation(line: 422, column: 17, scope: !1204)
!1208 = !DILocation(line: 423, column: 9, scope: !1132)
!1209 = !DILocation(line: 423, column: 2, scope: !1132)
!1210 = !DILocation(line: 424, column: 1, scope: !1132)
!1211 = distinct !DISubprogram(name: "sgx_seal", scope: !3, file: !3, line: 426, type: !525, scopeLine: 427, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !370)
!1212 = !DILocalVariable(name: "pms", arg: 1, scope: !1211, file: !3, line: 426, type: !82)
!1213 = !DILocation(line: 426, column: 46, scope: !1211)
!1214 = !DILocation(line: 428, column: 2, scope: !1211)
!1215 = !DILocation(line: 428, column: 2, scope: !1216)
!1216 = distinct !DILexicalBlock(scope: !1217, file: !3, line: 428, column: 2)
!1217 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 428, column: 2)
!1218 = !DILocation(line: 428, column: 2, scope: !1217)
!1219 = !DILocation(line: 432, column: 2, scope: !1211)
!1220 = !DILocalVariable(name: "ms", scope: !1211, file: !3, line: 433, type: !142)
!1221 = !DILocation(line: 433, column: 13, scope: !1211)
!1222 = !DILocation(line: 433, column: 18, scope: !1211)
!1223 = !DILocalVariable(name: "status", scope: !1211, file: !3, line: 434, type: !147)
!1224 = !DILocation(line: 434, column: 15, scope: !1211)
!1225 = !DILocalVariable(name: "_tmp_plaintext", scope: !1211, file: !3, line: 435, type: !149)
!1226 = !DILocation(line: 435, column: 11, scope: !1211)
!1227 = !DILocation(line: 435, column: 28, scope: !1211)
!1228 = !DILocation(line: 435, column: 32, scope: !1211)
!1229 = !DILocalVariable(name: "_tmp_plaintext_len", scope: !1211, file: !3, line: 436, type: !91)
!1230 = !DILocation(line: 436, column: 9, scope: !1211)
!1231 = !DILocation(line: 436, column: 30, scope: !1211)
!1232 = !DILocation(line: 436, column: 34, scope: !1211)
!1233 = !DILocalVariable(name: "_len_plaintext", scope: !1211, file: !3, line: 437, type: !91)
!1234 = !DILocation(line: 437, column: 9, scope: !1211)
!1235 = !DILocation(line: 437, column: 26, scope: !1211)
!1236 = !DILocalVariable(name: "_in_plaintext", scope: !1211, file: !3, line: 438, type: !149)
!1237 = !DILocation(line: 438, column: 11, scope: !1211)
!1238 = !DILocalVariable(name: "_tmp_sealed_data", scope: !1211, file: !3, line: 439, type: !156)
!1239 = !DILocation(line: 439, column: 21, scope: !1211)
!1240 = !DILocation(line: 439, column: 40, scope: !1211)
!1241 = !DILocation(line: 439, column: 44, scope: !1211)
!1242 = !DILocalVariable(name: "_tmp_sealed_size", scope: !1211, file: !3, line: 440, type: !91)
!1243 = !DILocation(line: 440, column: 9, scope: !1211)
!1244 = !DILocation(line: 440, column: 28, scope: !1211)
!1245 = !DILocation(line: 440, column: 32, scope: !1211)
!1246 = !DILocalVariable(name: "_len_sealed_data", scope: !1211, file: !3, line: 441, type: !91)
!1247 = !DILocation(line: 441, column: 9, scope: !1211)
!1248 = !DILocation(line: 441, column: 28, scope: !1211)
!1249 = !DILocalVariable(name: "_in_sealed_data", scope: !1211, file: !3, line: 442, type: !156)
!1250 = !DILocation(line: 442, column: 21, scope: !1211)
!1251 = !DILocation(line: 444, column: 2, scope: !1211)
!1252 = !DILocation(line: 444, column: 2, scope: !1253)
!1253 = distinct !DILexicalBlock(scope: !1254, file: !3, line: 444, column: 2)
!1254 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 444, column: 2)
!1255 = !DILocation(line: 444, column: 2, scope: !1254)
!1256 = !DILocation(line: 445, column: 2, scope: !1211)
!1257 = !DILocation(line: 445, column: 2, scope: !1258)
!1258 = distinct !DILexicalBlock(scope: !1259, file: !3, line: 445, column: 2)
!1259 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 445, column: 2)
!1260 = !DILocation(line: 445, column: 2, scope: !1259)
!1261 = !DILocation(line: 450, column: 2, scope: !1211)
!1262 = !DILocation(line: 452, column: 6, scope: !1263)
!1263 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 452, column: 6)
!1264 = !DILocation(line: 452, column: 21, scope: !1263)
!1265 = !DILocation(line: 452, column: 29, scope: !1263)
!1266 = !DILocation(line: 452, column: 32, scope: !1263)
!1267 = !DILocation(line: 452, column: 47, scope: !1263)
!1268 = !DILocation(line: 452, column: 6, scope: !1211)
!1269 = !DILocation(line: 453, column: 8, scope: !1270)
!1270 = distinct !DILexicalBlock(scope: !1271, file: !3, line: 453, column: 8)
!1271 = distinct !DILexicalBlock(scope: !1263, file: !3, line: 452, column: 53)
!1272 = !DILocation(line: 453, column: 23, scope: !1270)
!1273 = !DILocation(line: 453, column: 49, scope: !1270)
!1274 = !DILocation(line: 453, column: 8, scope: !1271)
!1275 = !DILocation(line: 455, column: 11, scope: !1276)
!1276 = distinct !DILexicalBlock(scope: !1270, file: !3, line: 454, column: 3)
!1277 = !DILocation(line: 456, column: 4, scope: !1276)
!1278 = !DILocation(line: 458, column: 36, scope: !1271)
!1279 = !DILocation(line: 458, column: 29, scope: !1271)
!1280 = !DILocation(line: 458, column: 17, scope: !1271)
!1281 = !DILocation(line: 459, column: 7, scope: !1282)
!1282 = distinct !DILexicalBlock(scope: !1271, file: !3, line: 459, column: 7)
!1283 = !DILocation(line: 459, column: 21, scope: !1282)
!1284 = !DILocation(line: 459, column: 7, scope: !1271)
!1285 = !DILocation(line: 460, column: 11, scope: !1286)
!1286 = distinct !DILexicalBlock(scope: !1282, file: !3, line: 459, column: 30)
!1287 = !DILocation(line: 461, column: 4, scope: !1286)
!1288 = !DILocation(line: 464, column: 16, scope: !1289)
!1289 = distinct !DILexicalBlock(scope: !1271, file: !3, line: 464, column: 7)
!1290 = !DILocation(line: 464, column: 31, scope: !1289)
!1291 = !DILocation(line: 464, column: 47, scope: !1289)
!1292 = !DILocation(line: 464, column: 63, scope: !1289)
!1293 = !DILocation(line: 464, column: 7, scope: !1289)
!1294 = !DILocation(line: 464, column: 7, scope: !1271)
!1295 = !DILocation(line: 465, column: 11, scope: !1296)
!1296 = distinct !DILexicalBlock(scope: !1289, file: !3, line: 464, column: 80)
!1297 = !DILocation(line: 466, column: 4, scope: !1296)
!1298 = !DILocation(line: 469, column: 2, scope: !1271)
!1299 = !DILocation(line: 470, column: 6, scope: !1300)
!1300 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 470, column: 6)
!1301 = !DILocation(line: 470, column: 23, scope: !1300)
!1302 = !DILocation(line: 470, column: 31, scope: !1300)
!1303 = !DILocation(line: 470, column: 34, scope: !1300)
!1304 = !DILocation(line: 470, column: 51, scope: !1300)
!1305 = !DILocation(line: 470, column: 6, scope: !1211)
!1306 = !DILocation(line: 471, column: 53, scope: !1307)
!1307 = distinct !DILexicalBlock(scope: !1308, file: !3, line: 471, column: 7)
!1308 = distinct !DILexicalBlock(scope: !1300, file: !3, line: 470, column: 57)
!1309 = !DILocation(line: 471, column: 46, scope: !1307)
!1310 = !DILocation(line: 471, column: 26, scope: !1307)
!1311 = !DILocation(line: 471, column: 24, scope: !1307)
!1312 = !DILocation(line: 471, column: 72, scope: !1307)
!1313 = !DILocation(line: 471, column: 7, scope: !1308)
!1314 = !DILocation(line: 472, column: 11, scope: !1315)
!1315 = distinct !DILexicalBlock(scope: !1307, file: !3, line: 471, column: 81)
!1316 = !DILocation(line: 473, column: 4, scope: !1315)
!1317 = !DILocation(line: 476, column: 17, scope: !1308)
!1318 = !DILocation(line: 476, column: 3, scope: !1308)
!1319 = !DILocation(line: 476, column: 37, scope: !1308)
!1320 = !DILocation(line: 477, column: 2, scope: !1308)
!1321 = !DILocation(line: 479, column: 23, scope: !1211)
!1322 = !DILocation(line: 479, column: 38, scope: !1211)
!1323 = !DILocation(line: 479, column: 58, scope: !1211)
!1324 = !DILocation(line: 479, column: 75, scope: !1211)
!1325 = !DILocation(line: 479, column: 18, scope: !1211)
!1326 = !DILocation(line: 479, column: 2, scope: !1211)
!1327 = !DILocation(line: 479, column: 6, scope: !1211)
!1328 = !DILocation(line: 479, column: 16, scope: !1211)
!1329 = !DILocation(line: 480, column: 6, scope: !1330)
!1330 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 480, column: 6)
!1331 = !DILocation(line: 480, column: 6, scope: !1211)
!1332 = !DILocation(line: 481, column: 16, scope: !1333)
!1333 = distinct !DILexicalBlock(scope: !1334, file: !3, line: 481, column: 7)
!1334 = distinct !DILexicalBlock(scope: !1330, file: !3, line: 480, column: 23)
!1335 = !DILocation(line: 481, column: 34, scope: !1333)
!1336 = !DILocation(line: 481, column: 52, scope: !1333)
!1337 = !DILocation(line: 481, column: 69, scope: !1333)
!1338 = !DILocation(line: 481, column: 7, scope: !1333)
!1339 = !DILocation(line: 481, column: 7, scope: !1334)
!1340 = !DILocation(line: 482, column: 11, scope: !1341)
!1341 = distinct !DILexicalBlock(scope: !1333, file: !3, line: 481, column: 88)
!1342 = !DILocation(line: 483, column: 4, scope: !1341)
!1343 = !DILocation(line: 485, column: 2, scope: !1334)
!1344 = !DILabel(scope: !1211, name: "err", file: !3, line: 487)
!1345 = !DILocation(line: 487, column: 1, scope: !1211)
!1346 = !DILocation(line: 488, column: 6, scope: !1347)
!1347 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 488, column: 6)
!1348 = !DILocation(line: 488, column: 6, scope: !1211)
!1349 = !DILocation(line: 488, column: 26, scope: !1347)
!1350 = !DILocation(line: 488, column: 21, scope: !1347)
!1351 = !DILocation(line: 489, column: 6, scope: !1352)
!1352 = distinct !DILexicalBlock(scope: !1211, file: !3, line: 489, column: 6)
!1353 = !DILocation(line: 489, column: 6, scope: !1211)
!1354 = !DILocation(line: 489, column: 28, scope: !1352)
!1355 = !DILocation(line: 489, column: 23, scope: !1352)
!1356 = !DILocation(line: 490, column: 9, scope: !1211)
!1357 = !DILocation(line: 490, column: 2, scope: !1211)
!1358 = !DILocation(line: 491, column: 1, scope: !1211)
!1359 = distinct !DISubprogram(name: "sgx_unseal", scope: !3, file: !3, line: 493, type: !525, scopeLine: 494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !370)
!1360 = !DILocalVariable(name: "pms", arg: 1, scope: !1359, file: !3, line: 493, type: !82)
!1361 = !DILocation(line: 493, column: 48, scope: !1359)
!1362 = !DILocation(line: 495, column: 2, scope: !1359)
!1363 = !DILocation(line: 495, column: 2, scope: !1364)
!1364 = distinct !DILexicalBlock(scope: !1365, file: !3, line: 495, column: 2)
!1365 = distinct !DILexicalBlock(scope: !1359, file: !3, line: 495, column: 2)
!1366 = !DILocation(line: 495, column: 2, scope: !1365)
!1367 = !DILocation(line: 499, column: 2, scope: !1359)
!1368 = !DILocalVariable(name: "ms", scope: !1359, file: !3, line: 500, type: !226)
!1369 = !DILocation(line: 500, column: 15, scope: !1359)
!1370 = !DILocation(line: 500, column: 20, scope: !1359)
!1371 = !DILocalVariable(name: "status", scope: !1359, file: !3, line: 501, type: !147)
!1372 = !DILocation(line: 501, column: 15, scope: !1359)
!1373 = !DILocalVariable(name: "_tmp_sealed_data", scope: !1359, file: !3, line: 502, type: !156)
!1374 = !DILocation(line: 502, column: 21, scope: !1359)
!1375 = !DILocation(line: 502, column: 40, scope: !1359)
!1376 = !DILocation(line: 502, column: 44, scope: !1359)
!1377 = !DILocalVariable(name: "_tmp_sealed_size", scope: !1359, file: !3, line: 503, type: !91)
!1378 = !DILocation(line: 503, column: 9, scope: !1359)
!1379 = !DILocation(line: 503, column: 28, scope: !1359)
!1380 = !DILocation(line: 503, column: 32, scope: !1359)
!1381 = !DILocalVariable(name: "_len_sealed_data", scope: !1359, file: !3, line: 504, type: !91)
!1382 = !DILocation(line: 504, column: 9, scope: !1359)
!1383 = !DILocation(line: 504, column: 28, scope: !1359)
!1384 = !DILocalVariable(name: "_in_sealed_data", scope: !1359, file: !3, line: 505, type: !156)
!1385 = !DILocation(line: 505, column: 21, scope: !1359)
!1386 = !DILocalVariable(name: "_tmp_plaintext", scope: !1359, file: !3, line: 506, type: !149)
!1387 = !DILocation(line: 506, column: 11, scope: !1359)
!1388 = !DILocation(line: 506, column: 28, scope: !1359)
!1389 = !DILocation(line: 506, column: 32, scope: !1359)
!1390 = !DILocalVariable(name: "_tmp_plaintext_len", scope: !1359, file: !3, line: 507, type: !201)
!1391 = !DILocation(line: 507, column: 11, scope: !1359)
!1392 = !DILocation(line: 507, column: 32, scope: !1359)
!1393 = !DILocation(line: 507, column: 36, scope: !1359)
!1394 = !DILocalVariable(name: "_len_plaintext", scope: !1359, file: !3, line: 508, type: !91)
!1395 = !DILocation(line: 508, column: 9, scope: !1359)
!1396 = !DILocation(line: 508, column: 26, scope: !1359)
!1397 = !DILocalVariable(name: "_in_plaintext", scope: !1359, file: !3, line: 509, type: !149)
!1398 = !DILocation(line: 509, column: 11, scope: !1359)
!1399 = !DILocation(line: 511, column: 2, scope: !1359)
!1400 = !DILocation(line: 511, column: 2, scope: !1401)
!1401 = distinct !DILexicalBlock(scope: !1402, file: !3, line: 511, column: 2)
!1402 = distinct !DILexicalBlock(scope: !1359, file: !3, line: 511, column: 2)
!1403 = !DILocation(line: 511, column: 2, scope: !1402)
!1404 = !DILocation(line: 512, column: 2, scope: !1359)
!1405 = !DILocation(line: 512, column: 2, scope: !1406)
!1406 = distinct !DILexicalBlock(scope: !1407, file: !3, line: 512, column: 2)
!1407 = distinct !DILexicalBlock(scope: !1359, file: !3, line: 512, column: 2)
!1408 = !DILocation(line: 512, column: 2, scope: !1407)
!1409 = !DILocation(line: 517, column: 2, scope: !1359)
!1410 = !DILocation(line: 519, column: 6, scope: !1411)
!1411 = distinct !DILexicalBlock(scope: !1359, file: !3, line: 519, column: 6)
!1412 = !DILocation(line: 519, column: 23, scope: !1411)
!1413 = !DILocation(line: 519, column: 31, scope: !1411)
!1414 = !DILocation(line: 519, column: 34, scope: !1411)
!1415 = !DILocation(line: 519, column: 51, scope: !1411)
!1416 = !DILocation(line: 519, column: 6, scope: !1359)
!1417 = !DILocation(line: 520, column: 48, scope: !1418)
!1418 = distinct !DILexicalBlock(scope: !1411, file: !3, line: 519, column: 57)
!1419 = !DILocation(line: 520, column: 41, scope: !1418)
!1420 = !DILocation(line: 520, column: 21, scope: !1418)
!1421 = !DILocation(line: 520, column: 19, scope: !1418)
!1422 = !DILocation(line: 521, column: 7, scope: !1423)
!1423 = distinct !DILexicalBlock(scope: !1418, file: !3, line: 521, column: 7)
!1424 = !DILocation(line: 521, column: 23, scope: !1423)
!1425 = !DILocation(line: 521, column: 7, scope: !1418)
!1426 = !DILocation(line: 522, column: 11, scope: !1427)
!1427 = distinct !DILexicalBlock(scope: !1423, file: !3, line: 521, column: 32)
!1428 = !DILocation(line: 523, column: 4, scope: !1427)
!1429 = !DILocation(line: 526, column: 16, scope: !1430)
!1430 = distinct !DILexicalBlock(scope: !1418, file: !3, line: 526, column: 7)
!1431 = !DILocation(line: 526, column: 33, scope: !1430)
!1432 = !DILocation(line: 526, column: 51, scope: !1430)
!1433 = !DILocation(line: 526, column: 69, scope: !1430)
!1434 = !DILocation(line: 526, column: 7, scope: !1430)
!1435 = !DILocation(line: 526, column: 7, scope: !1418)
!1436 = !DILocation(line: 527, column: 11, scope: !1437)
!1437 = distinct !DILexicalBlock(scope: !1430, file: !3, line: 526, column: 88)
!1438 = !DILocation(line: 528, column: 4, scope: !1437)
!1439 = !DILocation(line: 531, column: 2, scope: !1418)
!1440 = !DILocation(line: 532, column: 6, scope: !1441)
!1441 = distinct !DILexicalBlock(scope: !1359, file: !3, line: 532, column: 6)
!1442 = !DILocation(line: 532, column: 21, scope: !1441)
!1443 = !DILocation(line: 532, column: 29, scope: !1441)
!1444 = !DILocation(line: 532, column: 32, scope: !1441)
!1445 = !DILocation(line: 532, column: 47, scope: !1441)
!1446 = !DILocation(line: 532, column: 6, scope: !1359)
!1447 = !DILocation(line: 533, column: 8, scope: !1448)
!1448 = distinct !DILexicalBlock(scope: !1449, file: !3, line: 533, column: 8)
!1449 = distinct !DILexicalBlock(scope: !1441, file: !3, line: 532, column: 53)
!1450 = !DILocation(line: 533, column: 23, scope: !1448)
!1451 = !DILocation(line: 533, column: 49, scope: !1448)
!1452 = !DILocation(line: 533, column: 8, scope: !1449)
!1453 = !DILocation(line: 535, column: 11, scope: !1454)
!1454 = distinct !DILexicalBlock(scope: !1448, file: !3, line: 534, column: 3)
!1455 = !DILocation(line: 536, column: 4, scope: !1454)
!1456 = !DILocation(line: 538, column: 41, scope: !1457)
!1457 = distinct !DILexicalBlock(scope: !1449, file: !3, line: 538, column: 7)
!1458 = !DILocation(line: 538, column: 34, scope: !1457)
!1459 = !DILocation(line: 538, column: 22, scope: !1457)
!1460 = !DILocation(line: 538, column: 58, scope: !1457)
!1461 = !DILocation(line: 538, column: 7, scope: !1449)
!1462 = !DILocation(line: 539, column: 11, scope: !1463)
!1463 = distinct !DILexicalBlock(scope: !1457, file: !3, line: 538, column: 67)
!1464 = !DILocation(line: 540, column: 4, scope: !1463)
!1465 = !DILocation(line: 543, column: 17, scope: !1449)
!1466 = !DILocation(line: 543, column: 35, scope: !1449)
!1467 = !DILocation(line: 543, column: 3, scope: !1449)
!1468 = !DILocation(line: 544, column: 2, scope: !1449)
!1469 = !DILocation(line: 546, column: 25, scope: !1359)
!1470 = !DILocation(line: 546, column: 42, scope: !1359)
!1471 = !DILocation(line: 546, column: 60, scope: !1359)
!1472 = !DILocation(line: 546, column: 75, scope: !1359)
!1473 = !DILocation(line: 546, column: 18, scope: !1359)
!1474 = !DILocation(line: 546, column: 2, scope: !1359)
!1475 = !DILocation(line: 546, column: 6, scope: !1359)
!1476 = !DILocation(line: 546, column: 16, scope: !1359)
!1477 = !DILocation(line: 547, column: 6, scope: !1478)
!1478 = distinct !DILexicalBlock(scope: !1359, file: !3, line: 547, column: 6)
!1479 = !DILocation(line: 547, column: 6, scope: !1359)
!1480 = !DILocation(line: 548, column: 16, scope: !1481)
!1481 = distinct !DILexicalBlock(scope: !1482, file: !3, line: 548, column: 7)
!1482 = distinct !DILexicalBlock(scope: !1478, file: !3, line: 547, column: 21)
!1483 = !DILocation(line: 548, column: 32, scope: !1481)
!1484 = !DILocation(line: 548, column: 48, scope: !1481)
!1485 = !DILocation(line: 548, column: 63, scope: !1481)
!1486 = !DILocation(line: 548, column: 7, scope: !1481)
!1487 = !DILocation(line: 548, column: 7, scope: !1482)
!1488 = !DILocation(line: 549, column: 11, scope: !1489)
!1489 = distinct !DILexicalBlock(scope: !1481, file: !3, line: 548, column: 80)
!1490 = !DILocation(line: 550, column: 4, scope: !1489)
!1491 = !DILocation(line: 552, column: 2, scope: !1482)
!1492 = !DILabel(scope: !1359, name: "err", file: !3, line: 554)
!1493 = !DILocation(line: 554, column: 1, scope: !1359)
!1494 = !DILocation(line: 555, column: 6, scope: !1495)
!1495 = distinct !DILexicalBlock(scope: !1359, file: !3, line: 555, column: 6)
!1496 = !DILocation(line: 555, column: 6, scope: !1359)
!1497 = !DILocation(line: 555, column: 28, scope: !1495)
!1498 = !DILocation(line: 555, column: 23, scope: !1495)
!1499 = !DILocation(line: 556, column: 6, scope: !1500)
!1500 = distinct !DILexicalBlock(scope: !1359, file: !3, line: 556, column: 6)
!1501 = !DILocation(line: 556, column: 6, scope: !1359)
!1502 = !DILocation(line: 556, column: 26, scope: !1500)
!1503 = !DILocation(line: 556, column: 21, scope: !1500)
!1504 = !DILocation(line: 557, column: 9, scope: !1359)
!1505 = !DILocation(line: 557, column: 2, scope: !1359)
!1506 = !DILocation(line: 558, column: 1, scope: !1359)
!1507 = distinct !DISubprogram(name: "ocall_print", scope: !3, file: !3, line: 588, type: !1508, scopeLine: 589, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !370)
!1508 = !DISubroutineType(types: !1509)
!1509 = !{!147, !88}
!1510 = !DILocalVariable(name: "str", arg: 1, scope: !1507, file: !3, line: 588, type: !88)
!1511 = !DILocation(line: 588, column: 48, scope: !1507)
!1512 = !DILocalVariable(name: "status", scope: !1507, file: !3, line: 590, type: !147)
!1513 = !DILocation(line: 590, column: 15, scope: !1507)
!1514 = !DILocalVariable(name: "_len_str", scope: !1507, file: !3, line: 591, type: !91)
!1515 = !DILocation(line: 591, column: 9, scope: !1507)
!1516 = !DILocation(line: 591, column: 20, scope: !1507)
!1517 = !DILocation(line: 591, column: 33, scope: !1507)
!1518 = !DILocation(line: 591, column: 26, scope: !1507)
!1519 = !DILocation(line: 591, column: 38, scope: !1507)
!1520 = !DILocalVariable(name: "ms", scope: !1507, file: !3, line: 593, type: !83)
!1521 = !DILocation(line: 593, column: 20, scope: !1507)
!1522 = !DILocalVariable(name: "ocalloc_size", scope: !1507, file: !3, line: 594, type: !91)
!1523 = !DILocation(line: 594, column: 9, scope: !1507)
!1524 = !DILocalVariable(name: "__tmp", scope: !1507, file: !3, line: 595, type: !82)
!1525 = !DILocation(line: 595, column: 8, scope: !1507)
!1526 = !DILocation(line: 598, column: 2, scope: !1507)
!1527 = !DILocation(line: 598, column: 2, scope: !1528)
!1528 = distinct !DILexicalBlock(scope: !1529, file: !3, line: 598, column: 2)
!1529 = distinct !DILexicalBlock(scope: !1507, file: !3, line: 598, column: 2)
!1530 = !DILocation(line: 598, column: 2, scope: !1529)
!1531 = !DILocation(line: 600, column: 6, scope: !1532)
!1532 = distinct !DILexicalBlock(scope: !1507, file: !3, line: 600, column: 6)
!1533 = !DILocation(line: 600, column: 6, scope: !1507)
!1534 = !DILocation(line: 601, column: 3, scope: !1532)
!1535 = !DILocation(line: 603, column: 22, scope: !1507)
!1536 = !DILocation(line: 603, column: 10, scope: !1507)
!1537 = !DILocation(line: 603, column: 8, scope: !1507)
!1538 = !DILocation(line: 604, column: 6, scope: !1539)
!1539 = distinct !DILexicalBlock(scope: !1507, file: !3, line: 604, column: 6)
!1540 = !DILocation(line: 604, column: 12, scope: !1539)
!1541 = !DILocation(line: 604, column: 6, scope: !1507)
!1542 = !DILocation(line: 605, column: 3, scope: !1543)
!1543 = distinct !DILexicalBlock(scope: !1539, file: !3, line: 604, column: 21)
!1544 = !DILocation(line: 606, column: 3, scope: !1543)
!1545 = !DILocation(line: 608, column: 26, scope: !1507)
!1546 = !DILocation(line: 608, column: 7, scope: !1507)
!1547 = !DILocation(line: 608, column: 5, scope: !1507)
!1548 = !DILocation(line: 609, column: 27, scope: !1507)
!1549 = !DILocation(line: 609, column: 19, scope: !1507)
!1550 = !DILocation(line: 609, column: 33, scope: !1507)
!1551 = !DILocation(line: 609, column: 10, scope: !1507)
!1552 = !DILocation(line: 609, column: 8, scope: !1507)
!1553 = !DILocation(line: 610, column: 15, scope: !1507)
!1554 = !DILocation(line: 612, column: 6, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1507, file: !3, line: 612, column: 6)
!1556 = !DILocation(line: 612, column: 10, scope: !1555)
!1557 = !DILocation(line: 612, column: 6, scope: !1507)
!1558 = !DILocation(line: 613, column: 29, scope: !1559)
!1559 = distinct !DILexicalBlock(scope: !1555, file: !3, line: 612, column: 19)
!1560 = !DILocation(line: 613, column: 3, scope: !1559)
!1561 = !DILocation(line: 613, column: 7, scope: !1559)
!1562 = !DILocation(line: 613, column: 14, scope: !1559)
!1563 = !DILocation(line: 614, column: 7, scope: !1564)
!1564 = distinct !DILexicalBlock(scope: !1559, file: !3, line: 614, column: 7)
!1565 = !DILocation(line: 614, column: 16, scope: !1564)
!1566 = !DILocation(line: 614, column: 31, scope: !1564)
!1567 = !DILocation(line: 614, column: 7, scope: !1559)
!1568 = !DILocation(line: 615, column: 4, scope: !1569)
!1569 = distinct !DILexicalBlock(scope: !1564, file: !3, line: 614, column: 37)
!1570 = !DILocation(line: 616, column: 4, scope: !1569)
!1571 = !DILocation(line: 618, column: 16, scope: !1572)
!1572 = distinct !DILexicalBlock(scope: !1559, file: !3, line: 618, column: 7)
!1573 = !DILocation(line: 618, column: 23, scope: !1572)
!1574 = !DILocation(line: 618, column: 37, scope: !1572)
!1575 = !DILocation(line: 618, column: 42, scope: !1572)
!1576 = !DILocation(line: 618, column: 7, scope: !1572)
!1577 = !DILocation(line: 618, column: 7, scope: !1559)
!1578 = !DILocation(line: 619, column: 4, scope: !1579)
!1579 = distinct !DILexicalBlock(scope: !1572, file: !3, line: 618, column: 53)
!1580 = !DILocation(line: 620, column: 4, scope: !1579)
!1581 = !DILocation(line: 622, column: 28, scope: !1559)
!1582 = !DILocation(line: 622, column: 20, scope: !1559)
!1583 = !DILocation(line: 622, column: 36, scope: !1559)
!1584 = !DILocation(line: 622, column: 34, scope: !1559)
!1585 = !DILocation(line: 622, column: 11, scope: !1559)
!1586 = !DILocation(line: 622, column: 9, scope: !1559)
!1587 = !DILocation(line: 623, column: 19, scope: !1559)
!1588 = !DILocation(line: 623, column: 16, scope: !1559)
!1589 = !DILocation(line: 624, column: 2, scope: !1559)
!1590 = !DILocation(line: 625, column: 3, scope: !1591)
!1591 = distinct !DILexicalBlock(scope: !1555, file: !3, line: 624, column: 9)
!1592 = !DILocation(line: 625, column: 7, scope: !1591)
!1593 = !DILocation(line: 625, column: 14, scope: !1591)
!1594 = !DILocation(line: 628, column: 24, scope: !1507)
!1595 = !DILocation(line: 628, column: 11, scope: !1507)
!1596 = !DILocation(line: 628, column: 9, scope: !1507)
!1597 = !DILocation(line: 630, column: 6, scope: !1598)
!1598 = distinct !DILexicalBlock(scope: !1507, file: !3, line: 630, column: 6)
!1599 = !DILocation(line: 630, column: 13, scope: !1598)
!1600 = !DILocation(line: 630, column: 6, scope: !1507)
!1601 = !DILocation(line: 631, column: 2, scope: !1602)
!1602 = distinct !DILexicalBlock(scope: !1598, file: !3, line: 630, column: 29)
!1603 = !DILocation(line: 632, column: 2, scope: !1507)
!1604 = !DILocation(line: 633, column: 9, scope: !1507)
!1605 = !DILocation(line: 633, column: 2, scope: !1507)
!1606 = !DILocation(line: 634, column: 1, scope: !1507)
!1607 = distinct !DISubprogram(linkageName: "_GLOBAL__sub_I_Enclave.cpp", scope: !262, file: !262, type: !1608, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1608 = !DISubroutineType(types: !370)
!1609 = !DILocation(line: 0, scope: !1607)
!1610 = distinct !DISubprogram(name: "__cxx_global_var_init", scope: !262, file: !262, type: !1611, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1611 = !DISubroutineType(types: !1612)
!1612 = !{null}
!1613 = !DILocation(line: 23, column: 42, scope: !1610)
!1614 = !DILocation(line: 23, column: 26, scope: !1610)
!1615 = !DILocation(line: 0, scope: !1610)
!1616 = !DILocation(line: 23, column: 49, scope: !1610)
!1617 = distinct !DISubprogram(name: "__cxx_global_var_init.1", scope: !262, file: !262, type: !1611, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1618 = !DILocation(line: 24, column: 28, scope: !1617)
!1619 = !DILocation(line: 0, scope: !1617)
!1620 = distinct !DISubprogram(name: "encrypt", linkageName: "_Z7encryptPc", scope: !262, file: !262, line: 26, type: !1621, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1621 = !DISubroutineType(types: !1622)
!1622 = !{null, !103}
!1623 = !DILocalVariable(name: "str", arg: 1, scope: !1620, file: !262, line: 26, type: !103)
!1624 = !DILocation(line: 26, column: 20, scope: !1620)
!1625 = !DILocation(line: 27, column: 2, scope: !1620)
!1626 = !DILocation(line: 27, column: 10, scope: !1620)
!1627 = !DILocation(line: 27, column: 9, scope: !1620)
!1628 = !DILocation(line: 27, column: 14, scope: !1620)
!1629 = !DILocation(line: 28, column: 11, scope: !1630)
!1630 = distinct !DILexicalBlock(scope: !1620, file: !262, line: 27, column: 23)
!1631 = !DILocation(line: 28, column: 10, scope: !1630)
!1632 = !DILocation(line: 28, column: 15, scope: !1630)
!1633 = !DILocation(line: 28, column: 4, scope: !1630)
!1634 = !DILocation(line: 28, column: 8, scope: !1630)
!1635 = !DILocation(line: 29, column: 6, scope: !1630)
!1636 = distinct !{!1636, !1625, !1637}
!1637 = !DILocation(line: 30, column: 2, scope: !1620)
!1638 = !DILocation(line: 31, column: 1, scope: !1620)
!1639 = distinct !DISubprogram(name: "decrypt", linkageName: "_Z7decryptPc", scope: !262, file: !262, line: 33, type: !1621, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1640 = !DILocalVariable(name: "str", arg: 1, scope: !1639, file: !262, line: 33, type: !103)
!1641 = !DILocation(line: 33, column: 20, scope: !1639)
!1642 = !DILocation(line: 34, column: 2, scope: !1639)
!1643 = !DILocation(line: 34, column: 10, scope: !1639)
!1644 = !DILocation(line: 34, column: 9, scope: !1639)
!1645 = !DILocation(line: 34, column: 14, scope: !1639)
!1646 = !DILocation(line: 35, column: 11, scope: !1647)
!1647 = distinct !DILexicalBlock(scope: !1639, file: !262, line: 34, column: 23)
!1648 = !DILocation(line: 35, column: 10, scope: !1647)
!1649 = !DILocation(line: 35, column: 15, scope: !1647)
!1650 = !DILocation(line: 35, column: 4, scope: !1647)
!1651 = !DILocation(line: 35, column: 8, scope: !1647)
!1652 = !DILocation(line: 36, column: 6, scope: !1647)
!1653 = distinct !{!1653, !1642, !1654}
!1654 = !DILocation(line: 37, column: 2, scope: !1639)
!1655 = !DILocation(line: 38, column: 1, scope: !1639)
!1656 = distinct !DISubprogram(name: "create_keystore", scope: !262, file: !262, line: 40, type: !1657, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1657 = !DISubroutineType(types: !1658)
!1658 = !{!101, !103}
!1659 = !DILocalVariable(name: "main_password", arg: 1, scope: !1656, file: !262, line: 40, type: !103)
!1660 = !DILocation(line: 40, column: 27, scope: !1656)
!1661 = !DILocalVariable(name: "password_len", scope: !1656, file: !262, line: 41, type: !91)
!1662 = !DILocation(line: 41, column: 9, scope: !1656)
!1663 = !DILocation(line: 41, column: 31, scope: !1656)
!1664 = !DILocation(line: 41, column: 24, scope: !1656)
!1665 = !DILocation(line: 42, column: 43, scope: !1656)
!1666 = !DILocation(line: 42, column: 41, scope: !1656)
!1667 = !DILocation(line: 42, column: 56, scope: !1656)
!1668 = !DILocation(line: 42, column: 21, scope: !1656)
!1669 = !DILocation(line: 42, column: 11, scope: !1656)
!1670 = !DILocation(line: 43, column: 6, scope: !1671)
!1671 = distinct !DILexicalBlock(scope: !1656, file: !262, line: 43, column: 6)
!1672 = !DILocation(line: 43, column: 15, scope: !1671)
!1673 = !DILocation(line: 43, column: 6, scope: !1656)
!1674 = !DILocation(line: 44, column: 3, scope: !1675)
!1675 = distinct !DILexicalBlock(scope: !1671, file: !262, line: 43, column: 24)
!1676 = !DILocation(line: 46, column: 10, scope: !1656)
!1677 = !DILocation(line: 46, column: 20, scope: !1656)
!1678 = !DILocation(line: 46, column: 35, scope: !1656)
!1679 = !DILocation(line: 46, column: 2, scope: !1656)
!1680 = !DILocation(line: 47, column: 2, scope: !1656)
!1681 = !DILocation(line: 47, column: 12, scope: !1656)
!1682 = !DILocation(line: 47, column: 16, scope: !1656)
!1683 = !DILocation(line: 48, column: 2, scope: !1656)
!1684 = distinct !DISubprogram(name: "add_password", scope: !262, file: !262, line: 53, type: !1685, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1685 = !DISubroutineType(types: !1686)
!1686 = !{!101, !103, !103}
!1687 = !DILocalVariable(name: "website", arg: 1, scope: !1684, file: !262, line: 53, type: !103)
!1688 = !DILocation(line: 53, column: 24, scope: !1684)
!1689 = !DILocalVariable(name: "password", arg: 2, scope: !1684, file: !262, line: 53, type: !103)
!1690 = !DILocation(line: 53, column: 39, scope: !1684)
!1691 = !DILocalVariable(name: "password_len", scope: !1684, file: !262, line: 54, type: !91)
!1692 = !DILocation(line: 54, column: 9, scope: !1684)
!1693 = !DILocation(line: 54, column: 31, scope: !1684)
!1694 = !DILocation(line: 54, column: 24, scope: !1684)
!1695 = !DILocalVariable(name: "website_len", scope: !1684, file: !262, line: 55, type: !91)
!1696 = !DILocation(line: 55, column: 9, scope: !1684)
!1697 = !DILocation(line: 55, column: 30, scope: !1684)
!1698 = !DILocation(line: 55, column: 23, scope: !1684)
!1699 = !DILocation(line: 56, column: 9, scope: !1700)
!1700 = distinct !DILexicalBlock(scope: !1684, file: !262, line: 56, column: 9)
!1701 = !DILocation(line: 56, column: 22, scope: !1700)
!1702 = !DILocation(line: 56, column: 43, scope: !1700)
!1703 = !DILocation(line: 56, column: 46, scope: !1700)
!1704 = !DILocation(line: 56, column: 58, scope: !1700)
!1705 = !DILocation(line: 56, column: 9, scope: !1684)
!1706 = !DILocation(line: 58, column: 9, scope: !1707)
!1707 = distinct !DILexicalBlock(scope: !1700, file: !262, line: 56, column: 80)
!1708 = !DILocation(line: 60, column: 58, scope: !1684)
!1709 = !DILocation(line: 60, column: 56, scope: !1684)
!1710 = !DILocation(line: 60, column: 71, scope: !1684)
!1711 = !DILocation(line: 60, column: 36, scope: !1684)
!1712 = !DILocation(line: 60, column: 5, scope: !1684)
!1713 = !DILocation(line: 60, column: 17, scope: !1684)
!1714 = !DILocation(line: 60, column: 26, scope: !1684)
!1715 = !DILocation(line: 61, column: 57, scope: !1684)
!1716 = !DILocation(line: 61, column: 55, scope: !1684)
!1717 = !DILocation(line: 61, column: 69, scope: !1684)
!1718 = !DILocation(line: 61, column: 35, scope: !1684)
!1719 = !DILocation(line: 61, column: 5, scope: !1684)
!1720 = !DILocation(line: 61, column: 17, scope: !1684)
!1721 = !DILocation(line: 61, column: 25, scope: !1684)
!1722 = !DILocation(line: 62, column: 9, scope: !1723)
!1723 = distinct !DILexicalBlock(scope: !1684, file: !262, line: 62, column: 9)
!1724 = !DILocation(line: 62, column: 21, scope: !1723)
!1725 = !DILocation(line: 62, column: 30, scope: !1723)
!1726 = !DILocation(line: 62, column: 9, scope: !1684)
!1727 = !DILocation(line: 63, column: 6, scope: !1728)
!1728 = distinct !DILexicalBlock(scope: !1723, file: !262, line: 62, column: 39)
!1729 = !DILocation(line: 65, column: 13, scope: !1684)
!1730 = !DILocation(line: 65, column: 25, scope: !1684)
!1731 = !DILocation(line: 65, column: 35, scope: !1684)
!1732 = !DILocation(line: 65, column: 45, scope: !1684)
!1733 = !DILocation(line: 65, column: 5, scope: !1684)
!1734 = !DILocation(line: 66, column: 13, scope: !1684)
!1735 = !DILocation(line: 66, column: 25, scope: !1684)
!1736 = !DILocation(line: 66, column: 34, scope: !1684)
!1737 = !DILocation(line: 66, column: 43, scope: !1684)
!1738 = !DILocation(line: 66, column: 5, scope: !1684)
!1739 = !DILocalVariable(name: "newKey", scope: !1684, file: !262, line: 68, type: !339)
!1740 = !DILocation(line: 68, column: 19, scope: !1684)
!1741 = !DILocation(line: 68, column: 44, scope: !1684)
!1742 = !DILocation(line: 68, column: 28, scope: !1684)
!1743 = !DILocation(line: 69, column: 24, scope: !1684)
!1744 = !DILocation(line: 69, column: 5, scope: !1684)
!1745 = !DILocation(line: 69, column: 17, scope: !1684)
!1746 = !DILocation(line: 69, column: 22, scope: !1684)
!1747 = !DILocation(line: 70, column: 18, scope: !1684)
!1748 = !DILocation(line: 70, column: 16, scope: !1684)
!1749 = !DILocation(line: 71, column: 5, scope: !1684)
!1750 = !DILocation(line: 71, column: 17, scope: !1684)
!1751 = !DILocation(line: 71, column: 22, scope: !1684)
!1752 = !DILocation(line: 72, column: 17, scope: !1684)
!1753 = !DILocation(line: 75, column: 5, scope: !1684)
!1754 = !DILocation(line: 77, column: 1, scope: !1684)
!1755 = distinct !DISubprogram(name: "get_password", scope: !262, file: !262, line: 79, type: !1756, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1756 = !DISubroutineType(types: !1757)
!1757 = !{!101, !103, !103, !103}
!1758 = !DILocalVariable(name: "website", arg: 1, scope: !1755, file: !262, line: 79, type: !103)
!1759 = !DILocation(line: 79, column: 24, scope: !1755)
!1760 = !DILocalVariable(name: "returnstr", arg: 2, scope: !1755, file: !262, line: 79, type: !103)
!1761 = !DILocation(line: 79, column: 39, scope: !1755)
!1762 = !DILocalVariable(name: "verification_password", arg: 3, scope: !1755, file: !262, line: 79, type: !103)
!1763 = !DILocation(line: 79, column: 56, scope: !1755)
!1764 = !DILocation(line: 80, column: 5, scope: !1755)
!1765 = !DILocalVariable(name: "website_len", scope: !1755, file: !262, line: 81, type: !91)
!1766 = !DILocation(line: 81, column: 12, scope: !1755)
!1767 = !DILocation(line: 81, column: 33, scope: !1755)
!1768 = !DILocation(line: 81, column: 26, scope: !1755)
!1769 = !DILocation(line: 83, column: 16, scope: !1770)
!1770 = distinct !DILexicalBlock(scope: !1755, file: !262, line: 83, column: 9)
!1771 = !DILocation(line: 83, column: 39, scope: !1770)
!1772 = !DILocation(line: 83, column: 9, scope: !1770)
!1773 = !DILocation(line: 83, column: 49, scope: !1770)
!1774 = !DILocation(line: 83, column: 9, scope: !1755)
!1775 = !DILocation(line: 84, column: 7, scope: !1776)
!1776 = distinct !DILexicalBlock(scope: !1770, file: !262, line: 83, column: 55)
!1777 = !DILocation(line: 84, column: 17, scope: !1776)
!1778 = !DILocation(line: 85, column: 6, scope: !1776)
!1779 = !DILocalVariable(name: "iterator", scope: !1755, file: !262, line: 88, type: !339)
!1780 = !DILocation(line: 88, column: 19, scope: !1755)
!1781 = !DILocation(line: 88, column: 30, scope: !1755)
!1782 = !DILocation(line: 89, column: 5, scope: !1755)
!1783 = !DILocation(line: 89, column: 12, scope: !1755)
!1784 = !DILocation(line: 89, column: 21, scope: !1755)
!1785 = !DILocation(line: 89, column: 29, scope: !1755)
!1786 = !DILocation(line: 89, column: 32, scope: !1755)
!1787 = !DILocation(line: 89, column: 42, scope: !1755)
!1788 = !DILocation(line: 89, column: 47, scope: !1755)
!1789 = !DILocation(line: 89, column: 55, scope: !1755)
!1790 = !DILocation(line: 89, column: 65, scope: !1755)
!1791 = !DILocation(line: 89, column: 74, scope: !1755)
!1792 = !DILocation(line: 89, column: 84, scope: !1755)
!1793 = !DILocation(line: 89, column: 58, scope: !1755)
!1794 = !DILocation(line: 89, column: 93, scope: !1755)
!1795 = !DILocation(line: 0, scope: !1755)
!1796 = !DILocation(line: 90, column: 17, scope: !1797)
!1797 = distinct !DILexicalBlock(scope: !1755, file: !262, line: 89, column: 99)
!1798 = !DILocation(line: 90, column: 27, scope: !1797)
!1799 = !DILocation(line: 90, column: 15, scope: !1797)
!1800 = distinct !{!1800, !1782, !1801}
!1801 = !DILocation(line: 94, column: 5, scope: !1755)
!1802 = !DILocation(line: 95, column: 9, scope: !1803)
!1803 = distinct !DILexicalBlock(scope: !1755, file: !262, line: 95, column: 9)
!1804 = !DILocation(line: 95, column: 18, scope: !1803)
!1805 = !DILocation(line: 95, column: 26, scope: !1803)
!1806 = !DILocation(line: 95, column: 29, scope: !1803)
!1807 = !DILocation(line: 95, column: 39, scope: !1803)
!1808 = !DILocation(line: 95, column: 44, scope: !1803)
!1809 = !DILocation(line: 95, column: 9, scope: !1755)
!1810 = !DILocation(line: 96, column: 7, scope: !1811)
!1811 = distinct !DILexicalBlock(scope: !1803, file: !262, line: 95, column: 53)
!1812 = !DILocation(line: 96, column: 17, scope: !1811)
!1813 = !DILocation(line: 97, column: 6, scope: !1811)
!1814 = !DILocation(line: 99, column: 13, scope: !1755)
!1815 = !DILocation(line: 99, column: 24, scope: !1755)
!1816 = !DILocation(line: 99, column: 34, scope: !1755)
!1817 = !DILocation(line: 99, column: 51, scope: !1755)
!1818 = !DILocation(line: 99, column: 61, scope: !1755)
!1819 = !DILocation(line: 99, column: 44, scope: !1755)
!1820 = !DILocation(line: 99, column: 5, scope: !1755)
!1821 = !DILocalVariable(name: "var", scope: !1755, file: !262, line: 101, type: !1822)
!1822 = !DICompositeType(tag: DW_TAG_array_type, baseType: !153, size: 24, elements: !1823)
!1823 = !{!1824}
!1824 = !DISubrange(count: 3)
!1825 = !DILocation(line: 101, column: 19, scope: !1755)
!1826 = !DILocation(line: 104, column: 19, scope: !1755)
!1827 = !DILocation(line: 104, column: 5, scope: !1755)
!1828 = !DILocalVariable(name: "passwd", scope: !1755, file: !262, line: 106, type: !345)
!1829 = !DILocation(line: 106, column: 20, scope: !1755)
!1830 = !DILocalVariable(name: "passwdlen", scope: !1755, file: !262, line: 107, type: !91)
!1831 = !DILocation(line: 107, column: 12, scope: !1755)
!1832 = !DILocalVariable(name: "salt", scope: !1755, file: !262, line: 108, type: !345)
!1833 = !DILocation(line: 108, column: 21, scope: !1755)
!1834 = !DILocalVariable(name: "saltlen", scope: !1755, file: !262, line: 109, type: !91)
!1835 = !DILocation(line: 109, column: 12, scope: !1755)
!1836 = !DILocalVariable(name: "buf", scope: !1755, file: !262, line: 110, type: !149)
!1837 = !DILocation(line: 110, column: 15, scope: !1755)
!1838 = !DILocation(line: 110, column: 33, scope: !1755)
!1839 = !DILocalVariable(name: "buflen", scope: !1755, file: !262, line: 111, type: !91)
!1840 = !DILocation(line: 111, column: 12, scope: !1755)
!1841 = !DILocalVariable(name: "N", scope: !1755, file: !262, line: 112, type: !188)
!1842 = !DILocation(line: 112, column: 14, scope: !1755)
!1843 = !DILocalVariable(name: "_r", scope: !1755, file: !262, line: 113, type: !201)
!1844 = !DILocation(line: 113, column: 14, scope: !1755)
!1845 = !DILocalVariable(name: "_p", scope: !1755, file: !262, line: 114, type: !201)
!1846 = !DILocation(line: 114, column: 14, scope: !1755)
!1847 = !DILocation(line: 117, column: 9, scope: !1848)
!1848 = distinct !DILexicalBlock(scope: !1755, file: !262, line: 117, column: 9)
!1849 = !DILocation(line: 117, column: 13, scope: !1848)
!1850 = !DILocation(line: 117, column: 9, scope: !1755)
!1851 = !DILocation(line: 118, column: 9, scope: !1852)
!1852 = distinct !DILexicalBlock(scope: !1848, file: !262, line: 117, column: 22)
!1853 = !DILocation(line: 119, column: 5, scope: !1852)
!1854 = !DILocation(line: 120, column: 23, scope: !1855)
!1855 = distinct !DILexicalBlock(scope: !1848, file: !262, line: 119, column: 12)
!1856 = !DILocation(line: 120, column: 31, scope: !1855)
!1857 = !DILocation(line: 120, column: 42, scope: !1855)
!1858 = !DILocation(line: 120, column: 48, scope: !1855)
!1859 = !DILocation(line: 120, column: 57, scope: !1855)
!1860 = !DILocation(line: 120, column: 60, scope: !1855)
!1861 = !DILocation(line: 120, column: 64, scope: !1855)
!1862 = !DILocation(line: 120, column: 68, scope: !1855)
!1863 = !DILocation(line: 120, column: 73, scope: !1855)
!1864 = !DILocation(line: 120, column: 9, scope: !1855)
!1865 = !DILocation(line: 125, column: 5, scope: !1755)
!1866 = !DILocation(line: 126, column: 1, scope: !1755)
!1867 = !DILocalVariable(name: "val", arg: 1, scope: !367, file: !262, line: 129, type: !101)
!1868 = !DILocation(line: 129, column: 16, scope: !367)
!1869 = !DILocalVariable(name: "base", arg: 2, scope: !367, file: !262, line: 129, type: !101)
!1870 = !DILocation(line: 129, column: 25, scope: !367)
!1871 = !DILocalVariable(name: "i", scope: !367, file: !262, line: 133, type: !101)
!1872 = !DILocation(line: 133, column: 6, scope: !367)
!1873 = !DILocation(line: 135, column: 2, scope: !367)
!1874 = !DILocation(line: 135, column: 8, scope: !1875)
!1875 = distinct !DILexicalBlock(scope: !1876, file: !262, line: 135, column: 2)
!1876 = distinct !DILexicalBlock(scope: !367, file: !262, line: 135, column: 2)
!1877 = !DILocation(line: 135, column: 12, scope: !1875)
!1878 = !DILocation(line: 135, column: 15, scope: !1875)
!1879 = !DILocation(line: 0, scope: !1875)
!1880 = !DILocation(line: 135, column: 2, scope: !1876)
!1881 = !DILocation(line: 137, column: 31, scope: !1875)
!1882 = !DILocation(line: 137, column: 37, scope: !1875)
!1883 = !DILocation(line: 137, column: 35, scope: !1875)
!1884 = !DILocation(line: 137, column: 12, scope: !1875)
!1885 = !DILocation(line: 137, column: 7, scope: !1875)
!1886 = !DILocation(line: 137, column: 3, scope: !1875)
!1887 = !DILocation(line: 137, column: 10, scope: !1875)
!1888 = !DILocation(line: 135, column: 19, scope: !1875)
!1889 = !DILocation(line: 135, column: 31, scope: !1875)
!1890 = !DILocation(line: 135, column: 28, scope: !1875)
!1891 = !DILocation(line: 135, column: 2, scope: !1875)
!1892 = distinct !{!1892, !1880, !1893}
!1893 = !DILocation(line: 137, column: 41, scope: !1876)
!1894 = !DILocation(line: 139, column: 14, scope: !367)
!1895 = !DILocation(line: 139, column: 15, scope: !367)
!1896 = !DILocation(line: 139, column: 10, scope: !367)
!1897 = !DILocation(line: 139, column: 2, scope: !367)
!1898 = distinct !DISubprogram(name: "string_integer_concat", linkageName: "_Z21string_integer_concatPci", scope: !262, file: !262, line: 143, type: !1899, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1899 = !DISubroutineType(types: !1900)
!1900 = !{!103, !103, !101}
!1901 = !DILocalVariable(name: "str", arg: 1, scope: !1898, file: !262, line: 143, type: !103)
!1902 = !DILocation(line: 143, column: 35, scope: !1898)
!1903 = !DILocalVariable(name: "a", arg: 2, scope: !1898, file: !262, line: 143, type: !101)
!1904 = !DILocation(line: 143, column: 44, scope: !1898)
!1905 = !DILocalVariable(name: "str2", scope: !1898, file: !262, line: 144, type: !103)
!1906 = !DILocation(line: 144, column: 8, scope: !1898)
!1907 = !DILocation(line: 144, column: 20, scope: !1898)
!1908 = !DILocation(line: 144, column: 15, scope: !1898)
!1909 = !DILocalVariable(name: "len1", scope: !1898, file: !262, line: 145, type: !101)
!1910 = !DILocation(line: 145, column: 6, scope: !1898)
!1911 = !DILocation(line: 145, column: 20, scope: !1898)
!1912 = !DILocation(line: 145, column: 13, scope: !1898)
!1913 = !DILocalVariable(name: "len2", scope: !1898, file: !262, line: 146, type: !101)
!1914 = !DILocation(line: 146, column: 6, scope: !1898)
!1915 = !DILocation(line: 146, column: 20, scope: !1898)
!1916 = !DILocation(line: 146, column: 13, scope: !1898)
!1917 = !DILocalVariable(name: "final", scope: !1898, file: !262, line: 147, type: !103)
!1918 = !DILocation(line: 147, column: 8, scope: !1898)
!1919 = !DILocation(line: 147, column: 31, scope: !1898)
!1920 = !DILocation(line: 147, column: 38, scope: !1898)
!1921 = !DILocation(line: 147, column: 36, scope: !1898)
!1922 = !DILocation(line: 147, column: 43, scope: !1898)
!1923 = !DILocation(line: 147, column: 24, scope: !1898)
!1924 = !DILocalVariable(name: "iterator", scope: !1898, file: !262, line: 148, type: !103)
!1925 = !DILocation(line: 148, column: 8, scope: !1898)
!1926 = !DILocation(line: 148, column: 19, scope: !1898)
!1927 = !DILocalVariable(name: "i", scope: !1928, file: !262, line: 151, type: !101)
!1928 = distinct !DILexicalBlock(scope: !1898, file: !262, line: 151, column: 2)
!1929 = !DILocation(line: 151, column: 11, scope: !1928)
!1930 = !DILocation(line: 151, column: 7, scope: !1928)
!1931 = !DILocation(line: 151, column: 18, scope: !1932)
!1932 = distinct !DILexicalBlock(scope: !1928, file: !262, line: 151, column: 2)
!1933 = !DILocation(line: 151, column: 22, scope: !1932)
!1934 = !DILocation(line: 151, column: 20, scope: !1932)
!1935 = !DILocation(line: 151, column: 2, scope: !1928)
!1936 = !DILocation(line: 152, column: 16, scope: !1937)
!1937 = distinct !DILexicalBlock(scope: !1932, file: !262, line: 151, column: 33)
!1938 = !DILocation(line: 152, column: 15, scope: !1937)
!1939 = !DILocation(line: 152, column: 4, scope: !1937)
!1940 = !DILocation(line: 152, column: 13, scope: !1937)
!1941 = !DILocation(line: 153, column: 11, scope: !1937)
!1942 = !DILocation(line: 154, column: 6, scope: !1937)
!1943 = !DILocation(line: 155, column: 2, scope: !1937)
!1944 = !DILocation(line: 151, column: 29, scope: !1932)
!1945 = !DILocation(line: 151, column: 2, scope: !1932)
!1946 = distinct !{!1946, !1935, !1947}
!1947 = !DILocation(line: 155, column: 2, scope: !1928)
!1948 = !DILocalVariable(name: "i", scope: !1949, file: !262, line: 156, type: !101)
!1949 = distinct !DILexicalBlock(scope: !1898, file: !262, line: 156, column: 2)
!1950 = !DILocation(line: 156, column: 11, scope: !1949)
!1951 = !DILocation(line: 156, column: 7, scope: !1949)
!1952 = !DILocation(line: 156, column: 18, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1949, file: !262, line: 156, column: 2)
!1954 = !DILocation(line: 156, column: 22, scope: !1953)
!1955 = !DILocation(line: 156, column: 20, scope: !1953)
!1956 = !DILocation(line: 156, column: 2, scope: !1949)
!1957 = !DILocation(line: 157, column: 16, scope: !1958)
!1958 = distinct !DILexicalBlock(scope: !1953, file: !262, line: 156, column: 33)
!1959 = !DILocation(line: 157, column: 15, scope: !1958)
!1960 = !DILocation(line: 157, column: 4, scope: !1958)
!1961 = !DILocation(line: 157, column: 13, scope: !1958)
!1962 = !DILocation(line: 158, column: 11, scope: !1958)
!1963 = !DILocation(line: 159, column: 7, scope: !1958)
!1964 = !DILocation(line: 160, column: 2, scope: !1958)
!1965 = !DILocation(line: 156, column: 29, scope: !1953)
!1966 = !DILocation(line: 156, column: 2, scope: !1953)
!1967 = distinct !{!1967, !1956, !1968}
!1968 = !DILocation(line: 160, column: 2, scope: !1949)
!1969 = !DILocation(line: 161, column: 3, scope: !1898)
!1970 = !DILocation(line: 161, column: 12, scope: !1898)
!1971 = !DILocation(line: 162, column: 9, scope: !1898)
!1972 = !DILocation(line: 162, column: 2, scope: !1898)
!1973 = distinct !DISubprogram(name: "dumb_mem_cpy", linkageName: "_Z12dumb_mem_cpyPvS_i", scope: !262, file: !262, line: 165, type: !1974, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!1974 = !DISubroutineType(types: !1975)
!1975 = !{null, !82, !82, !101}
!1976 = !DILocalVariable(name: "dst", arg: 1, scope: !1973, file: !262, line: 165, type: !82)
!1977 = !DILocation(line: 165, column: 25, scope: !1973)
!1978 = !DILocalVariable(name: "toCopy", arg: 2, scope: !1973, file: !262, line: 165, type: !82)
!1979 = !DILocation(line: 165, column: 36, scope: !1973)
!1980 = !DILocalVariable(name: "size", arg: 3, scope: !1973, file: !262, line: 165, type: !101)
!1981 = !DILocation(line: 165, column: 48, scope: !1973)
!1982 = !DILocalVariable(name: "iterator1", scope: !1973, file: !262, line: 166, type: !103)
!1983 = !DILocation(line: 166, column: 8, scope: !1973)
!1984 = !DILocation(line: 166, column: 28, scope: !1973)
!1985 = !DILocalVariable(name: "iterator2", scope: !1973, file: !262, line: 167, type: !103)
!1986 = !DILocation(line: 167, column: 8, scope: !1973)
!1987 = !DILocation(line: 167, column: 28, scope: !1973)
!1988 = !DILocalVariable(name: "i", scope: !1989, file: !262, line: 168, type: !101)
!1989 = distinct !DILexicalBlock(scope: !1973, file: !262, line: 168, column: 2)
!1990 = !DILocation(line: 168, column: 11, scope: !1989)
!1991 = !DILocation(line: 168, column: 7, scope: !1989)
!1992 = !DILocation(line: 168, column: 18, scope: !1993)
!1993 = distinct !DILexicalBlock(scope: !1989, file: !262, line: 168, column: 2)
!1994 = !DILocation(line: 168, column: 22, scope: !1993)
!1995 = !DILocation(line: 168, column: 20, scope: !1993)
!1996 = !DILocation(line: 168, column: 2, scope: !1989)
!1997 = !DILocation(line: 169, column: 17, scope: !1998)
!1998 = distinct !DILexicalBlock(scope: !1993, file: !262, line: 168, column: 33)
!1999 = !DILocation(line: 169, column: 16, scope: !1998)
!2000 = !DILocation(line: 169, column: 4, scope: !1998)
!2001 = !DILocation(line: 169, column: 14, scope: !1998)
!2002 = !DILocation(line: 170, column: 12, scope: !1998)
!2003 = !DILocation(line: 171, column: 12, scope: !1998)
!2004 = !DILocation(line: 172, column: 2, scope: !1998)
!2005 = !DILocation(line: 168, column: 29, scope: !1993)
!2006 = !DILocation(line: 168, column: 2, scope: !1993)
!2007 = distinct !{!2007, !1996, !2008}
!2008 = !DILocation(line: 172, column: 2, scope: !1989)
!2009 = !DILocation(line: 174, column: 1, scope: !1973)
!2010 = !DILocalVariable(name: "p_dst", arg: 1, scope: !374, file: !262, line: 176, type: !82)
!2011 = !DILocation(line: 176, column: 43, scope: !374)
!2012 = !DILocalVariable(name: "key", scope: !374, file: !262, line: 179, type: !179)
!2013 = !DILocation(line: 179, column: 10, scope: !374)
!2014 = !DILocation(line: 181, column: 2, scope: !374)
!2015 = !DILocalVariable(name: "blob", scope: !374, file: !262, line: 184, type: !355)
!2016 = !DILocation(line: 184, column: 10, scope: !374)
!2017 = !DILocation(line: 185, column: 19, scope: !2018)
!2018 = distinct !DILexicalBlock(scope: !374, file: !262, line: 185, column: 5)
!2019 = !DILocation(line: 185, column: 5, scope: !2018)
!2020 = !DILocation(line: 185, column: 5, scope: !374)
!2021 = !DILocation(line: 186, column: 3, scope: !2018)
!2022 = !DILocation(line: 188, column: 22, scope: !374)
!2023 = !DILocation(line: 188, column: 2, scope: !374)
!2024 = !DILocalVariable(name: "output", scope: !374, file: !262, line: 189, type: !149)
!2025 = !DILocation(line: 189, column: 11, scope: !374)
!2026 = !DILocation(line: 189, column: 48, scope: !374)
!2027 = !DILocation(line: 189, column: 38, scope: !374)
!2028 = !DILocation(line: 189, column: 31, scope: !374)
!2029 = !DILocalVariable(name: "sizeP", scope: !374, file: !262, line: 190, type: !101)
!2030 = !DILocation(line: 190, column: 6, scope: !374)
!2031 = !DILocation(line: 190, column: 24, scope: !374)
!2032 = !DILocation(line: 190, column: 14, scope: !374)
!2033 = !DILocalVariable(name: "status", scope: !374, file: !262, line: 193, type: !2034)
!2034 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_status_t", file: !6, line: 125, baseType: !264)
!2035 = !DILocation(line: 193, column: 15, scope: !374)
!2036 = !DILocation(line: 193, column: 83, scope: !374)
!2037 = !DILocation(line: 193, column: 100, scope: !374)
!2038 = !DILocation(line: 193, column: 90, scope: !374)
!2039 = !DILocation(line: 193, column: 119, scope: !374)
!2040 = !DILocation(line: 193, column: 127, scope: !374)
!2041 = !DILocation(line: 193, column: 176, scope: !374)
!2042 = !DILocation(line: 193, column: 181, scope: !374)
!2043 = !DILocation(line: 193, column: 146, scope: !374)
!2044 = !DILocation(line: 193, column: 24, scope: !374)
!2045 = !DILocation(line: 196, column: 2, scope: !374)
!2046 = !DILocation(line: 199, column: 6, scope: !2047)
!2047 = distinct !DILexicalBlock(scope: !374, file: !262, line: 199, column: 6)
!2048 = !DILocation(line: 199, column: 13, scope: !2047)
!2049 = !DILocation(line: 199, column: 6, scope: !374)
!2050 = !DILocation(line: 200, column: 3, scope: !2051)
!2051 = distinct !DILexicalBlock(scope: !2047, file: !262, line: 199, column: 29)
!2052 = !DILocation(line: 201, column: 3, scope: !2051)
!2053 = !DILocation(line: 205, column: 9, scope: !374)
!2054 = !DILocation(line: 205, column: 16, scope: !374)
!2055 = !DILocation(line: 205, column: 24, scope: !374)
!2056 = !DILocation(line: 205, column: 2, scope: !374)
!2057 = !DILocation(line: 207, column: 2, scope: !374)
!2058 = !DILocation(line: 211, column: 1, scope: !374)
!2059 = distinct !DISubprogram(name: "serialize_key_store", scope: !262, file: !262, line: 213, type: !375, scopeLine: 213, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !261, retainedNodes: !370)
!2060 = !DILocalVariable(name: "p_dst", arg: 1, scope: !2059, file: !262, line: 213, type: !82)
!2061 = !DILocation(line: 213, column: 31, scope: !2059)
!2062 = !DILocalVariable(name: "obj", scope: !2059, file: !262, line: 215, type: !386)
!2063 = !DILocation(line: 215, column: 8, scope: !2059)
!2064 = !DILocation(line: 215, column: 14, scope: !2059)
!2065 = !DILocalVariable(name: "key", scope: !2059, file: !262, line: 216, type: !339)
!2066 = !DILocation(line: 216, column: 16, scope: !2059)
!2067 = !DILocation(line: 216, column: 22, scope: !2059)
!2068 = !DILocalVariable(name: "i", scope: !2059, file: !262, line: 217, type: !101)
!2069 = !DILocation(line: 217, column: 6, scope: !2059)
!2070 = !DILocation(line: 219, column: 2, scope: !2059)
!2071 = !DILocation(line: 219, column: 9, scope: !2059)
!2072 = !DILocation(line: 219, column: 14, scope: !2059)
!2073 = !DILocation(line: 219, column: 19, scope: !2059)
!2074 = !DILocation(line: 220, column: 23, scope: !2075)
!2075 = distinct !DILexicalBlock(scope: !2059, file: !262, line: 219, column: 28)
!2076 = !DILocation(line: 220, column: 61, scope: !2075)
!2077 = !DILocation(line: 220, column: 28, scope: !2075)
!2078 = !DILocation(line: 220, column: 65, scope: !2075)
!2079 = !DILocation(line: 220, column: 70, scope: !2075)
!2080 = !DILocalVariable(name: "obj", arg: 1, scope: !2081, file: !388, line: 727, type: !386)
!2081 = distinct !DISubprogram(name: "binn_object_set_str", linkageName: "_ZL19binn_object_set_strP11binn_structPcS1_", scope: !388, file: !388, line: 727, type: !2082, scopeLine: 727, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !261, retainedNodes: !370)
!2082 = !DISubroutineType(types: !2083)
!2083 = !{!393, !386, !103, !103}
!2084 = !DILocation(line: 727, column: 46, scope: !2081, inlinedAt: !2085)
!2085 = distinct !DILocation(line: 220, column: 3, scope: !2075)
!2086 = !DILocalVariable(name: "key", arg: 2, scope: !2081, file: !388, line: 727, type: !103)
!2087 = !DILocation(line: 727, column: 57, scope: !2081, inlinedAt: !2085)
!2088 = !DILocalVariable(name: "str", arg: 3, scope: !2081, file: !388, line: 727, type: !103)
!2089 = !DILocation(line: 727, column: 68, scope: !2081, inlinedAt: !2085)
!2090 = !DILocation(line: 728, column: 26, scope: !2081, inlinedAt: !2085)
!2091 = !DILocation(line: 728, column: 31, scope: !2081, inlinedAt: !2085)
!2092 = !DILocation(line: 728, column: 49, scope: !2081, inlinedAt: !2085)
!2093 = !DILocation(line: 728, column: 10, scope: !2081, inlinedAt: !2085)
!2094 = !DILocation(line: 221, column: 23, scope: !2075)
!2095 = !DILocation(line: 221, column: 62, scope: !2075)
!2096 = !DILocation(line: 221, column: 28, scope: !2075)
!2097 = !DILocation(line: 221, column: 66, scope: !2075)
!2098 = !DILocation(line: 221, column: 71, scope: !2075)
!2099 = !DILocation(line: 727, column: 46, scope: !2081, inlinedAt: !2100)
!2100 = distinct !DILocation(line: 221, column: 3, scope: !2075)
!2101 = !DILocation(line: 727, column: 57, scope: !2081, inlinedAt: !2100)
!2102 = !DILocation(line: 727, column: 68, scope: !2081, inlinedAt: !2100)
!2103 = !DILocation(line: 728, column: 26, scope: !2081, inlinedAt: !2100)
!2104 = !DILocation(line: 728, column: 31, scope: !2081, inlinedAt: !2100)
!2105 = !DILocation(line: 728, column: 49, scope: !2081, inlinedAt: !2100)
!2106 = !DILocation(line: 728, column: 10, scope: !2081, inlinedAt: !2100)
!2107 = !DILocation(line: 222, column: 9, scope: !2075)
!2108 = !DILocation(line: 222, column: 14, scope: !2075)
!2109 = !DILocation(line: 222, column: 7, scope: !2075)
!2110 = !DILocation(line: 223, column: 4, scope: !2075)
!2111 = distinct !{!2111, !2070, !2112}
!2112 = !DILocation(line: 224, column: 2, scope: !2059)
!2113 = !DILocation(line: 227, column: 9, scope: !2059)
!2114 = !DILocation(line: 227, column: 25, scope: !2059)
!2115 = !DILocation(line: 227, column: 16, scope: !2059)
!2116 = !DILocation(line: 227, column: 41, scope: !2059)
!2117 = !DILocation(line: 227, column: 31, scope: !2059)
!2118 = !DILocation(line: 227, column: 2, scope: !2059)
!2119 = !DILocation(line: 229, column: 12, scope: !2059)
!2120 = !DILocation(line: 229, column: 2, scope: !2059)
!2121 = !DILocation(line: 231, column: 2, scope: !2059)
!2122 = !DILocalVariable(name: "key_store", arg: 1, scope: !380, file: !262, line: 239, type: !82)
!2123 = !DILocation(line: 239, column: 37, scope: !380)
!2124 = !DILocalVariable(name: "key", scope: !380, file: !262, line: 247, type: !179)
!2125 = !DILocation(line: 247, column: 10, scope: !380)
!2126 = !DILocation(line: 248, column: 2, scope: !380)
!2127 = !DILocalVariable(name: "sizeP", scope: !380, file: !262, line: 249, type: !101)
!2128 = !DILocation(line: 249, column: 6, scope: !380)
!2129 = !DILocalVariable(name: "decrypted_output", scope: !380, file: !262, line: 250, type: !149)
!2130 = !DILocation(line: 250, column: 11, scope: !380)
!2131 = !DILocation(line: 250, column: 48, scope: !380)
!2132 = !DILocation(line: 250, column: 41, scope: !380)
!2133 = !DILocalVariable(name: "status", scope: !380, file: !262, line: 253, type: !2034)
!2134 = !DILocation(line: 253, column: 15, scope: !380)
!2135 = !DILocation(line: 253, column: 83, scope: !380)
!2136 = !DILocation(line: 253, column: 94, scope: !380)
!2137 = !DILocation(line: 253, column: 112, scope: !380)
!2138 = !DILocation(line: 253, column: 24, scope: !380)
!2139 = !DILocation(line: 256, column: 6, scope: !2140)
!2140 = distinct !DILexicalBlock(scope: !380, file: !262, line: 256, column: 6)
!2141 = !DILocation(line: 256, column: 13, scope: !2140)
!2142 = !DILocation(line: 256, column: 6, scope: !380)
!2143 = !DILocation(line: 257, column: 3, scope: !2144)
!2144 = distinct !DILexicalBlock(scope: !2140, file: !262, line: 256, column: 29)
!2145 = !DILocation(line: 258, column: 3, scope: !2144)
!2146 = !DILocation(line: 261, column: 22, scope: !380)
!2147 = !DILocation(line: 261, column: 12, scope: !380)
!2148 = !DILocation(line: 265, column: 29, scope: !380)
!2149 = !DILocation(line: 265, column: 13, scope: !380)
!2150 = !DILocation(line: 265, column: 11, scope: !380)
!2151 = !DILocation(line: 266, column: 18, scope: !380)
!2152 = !DILocation(line: 266, column: 16, scope: !380)
!2153 = !DILocation(line: 267, column: 5, scope: !380)
!2154 = !DILocation(line: 267, column: 15, scope: !380)
!2155 = !DILocation(line: 267, column: 19, scope: !380)
!2156 = !DILocation(line: 268, column: 18, scope: !380)
!2157 = !DILocalVariable(name: "temp", scope: !380, file: !262, line: 271, type: !103)
!2158 = !DILocation(line: 271, column: 11, scope: !380)
!2159 = !DILocation(line: 271, column: 34, scope: !380)
!2160 = !DILocation(line: 271, column: 45, scope: !380)
!2161 = !DILocation(line: 271, column: 18, scope: !380)
!2162 = !DILocalVariable(name: "i", scope: !380, file: !262, line: 272, type: !101)
!2163 = !DILocation(line: 272, column: 9, scope: !380)
!2164 = !DILocation(line: 273, column: 5, scope: !380)
!2165 = !DILocation(line: 273, column: 12, scope: !380)
!2166 = !DILocation(line: 273, column: 17, scope: !380)
!2167 = !DILocalVariable(name: "website", scope: !2168, file: !262, line: 275, type: !103)
!2168 = distinct !DILexicalBlock(scope: !380, file: !262, line: 273, column: 26)
!2169 = !DILocation(line: 275, column: 12, scope: !2168)
!2170 = !DILocation(line: 275, column: 38, scope: !2168)
!2171 = !DILocation(line: 275, column: 82, scope: !2168)
!2172 = !DILocation(line: 275, column: 49, scope: !2168)
!2173 = !DILocation(line: 275, column: 22, scope: !2168)
!2174 = !DILocalVariable(name: "password", scope: !2168, file: !262, line: 276, type: !103)
!2175 = !DILocation(line: 276, column: 12, scope: !2168)
!2176 = !DILocation(line: 276, column: 39, scope: !2168)
!2177 = !DILocation(line: 276, column: 84, scope: !2168)
!2178 = !DILocation(line: 276, column: 50, scope: !2168)
!2179 = !DILocation(line: 276, column: 23, scope: !2168)
!2180 = !DILocation(line: 277, column: 18, scope: !2168)
!2181 = !DILocation(line: 277, column: 6, scope: !2168)
!2182 = !DILocation(line: 278, column: 18, scope: !2168)
!2183 = !DILocation(line: 278, column: 6, scope: !2168)
!2184 = !DILocation(line: 280, column: 19, scope: !2168)
!2185 = !DILocation(line: 280, column: 27, scope: !2168)
!2186 = !DILocation(line: 280, column: 6, scope: !2168)
!2187 = !DILocation(line: 281, column: 7, scope: !2168)
!2188 = !DILocation(line: 283, column: 29, scope: !2168)
!2189 = !DILocation(line: 283, column: 73, scope: !2168)
!2190 = !DILocation(line: 283, column: 40, scope: !2168)
!2191 = !DILocation(line: 283, column: 13, scope: !2168)
!2192 = !DILocation(line: 283, column: 11, scope: !2168)
!2193 = distinct !{!2193, !2164, !2194}
!2194 = !DILocation(line: 284, column: 5, scope: !380)
!2195 = distinct !DISubprogram(name: "seal", scope: !501, file: !501, line: 25, type: !2196, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !500, retainedNodes: !370)
!2196 = !DISubroutineType(types: !2197)
!2197 = !{!2034, !149, !498, !2198, !498}
!2198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2199, size: 64)
!2199 = !DIDerivedType(tag: DW_TAG_typedef, name: "sgx_sealed_data_t", file: !158, line: 62, baseType: !2200)
!2200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sealed_data_t", file: !158, line: 56, size: 4480, flags: DIFlagFwdDecl, identifier: "_ZTS14_sealed_data_t")
!2201 = !DILocalVariable(name: "plaintext", arg: 1, scope: !2195, file: !501, line: 25, type: !149)
!2202 = !DILocation(line: 25, column: 28, scope: !2195)
!2203 = !DILocalVariable(name: "plaintext_len", arg: 2, scope: !2195, file: !501, line: 25, type: !498)
!2204 = !DILocation(line: 25, column: 46, scope: !2195)
!2205 = !DILocalVariable(name: "sealed_data", arg: 3, scope: !2195, file: !501, line: 25, type: !2198)
!2206 = !DILocation(line: 25, column: 80, scope: !2195)
!2207 = !DILocalVariable(name: "sealed_size", arg: 4, scope: !2195, file: !501, line: 25, type: !498)
!2208 = !DILocation(line: 25, column: 100, scope: !2195)
!2209 = !DILocalVariable(name: "status", scope: !2195, file: !501, line: 26, type: !2034)
!2210 = !DILocation(line: 26, column: 18, scope: !2195)
!2211 = !DILocation(line: 26, column: 50, scope: !2195)
!2212 = !DILocation(line: 26, column: 65, scope: !2195)
!2213 = !DILocation(line: 26, column: 76, scope: !2195)
!2214 = !DILocation(line: 26, column: 89, scope: !2195)
!2215 = !DILocation(line: 26, column: 27, scope: !2195)
!2216 = !DILocation(line: 27, column: 12, scope: !2195)
!2217 = !DILocation(line: 27, column: 5, scope: !2195)
!2218 = distinct !DISubprogram(name: "unseal", scope: !501, file: !501, line: 45, type: !2219, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !500, retainedNodes: !370)
!2219 = !DISubroutineType(types: !2220)
!2220 = !{!2034, !2198, !498, !149, !201}
!2221 = !DILocalVariable(name: "sealed_data", arg: 1, scope: !2218, file: !501, line: 45, type: !2198)
!2222 = !DILocation(line: 45, column: 40, scope: !2218)
!2223 = !DILocalVariable(name: "sealed_size", arg: 2, scope: !2218, file: !501, line: 45, type: !498)
!2224 = !DILocation(line: 45, column: 60, scope: !2218)
!2225 = !DILocalVariable(name: "plaintext", arg: 3, scope: !2218, file: !501, line: 45, type: !149)
!2226 = !DILocation(line: 45, column: 82, scope: !2218)
!2227 = !DILocalVariable(name: "plaintext_len", arg: 4, scope: !2218, file: !501, line: 45, type: !201)
!2228 = !DILocation(line: 45, column: 102, scope: !2218)
!2229 = !DILocalVariable(name: "status", scope: !2218, file: !501, line: 46, type: !2034)
!2230 = !DILocation(line: 46, column: 18, scope: !2218)
!2231 = !DILocation(line: 46, column: 43, scope: !2218)
!2232 = !DILocation(line: 46, column: 78, scope: !2218)
!2233 = !DILocation(line: 46, column: 27, scope: !2218)
!2234 = !DILocation(line: 47, column: 12, scope: !2218)
!2235 = !DILocation(line: 47, column: 5, scope: !2218)
!2236 = distinct !DISubprogram(name: "binn_set_alloc_functions", scope: !384, file: !384, line: 120, type: !2237, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2237 = !DISubroutineType(types: !2238)
!2238 = !{null, !463, !454, !406}
!2239 = !DILocalVariable(name: "new_malloc", arg: 1, scope: !2236, file: !384, line: 120, type: !463)
!2240 = !DILocation(line: 120, column: 48, scope: !2236)
!2241 = !DILocalVariable(name: "new_realloc", arg: 2, scope: !2236, file: !384, line: 120, type: !454)
!2242 = !DILocation(line: 120, column: 77, scope: !2236)
!2243 = !DILocalVariable(name: "new_free", arg: 3, scope: !2236, file: !384, line: 120, type: !406)
!2244 = !DILocation(line: 120, column: 112, scope: !2236)
!2245 = !DILocation(line: 122, column: 15, scope: !2236)
!2246 = !DILocation(line: 122, column: 13, scope: !2236)
!2247 = !DILocation(line: 123, column: 16, scope: !2236)
!2248 = !DILocation(line: 123, column: 14, scope: !2236)
!2249 = !DILocation(line: 124, column: 13, scope: !2236)
!2250 = !DILocation(line: 124, column: 11, scope: !2236)
!2251 = !DILocation(line: 126, column: 1, scope: !2236)
!2252 = distinct !DISubprogram(name: "binn_create_type", scope: !384, file: !384, line: 169, type: !2253, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2253 = !DISubroutineType(types: !2254)
!2254 = !{!101, !101, !101}
!2255 = !DILocalVariable(name: "storage_type", arg: 1, scope: !2252, file: !384, line: 169, type: !101)
!2256 = !DILocation(line: 169, column: 35, scope: !2252)
!2257 = !DILocalVariable(name: "data_type_index", arg: 2, scope: !2252, file: !384, line: 169, type: !101)
!2258 = !DILocation(line: 169, column: 53, scope: !2252)
!2259 = !DILocation(line: 170, column: 7, scope: !2260)
!2260 = distinct !DILexicalBlock(scope: !2252, file: !384, line: 170, column: 7)
!2261 = !DILocation(line: 170, column: 23, scope: !2260)
!2262 = !DILocation(line: 170, column: 7, scope: !2252)
!2263 = !DILocation(line: 170, column: 28, scope: !2260)
!2264 = !DILocation(line: 171, column: 8, scope: !2265)
!2265 = distinct !DILexicalBlock(scope: !2252, file: !384, line: 171, column: 7)
!2266 = !DILocation(line: 171, column: 21, scope: !2265)
!2267 = !DILocation(line: 171, column: 41, scope: !2265)
!2268 = !DILocation(line: 171, column: 45, scope: !2265)
!2269 = !DILocation(line: 171, column: 58, scope: !2265)
!2270 = !DILocation(line: 171, column: 7, scope: !2252)
!2271 = !DILocation(line: 171, column: 79, scope: !2265)
!2272 = !DILocation(line: 172, column: 7, scope: !2273)
!2273 = distinct !DILexicalBlock(scope: !2252, file: !384, line: 172, column: 7)
!2274 = !DILocation(line: 172, column: 23, scope: !2273)
!2275 = !DILocation(line: 172, column: 7, scope: !2252)
!2276 = !DILocation(line: 173, column: 12, scope: !2273)
!2277 = !DILocation(line: 173, column: 27, scope: !2273)
!2278 = !DILocation(line: 173, column: 25, scope: !2273)
!2279 = !DILocation(line: 173, column: 5, scope: !2273)
!2280 = !DILocation(line: 174, column: 12, scope: !2281)
!2281 = distinct !DILexicalBlock(scope: !2273, file: !384, line: 174, column: 12)
!2282 = !DILocation(line: 174, column: 28, scope: !2281)
!2283 = !DILocation(line: 174, column: 12, scope: !2273)
!2284 = !DILocation(line: 175, column: 18, scope: !2285)
!2285 = distinct !DILexicalBlock(scope: !2281, file: !384, line: 174, column: 36)
!2286 = !DILocation(line: 176, column: 18, scope: !2285)
!2287 = !DILocation(line: 177, column: 21, scope: !2285)
!2288 = !DILocation(line: 178, column: 12, scope: !2285)
!2289 = !DILocation(line: 178, column: 27, scope: !2285)
!2290 = !DILocation(line: 178, column: 25, scope: !2285)
!2291 = !DILocation(line: 178, column: 5, scope: !2285)
!2292 = !DILocation(line: 180, column: 5, scope: !2281)
!2293 = !DILocation(line: 181, column: 1, scope: !2252)
!2294 = distinct !DISubprogram(name: "binn_get_type_info", scope: !384, file: !384, line: 185, type: !2295, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2295 = !DISubroutineType(types: !2296)
!2296 = !{!393, !101, !440, !440}
!2297 = !DILocalVariable(name: "long_type", arg: 1, scope: !2294, file: !384, line: 185, type: !101)
!2298 = !DILocation(line: 185, column: 38, scope: !2294)
!2299 = !DILocalVariable(name: "pstorage_type", arg: 2, scope: !2294, file: !384, line: 185, type: !440)
!2300 = !DILocation(line: 185, column: 54, scope: !2294)
!2301 = !DILocalVariable(name: "pextra_type", arg: 3, scope: !2294, file: !384, line: 185, type: !440)
!2302 = !DILocation(line: 185, column: 74, scope: !2294)
!2303 = !DILocalVariable(name: "storage_type", scope: !2294, file: !384, line: 186, type: !101)
!2304 = !DILocation(line: 186, column: 7, scope: !2294)
!2305 = !DILocalVariable(name: "extra_type", scope: !2294, file: !384, line: 186, type: !101)
!2306 = !DILocation(line: 186, column: 21, scope: !2294)
!2307 = !DILocalVariable(name: "retval", scope: !2294, file: !384, line: 187, type: !393)
!2308 = !DILocation(line: 187, column: 8, scope: !2294)
!2309 = !DILocation(line: 187, column: 3, scope: !2294)
!2310 = !DILabel(scope: !2294, name: "again", file: !384, line: 189)
!2311 = !DILocation(line: 189, column: 1, scope: !2294)
!2312 = !DILocation(line: 191, column: 7, scope: !2313)
!2313 = distinct !DILexicalBlock(scope: !2294, file: !384, line: 191, column: 7)
!2314 = !DILocation(line: 191, column: 17, scope: !2313)
!2315 = !DILocation(line: 191, column: 7, scope: !2294)
!2316 = !DILocation(line: 192, column: 5, scope: !2317)
!2317 = distinct !DILexicalBlock(scope: !2313, file: !384, line: 191, column: 22)
!2318 = !DILocation(line: 193, column: 14, scope: !2319)
!2319 = distinct !DILexicalBlock(scope: !2313, file: !384, line: 193, column: 14)
!2320 = !DILocation(line: 193, column: 24, scope: !2319)
!2321 = !DILocation(line: 193, column: 14, scope: !2313)
!2322 = !DILocation(line: 194, column: 20, scope: !2323)
!2323 = distinct !DILexicalBlock(scope: !2319, file: !384, line: 193, column: 33)
!2324 = !DILocation(line: 194, column: 30, scope: !2323)
!2325 = !DILocation(line: 194, column: 18, scope: !2323)
!2326 = !DILocation(line: 195, column: 18, scope: !2323)
!2327 = !DILocation(line: 195, column: 28, scope: !2323)
!2328 = !DILocation(line: 195, column: 16, scope: !2323)
!2329 = !DILocation(line: 196, column: 3, scope: !2323)
!2330 = !DILocation(line: 196, column: 14, scope: !2331)
!2331 = distinct !DILexicalBlock(scope: !2319, file: !384, line: 196, column: 14)
!2332 = !DILocation(line: 196, column: 24, scope: !2331)
!2333 = !DILocation(line: 196, column: 14, scope: !2319)
!2334 = !DILocation(line: 197, column: 20, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2331, file: !384, line: 196, column: 35)
!2336 = !DILocation(line: 197, column: 30, scope: !2335)
!2337 = !DILocation(line: 197, column: 18, scope: !2335)
!2338 = !DILocation(line: 198, column: 18, scope: !2335)
!2339 = !DILocation(line: 199, column: 18, scope: !2335)
!2340 = !DILocation(line: 199, column: 28, scope: !2335)
!2341 = !DILocation(line: 199, column: 16, scope: !2335)
!2342 = !DILocation(line: 200, column: 16, scope: !2335)
!2343 = !DILocation(line: 201, column: 3, scope: !2335)
!2344 = !DILocation(line: 201, column: 14, scope: !2345)
!2345 = distinct !DILexicalBlock(scope: !2331, file: !384, line: 201, column: 14)
!2346 = !DILocation(line: 201, column: 24, scope: !2345)
!2347 = !DILocation(line: 201, column: 14, scope: !2331)
!2348 = !DILocation(line: 204, column: 15, scope: !2349)
!2349 = distinct !DILexicalBlock(scope: !2345, file: !384, line: 201, column: 48)
!2350 = !DILocation(line: 205, column: 5, scope: !2349)
!2351 = !DILocation(line: 206, column: 10, scope: !2345)
!2352 = !DILabel(scope: !2353, name: "loc_invalid", file: !384, line: 207)
!2353 = distinct !DILexicalBlock(scope: !2345, file: !384, line: 206, column: 10)
!2354 = !DILocation(line: 207, column: 1, scope: !2353)
!2355 = !DILocation(line: 208, column: 18, scope: !2353)
!2356 = !DILocation(line: 209, column: 16, scope: !2353)
!2357 = !DILocation(line: 210, column: 12, scope: !2353)
!2358 = !DILocation(line: 213, column: 7, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !2294, file: !384, line: 213, column: 7)
!2360 = !DILocation(line: 213, column: 7, scope: !2294)
!2361 = !DILocation(line: 213, column: 39, scope: !2359)
!2362 = !DILocation(line: 213, column: 23, scope: !2359)
!2363 = !DILocation(line: 213, column: 37, scope: !2359)
!2364 = !DILocation(line: 213, column: 22, scope: !2359)
!2365 = !DILocation(line: 214, column: 7, scope: !2366)
!2366 = distinct !DILexicalBlock(scope: !2294, file: !384, line: 214, column: 7)
!2367 = !DILocation(line: 214, column: 7, scope: !2294)
!2368 = !DILocation(line: 214, column: 35, scope: !2366)
!2369 = !DILocation(line: 214, column: 21, scope: !2366)
!2370 = !DILocation(line: 214, column: 33, scope: !2366)
!2371 = !DILocation(line: 214, column: 20, scope: !2366)
!2372 = !DILocation(line: 216, column: 10, scope: !2294)
!2373 = !DILocation(line: 216, column: 3, scope: !2294)
!2374 = distinct !DISubprogram(name: "binn_create", scope: !384, file: !384, line: 222, type: !2375, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2375 = !DISubroutineType(types: !2376)
!2376 = !{!393, !386, !101, !101, !82}
!2377 = !DILocalVariable(name: "item", arg: 1, scope: !2374, file: !384, line: 222, type: !386)
!2378 = !DILocation(line: 222, column: 33, scope: !2374)
!2379 = !DILocalVariable(name: "type", arg: 2, scope: !2374, file: !384, line: 222, type: !101)
!2380 = !DILocation(line: 222, column: 43, scope: !2374)
!2381 = !DILocalVariable(name: "size", arg: 3, scope: !2374, file: !384, line: 222, type: !101)
!2382 = !DILocation(line: 222, column: 53, scope: !2374)
!2383 = !DILocalVariable(name: "pointer", arg: 4, scope: !2374, file: !384, line: 222, type: !82)
!2384 = !DILocation(line: 222, column: 65, scope: !2374)
!2385 = !DILocalVariable(name: "retval", scope: !2374, file: !384, line: 223, type: !393)
!2386 = !DILocation(line: 223, column: 8, scope: !2374)
!2387 = !DILocation(line: 225, column: 11, scope: !2374)
!2388 = !DILocation(line: 225, column: 3, scope: !2374)
!2389 = !DILocation(line: 229, column: 7, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2374, file: !384, line: 225, column: 17)
!2391 = !DILocation(line: 231, column: 7, scope: !2390)
!2392 = !DILocation(line: 234, column: 8, scope: !2393)
!2393 = distinct !DILexicalBlock(scope: !2374, file: !384, line: 234, column: 7)
!2394 = !DILocation(line: 234, column: 13, scope: !2393)
!2395 = !DILocation(line: 234, column: 22, scope: !2393)
!2396 = !DILocation(line: 234, column: 26, scope: !2393)
!2397 = !DILocation(line: 234, column: 31, scope: !2393)
!2398 = !DILocation(line: 234, column: 7, scope: !2374)
!2399 = !DILocation(line: 234, column: 37, scope: !2393)
!2400 = !DILocation(line: 235, column: 7, scope: !2401)
!2401 = distinct !DILexicalBlock(scope: !2374, file: !384, line: 235, column: 7)
!2402 = !DILocation(line: 235, column: 12, scope: !2401)
!2403 = !DILocation(line: 235, column: 7, scope: !2374)
!2404 = !DILocation(line: 236, column: 9, scope: !2405)
!2405 = distinct !DILexicalBlock(scope: !2406, file: !384, line: 236, column: 9)
!2406 = distinct !DILexicalBlock(scope: !2401, file: !384, line: 235, column: 29)
!2407 = !DILocation(line: 236, column: 9, scope: !2406)
!2408 = !DILocation(line: 236, column: 18, scope: !2405)
!2409 = !DILocation(line: 237, column: 15, scope: !2405)
!2410 = !DILocation(line: 238, column: 3, scope: !2406)
!2411 = !DILocation(line: 240, column: 10, scope: !2374)
!2412 = !DILocation(line: 240, column: 3, scope: !2374)
!2413 = !DILocation(line: 242, column: 7, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2374, file: !384, line: 242, column: 7)
!2415 = !DILocation(line: 242, column: 7, scope: !2374)
!2416 = !DILocation(line: 243, column: 5, scope: !2417)
!2417 = distinct !DILexicalBlock(scope: !2414, file: !384, line: 242, column: 16)
!2418 = !DILocation(line: 243, column: 11, scope: !2417)
!2419 = !DILocation(line: 243, column: 25, scope: !2417)
!2420 = !DILocation(line: 244, column: 18, scope: !2417)
!2421 = !DILocation(line: 244, column: 5, scope: !2417)
!2422 = !DILocation(line: 244, column: 11, scope: !2417)
!2423 = !DILocation(line: 244, column: 16, scope: !2417)
!2424 = !DILocation(line: 245, column: 24, scope: !2417)
!2425 = !DILocation(line: 245, column: 5, scope: !2417)
!2426 = !DILocation(line: 245, column: 11, scope: !2417)
!2427 = !DILocation(line: 245, column: 22, scope: !2417)
!2428 = !DILocation(line: 246, column: 3, scope: !2417)
!2429 = !DILocation(line: 247, column: 5, scope: !2430)
!2430 = distinct !DILexicalBlock(scope: !2414, file: !384, line: 246, column: 10)
!2431 = !DILocation(line: 247, column: 11, scope: !2430)
!2432 = !DILocation(line: 247, column: 25, scope: !2430)
!2433 = !DILocation(line: 248, column: 9, scope: !2434)
!2434 = distinct !DILexicalBlock(scope: !2430, file: !384, line: 248, column: 9)
!2435 = !DILocation(line: 248, column: 14, scope: !2434)
!2436 = !DILocation(line: 248, column: 9, scope: !2430)
!2437 = !DILocation(line: 248, column: 25, scope: !2434)
!2438 = !DILocation(line: 248, column: 20, scope: !2434)
!2439 = !DILocation(line: 249, column: 27, scope: !2430)
!2440 = !DILocation(line: 249, column: 15, scope: !2430)
!2441 = !DILocation(line: 249, column: 13, scope: !2430)
!2442 = !DILocation(line: 250, column: 9, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2430, file: !384, line: 250, column: 9)
!2444 = !DILocation(line: 250, column: 17, scope: !2443)
!2445 = !DILocation(line: 250, column: 9, scope: !2430)
!2446 = !DILocation(line: 250, column: 23, scope: !2443)
!2447 = !DILocation(line: 251, column: 18, scope: !2430)
!2448 = !DILocation(line: 251, column: 5, scope: !2430)
!2449 = !DILocation(line: 251, column: 11, scope: !2430)
!2450 = !DILocation(line: 251, column: 16, scope: !2430)
!2451 = !DILocation(line: 252, column: 24, scope: !2430)
!2452 = !DILocation(line: 252, column: 5, scope: !2430)
!2453 = !DILocation(line: 252, column: 11, scope: !2430)
!2454 = !DILocation(line: 252, column: 22, scope: !2430)
!2455 = !DILocation(line: 255, column: 3, scope: !2374)
!2456 = !DILocation(line: 255, column: 9, scope: !2374)
!2457 = !DILocation(line: 255, column: 16, scope: !2374)
!2458 = !DILocation(line: 257, column: 3, scope: !2374)
!2459 = !DILocation(line: 257, column: 9, scope: !2374)
!2460 = !DILocation(line: 257, column: 18, scope: !2374)
!2461 = !DILocation(line: 258, column: 3, scope: !2374)
!2462 = !DILocation(line: 258, column: 9, scope: !2374)
!2463 = !DILocation(line: 258, column: 19, scope: !2374)
!2464 = !DILocation(line: 259, column: 16, scope: !2374)
!2465 = !DILocation(line: 259, column: 3, scope: !2374)
!2466 = !DILocation(line: 259, column: 9, scope: !2374)
!2467 = !DILocation(line: 259, column: 14, scope: !2374)
!2468 = !DILocation(line: 261, column: 3, scope: !2374)
!2469 = !DILocation(line: 261, column: 9, scope: !2374)
!2470 = !DILocation(line: 261, column: 15, scope: !2374)
!2471 = !DILocation(line: 263, column: 10, scope: !2374)
!2472 = !DILocation(line: 263, column: 3, scope: !2374)
!2473 = !DILabel(scope: !2374, name: "loc_exit", file: !384, line: 265)
!2474 = !DILocation(line: 265, column: 1, scope: !2374)
!2475 = !DILocation(line: 266, column: 10, scope: !2374)
!2476 = !DILocation(line: 266, column: 3, scope: !2374)
!2477 = !DILocation(line: 268, column: 1, scope: !2374)
!2478 = distinct !DISubprogram(name: "binn_malloc", linkageName: "_ZL11binn_malloci", scope: !384, file: !384, line: 140, type: !2479, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2479 = !DISubroutineType(types: !2480)
!2480 = !{!82, !101}
!2481 = !DILocalVariable(name: "size", arg: 1, scope: !2478, file: !384, line: 140, type: !101)
!2482 = !DILocation(line: 140, column: 37, scope: !2478)
!2483 = !DILocation(line: 141, column: 3, scope: !2478)
!2484 = !DILocation(line: 142, column: 10, scope: !2478)
!2485 = !DILocation(line: 142, column: 20, scope: !2478)
!2486 = !DILocation(line: 142, column: 3, scope: !2478)
!2487 = distinct !DISubprogram(name: "check_alloc_functions", linkageName: "_ZL21check_alloc_functionsv", scope: !384, file: !384, line: 130, type: !1611, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2488 = !DILocation(line: 132, column: 7, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2487, file: !384, line: 132, column: 7)
!2490 = !DILocation(line: 132, column: 17, scope: !2489)
!2491 = !DILocation(line: 132, column: 7, scope: !2487)
!2492 = !DILocation(line: 132, column: 33, scope: !2489)
!2493 = !DILocation(line: 132, column: 23, scope: !2489)
!2494 = !DILocation(line: 133, column: 7, scope: !2495)
!2495 = distinct !DILexicalBlock(scope: !2487, file: !384, line: 133, column: 7)
!2496 = !DILocation(line: 133, column: 18, scope: !2495)
!2497 = !DILocation(line: 133, column: 7, scope: !2487)
!2498 = !DILocation(line: 133, column: 35, scope: !2495)
!2499 = !DILocation(line: 133, column: 24, scope: !2495)
!2500 = !DILocation(line: 134, column: 7, scope: !2501)
!2501 = distinct !DILexicalBlock(scope: !2487, file: !384, line: 134, column: 7)
!2502 = !DILocation(line: 134, column: 15, scope: !2501)
!2503 = !DILocation(line: 134, column: 7, scope: !2487)
!2504 = !DILocation(line: 134, column: 29, scope: !2501)
!2505 = !DILocation(line: 134, column: 21, scope: !2501)
!2506 = !DILocation(line: 136, column: 1, scope: !2487)
!2507 = distinct !DISubprogram(name: "binn_new", scope: !384, file: !384, line: 272, type: !2508, scopeLine: 272, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2508 = !DISubroutineType(types: !2509)
!2509 = !{!386, !101, !101, !82}
!2510 = !DILocalVariable(name: "type", arg: 1, scope: !2507, file: !384, line: 272, type: !101)
!2511 = !DILocation(line: 272, column: 30, scope: !2507)
!2512 = !DILocalVariable(name: "size", arg: 2, scope: !2507, file: !384, line: 272, type: !101)
!2513 = !DILocation(line: 272, column: 40, scope: !2507)
!2514 = !DILocalVariable(name: "pointer", arg: 3, scope: !2507, file: !384, line: 272, type: !82)
!2515 = !DILocation(line: 272, column: 52, scope: !2507)
!2516 = !DILocalVariable(name: "item", scope: !2507, file: !384, line: 273, type: !386)
!2517 = !DILocation(line: 273, column: 9, scope: !2507)
!2518 = !DILocation(line: 275, column: 18, scope: !2507)
!2519 = !DILocation(line: 275, column: 10, scope: !2507)
!2520 = !DILocation(line: 275, column: 8, scope: !2507)
!2521 = !DILocation(line: 277, column: 19, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !2507, file: !384, line: 277, column: 7)
!2523 = !DILocation(line: 277, column: 25, scope: !2522)
!2524 = !DILocation(line: 277, column: 31, scope: !2522)
!2525 = !DILocation(line: 277, column: 37, scope: !2522)
!2526 = !DILocation(line: 277, column: 7, scope: !2522)
!2527 = !DILocation(line: 277, column: 46, scope: !2522)
!2528 = !DILocation(line: 277, column: 7, scope: !2507)
!2529 = !DILocation(line: 278, column: 5, scope: !2530)
!2530 = distinct !DILexicalBlock(scope: !2522, file: !384, line: 277, column: 56)
!2531 = !DILocation(line: 278, column: 13, scope: !2530)
!2532 = !DILocation(line: 279, column: 5, scope: !2530)
!2533 = !DILocation(line: 282, column: 3, scope: !2507)
!2534 = !DILocation(line: 282, column: 9, scope: !2507)
!2535 = !DILocation(line: 282, column: 19, scope: !2507)
!2536 = !DILocation(line: 283, column: 10, scope: !2507)
!2537 = !DILocation(line: 283, column: 3, scope: !2507)
!2538 = !DILocation(line: 285, column: 1, scope: !2507)
!2539 = distinct !DISubprogram(name: "binn_create_list", scope: !384, file: !384, line: 289, type: !2540, scopeLine: 289, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2540 = !DISubroutineType(types: !2541)
!2541 = !{!393, !386}
!2542 = !DILocalVariable(name: "list", arg: 1, scope: !2539, file: !384, line: 289, type: !386)
!2543 = !DILocation(line: 289, column: 38, scope: !2539)
!2544 = !DILocation(line: 291, column: 22, scope: !2539)
!2545 = !DILocation(line: 291, column: 10, scope: !2539)
!2546 = !DILocation(line: 291, column: 3, scope: !2539)
!2547 = distinct !DISubprogram(name: "binn_create_map", scope: !384, file: !384, line: 297, type: !2540, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2548 = !DILocalVariable(name: "map", arg: 1, scope: !2547, file: !384, line: 297, type: !386)
!2549 = !DILocation(line: 297, column: 37, scope: !2547)
!2550 = !DILocation(line: 299, column: 22, scope: !2547)
!2551 = !DILocation(line: 299, column: 10, scope: !2547)
!2552 = !DILocation(line: 299, column: 3, scope: !2547)
!2553 = distinct !DISubprogram(name: "binn_create_object", scope: !384, file: !384, line: 305, type: !2540, scopeLine: 305, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2554 = !DILocalVariable(name: "object", arg: 1, scope: !2553, file: !384, line: 305, type: !386)
!2555 = !DILocation(line: 305, column: 40, scope: !2553)
!2556 = !DILocation(line: 307, column: 22, scope: !2553)
!2557 = !DILocation(line: 307, column: 10, scope: !2553)
!2558 = !DILocation(line: 307, column: 3, scope: !2553)
!2559 = distinct !DISubprogram(name: "binn_list", scope: !384, file: !384, line: 313, type: !2560, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2560 = !DISubroutineType(types: !2561)
!2561 = !{!386}
!2562 = !DILocation(line: 314, column: 10, scope: !2559)
!2563 = !DILocation(line: 314, column: 3, scope: !2559)
!2564 = distinct !DISubprogram(name: "binn_map", scope: !384, file: !384, line: 319, type: !2560, scopeLine: 319, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2565 = !DILocation(line: 320, column: 10, scope: !2564)
!2566 = !DILocation(line: 320, column: 3, scope: !2564)
!2567 = distinct !DISubprogram(name: "binn_object", scope: !384, file: !384, line: 325, type: !2560, scopeLine: 325, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2568 = !DILocation(line: 326, column: 10, scope: !2567)
!2569 = !DILocation(line: 326, column: 3, scope: !2567)
!2570 = distinct !DISubprogram(name: "binn_load", scope: !384, file: !384, line: 331, type: !2571, scopeLine: 331, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2571 = !DISubroutineType(types: !2572)
!2572 = !{!393, !82, !386}
!2573 = !DILocalVariable(name: "data", arg: 1, scope: !2570, file: !384, line: 331, type: !82)
!2574 = !DILocation(line: 331, column: 31, scope: !2570)
!2575 = !DILocalVariable(name: "value", arg: 2, scope: !2570, file: !384, line: 331, type: !386)
!2576 = !DILocation(line: 331, column: 43, scope: !2570)
!2577 = !DILocation(line: 333, column: 8, scope: !2578)
!2578 = distinct !DILexicalBlock(scope: !2570, file: !384, line: 333, column: 7)
!2579 = !DILocation(line: 333, column: 13, scope: !2578)
!2580 = !DILocation(line: 333, column: 22, scope: !2578)
!2581 = !DILocation(line: 333, column: 26, scope: !2578)
!2582 = !DILocation(line: 333, column: 32, scope: !2578)
!2583 = !DILocation(line: 333, column: 7, scope: !2570)
!2584 = !DILocation(line: 333, column: 42, scope: !2578)
!2585 = !DILocation(line: 334, column: 10, scope: !2570)
!2586 = !DILocation(line: 334, column: 3, scope: !2570)
!2587 = !DILocation(line: 335, column: 3, scope: !2570)
!2588 = !DILocation(line: 335, column: 10, scope: !2570)
!2589 = !DILocation(line: 335, column: 17, scope: !2570)
!2590 = !DILocation(line: 339, column: 21, scope: !2591)
!2591 = distinct !DILexicalBlock(scope: !2570, file: !384, line: 339, column: 7)
!2592 = !DILocation(line: 339, column: 28, scope: !2591)
!2593 = !DILocation(line: 339, column: 35, scope: !2591)
!2594 = !DILocation(line: 339, column: 42, scope: !2591)
!2595 = !DILocation(line: 339, column: 49, scope: !2591)
!2596 = !DILocation(line: 339, column: 57, scope: !2591)
!2597 = !DILocation(line: 339, column: 64, scope: !2591)
!2598 = !DILocation(line: 339, column: 7, scope: !2591)
!2599 = !DILocation(line: 339, column: 70, scope: !2591)
!2600 = !DILocation(line: 339, column: 7, scope: !2570)
!2601 = !DILocation(line: 339, column: 80, scope: !2591)
!2602 = !DILocation(line: 340, column: 16, scope: !2570)
!2603 = !DILocation(line: 340, column: 3, scope: !2570)
!2604 = !DILocation(line: 340, column: 10, scope: !2570)
!2605 = !DILocation(line: 340, column: 14, scope: !2570)
!2606 = !DILocation(line: 341, column: 3, scope: !2570)
!2607 = !DILocation(line: 343, column: 1, scope: !2570)
!2608 = distinct !DISubprogram(name: "binn_is_valid", scope: !384, file: !384, line: 1296, type: !2609, scopeLine: 1296, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2609 = !DISubroutineType(types: !2610)
!2610 = !{!393, !82, !440, !440, !440}
!2611 = !DILocalVariable(name: "ptr", arg: 1, scope: !2608, file: !384, line: 1296, type: !82)
!2612 = !DILocation(line: 1296, column: 35, scope: !2608)
!2613 = !DILocalVariable(name: "ptype", arg: 2, scope: !2608, file: !384, line: 1296, type: !440)
!2614 = !DILocation(line: 1296, column: 45, scope: !2608)
!2615 = !DILocalVariable(name: "pcount", arg: 3, scope: !2608, file: !384, line: 1296, type: !440)
!2616 = !DILocation(line: 1296, column: 57, scope: !2608)
!2617 = !DILocalVariable(name: "psize", arg: 4, scope: !2608, file: !384, line: 1296, type: !440)
!2618 = !DILocation(line: 1296, column: 70, scope: !2608)
!2619 = !DILocation(line: 1298, column: 7, scope: !2620)
!2620 = distinct !DILexicalBlock(scope: !2608, file: !384, line: 1298, column: 7)
!2621 = !DILocation(line: 1298, column: 7, scope: !2608)
!2622 = !DILocation(line: 1298, column: 16, scope: !2620)
!2623 = !DILocation(line: 1298, column: 23, scope: !2620)
!2624 = !DILocation(line: 1298, column: 15, scope: !2620)
!2625 = !DILocation(line: 1299, column: 7, scope: !2626)
!2626 = distinct !DILexicalBlock(scope: !2608, file: !384, line: 1299, column: 7)
!2627 = !DILocation(line: 1299, column: 7, scope: !2608)
!2628 = !DILocation(line: 1299, column: 16, scope: !2626)
!2629 = !DILocation(line: 1299, column: 23, scope: !2626)
!2630 = !DILocation(line: 1299, column: 15, scope: !2626)
!2631 = !DILocation(line: 1300, column: 7, scope: !2632)
!2632 = distinct !DILexicalBlock(scope: !2608, file: !384, line: 1300, column: 7)
!2633 = !DILocation(line: 1300, column: 7, scope: !2608)
!2634 = !DILocation(line: 1300, column: 16, scope: !2632)
!2635 = !DILocation(line: 1300, column: 23, scope: !2632)
!2636 = !DILocation(line: 1300, column: 15, scope: !2632)
!2637 = !DILocation(line: 1302, column: 27, scope: !2608)
!2638 = !DILocation(line: 1302, column: 32, scope: !2608)
!2639 = !DILocation(line: 1302, column: 39, scope: !2608)
!2640 = !DILocation(line: 1302, column: 47, scope: !2608)
!2641 = !DILocation(line: 1302, column: 10, scope: !2608)
!2642 = !DILocation(line: 1302, column: 3, scope: !2608)
!2643 = distinct !DISubprogram(name: "binn_is_valid_ex", scope: !384, file: !384, line: 1220, type: !2609, scopeLine: 1220, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2644 = !DILocalVariable(name: "ptr", arg: 1, scope: !2643, file: !384, line: 1220, type: !82)
!2645 = !DILocation(line: 1220, column: 38, scope: !2643)
!2646 = !DILocalVariable(name: "ptype", arg: 2, scope: !2643, file: !384, line: 1220, type: !440)
!2647 = !DILocation(line: 1220, column: 48, scope: !2643)
!2648 = !DILocalVariable(name: "pcount", arg: 3, scope: !2643, file: !384, line: 1220, type: !440)
!2649 = !DILocation(line: 1220, column: 60, scope: !2643)
!2650 = !DILocalVariable(name: "psize", arg: 4, scope: !2643, file: !384, line: 1220, type: !440)
!2651 = !DILocation(line: 1220, column: 73, scope: !2643)
!2652 = !DILocalVariable(name: "i", scope: !2643, file: !384, line: 1221, type: !101)
!2653 = !DILocation(line: 1221, column: 8, scope: !2643)
!2654 = !DILocalVariable(name: "type", scope: !2643, file: !384, line: 1221, type: !101)
!2655 = !DILocation(line: 1221, column: 11, scope: !2643)
!2656 = !DILocalVariable(name: "count", scope: !2643, file: !384, line: 1221, type: !101)
!2657 = !DILocation(line: 1221, column: 17, scope: !2643)
!2658 = !DILocalVariable(name: "size", scope: !2643, file: !384, line: 1221, type: !101)
!2659 = !DILocation(line: 1221, column: 24, scope: !2643)
!2660 = !DILocalVariable(name: "header_size", scope: !2643, file: !384, line: 1221, type: !101)
!2661 = !DILocation(line: 1221, column: 30, scope: !2643)
!2662 = !DILocalVariable(name: "p", scope: !2643, file: !384, line: 1222, type: !439)
!2663 = !DILocation(line: 1222, column: 18, scope: !2643)
!2664 = !DILocalVariable(name: "plimit", scope: !2643, file: !384, line: 1222, type: !439)
!2665 = !DILocation(line: 1222, column: 22, scope: !2643)
!2666 = !DILocalVariable(name: "base", scope: !2643, file: !384, line: 1222, type: !439)
!2667 = !DILocation(line: 1222, column: 31, scope: !2643)
!2668 = !DILocalVariable(name: "len", scope: !2643, file: !384, line: 1222, type: !153)
!2669 = !DILocation(line: 1222, column: 37, scope: !2643)
!2670 = !DILocalVariable(name: "pbuf", scope: !2643, file: !384, line: 1223, type: !82)
!2671 = !DILocation(line: 1223, column: 9, scope: !2643)
!2672 = !DILocation(line: 1225, column: 19, scope: !2643)
!2673 = !DILocation(line: 1225, column: 10, scope: !2643)
!2674 = !DILocation(line: 1225, column: 8, scope: !2643)
!2675 = !DILocation(line: 1226, column: 7, scope: !2676)
!2676 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1226, column: 7)
!2677 = !DILocation(line: 1226, column: 12, scope: !2676)
!2678 = !DILocation(line: 1226, column: 7, scope: !2643)
!2679 = !DILocation(line: 1226, column: 21, scope: !2676)
!2680 = !DILocation(line: 1229, column: 7, scope: !2681)
!2681 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1229, column: 7)
!2682 = !DILocation(line: 1229, column: 13, scope: !2681)
!2683 = !DILocation(line: 1229, column: 17, scope: !2681)
!2684 = !DILocation(line: 1229, column: 16, scope: !2681)
!2685 = !DILocation(line: 1229, column: 23, scope: !2681)
!2686 = !DILocation(line: 1229, column: 7, scope: !2643)
!2687 = !DILocation(line: 1230, column: 13, scope: !2688)
!2688 = distinct !DILexicalBlock(scope: !2681, file: !384, line: 1229, column: 28)
!2689 = !DILocation(line: 1230, column: 12, scope: !2688)
!2690 = !DILocation(line: 1230, column: 10, scope: !2688)
!2691 = !DILocation(line: 1231, column: 3, scope: !2688)
!2692 = !DILocation(line: 1232, column: 10, scope: !2693)
!2693 = distinct !DILexicalBlock(scope: !2681, file: !384, line: 1231, column: 10)
!2694 = !DILocation(line: 1235, column: 26, scope: !2695)
!2695 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1235, column: 7)
!2696 = !DILocation(line: 1235, column: 8, scope: !2695)
!2697 = !DILocation(line: 1235, column: 7, scope: !2643)
!2698 = !DILocation(line: 1235, column: 69, scope: !2695)
!2699 = !DILocation(line: 1238, column: 7, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1238, column: 7)
!2701 = !DILocation(line: 1238, column: 13, scope: !2700)
!2702 = !DILocation(line: 1238, column: 17, scope: !2700)
!2703 = !DILocation(line: 1238, column: 16, scope: !2700)
!2704 = !DILocation(line: 1238, column: 23, scope: !2700)
!2705 = !DILocation(line: 1238, column: 7, scope: !2643)
!2706 = !DILocation(line: 1240, column: 9, scope: !2707)
!2707 = distinct !DILexicalBlock(scope: !2708, file: !384, line: 1240, column: 9)
!2708 = distinct !DILexicalBlock(scope: !2700, file: !384, line: 1238, column: 28)
!2709 = !DILocation(line: 1240, column: 18, scope: !2707)
!2710 = !DILocation(line: 1240, column: 17, scope: !2707)
!2711 = !DILocation(line: 1240, column: 14, scope: !2707)
!2712 = !DILocation(line: 1240, column: 9, scope: !2708)
!2713 = !DILocation(line: 1240, column: 25, scope: !2707)
!2714 = !DILocation(line: 1241, column: 3, scope: !2708)
!2715 = !DILocation(line: 1243, column: 7, scope: !2716)
!2716 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1243, column: 7)
!2717 = !DILocation(line: 1243, column: 14, scope: !2716)
!2718 = !DILocation(line: 1243, column: 18, scope: !2716)
!2719 = !DILocation(line: 1243, column: 17, scope: !2716)
!2720 = !DILocation(line: 1243, column: 25, scope: !2716)
!2721 = !DILocation(line: 1243, column: 7, scope: !2643)
!2722 = !DILocation(line: 1245, column: 9, scope: !2723)
!2723 = distinct !DILexicalBlock(scope: !2724, file: !384, line: 1245, column: 9)
!2724 = distinct !DILexicalBlock(scope: !2716, file: !384, line: 1243, column: 30)
!2725 = !DILocation(line: 1245, column: 19, scope: !2723)
!2726 = !DILocation(line: 1245, column: 18, scope: !2723)
!2727 = !DILocation(line: 1245, column: 15, scope: !2723)
!2728 = !DILocation(line: 1245, column: 9, scope: !2724)
!2729 = !DILocation(line: 1245, column: 27, scope: !2723)
!2730 = !DILocation(line: 1246, column: 3, scope: !2724)
!2731 = !DILocation(line: 1248, column: 7, scope: !2732)
!2732 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1248, column: 7)
!2733 = !DILocation(line: 1248, column: 13, scope: !2732)
!2734 = !DILocation(line: 1248, column: 17, scope: !2732)
!2735 = !DILocation(line: 1248, column: 16, scope: !2732)
!2736 = !DILocation(line: 1248, column: 23, scope: !2732)
!2737 = !DILocation(line: 1248, column: 7, scope: !2643)
!2738 = !DILocation(line: 1250, column: 9, scope: !2739)
!2739 = distinct !DILexicalBlock(scope: !2740, file: !384, line: 1250, column: 9)
!2740 = distinct !DILexicalBlock(scope: !2732, file: !384, line: 1248, column: 29)
!2741 = !DILocation(line: 1250, column: 18, scope: !2739)
!2742 = !DILocation(line: 1250, column: 17, scope: !2739)
!2743 = !DILocation(line: 1250, column: 14, scope: !2739)
!2744 = !DILocation(line: 1250, column: 9, scope: !2740)
!2745 = !DILocation(line: 1250, column: 25, scope: !2739)
!2746 = !DILocation(line: 1251, column: 3, scope: !2740)
!2747 = !DILocation(line: 1255, column: 24, scope: !2643)
!2748 = !DILocation(line: 1255, column: 5, scope: !2643)
!2749 = !DILocation(line: 1256, column: 10, scope: !2643)
!2750 = !DILocation(line: 1256, column: 8, scope: !2643)
!2751 = !DILocation(line: 1257, column: 12, scope: !2643)
!2752 = !DILocation(line: 1257, column: 16, scope: !2643)
!2753 = !DILocation(line: 1257, column: 14, scope: !2643)
!2754 = !DILocation(line: 1257, column: 10, scope: !2643)
!2755 = !DILocation(line: 1259, column: 8, scope: !2643)
!2756 = !DILocation(line: 1259, column: 5, scope: !2643)
!2757 = !DILocation(line: 1262, column: 10, scope: !2758)
!2758 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1262, column: 3)
!2759 = !DILocation(line: 1262, column: 8, scope: !2758)
!2760 = !DILocation(line: 1262, column: 15, scope: !2761)
!2761 = distinct !DILexicalBlock(scope: !2758, file: !384, line: 1262, column: 3)
!2762 = !DILocation(line: 1262, column: 19, scope: !2761)
!2763 = !DILocation(line: 1262, column: 17, scope: !2761)
!2764 = !DILocation(line: 1262, column: 3, scope: !2758)
!2765 = !DILocation(line: 1263, column: 13, scope: !2766)
!2766 = distinct !DILexicalBlock(scope: !2761, file: !384, line: 1262, column: 31)
!2767 = !DILocation(line: 1263, column: 5, scope: !2766)
!2768 = !DILocation(line: 1266, column: 16, scope: !2769)
!2769 = distinct !DILexicalBlock(scope: !2766, file: !384, line: 1263, column: 19)
!2770 = !DILocation(line: 1266, column: 15, scope: !2769)
!2771 = !DILocation(line: 1266, column: 13, scope: !2769)
!2772 = !DILocation(line: 1267, column: 10, scope: !2769)
!2773 = !DILocation(line: 1270, column: 14, scope: !2769)
!2774 = !DILocation(line: 1270, column: 11, scope: !2769)
!2775 = !DILocation(line: 1271, column: 9, scope: !2769)
!2776 = !DILocation(line: 1274, column: 11, scope: !2769)
!2777 = !DILocation(line: 1275, column: 9, scope: !2769)
!2778 = !DILocation(line: 1280, column: 24, scope: !2766)
!2779 = !DILocation(line: 1280, column: 27, scope: !2766)
!2780 = !DILocation(line: 1280, column: 9, scope: !2766)
!2781 = !DILocation(line: 1280, column: 7, scope: !2766)
!2782 = !DILocation(line: 1281, column: 10, scope: !2783)
!2783 = distinct !DILexicalBlock(scope: !2766, file: !384, line: 1281, column: 9)
!2784 = !DILocation(line: 1281, column: 12, scope: !2783)
!2785 = !DILocation(line: 1281, column: 18, scope: !2783)
!2786 = !DILocation(line: 1281, column: 22, scope: !2783)
!2787 = !DILocation(line: 1281, column: 26, scope: !2783)
!2788 = !DILocation(line: 1281, column: 24, scope: !2783)
!2789 = !DILocation(line: 1281, column: 9, scope: !2766)
!2790 = !DILocation(line: 1281, column: 33, scope: !2783)
!2791 = !DILocation(line: 1282, column: 3, scope: !2766)
!2792 = !DILocation(line: 1262, column: 27, scope: !2761)
!2793 = !DILocation(line: 1262, column: 3, scope: !2761)
!2794 = distinct !{!2794, !2764, !2795}
!2795 = !DILocation(line: 1282, column: 3, scope: !2758)
!2796 = !DILocation(line: 1284, column: 7, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1284, column: 7)
!2798 = !DILocation(line: 1284, column: 14, scope: !2797)
!2799 = !DILocation(line: 1284, column: 18, scope: !2797)
!2800 = !DILocation(line: 1284, column: 17, scope: !2797)
!2801 = !DILocation(line: 1284, column: 23, scope: !2797)
!2802 = !DILocation(line: 1284, column: 7, scope: !2643)
!2803 = !DILocation(line: 1284, column: 39, scope: !2797)
!2804 = !DILocation(line: 1284, column: 30, scope: !2797)
!2805 = !DILocation(line: 1284, column: 37, scope: !2797)
!2806 = !DILocation(line: 1284, column: 29, scope: !2797)
!2807 = !DILocation(line: 1285, column: 7, scope: !2808)
!2808 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1285, column: 7)
!2809 = !DILocation(line: 1285, column: 14, scope: !2808)
!2810 = !DILocation(line: 1285, column: 18, scope: !2808)
!2811 = !DILocation(line: 1285, column: 17, scope: !2808)
!2812 = !DILocation(line: 1285, column: 24, scope: !2808)
!2813 = !DILocation(line: 1285, column: 7, scope: !2643)
!2814 = !DILocation(line: 1285, column: 39, scope: !2808)
!2815 = !DILocation(line: 1285, column: 30, scope: !2808)
!2816 = !DILocation(line: 1285, column: 37, scope: !2808)
!2817 = !DILocation(line: 1285, column: 29, scope: !2808)
!2818 = !DILocation(line: 1286, column: 7, scope: !2819)
!2819 = distinct !DILexicalBlock(scope: !2643, file: !384, line: 1286, column: 7)
!2820 = !DILocation(line: 1286, column: 14, scope: !2819)
!2821 = !DILocation(line: 1286, column: 18, scope: !2819)
!2822 = !DILocation(line: 1286, column: 17, scope: !2819)
!2823 = !DILocation(line: 1286, column: 23, scope: !2819)
!2824 = !DILocation(line: 1286, column: 7, scope: !2643)
!2825 = !DILocation(line: 1286, column: 39, scope: !2819)
!2826 = !DILocation(line: 1286, column: 30, scope: !2819)
!2827 = !DILocation(line: 1286, column: 37, scope: !2819)
!2828 = !DILocation(line: 1286, column: 29, scope: !2819)
!2829 = !DILocation(line: 1287, column: 3, scope: !2643)
!2830 = !DILabel(scope: !2643, name: "Invalid", file: !384, line: 1289)
!2831 = !DILocation(line: 1289, column: 1, scope: !2643)
!2832 = !DILocation(line: 1290, column: 3, scope: !2643)
!2833 = !DILocation(line: 1292, column: 1, scope: !2643)
!2834 = distinct !DISubprogram(name: "binn_ptr", scope: !384, file: !384, line: 1146, type: !2835, scopeLine: 1146, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{!82, !82}
!2837 = !DILocalVariable(name: "ptr", arg: 1, scope: !2834, file: !384, line: 1146, type: !82)
!2838 = !DILocation(line: 1146, column: 32, scope: !2834)
!2839 = !DILocalVariable(name: "item", scope: !2834, file: !384, line: 1147, type: !386)
!2840 = !DILocation(line: 1147, column: 9, scope: !2834)
!2841 = !DILocation(line: 1149, column: 29, scope: !2834)
!2842 = !DILocation(line: 1149, column: 11, scope: !2834)
!2843 = !DILocation(line: 1149, column: 3, scope: !2834)
!2844 = !DILocation(line: 1151, column: 20, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2834, file: !384, line: 1149, column: 35)
!2846 = !DILocation(line: 1151, column: 12, scope: !2845)
!2847 = !DILocation(line: 1151, column: 10, scope: !2845)
!2848 = !DILocation(line: 1152, column: 9, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2845, file: !384, line: 1152, column: 9)
!2850 = !DILocation(line: 1152, column: 15, scope: !2849)
!2851 = !DILocation(line: 1152, column: 24, scope: !2849)
!2852 = !DILocation(line: 1152, column: 27, scope: !2849)
!2853 = !DILocation(line: 1152, column: 33, scope: !2849)
!2854 = !DILocation(line: 1152, column: 9, scope: !2845)
!2855 = !DILocation(line: 1153, column: 24, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2849, file: !384, line: 1152, column: 40)
!2857 = !DILocation(line: 1153, column: 7, scope: !2856)
!2858 = !DILocation(line: 1154, column: 5, scope: !2856)
!2859 = !DILocation(line: 1155, column: 12, scope: !2845)
!2860 = !DILocation(line: 1155, column: 18, scope: !2845)
!2861 = !DILocation(line: 1155, column: 5, scope: !2845)
!2862 = !DILocation(line: 1157, column: 12, scope: !2845)
!2863 = !DILocation(line: 1157, column: 5, scope: !2845)
!2864 = !DILocation(line: 1159, column: 5, scope: !2845)
!2865 = !DILocation(line: 1162, column: 1, scope: !2834)
!2866 = distinct !DISubprogram(name: "IsValidBinnHeader", linkageName: "_ZL17IsValidBinnHeaderPvPiS0_S0_S0_", scope: !384, file: !384, line: 1036, type: !2867, scopeLine: 1036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!2867 = !DISubroutineType(types: !2868)
!2868 = !{!393, !82, !440, !440, !440, !440}
!2869 = !DILocalVariable(name: "pbuf", arg: 1, scope: !2866, file: !384, line: 1036, type: !82)
!2870 = !DILocation(line: 1036, column: 43, scope: !2866)
!2871 = !DILocalVariable(name: "ptype", arg: 2, scope: !2866, file: !384, line: 1036, type: !440)
!2872 = !DILocation(line: 1036, column: 54, scope: !2866)
!2873 = !DILocalVariable(name: "pcount", arg: 3, scope: !2866, file: !384, line: 1036, type: !440)
!2874 = !DILocation(line: 1036, column: 66, scope: !2866)
!2875 = !DILocalVariable(name: "psize", arg: 4, scope: !2866, file: !384, line: 1036, type: !440)
!2876 = !DILocation(line: 1036, column: 79, scope: !2866)
!2877 = !DILocalVariable(name: "pheadersize", arg: 5, scope: !2866, file: !384, line: 1036, type: !440)
!2878 = !DILocation(line: 1036, column: 91, scope: !2866)
!2879 = !DILocalVariable(name: "byte", scope: !2866, file: !384, line: 1037, type: !153)
!2880 = !DILocation(line: 1037, column: 17, scope: !2866)
!2881 = !DILocalVariable(name: "p", scope: !2866, file: !384, line: 1037, type: !439)
!2882 = !DILocation(line: 1037, column: 24, scope: !2866)
!2883 = !DILocalVariable(name: "plimit", scope: !2866, file: !384, line: 1037, type: !439)
!2884 = !DILocation(line: 1037, column: 28, scope: !2866)
!2885 = !DILocalVariable(name: "int32", scope: !2866, file: !384, line: 1038, type: !101)
!2886 = !DILocation(line: 1038, column: 7, scope: !2866)
!2887 = !DILocalVariable(name: "type", scope: !2866, file: !384, line: 1038, type: !101)
!2888 = !DILocation(line: 1038, column: 14, scope: !2866)
!2889 = !DILocalVariable(name: "size", scope: !2866, file: !384, line: 1038, type: !101)
!2890 = !DILocation(line: 1038, column: 20, scope: !2866)
!2891 = !DILocalVariable(name: "count", scope: !2866, file: !384, line: 1038, type: !101)
!2892 = !DILocation(line: 1038, column: 26, scope: !2866)
!2893 = !DILocation(line: 1040, column: 7, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1040, column: 7)
!2895 = !DILocation(line: 1040, column: 12, scope: !2894)
!2896 = !DILocation(line: 1040, column: 7, scope: !2866)
!2897 = !DILocation(line: 1040, column: 21, scope: !2894)
!2898 = !DILocation(line: 1042, column: 25, scope: !2866)
!2899 = !DILocation(line: 1042, column: 5, scope: !2866)
!2900 = !DILocation(line: 1044, column: 7, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1044, column: 7)
!2902 = !DILocation(line: 1044, column: 13, scope: !2901)
!2903 = !DILocation(line: 1044, column: 17, scope: !2901)
!2904 = !DILocation(line: 1044, column: 16, scope: !2901)
!2905 = !DILocation(line: 1044, column: 23, scope: !2901)
!2906 = !DILocation(line: 1044, column: 7, scope: !2866)
!2907 = !DILocation(line: 1045, column: 14, scope: !2908)
!2908 = distinct !DILexicalBlock(scope: !2901, file: !384, line: 1044, column: 28)
!2909 = !DILocation(line: 1045, column: 19, scope: !2908)
!2910 = !DILocation(line: 1045, column: 18, scope: !2908)
!2911 = !DILocation(line: 1045, column: 16, scope: !2908)
!2912 = !DILocation(line: 1045, column: 25, scope: !2908)
!2913 = !DILocation(line: 1045, column: 12, scope: !2908)
!2914 = !DILocation(line: 1046, column: 3, scope: !2908)
!2915 = !DILocation(line: 1049, column: 11, scope: !2866)
!2916 = !DILocation(line: 1049, column: 10, scope: !2866)
!2917 = !DILocation(line: 1049, column: 8, scope: !2866)
!2918 = !DILocation(line: 1049, column: 15, scope: !2866)
!2919 = !DILocation(line: 1050, column: 8, scope: !2920)
!2920 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1050, column: 7)
!2921 = !DILocation(line: 1050, column: 13, scope: !2920)
!2922 = !DILocation(line: 1050, column: 34, scope: !2920)
!2923 = !DILocation(line: 1050, column: 7, scope: !2866)
!2924 = !DILocation(line: 1050, column: 61, scope: !2920)
!2925 = !DILocation(line: 1051, column: 7, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1051, column: 7)
!2927 = !DILocation(line: 1051, column: 12, scope: !2926)
!2928 = !DILocation(line: 1051, column: 7, scope: !2866)
!2929 = !DILocation(line: 1051, column: 37, scope: !2926)
!2930 = !DILocation(line: 1052, column: 10, scope: !2866)
!2931 = !DILocation(line: 1052, column: 8, scope: !2866)
!2932 = !DILocation(line: 1054, column: 11, scope: !2866)
!2933 = !DILocation(line: 1054, column: 3, scope: !2866)
!2934 = !DILocation(line: 1058, column: 7, scope: !2935)
!2935 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1054, column: 17)
!2936 = !DILocation(line: 1060, column: 7, scope: !2935)
!2937 = !DILocation(line: 1064, column: 7, scope: !2938)
!2938 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1064, column: 7)
!2939 = !DILocation(line: 1064, column: 14, scope: !2938)
!2940 = !DILocation(line: 1064, column: 17, scope: !2938)
!2941 = !DILocation(line: 1064, column: 21, scope: !2938)
!2942 = !DILocation(line: 1064, column: 19, scope: !2938)
!2943 = !DILocation(line: 1064, column: 7, scope: !2866)
!2944 = !DILocation(line: 1064, column: 29, scope: !2938)
!2945 = !DILocation(line: 1065, column: 29, scope: !2866)
!2946 = !DILocation(line: 1065, column: 11, scope: !2866)
!2947 = !DILocation(line: 1065, column: 9, scope: !2866)
!2948 = !DILocation(line: 1066, column: 7, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1066, column: 7)
!2950 = !DILocation(line: 1066, column: 13, scope: !2949)
!2951 = !DILocation(line: 1066, column: 7, scope: !2866)
!2952 = !DILocation(line: 1067, column: 9, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2954, file: !384, line: 1067, column: 9)
!2954 = distinct !DILexicalBlock(scope: !2949, file: !384, line: 1066, column: 21)
!2955 = !DILocation(line: 1067, column: 16, scope: !2953)
!2956 = !DILocation(line: 1067, column: 19, scope: !2953)
!2957 = !DILocation(line: 1067, column: 21, scope: !2953)
!2958 = !DILocation(line: 1067, column: 35, scope: !2953)
!2959 = !DILocation(line: 1067, column: 41, scope: !2953)
!2960 = !DILocation(line: 1067, column: 39, scope: !2953)
!2961 = !DILocation(line: 1067, column: 9, scope: !2954)
!2962 = !DILocation(line: 1067, column: 49, scope: !2953)
!2963 = !DILocation(line: 1068, column: 21, scope: !2954)
!2964 = !DILocation(line: 1068, column: 13, scope: !2954)
!2965 = !DILocation(line: 1068, column: 11, scope: !2954)
!2966 = !DILocation(line: 1068, column: 26, scope: !2954)
!2967 = !DILocation(line: 1069, column: 22, scope: !2954)
!2968 = !DILocation(line: 1069, column: 13, scope: !2954)
!2969 = !DILocation(line: 1069, column: 11, scope: !2954)
!2970 = !DILocation(line: 1070, column: 11, scope: !2954)
!2971 = !DILocation(line: 1071, column: 3, scope: !2954)
!2972 = !DILocation(line: 1072, column: 6, scope: !2973)
!2973 = distinct !DILexicalBlock(scope: !2949, file: !384, line: 1071, column: 10)
!2974 = !DILocation(line: 1074, column: 10, scope: !2866)
!2975 = !DILocation(line: 1074, column: 8, scope: !2866)
!2976 = !DILocation(line: 1077, column: 7, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1077, column: 7)
!2978 = !DILocation(line: 1077, column: 14, scope: !2977)
!2979 = !DILocation(line: 1077, column: 17, scope: !2977)
!2980 = !DILocation(line: 1077, column: 21, scope: !2977)
!2981 = !DILocation(line: 1077, column: 19, scope: !2977)
!2982 = !DILocation(line: 1077, column: 7, scope: !2866)
!2983 = !DILocation(line: 1077, column: 29, scope: !2977)
!2984 = !DILocation(line: 1078, column: 29, scope: !2866)
!2985 = !DILocation(line: 1078, column: 11, scope: !2866)
!2986 = !DILocation(line: 1078, column: 9, scope: !2866)
!2987 = !DILocation(line: 1079, column: 7, scope: !2988)
!2988 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1079, column: 7)
!2989 = !DILocation(line: 1079, column: 13, scope: !2988)
!2990 = !DILocation(line: 1079, column: 7, scope: !2866)
!2991 = !DILocation(line: 1080, column: 9, scope: !2992)
!2992 = distinct !DILexicalBlock(scope: !2993, file: !384, line: 1080, column: 9)
!2993 = distinct !DILexicalBlock(scope: !2988, file: !384, line: 1079, column: 21)
!2994 = !DILocation(line: 1080, column: 16, scope: !2992)
!2995 = !DILocation(line: 1080, column: 19, scope: !2992)
!2996 = !DILocation(line: 1080, column: 21, scope: !2992)
!2997 = !DILocation(line: 1080, column: 35, scope: !2992)
!2998 = !DILocation(line: 1080, column: 41, scope: !2992)
!2999 = !DILocation(line: 1080, column: 39, scope: !2992)
!3000 = !DILocation(line: 1080, column: 9, scope: !2993)
!3001 = !DILocation(line: 1080, column: 49, scope: !2992)
!3002 = !DILocation(line: 1081, column: 21, scope: !2993)
!3003 = !DILocation(line: 1081, column: 13, scope: !2993)
!3004 = !DILocation(line: 1081, column: 11, scope: !2993)
!3005 = !DILocation(line: 1081, column: 26, scope: !2993)
!3006 = !DILocation(line: 1082, column: 22, scope: !2993)
!3007 = !DILocation(line: 1082, column: 13, scope: !2993)
!3008 = !DILocation(line: 1082, column: 11, scope: !2993)
!3009 = !DILocation(line: 1083, column: 11, scope: !2993)
!3010 = !DILocation(line: 1084, column: 3, scope: !2993)
!3011 = !DILocation(line: 1085, column: 6, scope: !3012)
!3012 = distinct !DILexicalBlock(scope: !2988, file: !384, line: 1084, column: 10)
!3013 = !DILocation(line: 1087, column: 11, scope: !2866)
!3014 = !DILocation(line: 1087, column: 9, scope: !2866)
!3015 = !DILocation(line: 1101, column: 8, scope: !3016)
!3016 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1101, column: 7)
!3017 = !DILocation(line: 1101, column: 13, scope: !3016)
!3018 = !DILocation(line: 1101, column: 30, scope: !3016)
!3019 = !DILocation(line: 1101, column: 34, scope: !3016)
!3020 = !DILocation(line: 1101, column: 40, scope: !3016)
!3021 = !DILocation(line: 1101, column: 7, scope: !2866)
!3022 = !DILocation(line: 1101, column: 46, scope: !3016)
!3023 = !DILocation(line: 1104, column: 7, scope: !3024)
!3024 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1104, column: 7)
!3025 = !DILocation(line: 1104, column: 7, scope: !2866)
!3026 = !DILocation(line: 1104, column: 25, scope: !3024)
!3027 = !DILocation(line: 1104, column: 16, scope: !3024)
!3028 = !DILocation(line: 1104, column: 23, scope: !3024)
!3029 = !DILocation(line: 1104, column: 15, scope: !3024)
!3030 = !DILocation(line: 1105, column: 7, scope: !3031)
!3031 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1105, column: 7)
!3032 = !DILocation(line: 1105, column: 7, scope: !2866)
!3033 = !DILocation(line: 1105, column: 25, scope: !3031)
!3034 = !DILocation(line: 1105, column: 16, scope: !3031)
!3035 = !DILocation(line: 1105, column: 23, scope: !3031)
!3036 = !DILocation(line: 1105, column: 15, scope: !3031)
!3037 = !DILocation(line: 1106, column: 7, scope: !3038)
!3038 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1106, column: 7)
!3039 = !DILocation(line: 1106, column: 13, scope: !3038)
!3040 = !DILocation(line: 1106, column: 17, scope: !3038)
!3041 = !DILocation(line: 1106, column: 16, scope: !3038)
!3042 = !DILocation(line: 1106, column: 22, scope: !3038)
!3043 = !DILocation(line: 1106, column: 7, scope: !2866)
!3044 = !DILocation(line: 1106, column: 36, scope: !3038)
!3045 = !DILocation(line: 1106, column: 28, scope: !3038)
!3046 = !DILocation(line: 1106, column: 34, scope: !3038)
!3047 = !DILocation(line: 1106, column: 27, scope: !3038)
!3048 = !DILocation(line: 1107, column: 7, scope: !3049)
!3049 = distinct !DILexicalBlock(scope: !2866, file: !384, line: 1107, column: 7)
!3050 = !DILocation(line: 1107, column: 7, scope: !2866)
!3051 = !DILocation(line: 1107, column: 42, scope: !3049)
!3052 = !DILocation(line: 1107, column: 62, scope: !3049)
!3053 = !DILocation(line: 1107, column: 44, scope: !3049)
!3054 = !DILocation(line: 1107, column: 41, scope: !3049)
!3055 = !DILocation(line: 1107, column: 21, scope: !3049)
!3056 = !DILocation(line: 1107, column: 33, scope: !3049)
!3057 = !DILocation(line: 1107, column: 20, scope: !3049)
!3058 = !DILocation(line: 1108, column: 3, scope: !2866)
!3059 = !DILocation(line: 1109, column: 1, scope: !2866)
!3060 = distinct !DISubprogram(name: "AdvanceDataPos", linkageName: "_ZL14AdvanceDataPosPhS_", scope: !384, file: !384, line: 451, type: !3061, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3061 = !DISubroutineType(types: !3062)
!3062 = !{!439, !439, !439}
!3063 = !DILocalVariable(name: "p", arg: 1, scope: !3060, file: !384, line: 451, type: !439)
!3064 = !DILocation(line: 451, column: 60, scope: !3060)
!3065 = !DILocalVariable(name: "plimit", arg: 2, scope: !3060, file: !384, line: 451, type: !439)
!3066 = !DILocation(line: 451, column: 78, scope: !3060)
!3067 = !DILocalVariable(name: "byte", scope: !3060, file: !384, line: 452, type: !153)
!3068 = !DILocation(line: 452, column: 17, scope: !3060)
!3069 = !DILocalVariable(name: "storage_type", scope: !3060, file: !384, line: 453, type: !101)
!3070 = !DILocation(line: 453, column: 8, scope: !3060)
!3071 = !DILocalVariable(name: "DataSize", scope: !3060, file: !384, line: 453, type: !101)
!3072 = !DILocation(line: 453, column: 22, scope: !3060)
!3073 = !DILocation(line: 455, column: 7, scope: !3074)
!3074 = distinct !DILexicalBlock(scope: !3060, file: !384, line: 455, column: 7)
!3075 = !DILocation(line: 455, column: 11, scope: !3074)
!3076 = !DILocation(line: 455, column: 9, scope: !3074)
!3077 = !DILocation(line: 455, column: 7, scope: !3060)
!3078 = !DILocation(line: 455, column: 19, scope: !3074)
!3079 = !DILocation(line: 457, column: 11, scope: !3060)
!3080 = !DILocation(line: 457, column: 10, scope: !3060)
!3081 = !DILocation(line: 457, column: 8, scope: !3060)
!3082 = !DILocation(line: 457, column: 15, scope: !3060)
!3083 = !DILocation(line: 458, column: 18, scope: !3060)
!3084 = !DILocation(line: 458, column: 23, scope: !3060)
!3085 = !DILocation(line: 458, column: 16, scope: !3060)
!3086 = !DILocation(line: 459, column: 7, scope: !3087)
!3087 = distinct !DILexicalBlock(scope: !3060, file: !384, line: 459, column: 7)
!3088 = !DILocation(line: 459, column: 12, scope: !3087)
!3089 = !DILocation(line: 459, column: 7, scope: !3060)
!3090 = !DILocation(line: 459, column: 38, scope: !3087)
!3091 = !DILocation(line: 459, column: 37, scope: !3087)
!3092 = !DILocation(line: 461, column: 11, scope: !3060)
!3093 = !DILocation(line: 461, column: 3, scope: !3060)
!3094 = !DILocation(line: 464, column: 5, scope: !3095)
!3095 = distinct !DILexicalBlock(scope: !3060, file: !384, line: 461, column: 25)
!3096 = !DILocation(line: 466, column: 7, scope: !3095)
!3097 = !DILocation(line: 467, column: 5, scope: !3095)
!3098 = !DILocation(line: 469, column: 7, scope: !3095)
!3099 = !DILocation(line: 470, column: 5, scope: !3095)
!3100 = !DILocation(line: 472, column: 7, scope: !3095)
!3101 = !DILocation(line: 473, column: 5, scope: !3095)
!3102 = !DILocation(line: 475, column: 7, scope: !3095)
!3103 = !DILocation(line: 476, column: 5, scope: !3095)
!3104 = !DILocation(line: 478, column: 9, scope: !3105)
!3105 = distinct !DILexicalBlock(scope: !3095, file: !384, line: 478, column: 9)
!3106 = !DILocation(line: 478, column: 11, scope: !3105)
!3107 = !DILocation(line: 478, column: 25, scope: !3105)
!3108 = !DILocation(line: 478, column: 31, scope: !3105)
!3109 = !DILocation(line: 478, column: 29, scope: !3105)
!3110 = !DILocation(line: 478, column: 9, scope: !3095)
!3111 = !DILocation(line: 478, column: 39, scope: !3105)
!3112 = !DILocation(line: 479, column: 25, scope: !3095)
!3113 = !DILocation(line: 479, column: 16, scope: !3095)
!3114 = !DILocation(line: 479, column: 14, scope: !3095)
!3115 = !DILocation(line: 480, column: 25, scope: !3095)
!3116 = !DILocation(line: 480, column: 16, scope: !3095)
!3117 = !DILocation(line: 480, column: 14, scope: !3095)
!3118 = !DILocation(line: 481, column: 14, scope: !3095)
!3119 = !DILocation(line: 481, column: 12, scope: !3095)
!3120 = !DILocation(line: 481, column: 7, scope: !3095)
!3121 = !DILocation(line: 482, column: 5, scope: !3095)
!3122 = !DILocation(line: 484, column: 9, scope: !3123)
!3123 = distinct !DILexicalBlock(scope: !3095, file: !384, line: 484, column: 9)
!3124 = !DILocation(line: 484, column: 13, scope: !3123)
!3125 = !DILocation(line: 484, column: 11, scope: !3123)
!3126 = !DILocation(line: 484, column: 9, scope: !3095)
!3127 = !DILocation(line: 484, column: 21, scope: !3123)
!3128 = !DILocation(line: 485, column: 34, scope: !3095)
!3129 = !DILocation(line: 485, column: 16, scope: !3095)
!3130 = !DILocation(line: 485, column: 14, scope: !3095)
!3131 = !DILocation(line: 486, column: 9, scope: !3132)
!3132 = distinct !DILexicalBlock(scope: !3095, file: !384, line: 486, column: 9)
!3133 = !DILocation(line: 486, column: 18, scope: !3132)
!3134 = !DILocation(line: 486, column: 9, scope: !3095)
!3135 = !DILocation(line: 487, column: 11, scope: !3136)
!3136 = distinct !DILexicalBlock(scope: !3137, file: !384, line: 487, column: 11)
!3137 = distinct !DILexicalBlock(scope: !3132, file: !384, line: 486, column: 26)
!3138 = !DILocation(line: 487, column: 13, scope: !3136)
!3139 = !DILocation(line: 487, column: 27, scope: !3136)
!3140 = !DILocation(line: 487, column: 33, scope: !3136)
!3141 = !DILocation(line: 487, column: 31, scope: !3136)
!3142 = !DILocation(line: 487, column: 11, scope: !3137)
!3143 = !DILocation(line: 487, column: 41, scope: !3136)
!3144 = !DILocation(line: 488, column: 26, scope: !3137)
!3145 = !DILocation(line: 488, column: 18, scope: !3137)
!3146 = !DILocation(line: 488, column: 16, scope: !3137)
!3147 = !DILocation(line: 489, column: 27, scope: !3137)
!3148 = !DILocation(line: 489, column: 18, scope: !3137)
!3149 = !DILocation(line: 489, column: 16, scope: !3137)
!3150 = !DILocation(line: 490, column: 16, scope: !3137)
!3151 = !DILocation(line: 491, column: 5, scope: !3137)
!3152 = !DILocation(line: 492, column: 13, scope: !3095)
!3153 = !DILocation(line: 493, column: 10, scope: !3095)
!3154 = !DILocation(line: 493, column: 7, scope: !3095)
!3155 = !DILocation(line: 494, column: 5, scope: !3095)
!3156 = !DILocation(line: 496, column: 9, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3095, file: !384, line: 496, column: 9)
!3158 = !DILocation(line: 496, column: 13, scope: !3157)
!3159 = !DILocation(line: 496, column: 11, scope: !3157)
!3160 = !DILocation(line: 496, column: 9, scope: !3095)
!3161 = !DILocation(line: 496, column: 21, scope: !3157)
!3162 = !DILocation(line: 497, column: 34, scope: !3095)
!3163 = !DILocation(line: 497, column: 16, scope: !3095)
!3164 = !DILocation(line: 497, column: 14, scope: !3095)
!3165 = !DILocation(line: 498, column: 9, scope: !3166)
!3166 = distinct !DILexicalBlock(scope: !3095, file: !384, line: 498, column: 9)
!3167 = !DILocation(line: 498, column: 18, scope: !3166)
!3168 = !DILocation(line: 498, column: 9, scope: !3095)
!3169 = !DILocation(line: 499, column: 11, scope: !3170)
!3170 = distinct !DILexicalBlock(scope: !3171, file: !384, line: 499, column: 11)
!3171 = distinct !DILexicalBlock(scope: !3166, file: !384, line: 498, column: 26)
!3172 = !DILocation(line: 499, column: 13, scope: !3170)
!3173 = !DILocation(line: 499, column: 27, scope: !3170)
!3174 = !DILocation(line: 499, column: 33, scope: !3170)
!3175 = !DILocation(line: 499, column: 31, scope: !3170)
!3176 = !DILocation(line: 499, column: 11, scope: !3171)
!3177 = !DILocation(line: 499, column: 41, scope: !3170)
!3178 = !DILocation(line: 500, column: 26, scope: !3171)
!3179 = !DILocation(line: 500, column: 18, scope: !3171)
!3180 = !DILocation(line: 500, column: 16, scope: !3171)
!3181 = !DILocation(line: 500, column: 31, scope: !3171)
!3182 = !DILocation(line: 501, column: 27, scope: !3171)
!3183 = !DILocation(line: 501, column: 18, scope: !3171)
!3184 = !DILocation(line: 501, column: 16, scope: !3171)
!3185 = !DILocation(line: 502, column: 16, scope: !3171)
!3186 = !DILocation(line: 503, column: 5, scope: !3171)
!3187 = !DILocation(line: 504, column: 8, scope: !3188)
!3188 = distinct !DILexicalBlock(scope: !3166, file: !384, line: 503, column: 12)
!3189 = !DILocation(line: 506, column: 10, scope: !3095)
!3190 = !DILocation(line: 506, column: 7, scope: !3095)
!3191 = !DILocation(line: 507, column: 6, scope: !3095)
!3192 = !DILocation(line: 508, column: 5, scope: !3095)
!3193 = !DILocation(line: 510, column: 5, scope: !3095)
!3194 = !DILocation(line: 513, column: 7, scope: !3195)
!3195 = distinct !DILexicalBlock(scope: !3060, file: !384, line: 513, column: 7)
!3196 = !DILocation(line: 513, column: 11, scope: !3195)
!3197 = !DILocation(line: 513, column: 9, scope: !3195)
!3198 = !DILocation(line: 513, column: 7, scope: !3060)
!3199 = !DILocation(line: 513, column: 19, scope: !3195)
!3200 = !DILocation(line: 515, column: 10, scope: !3060)
!3201 = !DILocation(line: 515, column: 3, scope: !3060)
!3202 = !DILocation(line: 517, column: 1, scope: !3060)
!3203 = distinct !DISubprogram(name: "tobe32", linkageName: "_ZL6tobe32j", scope: !384, file: !384, line: 73, type: !3204, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3204 = !DISubroutineType(types: !3205)
!3205 = !{!7, !7}
!3206 = !DILocalVariable(name: "input", arg: 1, scope: !3203, file: !384, line: 73, type: !7)
!3207 = !DILocation(line: 73, column: 47, scope: !3203)
!3208 = !DILocalVariable(name: "result", scope: !3203, file: !384, line: 77, type: !7)
!3209 = !DILocation(line: 77, column: 16, scope: !3203)
!3210 = !DILocalVariable(name: "source", scope: !3203, file: !384, line: 78, type: !439)
!3211 = !DILocation(line: 78, column: 18, scope: !3203)
!3212 = !DILocation(line: 78, column: 27, scope: !3203)
!3213 = !DILocalVariable(name: "dest", scope: !3203, file: !384, line: 79, type: !439)
!3214 = !DILocation(line: 79, column: 18, scope: !3203)
!3215 = !DILocation(line: 79, column: 25, scope: !3203)
!3216 = !DILocation(line: 81, column: 13, scope: !3203)
!3217 = !DILocation(line: 81, column: 3, scope: !3203)
!3218 = !DILocation(line: 81, column: 11, scope: !3203)
!3219 = !DILocation(line: 82, column: 13, scope: !3203)
!3220 = !DILocation(line: 82, column: 3, scope: !3203)
!3221 = !DILocation(line: 82, column: 11, scope: !3203)
!3222 = !DILocation(line: 83, column: 13, scope: !3203)
!3223 = !DILocation(line: 83, column: 3, scope: !3203)
!3224 = !DILocation(line: 83, column: 11, scope: !3203)
!3225 = !DILocation(line: 84, column: 13, scope: !3203)
!3226 = !DILocation(line: 84, column: 3, scope: !3203)
!3227 = !DILocation(line: 84, column: 11, scope: !3203)
!3228 = !DILocation(line: 86, column: 10, scope: !3203)
!3229 = !DILocation(line: 86, column: 3, scope: !3203)
!3230 = distinct !DISubprogram(name: "binn_get_ptr_type", linkageName: "_ZL17binn_get_ptr_typePv", scope: !384, file: !384, line: 364, type: !375, scopeLine: 364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3231 = !DILocalVariable(name: "ptr", arg: 1, scope: !3230, file: !384, line: 364, type: !82)
!3232 = !DILocation(line: 364, column: 42, scope: !3230)
!3233 = !DILocation(line: 366, column: 7, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3230, file: !384, line: 366, column: 7)
!3235 = !DILocation(line: 366, column: 11, scope: !3234)
!3236 = !DILocation(line: 366, column: 7, scope: !3230)
!3237 = !DILocation(line: 366, column: 20, scope: !3234)
!3238 = !DILocation(line: 368, column: 28, scope: !3230)
!3239 = !DILocation(line: 368, column: 12, scope: !3230)
!3240 = !DILocation(line: 368, column: 11, scope: !3230)
!3241 = !DILocation(line: 368, column: 3, scope: !3230)
!3242 = !DILocation(line: 370, column: 5, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3230, file: !384, line: 368, column: 33)
!3244 = !DILocation(line: 372, column: 5, scope: !3243)
!3245 = !DILocation(line: 375, column: 1, scope: !3230)
!3246 = distinct !DISubprogram(name: "binn_save_header", linkageName: "_ZL16binn_save_headerP11binn_struct", scope: !384, file: !384, line: 916, type: !2540, scopeLine: 916, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3247 = !DILocalVariable(name: "item", arg: 1, scope: !3246, file: !384, line: 916, type: !386)
!3248 = !DILocation(line: 916, column: 42, scope: !3246)
!3249 = !DILocalVariable(name: "byte", scope: !3246, file: !384, line: 917, type: !153)
!3250 = !DILocation(line: 917, column: 17, scope: !3246)
!3251 = !DILocalVariable(name: "p", scope: !3246, file: !384, line: 917, type: !439)
!3252 = !DILocation(line: 917, column: 24, scope: !3246)
!3253 = !DILocalVariable(name: "int32", scope: !3246, file: !384, line: 918, type: !101)
!3254 = !DILocation(line: 918, column: 7, scope: !3246)
!3255 = !DILocalVariable(name: "size", scope: !3246, file: !384, line: 918, type: !101)
!3256 = !DILocation(line: 918, column: 14, scope: !3246)
!3257 = !DILocation(line: 920, column: 7, scope: !3258)
!3258 = distinct !DILexicalBlock(scope: !3246, file: !384, line: 920, column: 7)
!3259 = !DILocation(line: 920, column: 12, scope: !3258)
!3260 = !DILocation(line: 920, column: 7, scope: !3246)
!3261 = !DILocation(line: 920, column: 21, scope: !3258)
!3262 = !DILocation(line: 924, column: 26, scope: !3246)
!3263 = !DILocation(line: 924, column: 32, scope: !3246)
!3264 = !DILocation(line: 924, column: 38, scope: !3246)
!3265 = !DILocation(line: 924, column: 5, scope: !3246)
!3266 = !DILocation(line: 925, column: 10, scope: !3246)
!3267 = !DILocation(line: 925, column: 16, scope: !3246)
!3268 = !DILocation(line: 925, column: 26, scope: !3246)
!3269 = !DILocation(line: 925, column: 44, scope: !3246)
!3270 = !DILocation(line: 925, column: 8, scope: !3246)
!3271 = !DILocation(line: 928, column: 7, scope: !3272)
!3272 = distinct !DILexicalBlock(scope: !3246, file: !384, line: 928, column: 7)
!3273 = !DILocation(line: 928, column: 13, scope: !3272)
!3274 = !DILocation(line: 928, column: 19, scope: !3272)
!3275 = !DILocation(line: 928, column: 7, scope: !3246)
!3276 = !DILocation(line: 929, column: 7, scope: !3277)
!3277 = distinct !DILexicalBlock(scope: !3272, file: !384, line: 928, column: 26)
!3278 = !DILocation(line: 930, column: 10, scope: !3277)
!3279 = !DILocation(line: 931, column: 13, scope: !3277)
!3280 = !DILocation(line: 931, column: 19, scope: !3277)
!3281 = !DILocation(line: 931, column: 25, scope: !3277)
!3282 = !DILocation(line: 931, column: 11, scope: !3277)
!3283 = !DILocation(line: 932, column: 20, scope: !3277)
!3284 = !DILocation(line: 932, column: 13, scope: !3277)
!3285 = !DILocation(line: 932, column: 11, scope: !3277)
!3286 = !DILocation(line: 933, column: 19, scope: !3277)
!3287 = !DILocation(line: 933, column: 14, scope: !3277)
!3288 = !DILocation(line: 933, column: 5, scope: !3277)
!3289 = !DILocation(line: 933, column: 17, scope: !3277)
!3290 = !DILocation(line: 934, column: 3, scope: !3277)
!3291 = !DILocation(line: 935, column: 6, scope: !3292)
!3292 = distinct !DILexicalBlock(scope: !3272, file: !384, line: 934, column: 10)
!3293 = !DILocation(line: 936, column: 26, scope: !3292)
!3294 = !DILocation(line: 936, column: 32, scope: !3292)
!3295 = !DILocation(line: 936, column: 6, scope: !3292)
!3296 = !DILocation(line: 936, column: 8, scope: !3292)
!3297 = !DILocation(line: 940, column: 7, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3246, file: !384, line: 940, column: 7)
!3299 = !DILocation(line: 940, column: 12, scope: !3298)
!3300 = !DILocation(line: 940, column: 7, scope: !3246)
!3301 = !DILocation(line: 941, column: 7, scope: !3302)
!3302 = distinct !DILexicalBlock(scope: !3298, file: !384, line: 940, column: 19)
!3303 = !DILocation(line: 942, column: 10, scope: !3302)
!3304 = !DILocation(line: 943, column: 13, scope: !3302)
!3305 = !DILocation(line: 943, column: 18, scope: !3302)
!3306 = !DILocation(line: 943, column: 11, scope: !3302)
!3307 = !DILocation(line: 944, column: 20, scope: !3302)
!3308 = !DILocation(line: 944, column: 13, scope: !3302)
!3309 = !DILocation(line: 944, column: 11, scope: !3302)
!3310 = !DILocation(line: 945, column: 19, scope: !3302)
!3311 = !DILocation(line: 945, column: 14, scope: !3302)
!3312 = !DILocation(line: 945, column: 5, scope: !3302)
!3313 = !DILocation(line: 945, column: 17, scope: !3302)
!3314 = !DILocation(line: 946, column: 3, scope: !3302)
!3315 = !DILocation(line: 947, column: 6, scope: !3316)
!3316 = distinct !DILexicalBlock(scope: !3298, file: !384, line: 946, column: 10)
!3317 = !DILocation(line: 948, column: 26, scope: !3316)
!3318 = !DILocation(line: 948, column: 6, scope: !3316)
!3319 = !DILocation(line: 948, column: 8, scope: !3316)
!3320 = !DILocation(line: 952, column: 4, scope: !3246)
!3321 = !DILocation(line: 953, column: 24, scope: !3246)
!3322 = !DILocation(line: 953, column: 30, scope: !3246)
!3323 = !DILocation(line: 953, column: 4, scope: !3246)
!3324 = !DILocation(line: 953, column: 6, scope: !3246)
!3325 = !DILocation(line: 956, column: 15, scope: !3246)
!3326 = !DILocation(line: 956, column: 3, scope: !3246)
!3327 = !DILocation(line: 956, column: 9, scope: !3246)
!3328 = !DILocation(line: 956, column: 13, scope: !3246)
!3329 = !DILocation(line: 957, column: 16, scope: !3246)
!3330 = !DILocation(line: 957, column: 3, scope: !3246)
!3331 = !DILocation(line: 957, column: 9, scope: !3246)
!3332 = !DILocation(line: 957, column: 14, scope: !3246)
!3333 = !DILocation(line: 982, column: 3, scope: !3246)
!3334 = !DILocation(line: 982, column: 9, scope: !3246)
!3335 = !DILocation(line: 982, column: 15, scope: !3246)
!3336 = !DILocation(line: 984, column: 3, scope: !3246)
!3337 = !DILocation(line: 986, column: 1, scope: !3246)
!3338 = distinct !DISubprogram(name: "binn_open", scope: !384, file: !384, line: 347, type: !3339, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3339 = !DISubroutineType(types: !3340)
!3340 = !{!386, !82}
!3341 = !DILocalVariable(name: "data", arg: 1, scope: !3338, file: !384, line: 347, type: !82)
!3342 = !DILocation(line: 347, column: 33, scope: !3338)
!3343 = !DILocalVariable(name: "item", scope: !3338, file: !384, line: 348, type: !386)
!3344 = !DILocation(line: 348, column: 9, scope: !3338)
!3345 = !DILocation(line: 350, column: 18, scope: !3338)
!3346 = !DILocation(line: 350, column: 10, scope: !3338)
!3347 = !DILocation(line: 350, column: 8, scope: !3338)
!3348 = !DILocation(line: 352, column: 17, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3338, file: !384, line: 352, column: 7)
!3350 = !DILocation(line: 352, column: 23, scope: !3349)
!3351 = !DILocation(line: 352, column: 7, scope: !3349)
!3352 = !DILocation(line: 352, column: 29, scope: !3349)
!3353 = !DILocation(line: 352, column: 7, scope: !3338)
!3354 = !DILocation(line: 353, column: 5, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3349, file: !384, line: 352, column: 39)
!3356 = !DILocation(line: 353, column: 13, scope: !3355)
!3357 = !DILocation(line: 354, column: 5, scope: !3355)
!3358 = !DILocation(line: 357, column: 3, scope: !3338)
!3359 = !DILocation(line: 357, column: 9, scope: !3338)
!3360 = !DILocation(line: 357, column: 19, scope: !3338)
!3361 = !DILocation(line: 358, column: 10, scope: !3338)
!3362 = !DILocation(line: 358, column: 3, scope: !3338)
!3363 = !DILocation(line: 360, column: 1, scope: !3338)
!3364 = distinct !DISubprogram(name: "binn_is_struct", scope: !384, file: !384, line: 379, type: !3365, scopeLine: 379, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3365 = !DISubroutineType(types: !3366)
!3366 = !{!393, !82}
!3367 = !DILocalVariable(name: "ptr", arg: 1, scope: !3364, file: !384, line: 379, type: !82)
!3368 = !DILocation(line: 379, column: 36, scope: !3364)
!3369 = !DILocation(line: 381, column: 7, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3364, file: !384, line: 381, column: 7)
!3371 = !DILocation(line: 381, column: 11, scope: !3370)
!3372 = !DILocation(line: 381, column: 7, scope: !3364)
!3373 = !DILocation(line: 381, column: 20, scope: !3370)
!3374 = !DILocation(line: 383, column: 25, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3364, file: !384, line: 383, column: 7)
!3376 = !DILocation(line: 383, column: 9, scope: !3375)
!3377 = !DILocation(line: 383, column: 8, scope: !3375)
!3378 = !DILocation(line: 383, column: 30, scope: !3375)
!3379 = !DILocation(line: 383, column: 7, scope: !3364)
!3380 = !DILocation(line: 384, column: 5, scope: !3381)
!3381 = distinct !DILexicalBlock(scope: !3375, file: !384, line: 383, column: 45)
!3382 = !DILocation(line: 386, column: 5, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3375, file: !384, line: 385, column: 10)
!3384 = !DILocation(line: 389, column: 1, scope: !3364)
!3385 = distinct !DISubprogram(name: "binn_free", scope: !384, file: !384, line: 990, type: !3386, scopeLine: 990, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3386 = !DISubroutineType(types: !3387)
!3387 = !{null, !386}
!3388 = !DILocalVariable(name: "item", arg: 1, scope: !3385, file: !384, line: 990, type: !386)
!3389 = !DILocation(line: 990, column: 31, scope: !3385)
!3390 = !DILocation(line: 992, column: 7, scope: !3391)
!3391 = distinct !DILexicalBlock(scope: !3385, file: !384, line: 992, column: 7)
!3392 = !DILocation(line: 992, column: 12, scope: !3391)
!3393 = !DILocation(line: 992, column: 7, scope: !3385)
!3394 = !DILocation(line: 992, column: 21, scope: !3391)
!3395 = !DILocation(line: 994, column: 8, scope: !3396)
!3396 = distinct !DILexicalBlock(scope: !3385, file: !384, line: 994, column: 7)
!3397 = !DILocation(line: 994, column: 14, scope: !3396)
!3398 = !DILocation(line: 994, column: 7, scope: !3396)
!3399 = !DILocation(line: 994, column: 24, scope: !3396)
!3400 = !DILocation(line: 994, column: 28, scope: !3396)
!3401 = !DILocation(line: 994, column: 34, scope: !3396)
!3402 = !DILocation(line: 994, column: 48, scope: !3396)
!3403 = !DILocation(line: 994, column: 7, scope: !3385)
!3404 = !DILocation(line: 995, column: 5, scope: !3405)
!3405 = distinct !DILexicalBlock(scope: !3396, file: !384, line: 994, column: 59)
!3406 = !DILocation(line: 995, column: 13, scope: !3405)
!3407 = !DILocation(line: 995, column: 19, scope: !3405)
!3408 = !DILocation(line: 996, column: 3, scope: !3405)
!3409 = !DILocation(line: 998, column: 7, scope: !3410)
!3410 = distinct !DILexicalBlock(scope: !3385, file: !384, line: 998, column: 7)
!3411 = !DILocation(line: 998, column: 13, scope: !3410)
!3412 = !DILocation(line: 998, column: 7, scope: !3385)
!3413 = !DILocation(line: 998, column: 21, scope: !3410)
!3414 = !DILocation(line: 998, column: 27, scope: !3410)
!3415 = !DILocation(line: 998, column: 34, scope: !3410)
!3416 = !DILocation(line: 998, column: 40, scope: !3410)
!3417 = !DILocation(line: 1000, column: 7, scope: !3418)
!3418 = distinct !DILexicalBlock(scope: !3385, file: !384, line: 1000, column: 7)
!3419 = !DILocation(line: 1000, column: 13, scope: !3418)
!3420 = !DILocation(line: 1000, column: 7, scope: !3385)
!3421 = !DILocation(line: 1001, column: 5, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3418, file: !384, line: 1000, column: 24)
!3423 = !DILocation(line: 1001, column: 13, scope: !3422)
!3424 = !DILocation(line: 1002, column: 3, scope: !3422)
!3425 = !DILocation(line: 1003, column: 12, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3418, file: !384, line: 1002, column: 10)
!3427 = !DILocation(line: 1003, column: 5, scope: !3426)
!3428 = !DILocation(line: 1004, column: 5, scope: !3426)
!3429 = !DILocation(line: 1004, column: 11, scope: !3426)
!3430 = !DILocation(line: 1004, column: 18, scope: !3426)
!3431 = !DILocation(line: 1007, column: 1, scope: !3385)
!3432 = distinct !DISubprogram(name: "binn_release", scope: !384, file: !384, line: 1011, type: !3433, scopeLine: 1011, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3433 = !DISubroutineType(types: !3434)
!3434 = !{!82, !386}
!3435 = !DILocalVariable(name: "item", arg: 1, scope: !3432, file: !384, line: 1011, type: !386)
!3436 = !DILocation(line: 1011, column: 36, scope: !3432)
!3437 = !DILocalVariable(name: "data", scope: !3432, file: !384, line: 1012, type: !82)
!3438 = !DILocation(line: 1012, column: 9, scope: !3432)
!3439 = !DILocation(line: 1014, column: 7, scope: !3440)
!3440 = distinct !DILexicalBlock(scope: !3432, file: !384, line: 1014, column: 7)
!3441 = !DILocation(line: 1014, column: 12, scope: !3440)
!3442 = !DILocation(line: 1014, column: 7, scope: !3432)
!3443 = !DILocation(line: 1014, column: 21, scope: !3440)
!3444 = !DILocation(line: 1016, column: 19, scope: !3432)
!3445 = !DILocation(line: 1016, column: 10, scope: !3432)
!3446 = !DILocation(line: 1016, column: 8, scope: !3432)
!3447 = !DILocation(line: 1018, column: 7, scope: !3448)
!3448 = distinct !DILexicalBlock(scope: !3432, file: !384, line: 1018, column: 7)
!3449 = !DILocation(line: 1018, column: 14, scope: !3448)
!3450 = !DILocation(line: 1018, column: 20, scope: !3448)
!3451 = !DILocation(line: 1018, column: 12, scope: !3448)
!3452 = !DILocation(line: 1018, column: 7, scope: !3432)
!3453 = !DILocation(line: 1019, column: 13, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3448, file: !384, line: 1018, column: 26)
!3455 = !DILocation(line: 1019, column: 19, scope: !3454)
!3456 = !DILocation(line: 1019, column: 25, scope: !3454)
!3457 = !DILocation(line: 1019, column: 31, scope: !3454)
!3458 = !DILocation(line: 1019, column: 37, scope: !3454)
!3459 = !DILocation(line: 1019, column: 5, scope: !3454)
!3460 = !DILocation(line: 1020, column: 12, scope: !3454)
!3461 = !DILocation(line: 1020, column: 18, scope: !3454)
!3462 = !DILocation(line: 1020, column: 10, scope: !3454)
!3463 = !DILocation(line: 1021, column: 3, scope: !3454)
!3464 = !DILocation(line: 1023, column: 7, scope: !3465)
!3465 = distinct !DILexicalBlock(scope: !3432, file: !384, line: 1023, column: 7)
!3466 = !DILocation(line: 1023, column: 13, scope: !3465)
!3467 = !DILocation(line: 1023, column: 7, scope: !3432)
!3468 = !DILocation(line: 1024, column: 5, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !3465, file: !384, line: 1023, column: 24)
!3470 = !DILocation(line: 1024, column: 13, scope: !3469)
!3471 = !DILocation(line: 1025, column: 3, scope: !3469)
!3472 = !DILocation(line: 1026, column: 12, scope: !3473)
!3473 = distinct !DILexicalBlock(scope: !3465, file: !384, line: 1025, column: 10)
!3474 = !DILocation(line: 1026, column: 5, scope: !3473)
!3475 = !DILocation(line: 1027, column: 5, scope: !3473)
!3476 = !DILocation(line: 1027, column: 11, scope: !3473)
!3477 = !DILocation(line: 1027, column: 18, scope: !3473)
!3478 = !DILocation(line: 1030, column: 10, scope: !3432)
!3479 = !DILocation(line: 1030, column: 3, scope: !3432)
!3480 = !DILocation(line: 1032, column: 1, scope: !3432)
!3481 = distinct !DISubprogram(name: "binn_size", scope: !384, file: !384, line: 1166, type: !375, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3482 = !DILocalVariable(name: "ptr", arg: 1, scope: !3481, file: !384, line: 1166, type: !82)
!3483 = !DILocation(line: 1166, column: 30, scope: !3481)
!3484 = !DILocalVariable(name: "item", scope: !3481, file: !384, line: 1167, type: !386)
!3485 = !DILocation(line: 1167, column: 9, scope: !3481)
!3486 = !DILocation(line: 1169, column: 29, scope: !3481)
!3487 = !DILocation(line: 1169, column: 11, scope: !3481)
!3488 = !DILocation(line: 1169, column: 3, scope: !3481)
!3489 = !DILocation(line: 1171, column: 20, scope: !3490)
!3490 = distinct !DILexicalBlock(scope: !3481, file: !384, line: 1169, column: 35)
!3491 = !DILocation(line: 1171, column: 12, scope: !3490)
!3492 = !DILocation(line: 1171, column: 10, scope: !3490)
!3493 = !DILocation(line: 1172, column: 9, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3490, file: !384, line: 1172, column: 9)
!3495 = !DILocation(line: 1172, column: 15, scope: !3494)
!3496 = !DILocation(line: 1172, column: 24, scope: !3494)
!3497 = !DILocation(line: 1172, column: 27, scope: !3494)
!3498 = !DILocation(line: 1172, column: 33, scope: !3494)
!3499 = !DILocation(line: 1172, column: 9, scope: !3490)
!3500 = !DILocation(line: 1173, column: 24, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3494, file: !384, line: 1172, column: 40)
!3502 = !DILocation(line: 1173, column: 7, scope: !3501)
!3503 = !DILocation(line: 1174, column: 5, scope: !3501)
!3504 = !DILocation(line: 1175, column: 12, scope: !3490)
!3505 = !DILocation(line: 1175, column: 18, scope: !3490)
!3506 = !DILocation(line: 1175, column: 5, scope: !3490)
!3507 = !DILocation(line: 1177, column: 26, scope: !3490)
!3508 = !DILocation(line: 1177, column: 12, scope: !3490)
!3509 = !DILocation(line: 1177, column: 5, scope: !3490)
!3510 = !DILocation(line: 1179, column: 5, scope: !3490)
!3511 = !DILocation(line: 1182, column: 1, scope: !3481)
!3512 = distinct !DISubprogram(name: "binn_buf_size", linkageName: "_ZL13binn_buf_sizePv", scope: !384, file: !384, line: 1135, type: !375, scopeLine: 1135, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3513 = !DILocalVariable(name: "pbuf", arg: 1, scope: !3512, file: !384, line: 1135, type: !82)
!3514 = !DILocation(line: 1135, column: 38, scope: !3512)
!3515 = !DILocalVariable(name: "size", scope: !3512, file: !384, line: 1136, type: !101)
!3516 = !DILocation(line: 1136, column: 8, scope: !3512)
!3517 = !DILocation(line: 1138, column: 26, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3512, file: !384, line: 1138, column: 7)
!3519 = !DILocation(line: 1138, column: 8, scope: !3518)
!3520 = !DILocation(line: 1138, column: 7, scope: !3512)
!3521 = !DILocation(line: 1138, column: 58, scope: !3518)
!3522 = !DILocation(line: 1140, column: 10, scope: !3512)
!3523 = !DILocation(line: 1140, column: 3, scope: !3512)
!3524 = !DILocation(line: 1142, column: 1, scope: !3512)
!3525 = distinct !DISubprogram(name: "binn_type", scope: !384, file: !384, line: 1186, type: !375, scopeLine: 1186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3526 = !DILocalVariable(name: "ptr", arg: 1, scope: !3525, file: !384, line: 1186, type: !82)
!3527 = !DILocation(line: 1186, column: 30, scope: !3525)
!3528 = !DILocalVariable(name: "item", scope: !3525, file: !384, line: 1187, type: !386)
!3529 = !DILocation(line: 1187, column: 9, scope: !3525)
!3530 = !DILocation(line: 1189, column: 29, scope: !3525)
!3531 = !DILocation(line: 1189, column: 11, scope: !3525)
!3532 = !DILocation(line: 1189, column: 3, scope: !3525)
!3533 = !DILocation(line: 1191, column: 20, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !3525, file: !384, line: 1189, column: 35)
!3535 = !DILocation(line: 1191, column: 12, scope: !3534)
!3536 = !DILocation(line: 1191, column: 10, scope: !3534)
!3537 = !DILocation(line: 1192, column: 12, scope: !3534)
!3538 = !DILocation(line: 1192, column: 18, scope: !3534)
!3539 = !DILocation(line: 1192, column: 5, scope: !3534)
!3540 = !DILocation(line: 1194, column: 26, scope: !3534)
!3541 = !DILocation(line: 1194, column: 12, scope: !3534)
!3542 = !DILocation(line: 1194, column: 5, scope: !3534)
!3543 = !DILocation(line: 1196, column: 5, scope: !3534)
!3544 = !DILocation(line: 1199, column: 1, scope: !3525)
!3545 = distinct !DISubprogram(name: "binn_buf_type", linkageName: "_ZL13binn_buf_typePv", scope: !384, file: !384, line: 1113, type: !375, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3546 = !DILocalVariable(name: "pbuf", arg: 1, scope: !3545, file: !384, line: 1113, type: !82)
!3547 = !DILocation(line: 1113, column: 38, scope: !3545)
!3548 = !DILocalVariable(name: "type", scope: !3545, file: !384, line: 1114, type: !101)
!3549 = !DILocation(line: 1114, column: 8, scope: !3545)
!3550 = !DILocation(line: 1116, column: 26, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3545, file: !384, line: 1116, column: 7)
!3552 = !DILocation(line: 1116, column: 8, scope: !3551)
!3553 = !DILocation(line: 1116, column: 7, scope: !3545)
!3554 = !DILocation(line: 1116, column: 58, scope: !3551)
!3555 = !DILocation(line: 1118, column: 10, scope: !3545)
!3556 = !DILocation(line: 1118, column: 3, scope: !3545)
!3557 = !DILocation(line: 1120, column: 1, scope: !3545)
!3558 = distinct !DISubprogram(name: "binn_count", scope: !384, file: !384, line: 1203, type: !375, scopeLine: 1203, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3559 = !DILocalVariable(name: "ptr", arg: 1, scope: !3558, file: !384, line: 1203, type: !82)
!3560 = !DILocation(line: 1203, column: 31, scope: !3558)
!3561 = !DILocalVariable(name: "item", scope: !3558, file: !384, line: 1204, type: !386)
!3562 = !DILocation(line: 1204, column: 9, scope: !3558)
!3563 = !DILocation(line: 1206, column: 29, scope: !3558)
!3564 = !DILocation(line: 1206, column: 11, scope: !3558)
!3565 = !DILocation(line: 1206, column: 3, scope: !3558)
!3566 = !DILocation(line: 1208, column: 20, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3558, file: !384, line: 1206, column: 35)
!3568 = !DILocation(line: 1208, column: 12, scope: !3567)
!3569 = !DILocation(line: 1208, column: 10, scope: !3567)
!3570 = !DILocation(line: 1209, column: 12, scope: !3567)
!3571 = !DILocation(line: 1209, column: 18, scope: !3567)
!3572 = !DILocation(line: 1209, column: 5, scope: !3567)
!3573 = !DILocation(line: 1211, column: 27, scope: !3567)
!3574 = !DILocation(line: 1211, column: 12, scope: !3567)
!3575 = !DILocation(line: 1211, column: 5, scope: !3567)
!3576 = !DILocation(line: 1213, column: 5, scope: !3567)
!3577 = !DILocation(line: 1216, column: 1, scope: !3558)
!3578 = distinct !DISubprogram(name: "binn_buf_count", linkageName: "_ZL14binn_buf_countPv", scope: !384, file: !384, line: 1124, type: !375, scopeLine: 1124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3579 = !DILocalVariable(name: "pbuf", arg: 1, scope: !3578, file: !384, line: 1124, type: !82)
!3580 = !DILocation(line: 1124, column: 39, scope: !3578)
!3581 = !DILocalVariable(name: "nitems", scope: !3578, file: !384, line: 1125, type: !101)
!3582 = !DILocation(line: 1125, column: 8, scope: !3578)
!3583 = !DILocation(line: 1127, column: 26, scope: !3584)
!3584 = distinct !DILexicalBlock(scope: !3578, file: !384, line: 1127, column: 7)
!3585 = !DILocation(line: 1127, column: 8, scope: !3584)
!3586 = !DILocation(line: 1127, column: 7, scope: !3578)
!3587 = !DILocation(line: 1127, column: 60, scope: !3584)
!3588 = !DILocation(line: 1129, column: 10, scope: !3578)
!3589 = !DILocation(line: 1129, column: 3, scope: !3578)
!3590 = !DILocation(line: 1131, column: 1, scope: !3578)
!3591 = distinct !DISubprogram(name: "binn_object_get_value", scope: !384, file: !384, line: 1458, type: !3592, scopeLine: 1458, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3592 = !DISubroutineType(types: !3593)
!3593 = !{!393, !82, !103, !386}
!3594 = !DILocalVariable(name: "ptr", arg: 1, scope: !3591, file: !384, line: 1458, type: !82)
!3595 = !DILocation(line: 1458, column: 43, scope: !3591)
!3596 = !DILocalVariable(name: "key", arg: 2, scope: !3591, file: !384, line: 1458, type: !103)
!3597 = !DILocation(line: 1458, column: 54, scope: !3591)
!3598 = !DILocalVariable(name: "value", arg: 3, scope: !3591, file: !384, line: 1458, type: !386)
!3599 = !DILocation(line: 1458, column: 65, scope: !3591)
!3600 = !DILocalVariable(name: "type", scope: !3591, file: !384, line: 1459, type: !101)
!3601 = !DILocation(line: 1459, column: 7, scope: !3591)
!3602 = !DILocalVariable(name: "count", scope: !3591, file: !384, line: 1459, type: !101)
!3603 = !DILocation(line: 1459, column: 13, scope: !3591)
!3604 = !DILocalVariable(name: "size", scope: !3591, file: !384, line: 1459, type: !101)
!3605 = !DILocation(line: 1459, column: 20, scope: !3591)
!3606 = !DILocalVariable(name: "header_size", scope: !3591, file: !384, line: 1459, type: !101)
!3607 = !DILocation(line: 1459, column: 28, scope: !3591)
!3608 = !DILocalVariable(name: "p", scope: !3591, file: !384, line: 1460, type: !439)
!3609 = !DILocation(line: 1460, column: 18, scope: !3591)
!3610 = !DILocation(line: 1462, column: 18, scope: !3591)
!3611 = !DILocation(line: 1462, column: 9, scope: !3591)
!3612 = !DILocation(line: 1462, column: 7, scope: !3591)
!3613 = !DILocation(line: 1463, column: 8, scope: !3614)
!3614 = distinct !DILexicalBlock(scope: !3591, file: !384, line: 1463, column: 7)
!3615 = !DILocation(line: 1463, column: 12, scope: !3614)
!3616 = !DILocation(line: 1463, column: 18, scope: !3614)
!3617 = !DILocation(line: 1463, column: 22, scope: !3614)
!3618 = !DILocation(line: 1463, column: 26, scope: !3614)
!3619 = !DILocation(line: 1463, column: 32, scope: !3614)
!3620 = !DILocation(line: 1463, column: 36, scope: !3614)
!3621 = !DILocation(line: 1463, column: 42, scope: !3614)
!3622 = !DILocation(line: 1463, column: 7, scope: !3591)
!3623 = !DILocation(line: 1463, column: 49, scope: !3614)
!3624 = !DILocation(line: 1466, column: 25, scope: !3625)
!3625 = distinct !DILexicalBlock(scope: !3591, file: !384, line: 1466, column: 7)
!3626 = !DILocation(line: 1466, column: 7, scope: !3625)
!3627 = !DILocation(line: 1466, column: 66, scope: !3625)
!3628 = !DILocation(line: 1466, column: 7, scope: !3591)
!3629 = !DILocation(line: 1466, column: 76, scope: !3625)
!3630 = !DILocation(line: 1468, column: 7, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3591, file: !384, line: 1468, column: 7)
!3632 = !DILocation(line: 1468, column: 12, scope: !3631)
!3633 = !DILocation(line: 1468, column: 7, scope: !3591)
!3634 = !DILocation(line: 1468, column: 28, scope: !3631)
!3635 = !DILocation(line: 1469, column: 7, scope: !3636)
!3636 = distinct !DILexicalBlock(scope: !3591, file: !384, line: 1469, column: 7)
!3637 = !DILocation(line: 1469, column: 13, scope: !3636)
!3638 = !DILocation(line: 1469, column: 7, scope: !3591)
!3639 = !DILocation(line: 1469, column: 19, scope: !3636)
!3640 = !DILocation(line: 1471, column: 25, scope: !3591)
!3641 = !DILocation(line: 1471, column: 5, scope: !3591)
!3642 = !DILocation(line: 1472, column: 20, scope: !3591)
!3643 = !DILocation(line: 1472, column: 23, scope: !3591)
!3644 = !DILocation(line: 1472, column: 36, scope: !3591)
!3645 = !DILocation(line: 1472, column: 42, scope: !3591)
!3646 = !DILocation(line: 1472, column: 49, scope: !3591)
!3647 = !DILocation(line: 1472, column: 7, scope: !3591)
!3648 = !DILocation(line: 1472, column: 5, scope: !3591)
!3649 = !DILocation(line: 1473, column: 7, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3591, file: !384, line: 1473, column: 7)
!3651 = !DILocation(line: 1473, column: 9, scope: !3650)
!3652 = !DILocation(line: 1473, column: 7, scope: !3591)
!3653 = !DILocation(line: 1473, column: 19, scope: !3650)
!3654 = !DILocation(line: 1475, column: 19, scope: !3591)
!3655 = !DILocation(line: 1475, column: 22, scope: !3591)
!3656 = !DILocation(line: 1475, column: 10, scope: !3591)
!3657 = !DILocation(line: 1475, column: 3, scope: !3591)
!3658 = !DILocation(line: 1477, column: 1, scope: !3591)
!3659 = distinct !DISubprogram(name: "SearchForKey", linkageName: "_ZL12SearchForKeyPhiiiPc", scope: !384, file: !384, line: 547, type: !3660, scopeLine: 547, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3660 = !DISubroutineType(types: !3661)
!3661 = !{!439, !439, !101, !101, !101, !103}
!3662 = !DILocalVariable(name: "p", arg: 1, scope: !3659, file: !384, line: 547, type: !439)
!3663 = !DILocation(line: 547, column: 58, scope: !3659)
!3664 = !DILocalVariable(name: "header_size", arg: 2, scope: !3659, file: !384, line: 547, type: !101)
!3665 = !DILocation(line: 547, column: 65, scope: !3659)
!3666 = !DILocalVariable(name: "size", arg: 3, scope: !3659, file: !384, line: 547, type: !101)
!3667 = !DILocation(line: 547, column: 82, scope: !3659)
!3668 = !DILocalVariable(name: "numitems", arg: 4, scope: !3659, file: !384, line: 547, type: !101)
!3669 = !DILocation(line: 547, column: 92, scope: !3659)
!3670 = !DILocalVariable(name: "key", arg: 5, scope: !3659, file: !384, line: 547, type: !103)
!3671 = !DILocation(line: 547, column: 108, scope: !3659)
!3672 = !DILocalVariable(name: "len", scope: !3659, file: !384, line: 548, type: !153)
!3673 = !DILocation(line: 548, column: 17, scope: !3659)
!3674 = !DILocalVariable(name: "plimit", scope: !3659, file: !384, line: 548, type: !439)
!3675 = !DILocation(line: 548, column: 23, scope: !3659)
!3676 = !DILocalVariable(name: "base", scope: !3659, file: !384, line: 548, type: !439)
!3677 = !DILocation(line: 548, column: 32, scope: !3659)
!3678 = !DILocalVariable(name: "i", scope: !3659, file: !384, line: 549, type: !101)
!3679 = !DILocation(line: 549, column: 8, scope: !3659)
!3680 = !DILocalVariable(name: "keylen", scope: !3659, file: !384, line: 549, type: !101)
!3681 = !DILocation(line: 549, column: 11, scope: !3659)
!3682 = !DILocation(line: 551, column: 10, scope: !3659)
!3683 = !DILocation(line: 551, column: 8, scope: !3659)
!3684 = !DILocation(line: 552, column: 12, scope: !3659)
!3685 = !DILocation(line: 552, column: 16, scope: !3659)
!3686 = !DILocation(line: 552, column: 14, scope: !3659)
!3687 = !DILocation(line: 552, column: 21, scope: !3659)
!3688 = !DILocation(line: 552, column: 10, scope: !3659)
!3689 = !DILocation(line: 553, column: 8, scope: !3659)
!3690 = !DILocation(line: 553, column: 5, scope: !3659)
!3691 = !DILocation(line: 555, column: 19, scope: !3659)
!3692 = !DILocation(line: 555, column: 12, scope: !3659)
!3693 = !DILocation(line: 555, column: 10, scope: !3659)
!3694 = !DILocation(line: 558, column: 10, scope: !3695)
!3695 = distinct !DILexicalBlock(scope: !3659, file: !384, line: 558, column: 3)
!3696 = !DILocation(line: 558, column: 8, scope: !3695)
!3697 = !DILocation(line: 558, column: 15, scope: !3698)
!3698 = distinct !DILexicalBlock(scope: !3695, file: !384, line: 558, column: 3)
!3699 = !DILocation(line: 558, column: 19, scope: !3698)
!3700 = !DILocation(line: 558, column: 17, scope: !3698)
!3701 = !DILocation(line: 558, column: 3, scope: !3695)
!3702 = !DILocation(line: 559, column: 30, scope: !3703)
!3703 = distinct !DILexicalBlock(scope: !3698, file: !384, line: 558, column: 34)
!3704 = !DILocation(line: 559, column: 11, scope: !3703)
!3705 = !DILocation(line: 559, column: 9, scope: !3703)
!3706 = !DILocation(line: 560, column: 6, scope: !3703)
!3707 = !DILocation(line: 561, column: 9, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3703, file: !384, line: 561, column: 9)
!3709 = !DILocation(line: 561, column: 13, scope: !3708)
!3710 = !DILocation(line: 561, column: 11, scope: !3708)
!3711 = !DILocation(line: 561, column: 9, scope: !3703)
!3712 = !DILocation(line: 561, column: 21, scope: !3708)
!3713 = !DILocation(line: 563, column: 9, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3703, file: !384, line: 563, column: 9)
!3715 = !DILocation(line: 563, column: 13, scope: !3714)
!3716 = !DILocation(line: 563, column: 9, scope: !3703)
!3717 = !DILocation(line: 564, column: 27, scope: !3718)
!3718 = distinct !DILexicalBlock(scope: !3719, file: !384, line: 564, column: 11)
!3719 = distinct !DILexicalBlock(scope: !3714, file: !384, line: 563, column: 18)
!3720 = !DILocation(line: 564, column: 30, scope: !3718)
!3721 = !DILocation(line: 564, column: 35, scope: !3718)
!3722 = !DILocation(line: 564, column: 11, scope: !3718)
!3723 = !DILocation(line: 564, column: 40, scope: !3718)
!3724 = !DILocation(line: 564, column: 11, scope: !3719)
!3725 = !DILocation(line: 565, column: 13, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3727, file: !384, line: 565, column: 13)
!3727 = distinct !DILexicalBlock(scope: !3718, file: !384, line: 564, column: 46)
!3728 = !DILocation(line: 565, column: 23, scope: !3726)
!3729 = !DILocation(line: 565, column: 20, scope: !3726)
!3730 = !DILocation(line: 565, column: 13, scope: !3727)
!3731 = !DILocation(line: 566, column: 16, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3726, file: !384, line: 565, column: 28)
!3733 = !DILocation(line: 566, column: 13, scope: !3732)
!3734 = !DILocation(line: 567, column: 18, scope: !3732)
!3735 = !DILocation(line: 567, column: 11, scope: !3732)
!3736 = !DILocation(line: 569, column: 7, scope: !3727)
!3737 = !DILocation(line: 570, column: 12, scope: !3719)
!3738 = !DILocation(line: 570, column: 9, scope: !3719)
!3739 = !DILocation(line: 571, column: 11, scope: !3740)
!3740 = distinct !DILexicalBlock(scope: !3719, file: !384, line: 571, column: 11)
!3741 = !DILocation(line: 571, column: 15, scope: !3740)
!3742 = !DILocation(line: 571, column: 13, scope: !3740)
!3743 = !DILocation(line: 571, column: 11, scope: !3719)
!3744 = !DILocation(line: 571, column: 23, scope: !3740)
!3745 = !DILocation(line: 572, column: 5, scope: !3719)
!3746 = !DILocation(line: 572, column: 16, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3714, file: !384, line: 572, column: 16)
!3748 = !DILocation(line: 572, column: 23, scope: !3747)
!3749 = !DILocation(line: 572, column: 20, scope: !3747)
!3750 = !DILocation(line: 572, column: 16, scope: !3714)
!3751 = !DILocation(line: 573, column: 14, scope: !3752)
!3752 = distinct !DILexicalBlock(scope: !3747, file: !384, line: 572, column: 31)
!3753 = !DILocation(line: 573, column: 7, scope: !3752)
!3754 = !DILocation(line: 576, column: 24, scope: !3703)
!3755 = !DILocation(line: 576, column: 27, scope: !3703)
!3756 = !DILocation(line: 576, column: 9, scope: !3703)
!3757 = !DILocation(line: 576, column: 7, scope: !3703)
!3758 = !DILocation(line: 577, column: 10, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3703, file: !384, line: 577, column: 9)
!3760 = !DILocation(line: 577, column: 12, scope: !3759)
!3761 = !DILocation(line: 577, column: 18, scope: !3759)
!3762 = !DILocation(line: 577, column: 22, scope: !3759)
!3763 = !DILocation(line: 577, column: 26, scope: !3759)
!3764 = !DILocation(line: 577, column: 24, scope: !3759)
!3765 = !DILocation(line: 577, column: 9, scope: !3703)
!3766 = !DILocation(line: 577, column: 33, scope: !3759)
!3767 = !DILocation(line: 578, column: 3, scope: !3703)
!3768 = !DILocation(line: 558, column: 30, scope: !3698)
!3769 = !DILocation(line: 558, column: 3, scope: !3698)
!3770 = distinct !{!3770, !3701, !3771}
!3771 = !DILocation(line: 578, column: 3, scope: !3695)
!3772 = !DILocation(line: 580, column: 3, scope: !3659)
!3773 = !DILocation(line: 582, column: 1, scope: !3659)
!3774 = distinct !DISubprogram(name: "GetValue", linkageName: "_ZL8GetValuePhP11binn_struct", scope: !384, file: !384, line: 1310, type: !3775, scopeLine: 1310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3775 = !DISubroutineType(types: !3776)
!3776 = !{!393, !439, !386}
!3777 = !DILocalVariable(name: "p", arg: 1, scope: !3774, file: !384, line: 1310, type: !439)
!3778 = !DILocation(line: 1310, column: 43, scope: !3774)
!3779 = !DILocalVariable(name: "value", arg: 2, scope: !3774, file: !384, line: 1310, type: !386)
!3780 = !DILocation(line: 1310, column: 52, scope: !3774)
!3781 = !DILocalVariable(name: "byte", scope: !3774, file: !384, line: 1311, type: !153)
!3782 = !DILocation(line: 1311, column: 17, scope: !3774)
!3783 = !DILocalVariable(name: "data_type", scope: !3774, file: !384, line: 1312, type: !101)
!3784 = !DILocation(line: 1312, column: 9, scope: !3774)
!3785 = !DILocalVariable(name: "storage_type", scope: !3774, file: !384, line: 1312, type: !101)
!3786 = !DILocation(line: 1312, column: 20, scope: !3774)
!3787 = !DILocalVariable(name: "DataSize", scope: !3774, file: !384, line: 1313, type: !101)
!3788 = !DILocation(line: 1313, column: 9, scope: !3774)
!3789 = !DILocalVariable(name: "p2", scope: !3774, file: !384, line: 1314, type: !82)
!3790 = !DILocation(line: 1314, column: 9, scope: !3774)
!3791 = !DILocation(line: 1316, column: 7, scope: !3792)
!3792 = distinct !DILexicalBlock(scope: !3774, file: !384, line: 1316, column: 7)
!3793 = !DILocation(line: 1316, column: 13, scope: !3792)
!3794 = !DILocation(line: 1316, column: 7, scope: !3774)
!3795 = !DILocation(line: 1316, column: 22, scope: !3792)
!3796 = !DILocation(line: 1317, column: 10, scope: !3774)
!3797 = !DILocation(line: 1317, column: 3, scope: !3774)
!3798 = !DILocation(line: 1318, column: 3, scope: !3774)
!3799 = !DILocation(line: 1318, column: 10, scope: !3774)
!3800 = !DILocation(line: 1318, column: 17, scope: !3774)
!3801 = !DILocation(line: 1323, column: 8, scope: !3774)
!3802 = !DILocation(line: 1323, column: 6, scope: !3774)
!3803 = !DILocation(line: 1326, column: 11, scope: !3774)
!3804 = !DILocation(line: 1326, column: 10, scope: !3774)
!3805 = !DILocation(line: 1326, column: 8, scope: !3774)
!3806 = !DILocation(line: 1326, column: 15, scope: !3774)
!3807 = !DILocation(line: 1327, column: 18, scope: !3774)
!3808 = !DILocation(line: 1327, column: 23, scope: !3774)
!3809 = !DILocation(line: 1327, column: 16, scope: !3774)
!3810 = !DILocation(line: 1328, column: 7, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3774, file: !384, line: 1328, column: 7)
!3812 = !DILocation(line: 1328, column: 12, scope: !3811)
!3813 = !DILocation(line: 1328, column: 7, scope: !3774)
!3814 = !DILocation(line: 1329, column: 17, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3811, file: !384, line: 1328, column: 37)
!3816 = !DILocation(line: 1329, column: 22, scope: !3815)
!3817 = !DILocation(line: 1329, column: 15, scope: !3815)
!3818 = !DILocation(line: 1330, column: 13, scope: !3815)
!3819 = !DILocation(line: 1330, column: 12, scope: !3815)
!3820 = !DILocation(line: 1330, column: 10, scope: !3815)
!3821 = !DILocation(line: 1330, column: 17, scope: !3815)
!3822 = !DILocation(line: 1331, column: 18, scope: !3815)
!3823 = !DILocation(line: 1331, column: 15, scope: !3815)
!3824 = !DILocation(line: 1333, column: 3, scope: !3815)
!3825 = !DILocation(line: 1334, column: 17, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !3811, file: !384, line: 1333, column: 10)
!3827 = !DILocation(line: 1334, column: 15, scope: !3826)
!3828 = !DILocation(line: 1339, column: 17, scope: !3774)
!3829 = !DILocation(line: 1339, column: 3, scope: !3774)
!3830 = !DILocation(line: 1339, column: 10, scope: !3774)
!3831 = !DILocation(line: 1339, column: 15, scope: !3774)
!3832 = !DILocation(line: 1341, column: 11, scope: !3774)
!3833 = !DILocation(line: 1341, column: 3, scope: !3774)
!3834 = !DILocation(line: 1343, column: 5, scope: !3835)
!3835 = distinct !DILexicalBlock(scope: !3774, file: !384, line: 1341, column: 25)
!3836 = !DILocation(line: 1345, column: 41, scope: !3835)
!3837 = !DILocation(line: 1345, column: 21, scope: !3835)
!3838 = !DILocation(line: 1345, column: 5, scope: !3835)
!3839 = !DILocation(line: 1345, column: 12, scope: !3835)
!3840 = !DILocation(line: 1345, column: 19, scope: !3835)
!3841 = !DILocation(line: 1346, column: 18, scope: !3835)
!3842 = !DILocation(line: 1346, column: 5, scope: !3835)
!3843 = !DILocation(line: 1346, column: 12, scope: !3835)
!3844 = !DILocation(line: 1346, column: 16, scope: !3835)
!3845 = !DILocation(line: 1347, column: 5, scope: !3835)
!3846 = !DILocation(line: 1349, column: 33, scope: !3835)
!3847 = !DILocation(line: 1349, column: 21, scope: !3835)
!3848 = !DILocation(line: 1349, column: 5, scope: !3835)
!3849 = !DILocation(line: 1349, column: 12, scope: !3835)
!3850 = !DILocation(line: 1349, column: 19, scope: !3835)
!3851 = !DILocation(line: 1350, column: 30, scope: !3835)
!3852 = !DILocation(line: 1350, column: 37, scope: !3835)
!3853 = !DILocation(line: 1350, column: 21, scope: !3835)
!3854 = !DILocation(line: 1350, column: 5, scope: !3835)
!3855 = !DILocation(line: 1350, column: 12, scope: !3835)
!3856 = !DILocation(line: 1350, column: 19, scope: !3835)
!3857 = !DILocation(line: 1351, column: 19, scope: !3835)
!3858 = !DILocation(line: 1351, column: 26, scope: !3835)
!3859 = !DILocation(line: 1351, column: 18, scope: !3835)
!3860 = !DILocation(line: 1351, column: 5, scope: !3835)
!3861 = !DILocation(line: 1351, column: 12, scope: !3835)
!3862 = !DILocation(line: 1351, column: 16, scope: !3835)
!3863 = !DILocation(line: 1352, column: 5, scope: !3835)
!3864 = !DILocation(line: 1354, column: 31, scope: !3835)
!3865 = !DILocation(line: 1354, column: 21, scope: !3835)
!3866 = !DILocation(line: 1354, column: 5, scope: !3835)
!3867 = !DILocation(line: 1354, column: 12, scope: !3835)
!3868 = !DILocation(line: 1354, column: 19, scope: !3835)
!3869 = !DILocation(line: 1355, column: 30, scope: !3835)
!3870 = !DILocation(line: 1355, column: 37, scope: !3835)
!3871 = !DILocation(line: 1355, column: 21, scope: !3835)
!3872 = !DILocation(line: 1355, column: 5, scope: !3835)
!3873 = !DILocation(line: 1355, column: 12, scope: !3835)
!3874 = !DILocation(line: 1355, column: 19, scope: !3835)
!3875 = !DILocation(line: 1356, column: 19, scope: !3835)
!3876 = !DILocation(line: 1356, column: 26, scope: !3835)
!3877 = !DILocation(line: 1356, column: 18, scope: !3835)
!3878 = !DILocation(line: 1356, column: 5, scope: !3835)
!3879 = !DILocation(line: 1356, column: 12, scope: !3835)
!3880 = !DILocation(line: 1356, column: 16, scope: !3835)
!3881 = !DILocation(line: 1357, column: 5, scope: !3835)
!3882 = !DILocation(line: 1359, column: 34, scope: !3835)
!3883 = !DILocation(line: 1359, column: 21, scope: !3835)
!3884 = !DILocation(line: 1359, column: 5, scope: !3835)
!3885 = !DILocation(line: 1359, column: 12, scope: !3835)
!3886 = !DILocation(line: 1359, column: 19, scope: !3835)
!3887 = !DILocation(line: 1360, column: 30, scope: !3835)
!3888 = !DILocation(line: 1360, column: 37, scope: !3835)
!3889 = !DILocation(line: 1360, column: 21, scope: !3835)
!3890 = !DILocation(line: 1360, column: 5, scope: !3835)
!3891 = !DILocation(line: 1360, column: 12, scope: !3835)
!3892 = !DILocation(line: 1360, column: 19, scope: !3835)
!3893 = !DILocation(line: 1361, column: 19, scope: !3835)
!3894 = !DILocation(line: 1361, column: 26, scope: !3835)
!3895 = !DILocation(line: 1361, column: 18, scope: !3835)
!3896 = !DILocation(line: 1361, column: 5, scope: !3835)
!3897 = !DILocation(line: 1361, column: 12, scope: !3835)
!3898 = !DILocation(line: 1361, column: 16, scope: !3835)
!3899 = !DILocation(line: 1362, column: 5, scope: !3835)
!3900 = !DILocation(line: 1364, column: 27, scope: !3835)
!3901 = !DILocation(line: 1364, column: 19, scope: !3835)
!3902 = !DILocation(line: 1364, column: 5, scope: !3835)
!3903 = !DILocation(line: 1364, column: 12, scope: !3835)
!3904 = !DILocation(line: 1364, column: 17, scope: !3835)
!3905 = !DILocation(line: 1364, column: 32, scope: !3835)
!3906 = !DILocation(line: 1365, column: 28, scope: !3835)
!3907 = !DILocation(line: 1365, column: 35, scope: !3835)
!3908 = !DILocation(line: 1365, column: 19, scope: !3835)
!3909 = !DILocation(line: 1365, column: 5, scope: !3835)
!3910 = !DILocation(line: 1365, column: 12, scope: !3835)
!3911 = !DILocation(line: 1365, column: 17, scope: !3835)
!3912 = !DILocation(line: 1366, column: 18, scope: !3835)
!3913 = !DILocation(line: 1366, column: 5, scope: !3835)
!3914 = !DILocation(line: 1366, column: 12, scope: !3835)
!3915 = !DILocation(line: 1366, column: 16, scope: !3835)
!3916 = !DILocation(line: 1367, column: 5, scope: !3835)
!3917 = !DILocation(line: 1369, column: 18, scope: !3835)
!3918 = !DILocation(line: 1369, column: 5, scope: !3835)
!3919 = !DILocation(line: 1369, column: 12, scope: !3835)
!3920 = !DILocation(line: 1369, column: 16, scope: !3835)
!3921 = !DILocation(line: 1370, column: 27, scope: !3922)
!3922 = distinct !DILexicalBlock(scope: !3835, file: !384, line: 1370, column: 9)
!3923 = !DILocation(line: 1370, column: 38, scope: !3922)
!3924 = !DILocation(line: 1370, column: 45, scope: !3922)
!3925 = !DILocation(line: 1370, column: 53, scope: !3922)
!3926 = !DILocation(line: 1370, column: 60, scope: !3922)
!3927 = !DILocation(line: 1370, column: 9, scope: !3922)
!3928 = !DILocation(line: 1370, column: 72, scope: !3922)
!3929 = !DILocation(line: 1370, column: 9, scope: !3835)
!3930 = !DILocation(line: 1370, column: 82, scope: !3922)
!3931 = !DILocation(line: 1371, column: 5, scope: !3835)
!3932 = !DILocation(line: 1373, column: 34, scope: !3835)
!3933 = !DILocation(line: 1373, column: 16, scope: !3835)
!3934 = !DILocation(line: 1373, column: 14, scope: !3835)
!3935 = !DILocation(line: 1374, column: 9, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3835, file: !384, line: 1374, column: 9)
!3937 = !DILocation(line: 1374, column: 18, scope: !3936)
!3938 = !DILocation(line: 1374, column: 9, scope: !3835)
!3939 = !DILocation(line: 1375, column: 26, scope: !3940)
!3940 = distinct !DILexicalBlock(scope: !3936, file: !384, line: 1374, column: 26)
!3941 = !DILocation(line: 1375, column: 18, scope: !3940)
!3942 = !DILocation(line: 1375, column: 16, scope: !3940)
!3943 = !DILocation(line: 1375, column: 31, scope: !3940)
!3944 = !DILocation(line: 1376, column: 27, scope: !3940)
!3945 = !DILocation(line: 1376, column: 18, scope: !3940)
!3946 = !DILocation(line: 1376, column: 16, scope: !3940)
!3947 = !DILocation(line: 1377, column: 16, scope: !3940)
!3948 = !DILocation(line: 1378, column: 5, scope: !3940)
!3949 = !DILocation(line: 1379, column: 8, scope: !3950)
!3950 = distinct !DILexicalBlock(scope: !3936, file: !384, line: 1378, column: 12)
!3951 = !DILocation(line: 1381, column: 19, scope: !3835)
!3952 = !DILocation(line: 1381, column: 5, scope: !3835)
!3953 = !DILocation(line: 1381, column: 12, scope: !3835)
!3954 = !DILocation(line: 1381, column: 17, scope: !3835)
!3955 = !DILocation(line: 1382, column: 18, scope: !3835)
!3956 = !DILocation(line: 1382, column: 5, scope: !3835)
!3957 = !DILocation(line: 1382, column: 12, scope: !3835)
!3958 = !DILocation(line: 1382, column: 16, scope: !3835)
!3959 = !DILocation(line: 1383, column: 5, scope: !3835)
!3960 = !DILocation(line: 1385, column: 5, scope: !3835)
!3961 = !DILocation(line: 1390, column: 11, scope: !3774)
!3962 = !DILocation(line: 1390, column: 18, scope: !3774)
!3963 = !DILocation(line: 1390, column: 3, scope: !3774)
!3964 = !DILocation(line: 1392, column: 7, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3774, file: !384, line: 1390, column: 24)
!3966 = !DILocation(line: 1392, column: 14, scope: !3965)
!3967 = !DILocation(line: 1392, column: 19, scope: !3965)
!3968 = !DILocation(line: 1393, column: 7, scope: !3965)
!3969 = !DILocation(line: 1393, column: 14, scope: !3965)
!3970 = !DILocation(line: 1393, column: 20, scope: !3965)
!3971 = !DILocation(line: 1394, column: 21, scope: !3965)
!3972 = !DILocation(line: 1394, column: 28, scope: !3965)
!3973 = !DILocation(line: 1394, column: 20, scope: !3965)
!3974 = !DILocation(line: 1394, column: 7, scope: !3965)
!3975 = !DILocation(line: 1394, column: 14, scope: !3965)
!3976 = !DILocation(line: 1394, column: 18, scope: !3965)
!3977 = !DILocation(line: 1395, column: 7, scope: !3965)
!3978 = !DILocation(line: 1397, column: 7, scope: !3965)
!3979 = !DILocation(line: 1397, column: 14, scope: !3965)
!3980 = !DILocation(line: 1397, column: 19, scope: !3965)
!3981 = !DILocation(line: 1398, column: 7, scope: !3965)
!3982 = !DILocation(line: 1398, column: 14, scope: !3965)
!3983 = !DILocation(line: 1398, column: 20, scope: !3965)
!3984 = !DILocation(line: 1399, column: 21, scope: !3965)
!3985 = !DILocation(line: 1399, column: 28, scope: !3965)
!3986 = !DILocation(line: 1399, column: 20, scope: !3965)
!3987 = !DILocation(line: 1399, column: 7, scope: !3965)
!3988 = !DILocation(line: 1399, column: 14, scope: !3965)
!3989 = !DILocation(line: 1399, column: 18, scope: !3965)
!3990 = !DILocation(line: 1400, column: 7, scope: !3965)
!3991 = !DILocation(line: 1422, column: 3, scope: !3774)
!3992 = !DILocation(line: 1424, column: 1, scope: !3774)
!3993 = distinct !DISubprogram(name: "tobe16", linkageName: "_ZL6tobe16t", scope: !384, file: !384, line: 58, type: !3994, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!3994 = !DISubroutineType(types: !3995)
!3995 = !{!169, !169}
!3996 = !DILocalVariable(name: "input", arg: 1, scope: !3993, file: !384, line: 58, type: !169)
!3997 = !DILocation(line: 58, column: 51, scope: !3993)
!3998 = !DILocalVariable(name: "result", scope: !3993, file: !384, line: 62, type: !169)
!3999 = !DILocation(line: 62, column: 18, scope: !3993)
!4000 = !DILocalVariable(name: "source", scope: !3993, file: !384, line: 63, type: !439)
!4001 = !DILocation(line: 63, column: 18, scope: !3993)
!4002 = !DILocation(line: 63, column: 27, scope: !3993)
!4003 = !DILocalVariable(name: "dest", scope: !3993, file: !384, line: 64, type: !439)
!4004 = !DILocation(line: 64, column: 18, scope: !3993)
!4005 = !DILocation(line: 64, column: 25, scope: !3993)
!4006 = !DILocation(line: 66, column: 13, scope: !3993)
!4007 = !DILocation(line: 66, column: 3, scope: !3993)
!4008 = !DILocation(line: 66, column: 11, scope: !3993)
!4009 = !DILocation(line: 67, column: 13, scope: !3993)
!4010 = !DILocation(line: 67, column: 3, scope: !3993)
!4011 = !DILocation(line: 67, column: 11, scope: !3993)
!4012 = !DILocation(line: 69, column: 10, scope: !3993)
!4013 = !DILocation(line: 69, column: 3, scope: !3993)
!4014 = distinct !DISubprogram(name: "tobe64", linkageName: "_ZL6tobe64y", scope: !384, file: !384, line: 90, type: !4015, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4015 = !DISubroutineType(types: !4016)
!4016 = !{!424, !424}
!4017 = !DILocalVariable(name: "input", arg: 1, scope: !4014, file: !384, line: 90, type: !424)
!4018 = !DILocation(line: 90, column: 35, scope: !4014)
!4019 = !DILocalVariable(name: "result", scope: !4014, file: !384, line: 94, type: !424)
!4020 = !DILocation(line: 94, column: 10, scope: !4014)
!4021 = !DILocalVariable(name: "source", scope: !4014, file: !384, line: 95, type: !439)
!4022 = !DILocation(line: 95, column: 18, scope: !4014)
!4023 = !DILocation(line: 95, column: 27, scope: !4014)
!4024 = !DILocalVariable(name: "dest", scope: !4014, file: !384, line: 96, type: !439)
!4025 = !DILocation(line: 96, column: 18, scope: !4014)
!4026 = !DILocation(line: 96, column: 25, scope: !4014)
!4027 = !DILocalVariable(name: "i", scope: !4014, file: !384, line: 97, type: !101)
!4028 = !DILocation(line: 97, column: 7, scope: !4014)
!4029 = !DILocation(line: 99, column: 9, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4014, file: !384, line: 99, column: 3)
!4031 = !DILocation(line: 99, column: 8, scope: !4030)
!4032 = !DILocation(line: 99, column: 13, scope: !4033)
!4033 = distinct !DILexicalBlock(scope: !4030, file: !384, line: 99, column: 3)
!4034 = !DILocation(line: 99, column: 15, scope: !4033)
!4035 = !DILocation(line: 99, column: 3, scope: !4030)
!4036 = !DILocation(line: 100, column: 15, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !4033, file: !384, line: 99, column: 25)
!4038 = !DILocation(line: 100, column: 24, scope: !4037)
!4039 = !DILocation(line: 100, column: 23, scope: !4037)
!4040 = !DILocation(line: 100, column: 5, scope: !4037)
!4041 = !DILocation(line: 100, column: 10, scope: !4037)
!4042 = !DILocation(line: 100, column: 13, scope: !4037)
!4043 = !DILocation(line: 101, column: 3, scope: !4037)
!4044 = !DILocation(line: 99, column: 21, scope: !4033)
!4045 = !DILocation(line: 99, column: 3, scope: !4033)
!4046 = distinct !{!4046, !4035, !4047}
!4047 = !DILocation(line: 101, column: 3, scope: !4030)
!4048 = !DILocation(line: 103, column: 10, scope: !4014)
!4049 = !DILocation(line: 103, column: 3, scope: !4014)
!4050 = distinct !DISubprogram(name: "binn_map_get_value", scope: !384, file: !384, line: 1481, type: !4051, scopeLine: 1481, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4051 = !DISubroutineType(types: !4052)
!4052 = !{!393, !82, !101, !386}
!4053 = !DILocalVariable(name: "ptr", arg: 1, scope: !4050, file: !384, line: 1481, type: !82)
!4054 = !DILocation(line: 1481, column: 40, scope: !4050)
!4055 = !DILocalVariable(name: "id", arg: 2, scope: !4050, file: !384, line: 1481, type: !101)
!4056 = !DILocation(line: 1481, column: 49, scope: !4050)
!4057 = !DILocalVariable(name: "value", arg: 3, scope: !4050, file: !384, line: 1481, type: !386)
!4058 = !DILocation(line: 1481, column: 59, scope: !4050)
!4059 = !DILocalVariable(name: "type", scope: !4050, file: !384, line: 1482, type: !101)
!4060 = !DILocation(line: 1482, column: 7, scope: !4050)
!4061 = !DILocalVariable(name: "count", scope: !4050, file: !384, line: 1482, type: !101)
!4062 = !DILocation(line: 1482, column: 13, scope: !4050)
!4063 = !DILocalVariable(name: "size", scope: !4050, file: !384, line: 1482, type: !101)
!4064 = !DILocation(line: 1482, column: 20, scope: !4050)
!4065 = !DILocalVariable(name: "header_size", scope: !4050, file: !384, line: 1482, type: !101)
!4066 = !DILocation(line: 1482, column: 28, scope: !4050)
!4067 = !DILocalVariable(name: "p", scope: !4050, file: !384, line: 1483, type: !439)
!4068 = !DILocation(line: 1483, column: 18, scope: !4050)
!4069 = !DILocation(line: 1485, column: 18, scope: !4050)
!4070 = !DILocation(line: 1485, column: 9, scope: !4050)
!4071 = !DILocation(line: 1485, column: 7, scope: !4050)
!4072 = !DILocation(line: 1486, column: 8, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4050, file: !384, line: 1486, column: 7)
!4074 = !DILocation(line: 1486, column: 12, scope: !4073)
!4075 = !DILocation(line: 1486, column: 18, scope: !4073)
!4076 = !DILocation(line: 1486, column: 22, scope: !4073)
!4077 = !DILocation(line: 1486, column: 28, scope: !4073)
!4078 = !DILocation(line: 1486, column: 7, scope: !4050)
!4079 = !DILocation(line: 1486, column: 35, scope: !4073)
!4080 = !DILocation(line: 1489, column: 25, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4050, file: !384, line: 1489, column: 7)
!4082 = !DILocation(line: 1489, column: 7, scope: !4081)
!4083 = !DILocation(line: 1489, column: 66, scope: !4081)
!4084 = !DILocation(line: 1489, column: 7, scope: !4050)
!4085 = !DILocation(line: 1489, column: 76, scope: !4081)
!4086 = !DILocation(line: 1491, column: 7, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !4050, file: !384, line: 1491, column: 7)
!4088 = !DILocation(line: 1491, column: 12, scope: !4087)
!4089 = !DILocation(line: 1491, column: 7, scope: !4050)
!4090 = !DILocation(line: 1491, column: 25, scope: !4087)
!4091 = !DILocation(line: 1492, column: 7, scope: !4092)
!4092 = distinct !DILexicalBlock(scope: !4050, file: !384, line: 1492, column: 7)
!4093 = !DILocation(line: 1492, column: 13, scope: !4092)
!4094 = !DILocation(line: 1492, column: 7, scope: !4050)
!4095 = !DILocation(line: 1492, column: 19, scope: !4092)
!4096 = !DILocation(line: 1494, column: 25, scope: !4050)
!4097 = !DILocation(line: 1494, column: 5, scope: !4050)
!4098 = !DILocation(line: 1495, column: 19, scope: !4050)
!4099 = !DILocation(line: 1495, column: 22, scope: !4050)
!4100 = !DILocation(line: 1495, column: 35, scope: !4050)
!4101 = !DILocation(line: 1495, column: 41, scope: !4050)
!4102 = !DILocation(line: 1495, column: 48, scope: !4050)
!4103 = !DILocation(line: 1495, column: 7, scope: !4050)
!4104 = !DILocation(line: 1495, column: 5, scope: !4050)
!4105 = !DILocation(line: 1496, column: 7, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !4050, file: !384, line: 1496, column: 7)
!4107 = !DILocation(line: 1496, column: 9, scope: !4106)
!4108 = !DILocation(line: 1496, column: 7, scope: !4050)
!4109 = !DILocation(line: 1496, column: 19, scope: !4106)
!4110 = !DILocation(line: 1498, column: 19, scope: !4050)
!4111 = !DILocation(line: 1498, column: 22, scope: !4050)
!4112 = !DILocation(line: 1498, column: 10, scope: !4050)
!4113 = !DILocation(line: 1498, column: 3, scope: !4050)
!4114 = !DILocation(line: 1500, column: 1, scope: !4050)
!4115 = distinct !DISubprogram(name: "SearchForID", linkageName: "_ZL11SearchForIDPhiiii", scope: !384, file: !384, line: 521, type: !4116, scopeLine: 521, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4116 = !DISubroutineType(types: !4117)
!4117 = !{!439, !439, !101, !101, !101, !101}
!4118 = !DILocalVariable(name: "p", arg: 1, scope: !4115, file: !384, line: 521, type: !439)
!4119 = !DILocation(line: 521, column: 57, scope: !4115)
!4120 = !DILocalVariable(name: "header_size", arg: 2, scope: !4115, file: !384, line: 521, type: !101)
!4121 = !DILocation(line: 521, column: 64, scope: !4115)
!4122 = !DILocalVariable(name: "size", arg: 3, scope: !4115, file: !384, line: 521, type: !101)
!4123 = !DILocation(line: 521, column: 81, scope: !4115)
!4124 = !DILocalVariable(name: "numitems", arg: 4, scope: !4115, file: !384, line: 521, type: !101)
!4125 = !DILocation(line: 521, column: 91, scope: !4115)
!4126 = !DILocalVariable(name: "id", arg: 5, scope: !4115, file: !384, line: 521, type: !101)
!4127 = !DILocation(line: 521, column: 105, scope: !4115)
!4128 = !DILocalVariable(name: "plimit", scope: !4115, file: !384, line: 522, type: !439)
!4129 = !DILocation(line: 522, column: 18, scope: !4115)
!4130 = !DILocalVariable(name: "base", scope: !4115, file: !384, line: 522, type: !439)
!4131 = !DILocation(line: 522, column: 27, scope: !4115)
!4132 = !DILocalVariable(name: "i", scope: !4115, file: !384, line: 523, type: !101)
!4133 = !DILocation(line: 523, column: 8, scope: !4115)
!4134 = !DILocalVariable(name: "int32", scope: !4115, file: !384, line: 523, type: !101)
!4135 = !DILocation(line: 523, column: 11, scope: !4115)
!4136 = !DILocation(line: 525, column: 10, scope: !4115)
!4137 = !DILocation(line: 525, column: 8, scope: !4115)
!4138 = !DILocation(line: 526, column: 12, scope: !4115)
!4139 = !DILocation(line: 526, column: 16, scope: !4115)
!4140 = !DILocation(line: 526, column: 14, scope: !4115)
!4141 = !DILocation(line: 526, column: 21, scope: !4115)
!4142 = !DILocation(line: 526, column: 10, scope: !4115)
!4143 = !DILocation(line: 527, column: 8, scope: !4115)
!4144 = !DILocation(line: 527, column: 5, scope: !4115)
!4145 = !DILocation(line: 530, column: 10, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4115, file: !384, line: 530, column: 3)
!4147 = !DILocation(line: 530, column: 8, scope: !4146)
!4148 = !DILocation(line: 530, column: 15, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4146, file: !384, line: 530, column: 3)
!4150 = !DILocation(line: 530, column: 19, scope: !4149)
!4151 = !DILocation(line: 530, column: 17, scope: !4149)
!4152 = !DILocation(line: 530, column: 3, scope: !4146)
!4153 = !DILocation(line: 531, column: 21, scope: !4154)
!4154 = distinct !DILexicalBlock(scope: !4149, file: !384, line: 530, column: 34)
!4155 = !DILocation(line: 531, column: 13, scope: !4154)
!4156 = !DILocation(line: 531, column: 11, scope: !4154)
!4157 = !DILocation(line: 531, column: 27, scope: !4154)
!4158 = !DILocation(line: 532, column: 22, scope: !4154)
!4159 = !DILocation(line: 532, column: 13, scope: !4154)
!4160 = !DILocation(line: 532, column: 11, scope: !4154)
!4161 = !DILocation(line: 533, column: 9, scope: !4162)
!4162 = distinct !DILexicalBlock(scope: !4154, file: !384, line: 533, column: 9)
!4163 = !DILocation(line: 533, column: 13, scope: !4162)
!4164 = !DILocation(line: 533, column: 11, scope: !4162)
!4165 = !DILocation(line: 533, column: 9, scope: !4154)
!4166 = !DILocation(line: 533, column: 21, scope: !4162)
!4167 = !DILocation(line: 535, column: 9, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4154, file: !384, line: 535, column: 9)
!4169 = !DILocation(line: 535, column: 18, scope: !4168)
!4170 = !DILocation(line: 535, column: 15, scope: !4168)
!4171 = !DILocation(line: 535, column: 9, scope: !4154)
!4172 = !DILocation(line: 535, column: 29, scope: !4168)
!4173 = !DILocation(line: 535, column: 22, scope: !4168)
!4174 = !DILocation(line: 537, column: 24, scope: !4154)
!4175 = !DILocation(line: 537, column: 27, scope: !4154)
!4176 = !DILocation(line: 537, column: 9, scope: !4154)
!4177 = !DILocation(line: 537, column: 7, scope: !4154)
!4178 = !DILocation(line: 538, column: 10, scope: !4179)
!4179 = distinct !DILexicalBlock(scope: !4154, file: !384, line: 538, column: 9)
!4180 = !DILocation(line: 538, column: 12, scope: !4179)
!4181 = !DILocation(line: 538, column: 18, scope: !4179)
!4182 = !DILocation(line: 538, column: 22, scope: !4179)
!4183 = !DILocation(line: 538, column: 26, scope: !4179)
!4184 = !DILocation(line: 538, column: 24, scope: !4179)
!4185 = !DILocation(line: 538, column: 9, scope: !4154)
!4186 = !DILocation(line: 538, column: 33, scope: !4179)
!4187 = !DILocation(line: 539, column: 3, scope: !4154)
!4188 = !DILocation(line: 530, column: 30, scope: !4149)
!4189 = !DILocation(line: 530, column: 3, scope: !4149)
!4190 = distinct !{!4190, !4152, !4191}
!4191 = !DILocation(line: 539, column: 3, scope: !4146)
!4192 = !DILocation(line: 541, column: 3, scope: !4115)
!4193 = !DILocation(line: 543, column: 1, scope: !4115)
!4194 = distinct !DISubprogram(name: "binn_list_get_value", scope: !384, file: !384, line: 1504, type: !4051, scopeLine: 1504, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4195 = !DILocalVariable(name: "ptr", arg: 1, scope: !4194, file: !384, line: 1504, type: !82)
!4196 = !DILocation(line: 1504, column: 41, scope: !4194)
!4197 = !DILocalVariable(name: "pos", arg: 2, scope: !4194, file: !384, line: 1504, type: !101)
!4198 = !DILocation(line: 1504, column: 50, scope: !4194)
!4199 = !DILocalVariable(name: "value", arg: 3, scope: !4194, file: !384, line: 1504, type: !386)
!4200 = !DILocation(line: 1504, column: 61, scope: !4194)
!4201 = !DILocalVariable(name: "i", scope: !4194, file: !384, line: 1505, type: !101)
!4202 = !DILocation(line: 1505, column: 8, scope: !4194)
!4203 = !DILocalVariable(name: "type", scope: !4194, file: !384, line: 1505, type: !101)
!4204 = !DILocation(line: 1505, column: 11, scope: !4194)
!4205 = !DILocalVariable(name: "count", scope: !4194, file: !384, line: 1505, type: !101)
!4206 = !DILocation(line: 1505, column: 17, scope: !4194)
!4207 = !DILocalVariable(name: "size", scope: !4194, file: !384, line: 1505, type: !101)
!4208 = !DILocation(line: 1505, column: 24, scope: !4194)
!4209 = !DILocalVariable(name: "header_size", scope: !4194, file: !384, line: 1505, type: !101)
!4210 = !DILocation(line: 1505, column: 32, scope: !4194)
!4211 = !DILocalVariable(name: "p", scope: !4194, file: !384, line: 1506, type: !439)
!4212 = !DILocation(line: 1506, column: 18, scope: !4194)
!4213 = !DILocalVariable(name: "plimit", scope: !4194, file: !384, line: 1506, type: !439)
!4214 = !DILocation(line: 1506, column: 22, scope: !4194)
!4215 = !DILocalVariable(name: "base", scope: !4194, file: !384, line: 1506, type: !439)
!4216 = !DILocation(line: 1506, column: 31, scope: !4194)
!4217 = !DILocation(line: 1508, column: 18, scope: !4194)
!4218 = !DILocation(line: 1508, column: 9, scope: !4194)
!4219 = !DILocation(line: 1508, column: 7, scope: !4194)
!4220 = !DILocation(line: 1509, column: 8, scope: !4221)
!4221 = distinct !DILexicalBlock(scope: !4194, file: !384, line: 1509, column: 7)
!4222 = !DILocation(line: 1509, column: 12, scope: !4221)
!4223 = !DILocation(line: 1509, column: 18, scope: !4221)
!4224 = !DILocation(line: 1509, column: 22, scope: !4221)
!4225 = !DILocation(line: 1509, column: 28, scope: !4221)
!4226 = !DILocation(line: 1509, column: 7, scope: !4194)
!4227 = !DILocation(line: 1509, column: 35, scope: !4221)
!4228 = !DILocation(line: 1512, column: 25, scope: !4229)
!4229 = distinct !DILexicalBlock(scope: !4194, file: !384, line: 1512, column: 7)
!4230 = !DILocation(line: 1512, column: 7, scope: !4229)
!4231 = !DILocation(line: 1512, column: 66, scope: !4229)
!4232 = !DILocation(line: 1512, column: 7, scope: !4194)
!4233 = !DILocation(line: 1512, column: 76, scope: !4229)
!4234 = !DILocation(line: 1514, column: 7, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4194, file: !384, line: 1514, column: 7)
!4236 = !DILocation(line: 1514, column: 12, scope: !4235)
!4237 = !DILocation(line: 1514, column: 7, scope: !4194)
!4238 = !DILocation(line: 1514, column: 26, scope: !4235)
!4239 = !DILocation(line: 1515, column: 7, scope: !4240)
!4240 = distinct !DILexicalBlock(scope: !4194, file: !384, line: 1515, column: 7)
!4241 = !DILocation(line: 1515, column: 13, scope: !4240)
!4242 = !DILocation(line: 1515, column: 7, scope: !4194)
!4243 = !DILocation(line: 1515, column: 19, scope: !4240)
!4244 = !DILocation(line: 1516, column: 8, scope: !4245)
!4245 = distinct !DILexicalBlock(scope: !4194, file: !384, line: 1516, column: 7)
!4246 = !DILocation(line: 1516, column: 12, scope: !4245)
!4247 = !DILocation(line: 1516, column: 7, scope: !4245)
!4248 = !DILocation(line: 1516, column: 21, scope: !4245)
!4249 = !DILocation(line: 1516, column: 27, scope: !4245)
!4250 = !DILocation(line: 1516, column: 25, scope: !4245)
!4251 = !DILocation(line: 1516, column: 20, scope: !4245)
!4252 = !DILocation(line: 1516, column: 18, scope: !4245)
!4253 = !DILocation(line: 1516, column: 7, scope: !4194)
!4254 = !DILocation(line: 1516, column: 35, scope: !4245)
!4255 = !DILocation(line: 1517, column: 6, scope: !4194)
!4256 = !DILocation(line: 1519, column: 25, scope: !4194)
!4257 = !DILocation(line: 1519, column: 5, scope: !4194)
!4258 = !DILocation(line: 1520, column: 10, scope: !4194)
!4259 = !DILocation(line: 1520, column: 8, scope: !4194)
!4260 = !DILocation(line: 1521, column: 12, scope: !4194)
!4261 = !DILocation(line: 1521, column: 16, scope: !4194)
!4262 = !DILocation(line: 1521, column: 14, scope: !4194)
!4263 = !DILocation(line: 1521, column: 10, scope: !4194)
!4264 = !DILocation(line: 1522, column: 8, scope: !4194)
!4265 = !DILocation(line: 1522, column: 5, scope: !4194)
!4266 = !DILocation(line: 1524, column: 10, scope: !4267)
!4267 = distinct !DILexicalBlock(scope: !4194, file: !384, line: 1524, column: 3)
!4268 = !DILocation(line: 1524, column: 8, scope: !4267)
!4269 = !DILocation(line: 1524, column: 15, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4267, file: !384, line: 1524, column: 3)
!4271 = !DILocation(line: 1524, column: 19, scope: !4270)
!4272 = !DILocation(line: 1524, column: 17, scope: !4270)
!4273 = !DILocation(line: 1524, column: 3, scope: !4267)
!4274 = !DILocation(line: 1525, column: 24, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4270, file: !384, line: 1524, column: 29)
!4276 = !DILocation(line: 1525, column: 27, scope: !4275)
!4277 = !DILocation(line: 1525, column: 9, scope: !4275)
!4278 = !DILocation(line: 1525, column: 7, scope: !4275)
!4279 = !DILocation(line: 1526, column: 10, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4275, file: !384, line: 1526, column: 9)
!4281 = !DILocation(line: 1526, column: 12, scope: !4280)
!4282 = !DILocation(line: 1526, column: 18, scope: !4280)
!4283 = !DILocation(line: 1526, column: 22, scope: !4280)
!4284 = !DILocation(line: 1526, column: 26, scope: !4280)
!4285 = !DILocation(line: 1526, column: 24, scope: !4280)
!4286 = !DILocation(line: 1526, column: 9, scope: !4275)
!4287 = !DILocation(line: 1526, column: 33, scope: !4280)
!4288 = !DILocation(line: 1527, column: 3, scope: !4275)
!4289 = !DILocation(line: 1524, column: 25, scope: !4270)
!4290 = !DILocation(line: 1524, column: 3, scope: !4270)
!4291 = distinct !{!4291, !4273, !4292}
!4292 = !DILocation(line: 1527, column: 3, scope: !4267)
!4293 = !DILocation(line: 1529, column: 19, scope: !4194)
!4294 = !DILocation(line: 1529, column: 22, scope: !4194)
!4295 = !DILocation(line: 1529, column: 10, scope: !4194)
!4296 = !DILocation(line: 1529, column: 3, scope: !4194)
!4297 = !DILocation(line: 1531, column: 1, scope: !4194)
!4298 = distinct !DISubprogram(name: "binn_map_get_pair", scope: !384, file: !384, line: 1599, type: !4299, scopeLine: 1599, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4299 = !DISubroutineType(types: !4300)
!4300 = !{!393, !82, !101, !440, !386}
!4301 = !DILocalVariable(name: "ptr", arg: 1, scope: !4298, file: !384, line: 1599, type: !82)
!4302 = !DILocation(line: 1599, column: 39, scope: !4298)
!4303 = !DILocalVariable(name: "pos", arg: 2, scope: !4298, file: !384, line: 1599, type: !101)
!4304 = !DILocation(line: 1599, column: 48, scope: !4298)
!4305 = !DILocalVariable(name: "pid", arg: 3, scope: !4298, file: !384, line: 1599, type: !440)
!4306 = !DILocation(line: 1599, column: 58, scope: !4298)
!4307 = !DILocalVariable(name: "value", arg: 4, scope: !4298, file: !384, line: 1599, type: !386)
!4308 = !DILocation(line: 1599, column: 69, scope: !4298)
!4309 = !DILocation(line: 1601, column: 35, scope: !4298)
!4310 = !DILocation(line: 1601, column: 40, scope: !4298)
!4311 = !DILocation(line: 1601, column: 45, scope: !4298)
!4312 = !DILocation(line: 1601, column: 56, scope: !4298)
!4313 = !DILocation(line: 1601, column: 10, scope: !4298)
!4314 = !DILocation(line: 1601, column: 3, scope: !4298)
!4315 = distinct !DISubprogram(name: "binn_read_pair", linkageName: "_ZL14binn_read_pairiPviPiPcP11binn_struct", scope: !384, file: !384, line: 1537, type: !4316, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4316 = !DISubroutineType(types: !4317)
!4317 = !{!393, !101, !82, !101, !440, !103, !386}
!4318 = !DILocalVariable(name: "expected_type", arg: 1, scope: !4315, file: !384, line: 1537, type: !101)
!4319 = !DILocation(line: 1537, column: 38, scope: !4315)
!4320 = !DILocalVariable(name: "ptr", arg: 2, scope: !4315, file: !384, line: 1537, type: !82)
!4321 = !DILocation(line: 1537, column: 59, scope: !4315)
!4322 = !DILocalVariable(name: "pos", arg: 3, scope: !4315, file: !384, line: 1537, type: !101)
!4323 = !DILocation(line: 1537, column: 68, scope: !4315)
!4324 = !DILocalVariable(name: "pid", arg: 4, scope: !4315, file: !384, line: 1537, type: !440)
!4325 = !DILocation(line: 1537, column: 78, scope: !4315)
!4326 = !DILocalVariable(name: "pkey", arg: 5, scope: !4315, file: !384, line: 1537, type: !103)
!4327 = !DILocation(line: 1537, column: 89, scope: !4315)
!4328 = !DILocalVariable(name: "value", arg: 6, scope: !4315, file: !384, line: 1537, type: !386)
!4329 = !DILocation(line: 1537, column: 101, scope: !4315)
!4330 = !DILocalVariable(name: "type", scope: !4315, file: !384, line: 1538, type: !101)
!4331 = !DILocation(line: 1538, column: 8, scope: !4315)
!4332 = !DILocalVariable(name: "count", scope: !4315, file: !384, line: 1538, type: !101)
!4333 = !DILocation(line: 1538, column: 14, scope: !4315)
!4334 = !DILocalVariable(name: "size", scope: !4315, file: !384, line: 1538, type: !101)
!4335 = !DILocation(line: 1538, column: 21, scope: !4315)
!4336 = !DILocalVariable(name: "header_size", scope: !4315, file: !384, line: 1538, type: !101)
!4337 = !DILocation(line: 1538, column: 29, scope: !4315)
!4338 = !DILocalVariable(name: "i", scope: !4315, file: !384, line: 1539, type: !101)
!4339 = !DILocation(line: 1539, column: 8, scope: !4315)
!4340 = !DILocalVariable(name: "int32", scope: !4315, file: !384, line: 1539, type: !101)
!4341 = !DILocation(line: 1539, column: 11, scope: !4315)
!4342 = !DILocalVariable(name: "id", scope: !4315, file: !384, line: 1539, type: !101)
!4343 = !DILocation(line: 1539, column: 18, scope: !4315)
!4344 = !DILocalVariable(name: "counter", scope: !4315, file: !384, line: 1539, type: !101)
!4345 = !DILocation(line: 1539, column: 22, scope: !4315)
!4346 = !DILocalVariable(name: "p", scope: !4315, file: !384, line: 1540, type: !439)
!4347 = !DILocation(line: 1540, column: 18, scope: !4315)
!4348 = !DILocalVariable(name: "plimit", scope: !4315, file: !384, line: 1540, type: !439)
!4349 = !DILocation(line: 1540, column: 22, scope: !4315)
!4350 = !DILocalVariable(name: "base", scope: !4315, file: !384, line: 1540, type: !439)
!4351 = !DILocation(line: 1540, column: 31, scope: !4315)
!4352 = !DILocalVariable(name: "key", scope: !4315, file: !384, line: 1540, type: !439)
!4353 = !DILocation(line: 1540, column: 38, scope: !4315)
!4354 = !DILocalVariable(name: "len", scope: !4315, file: !384, line: 1540, type: !153)
!4355 = !DILocation(line: 1540, column: 43, scope: !4315)
!4356 = !DILocation(line: 1542, column: 18, scope: !4315)
!4357 = !DILocation(line: 1542, column: 9, scope: !4315)
!4358 = !DILocation(line: 1542, column: 7, scope: !4315)
!4359 = !DILocation(line: 1545, column: 25, scope: !4360)
!4360 = distinct !DILexicalBlock(scope: !4315, file: !384, line: 1545, column: 7)
!4361 = !DILocation(line: 1545, column: 7, scope: !4360)
!4362 = !DILocation(line: 1545, column: 66, scope: !4360)
!4363 = !DILocation(line: 1545, column: 7, scope: !4315)
!4364 = !DILocation(line: 1545, column: 76, scope: !4360)
!4365 = !DILocation(line: 1547, column: 8, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4315, file: !384, line: 1547, column: 7)
!4367 = !DILocation(line: 1547, column: 16, scope: !4366)
!4368 = !DILocation(line: 1547, column: 13, scope: !4366)
!4369 = !DILocation(line: 1547, column: 31, scope: !4366)
!4370 = !DILocation(line: 1547, column: 35, scope: !4366)
!4371 = !DILocation(line: 1547, column: 41, scope: !4366)
!4372 = !DILocation(line: 1547, column: 47, scope: !4366)
!4373 = !DILocation(line: 1547, column: 51, scope: !4366)
!4374 = !DILocation(line: 1547, column: 55, scope: !4366)
!4375 = !DILocation(line: 1547, column: 60, scope: !4366)
!4376 = !DILocation(line: 1547, column: 64, scope: !4366)
!4377 = !DILocation(line: 1547, column: 70, scope: !4366)
!4378 = !DILocation(line: 1547, column: 68, scope: !4366)
!4379 = !DILocation(line: 1547, column: 7, scope: !4315)
!4380 = !DILocation(line: 1547, column: 78, scope: !4366)
!4381 = !DILocation(line: 1549, column: 25, scope: !4315)
!4382 = !DILocation(line: 1549, column: 5, scope: !4315)
!4383 = !DILocation(line: 1550, column: 10, scope: !4315)
!4384 = !DILocation(line: 1550, column: 8, scope: !4315)
!4385 = !DILocation(line: 1551, column: 12, scope: !4315)
!4386 = !DILocation(line: 1551, column: 16, scope: !4315)
!4387 = !DILocation(line: 1551, column: 14, scope: !4315)
!4388 = !DILocation(line: 1551, column: 21, scope: !4315)
!4389 = !DILocation(line: 1551, column: 10, scope: !4315)
!4390 = !DILocation(line: 1552, column: 8, scope: !4315)
!4391 = !DILocation(line: 1552, column: 5, scope: !4315)
!4392 = !DILocation(line: 1554, column: 10, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4315, file: !384, line: 1554, column: 3)
!4394 = !DILocation(line: 1554, column: 8, scope: !4393)
!4395 = !DILocation(line: 1554, column: 15, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4393, file: !384, line: 1554, column: 3)
!4397 = !DILocation(line: 1554, column: 19, scope: !4396)
!4398 = !DILocation(line: 1554, column: 17, scope: !4396)
!4399 = !DILocation(line: 1554, column: 3, scope: !4393)
!4400 = !DILocation(line: 1555, column: 13, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4396, file: !384, line: 1554, column: 31)
!4402 = !DILocation(line: 1555, column: 5, scope: !4401)
!4403 = !DILocation(line: 1557, column: 25, scope: !4404)
!4404 = distinct !DILexicalBlock(scope: !4401, file: !384, line: 1555, column: 19)
!4405 = !DILocation(line: 1557, column: 17, scope: !4404)
!4406 = !DILocation(line: 1557, column: 15, scope: !4404)
!4407 = !DILocation(line: 1557, column: 31, scope: !4404)
!4408 = !DILocation(line: 1558, column: 26, scope: !4404)
!4409 = !DILocation(line: 1558, column: 17, scope: !4404)
!4410 = !DILocation(line: 1558, column: 15, scope: !4404)
!4411 = !DILocation(line: 1559, column: 13, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4404, file: !384, line: 1559, column: 13)
!4413 = !DILocation(line: 1559, column: 17, scope: !4412)
!4414 = !DILocation(line: 1559, column: 15, scope: !4412)
!4415 = !DILocation(line: 1559, column: 13, scope: !4404)
!4416 = !DILocation(line: 1559, column: 25, scope: !4412)
!4417 = !DILocation(line: 1560, column: 14, scope: !4404)
!4418 = !DILocation(line: 1560, column: 12, scope: !4404)
!4419 = !DILocation(line: 1561, column: 9, scope: !4404)
!4420 = !DILocation(line: 1563, column: 34, scope: !4404)
!4421 = !DILocation(line: 1563, column: 15, scope: !4404)
!4422 = !DILocation(line: 1563, column: 13, scope: !4404)
!4423 = !DILocation(line: 1563, column: 39, scope: !4404)
!4424 = !DILocation(line: 1564, column: 13, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4404, file: !384, line: 1564, column: 13)
!4426 = !DILocation(line: 1564, column: 17, scope: !4425)
!4427 = !DILocation(line: 1564, column: 15, scope: !4425)
!4428 = !DILocation(line: 1564, column: 13, scope: !4404)
!4429 = !DILocation(line: 1564, column: 25, scope: !4425)
!4430 = !DILocation(line: 1565, column: 15, scope: !4404)
!4431 = !DILocation(line: 1565, column: 13, scope: !4404)
!4432 = !DILocation(line: 1566, column: 14, scope: !4404)
!4433 = !DILocation(line: 1566, column: 11, scope: !4404)
!4434 = !DILocation(line: 1567, column: 13, scope: !4435)
!4435 = distinct !DILexicalBlock(scope: !4404, file: !384, line: 1567, column: 13)
!4436 = !DILocation(line: 1567, column: 17, scope: !4435)
!4437 = !DILocation(line: 1567, column: 15, scope: !4435)
!4438 = !DILocation(line: 1567, column: 13, scope: !4404)
!4439 = !DILocation(line: 1567, column: 25, scope: !4435)
!4440 = !DILocation(line: 1568, column: 9, scope: !4404)
!4441 = !DILocation(line: 1570, column: 12, scope: !4401)
!4442 = !DILocation(line: 1571, column: 9, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4401, file: !384, line: 1571, column: 9)
!4444 = !DILocation(line: 1571, column: 20, scope: !4443)
!4445 = !DILocation(line: 1571, column: 17, scope: !4443)
!4446 = !DILocation(line: 1571, column: 9, scope: !4401)
!4447 = !DILocation(line: 1571, column: 25, scope: !4443)
!4448 = !DILocation(line: 1573, column: 24, scope: !4401)
!4449 = !DILocation(line: 1573, column: 27, scope: !4401)
!4450 = !DILocation(line: 1573, column: 9, scope: !4401)
!4451 = !DILocation(line: 1573, column: 7, scope: !4401)
!4452 = !DILocation(line: 1574, column: 10, scope: !4453)
!4453 = distinct !DILexicalBlock(scope: !4401, file: !384, line: 1574, column: 9)
!4454 = !DILocation(line: 1574, column: 12, scope: !4453)
!4455 = !DILocation(line: 1574, column: 18, scope: !4453)
!4456 = !DILocation(line: 1574, column: 22, scope: !4453)
!4457 = !DILocation(line: 1574, column: 26, scope: !4453)
!4458 = !DILocation(line: 1574, column: 24, scope: !4453)
!4459 = !DILocation(line: 1574, column: 9, scope: !4401)
!4460 = !DILocation(line: 1574, column: 33, scope: !4453)
!4461 = !DILocation(line: 1575, column: 3, scope: !4401)
!4462 = !DILocation(line: 1554, column: 27, scope: !4396)
!4463 = !DILocation(line: 1554, column: 3, scope: !4396)
!4464 = distinct !{!4464, !4399, !4465}
!4465 = !DILocation(line: 1575, column: 3, scope: !4393)
!4466 = !DILocation(line: 1577, column: 3, scope: !4315)
!4467 = !DILabel(scope: !4315, name: "found", file: !384, line: 1579)
!4468 = !DILocation(line: 1579, column: 1, scope: !4315)
!4469 = !DILocation(line: 1581, column: 11, scope: !4315)
!4470 = !DILocation(line: 1581, column: 3, scope: !4315)
!4471 = !DILocation(line: 1583, column: 11, scope: !4472)
!4472 = distinct !DILexicalBlock(scope: !4473, file: !384, line: 1583, column: 11)
!4473 = distinct !DILexicalBlock(scope: !4315, file: !384, line: 1581, column: 17)
!4474 = !DILocation(line: 1583, column: 11, scope: !4473)
!4475 = !DILocation(line: 1583, column: 23, scope: !4472)
!4476 = !DILocation(line: 1583, column: 17, scope: !4472)
!4477 = !DILocation(line: 1583, column: 21, scope: !4472)
!4478 = !DILocation(line: 1583, column: 16, scope: !4472)
!4479 = !DILocation(line: 1584, column: 7, scope: !4473)
!4480 = !DILocation(line: 1586, column: 11, scope: !4481)
!4481 = distinct !DILexicalBlock(scope: !4473, file: !384, line: 1586, column: 11)
!4482 = !DILocation(line: 1586, column: 11, scope: !4473)
!4483 = !DILocation(line: 1587, column: 16, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4481, file: !384, line: 1586, column: 17)
!4485 = !DILocation(line: 1587, column: 22, scope: !4484)
!4486 = !DILocation(line: 1587, column: 27, scope: !4484)
!4487 = !DILocation(line: 1587, column: 9, scope: !4484)
!4488 = !DILocation(line: 1588, column: 9, scope: !4484)
!4489 = !DILocation(line: 1588, column: 14, scope: !4484)
!4490 = !DILocation(line: 1588, column: 19, scope: !4484)
!4491 = !DILocation(line: 1589, column: 7, scope: !4484)
!4492 = !DILocation(line: 1590, column: 7, scope: !4473)
!4493 = !DILocation(line: 1593, column: 19, scope: !4315)
!4494 = !DILocation(line: 1593, column: 22, scope: !4315)
!4495 = !DILocation(line: 1593, column: 10, scope: !4315)
!4496 = !DILocation(line: 1593, column: 3, scope: !4315)
!4497 = !DILocation(line: 1595, column: 1, scope: !4315)
!4498 = distinct !DISubprogram(name: "binn_object_get_pair", scope: !384, file: !384, line: 1607, type: !4499, scopeLine: 1607, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4499 = !DISubroutineType(types: !4500)
!4500 = !{!393, !82, !101, !103, !386}
!4501 = !DILocalVariable(name: "ptr", arg: 1, scope: !4498, file: !384, line: 1607, type: !82)
!4502 = !DILocation(line: 1607, column: 42, scope: !4498)
!4503 = !DILocalVariable(name: "pos", arg: 2, scope: !4498, file: !384, line: 1607, type: !101)
!4504 = !DILocation(line: 1607, column: 51, scope: !4498)
!4505 = !DILocalVariable(name: "pkey", arg: 3, scope: !4498, file: !384, line: 1607, type: !103)
!4506 = !DILocation(line: 1607, column: 62, scope: !4498)
!4507 = !DILocalVariable(name: "value", arg: 4, scope: !4498, file: !384, line: 1607, type: !386)
!4508 = !DILocation(line: 1607, column: 74, scope: !4498)
!4509 = !DILocation(line: 1609, column: 38, scope: !4498)
!4510 = !DILocation(line: 1609, column: 43, scope: !4498)
!4511 = !DILocation(line: 1609, column: 54, scope: !4498)
!4512 = !DILocation(line: 1609, column: 60, scope: !4498)
!4513 = !DILocation(line: 1609, column: 10, scope: !4498)
!4514 = !DILocation(line: 1609, column: 3, scope: !4498)
!4515 = distinct !DISubprogram(name: "binn_map_pair", scope: !384, file: !384, line: 1615, type: !4516, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4516 = !DISubroutineType(types: !4517)
!4517 = !{!386, !82, !101, !440}
!4518 = !DILocalVariable(name: "map", arg: 1, scope: !4515, file: !384, line: 1615, type: !82)
!4519 = !DILocation(line: 1615, column: 37, scope: !4515)
!4520 = !DILocalVariable(name: "pos", arg: 2, scope: !4515, file: !384, line: 1615, type: !101)
!4521 = !DILocation(line: 1615, column: 46, scope: !4515)
!4522 = !DILocalVariable(name: "pid", arg: 3, scope: !4515, file: !384, line: 1615, type: !440)
!4523 = !DILocation(line: 1615, column: 56, scope: !4515)
!4524 = !DILocalVariable(name: "value", scope: !4515, file: !384, line: 1616, type: !386)
!4525 = !DILocation(line: 1616, column: 9, scope: !4515)
!4526 = !DILocation(line: 1618, column: 20, scope: !4515)
!4527 = !DILocation(line: 1618, column: 11, scope: !4515)
!4528 = !DILocation(line: 1618, column: 9, scope: !4515)
!4529 = !DILocation(line: 1620, column: 32, scope: !4530)
!4530 = distinct !DILexicalBlock(scope: !4515, file: !384, line: 1620, column: 7)
!4531 = !DILocation(line: 1620, column: 37, scope: !4530)
!4532 = !DILocation(line: 1620, column: 42, scope: !4530)
!4533 = !DILocation(line: 1620, column: 53, scope: !4530)
!4534 = !DILocation(line: 1620, column: 7, scope: !4530)
!4535 = !DILocation(line: 1620, column: 60, scope: !4530)
!4536 = !DILocation(line: 1620, column: 7, scope: !4515)
!4537 = !DILocation(line: 1621, column: 5, scope: !4538)
!4538 = distinct !DILexicalBlock(scope: !4530, file: !384, line: 1620, column: 70)
!4539 = !DILocation(line: 1621, column: 13, scope: !4538)
!4540 = !DILocation(line: 1622, column: 5, scope: !4538)
!4541 = !DILocation(line: 1625, column: 3, scope: !4515)
!4542 = !DILocation(line: 1625, column: 10, scope: !4515)
!4543 = !DILocation(line: 1625, column: 20, scope: !4515)
!4544 = !DILocation(line: 1626, column: 10, scope: !4515)
!4545 = !DILocation(line: 1626, column: 3, scope: !4515)
!4546 = !DILocation(line: 1628, column: 1, scope: !4515)
!4547 = distinct !DISubprogram(name: "binn_object_pair", scope: !384, file: !384, line: 1632, type: !4548, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4548 = !DISubroutineType(types: !4549)
!4549 = !{!386, !82, !101, !103}
!4550 = !DILocalVariable(name: "obj", arg: 1, scope: !4547, file: !384, line: 1632, type: !82)
!4551 = !DILocation(line: 1632, column: 40, scope: !4547)
!4552 = !DILocalVariable(name: "pos", arg: 2, scope: !4547, file: !384, line: 1632, type: !101)
!4553 = !DILocation(line: 1632, column: 49, scope: !4547)
!4554 = !DILocalVariable(name: "pkey", arg: 3, scope: !4547, file: !384, line: 1632, type: !103)
!4555 = !DILocation(line: 1632, column: 60, scope: !4547)
!4556 = !DILocalVariable(name: "value", scope: !4547, file: !384, line: 1633, type: !386)
!4557 = !DILocation(line: 1633, column: 9, scope: !4547)
!4558 = !DILocation(line: 1635, column: 20, scope: !4547)
!4559 = !DILocation(line: 1635, column: 11, scope: !4547)
!4560 = !DILocation(line: 1635, column: 9, scope: !4547)
!4561 = !DILocation(line: 1637, column: 35, scope: !4562)
!4562 = distinct !DILexicalBlock(scope: !4547, file: !384, line: 1637, column: 7)
!4563 = !DILocation(line: 1637, column: 40, scope: !4562)
!4564 = !DILocation(line: 1637, column: 51, scope: !4562)
!4565 = !DILocation(line: 1637, column: 57, scope: !4562)
!4566 = !DILocation(line: 1637, column: 7, scope: !4562)
!4567 = !DILocation(line: 1637, column: 64, scope: !4562)
!4568 = !DILocation(line: 1637, column: 7, scope: !4547)
!4569 = !DILocation(line: 1638, column: 5, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4562, file: !384, line: 1637, column: 74)
!4571 = !DILocation(line: 1638, column: 13, scope: !4570)
!4572 = !DILocation(line: 1639, column: 5, scope: !4570)
!4573 = !DILocation(line: 1642, column: 3, scope: !4547)
!4574 = !DILocation(line: 1642, column: 10, scope: !4547)
!4575 = !DILocation(line: 1642, column: 20, scope: !4547)
!4576 = !DILocation(line: 1643, column: 10, scope: !4547)
!4577 = !DILocation(line: 1643, column: 3, scope: !4547)
!4578 = !DILocation(line: 1645, column: 1, scope: !4547)
!4579 = distinct !DISubprogram(name: "binn_map_read_pair", scope: !384, file: !384, line: 1650, type: !4580, scopeLine: 1650, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4580 = !DISubroutineType(types: !4581)
!4581 = !{!82, !82, !101, !440, !440, !440}
!4582 = !DILocalVariable(name: "ptr", arg: 1, scope: !4579, file: !384, line: 1650, type: !82)
!4583 = !DILocation(line: 1650, column: 42, scope: !4579)
!4584 = !DILocalVariable(name: "pos", arg: 2, scope: !4579, file: !384, line: 1650, type: !101)
!4585 = !DILocation(line: 1650, column: 51, scope: !4579)
!4586 = !DILocalVariable(name: "pid", arg: 3, scope: !4579, file: !384, line: 1650, type: !440)
!4587 = !DILocation(line: 1650, column: 61, scope: !4579)
!4588 = !DILocalVariable(name: "ptype", arg: 4, scope: !4579, file: !384, line: 1650, type: !440)
!4589 = !DILocation(line: 1650, column: 71, scope: !4579)
!4590 = !DILocalVariable(name: "psize", arg: 5, scope: !4579, file: !384, line: 1650, type: !440)
!4591 = !DILocation(line: 1650, column: 83, scope: !4579)
!4592 = !DILocalVariable(name: "value", scope: !4579, file: !384, line: 1651, type: !387)
!4593 = !DILocation(line: 1651, column: 8, scope: !4579)
!4594 = !DILocation(line: 1653, column: 25, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4579, file: !384, line: 1653, column: 7)
!4596 = !DILocation(line: 1653, column: 30, scope: !4595)
!4597 = !DILocation(line: 1653, column: 35, scope: !4595)
!4598 = !DILocation(line: 1653, column: 7, scope: !4595)
!4599 = !DILocation(line: 1653, column: 48, scope: !4595)
!4600 = !DILocation(line: 1653, column: 7, scope: !4579)
!4601 = !DILocation(line: 1653, column: 58, scope: !4595)
!4602 = !DILocation(line: 1654, column: 7, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4579, file: !384, line: 1654, column: 7)
!4604 = !DILocation(line: 1654, column: 7, scope: !4579)
!4605 = !DILocation(line: 1654, column: 29, scope: !4603)
!4606 = !DILocation(line: 1654, column: 15, scope: !4603)
!4607 = !DILocation(line: 1654, column: 21, scope: !4603)
!4608 = !DILocation(line: 1654, column: 14, scope: !4603)
!4609 = !DILocation(line: 1655, column: 7, scope: !4610)
!4610 = distinct !DILexicalBlock(scope: !4579, file: !384, line: 1655, column: 7)
!4611 = !DILocation(line: 1655, column: 7, scope: !4579)
!4612 = !DILocation(line: 1655, column: 29, scope: !4610)
!4613 = !DILocation(line: 1655, column: 15, scope: !4610)
!4614 = !DILocation(line: 1655, column: 21, scope: !4610)
!4615 = !DILocation(line: 1655, column: 14, scope: !4610)
!4616 = !DILocation(line: 1657, column: 10, scope: !4579)
!4617 = !DILocation(line: 1657, column: 3, scope: !4579)
!4618 = !DILocation(line: 1662, column: 1, scope: !4579)
!4619 = distinct !DISubprogram(name: "store_value", linkageName: "_ZL11store_valueP11binn_struct", scope: !384, file: !384, line: 1435, type: !3433, scopeLine: 1435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4620 = !DILocalVariable(name: "value", arg: 1, scope: !4619, file: !384, line: 1435, type: !386)
!4621 = !DILocation(line: 1435, column: 39, scope: !4619)
!4622 = !DILocation(line: 1437, column: 24, scope: !4619)
!4623 = !DILocation(line: 1437, column: 3, scope: !4619)
!4624 = !DILocation(line: 1439, column: 33, scope: !4619)
!4625 = !DILocation(line: 1439, column: 40, scope: !4619)
!4626 = !DILocation(line: 1439, column: 11, scope: !4619)
!4627 = !DILocation(line: 1439, column: 3, scope: !4619)
!4628 = !DILocation(line: 1445, column: 5, scope: !4629)
!4629 = distinct !DILexicalBlock(scope: !4619, file: !384, line: 1439, column: 47)
!4630 = !DILocation(line: 1448, column: 10, scope: !4619)
!4631 = !DILocation(line: 1448, column: 17, scope: !4619)
!4632 = !DILocation(line: 1448, column: 3, scope: !4619)
!4633 = !DILocation(line: 1450, column: 1, scope: !4619)
!4634 = distinct !DISubprogram(name: "binn_get_read_storage", scope: !384, file: !384, line: 1907, type: !4635, scopeLine: 1907, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4635 = !DISubroutineType(types: !4636)
!4636 = !{!101, !101}
!4637 = !DILocalVariable(name: "type", arg: 1, scope: !4634, file: !384, line: 1907, type: !101)
!4638 = !DILocation(line: 1907, column: 40, scope: !4634)
!4639 = !DILocalVariable(name: "storage_type", scope: !4634, file: !384, line: 1908, type: !101)
!4640 = !DILocation(line: 1908, column: 7, scope: !4634)
!4641 = !DILocation(line: 1910, column: 11, scope: !4634)
!4642 = !DILocation(line: 1910, column: 3, scope: !4634)
!4643 = !DILocation(line: 1920, column: 7, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4634, file: !384, line: 1910, column: 17)
!4645 = !DILocation(line: 1922, column: 26, scope: !4644)
!4646 = !DILocation(line: 1922, column: 7, scope: !4644)
!4647 = !DILocation(line: 1923, column: 14, scope: !4644)
!4648 = !DILocation(line: 1923, column: 7, scope: !4644)
!4649 = !DILocation(line: 1926, column: 1, scope: !4634)
!4650 = distinct !DISubprogram(name: "binn_object_read_pair", scope: !384, file: !384, line: 1666, type: !4651, scopeLine: 1666, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4651 = !DISubroutineType(types: !4652)
!4652 = !{!82, !82, !101, !103, !440, !440}
!4653 = !DILocalVariable(name: "ptr", arg: 1, scope: !4650, file: !384, line: 1666, type: !82)
!4654 = !DILocation(line: 1666, column: 45, scope: !4650)
!4655 = !DILocalVariable(name: "pos", arg: 2, scope: !4650, file: !384, line: 1666, type: !101)
!4656 = !DILocation(line: 1666, column: 54, scope: !4650)
!4657 = !DILocalVariable(name: "pkey", arg: 3, scope: !4650, file: !384, line: 1666, type: !103)
!4658 = !DILocation(line: 1666, column: 65, scope: !4650)
!4659 = !DILocalVariable(name: "ptype", arg: 4, scope: !4650, file: !384, line: 1666, type: !440)
!4660 = !DILocation(line: 1666, column: 76, scope: !4650)
!4661 = !DILocalVariable(name: "psize", arg: 5, scope: !4650, file: !384, line: 1666, type: !440)
!4662 = !DILocation(line: 1666, column: 88, scope: !4650)
!4663 = !DILocalVariable(name: "value", scope: !4650, file: !384, line: 1667, type: !387)
!4664 = !DILocation(line: 1667, column: 8, scope: !4650)
!4665 = !DILocation(line: 1669, column: 28, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4650, file: !384, line: 1669, column: 7)
!4667 = !DILocation(line: 1669, column: 33, scope: !4666)
!4668 = !DILocation(line: 1669, column: 38, scope: !4666)
!4669 = !DILocation(line: 1669, column: 7, scope: !4666)
!4670 = !DILocation(line: 1669, column: 52, scope: !4666)
!4671 = !DILocation(line: 1669, column: 7, scope: !4650)
!4672 = !DILocation(line: 1669, column: 62, scope: !4666)
!4673 = !DILocation(line: 1670, column: 7, scope: !4674)
!4674 = distinct !DILexicalBlock(scope: !4650, file: !384, line: 1670, column: 7)
!4675 = !DILocation(line: 1670, column: 7, scope: !4650)
!4676 = !DILocation(line: 1670, column: 29, scope: !4674)
!4677 = !DILocation(line: 1670, column: 15, scope: !4674)
!4678 = !DILocation(line: 1670, column: 21, scope: !4674)
!4679 = !DILocation(line: 1670, column: 14, scope: !4674)
!4680 = !DILocation(line: 1671, column: 7, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !4650, file: !384, line: 1671, column: 7)
!4682 = !DILocation(line: 1671, column: 7, scope: !4650)
!4683 = !DILocation(line: 1671, column: 29, scope: !4681)
!4684 = !DILocation(line: 1671, column: 15, scope: !4681)
!4685 = !DILocation(line: 1671, column: 21, scope: !4681)
!4686 = !DILocation(line: 1671, column: 14, scope: !4681)
!4687 = !DILocation(line: 1673, column: 10, scope: !4650)
!4688 = !DILocation(line: 1673, column: 3, scope: !4650)
!4689 = !DILocation(line: 1678, column: 1, scope: !4650)
!4690 = distinct !DISubprogram(name: "binn_iter_init", scope: !384, file: !384, line: 1684, type: !4691, scopeLine: 1684, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4691 = !DISubroutineType(types: !4692)
!4692 = !{!393, !4693, !82, !101}
!4693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4694, size: 64)
!4694 = !DIDerivedType(tag: DW_TAG_typedef, name: "binn_iter", file: !388, line: 498, baseType: !4695)
!4695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "binn_iter_struct", file: !388, line: 492, size: 256, flags: DIFlagTypePassByValue, elements: !4696, identifier: "_ZTS16binn_iter_struct")
!4696 = !{!4697, !4698, !4699, !4700, !4701}
!4697 = !DIDerivedType(tag: DW_TAG_member, name: "pnext", scope: !4695, file: !388, line: 493, baseType: !439, size: 64)
!4698 = !DIDerivedType(tag: DW_TAG_member, name: "plimit", scope: !4695, file: !388, line: 494, baseType: !439, size: 64, offset: 64)
!4699 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4695, file: !388, line: 495, baseType: !101, size: 32, offset: 128)
!4700 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !4695, file: !388, line: 496, baseType: !101, size: 32, offset: 160)
!4701 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !4695, file: !388, line: 497, baseType: !101, size: 32, offset: 192)
!4702 = !DILocalVariable(name: "iter", arg: 1, scope: !4690, file: !384, line: 1684, type: !4693)
!4703 = !DILocation(line: 1684, column: 41, scope: !4690)
!4704 = !DILocalVariable(name: "ptr", arg: 2, scope: !4690, file: !384, line: 1684, type: !82)
!4705 = !DILocation(line: 1684, column: 53, scope: !4690)
!4706 = !DILocalVariable(name: "expected_type", arg: 3, scope: !4690, file: !384, line: 1684, type: !101)
!4707 = !DILocation(line: 1684, column: 62, scope: !4690)
!4708 = !DILocalVariable(name: "type", scope: !4690, file: !384, line: 1685, type: !101)
!4709 = !DILocation(line: 1685, column: 8, scope: !4690)
!4710 = !DILocalVariable(name: "count", scope: !4690, file: !384, line: 1685, type: !101)
!4711 = !DILocation(line: 1685, column: 14, scope: !4690)
!4712 = !DILocalVariable(name: "size", scope: !4690, file: !384, line: 1685, type: !101)
!4713 = !DILocation(line: 1685, column: 21, scope: !4690)
!4714 = !DILocalVariable(name: "header_size", scope: !4690, file: !384, line: 1685, type: !101)
!4715 = !DILocation(line: 1685, column: 29, scope: !4690)
!4716 = !DILocation(line: 1687, column: 18, scope: !4690)
!4717 = !DILocation(line: 1687, column: 9, scope: !4690)
!4718 = !DILocation(line: 1687, column: 7, scope: !4690)
!4719 = !DILocation(line: 1688, column: 8, scope: !4720)
!4720 = distinct !DILexicalBlock(scope: !4690, file: !384, line: 1688, column: 7)
!4721 = !DILocation(line: 1688, column: 12, scope: !4720)
!4722 = !DILocation(line: 1688, column: 18, scope: !4720)
!4723 = !DILocation(line: 1688, column: 22, scope: !4720)
!4724 = !DILocation(line: 1688, column: 27, scope: !4720)
!4725 = !DILocation(line: 1688, column: 7, scope: !4690)
!4726 = !DILocation(line: 1688, column: 34, scope: !4720)
!4727 = !DILocation(line: 1689, column: 10, scope: !4690)
!4728 = !DILocation(line: 1689, column: 3, scope: !4690)
!4729 = !DILocation(line: 1692, column: 25, scope: !4730)
!4730 = distinct !DILexicalBlock(scope: !4690, file: !384, line: 1692, column: 7)
!4731 = !DILocation(line: 1692, column: 7, scope: !4730)
!4732 = !DILocation(line: 1692, column: 66, scope: !4730)
!4733 = !DILocation(line: 1692, column: 7, scope: !4690)
!4734 = !DILocation(line: 1692, column: 76, scope: !4730)
!4735 = !DILocation(line: 1694, column: 7, scope: !4736)
!4736 = distinct !DILexicalBlock(scope: !4690, file: !384, line: 1694, column: 7)
!4737 = !DILocation(line: 1694, column: 15, scope: !4736)
!4738 = !DILocation(line: 1694, column: 12, scope: !4736)
!4739 = !DILocation(line: 1694, column: 7, scope: !4690)
!4740 = !DILocation(line: 1694, column: 30, scope: !4736)
!4741 = !DILocation(line: 1697, column: 35, scope: !4690)
!4742 = !DILocation(line: 1697, column: 41, scope: !4690)
!4743 = !DILocation(line: 1697, column: 39, scope: !4690)
!4744 = !DILocation(line: 1697, column: 46, scope: !4690)
!4745 = !DILocation(line: 1697, column: 3, scope: !4690)
!4746 = !DILocation(line: 1697, column: 9, scope: !4690)
!4747 = !DILocation(line: 1697, column: 16, scope: !4690)
!4748 = !DILocation(line: 1698, column: 34, scope: !4690)
!4749 = !DILocation(line: 1698, column: 40, scope: !4690)
!4750 = !DILocation(line: 1698, column: 38, scope: !4690)
!4751 = !DILocation(line: 1698, column: 3, scope: !4690)
!4752 = !DILocation(line: 1698, column: 9, scope: !4690)
!4753 = !DILocation(line: 1698, column: 15, scope: !4690)
!4754 = !DILocation(line: 1699, column: 17, scope: !4690)
!4755 = !DILocation(line: 1699, column: 3, scope: !4690)
!4756 = !DILocation(line: 1699, column: 9, scope: !4690)
!4757 = !DILocation(line: 1699, column: 15, scope: !4690)
!4758 = !DILocation(line: 1700, column: 3, scope: !4690)
!4759 = !DILocation(line: 1700, column: 9, scope: !4690)
!4760 = !DILocation(line: 1700, column: 17, scope: !4690)
!4761 = !DILocation(line: 1701, column: 16, scope: !4690)
!4762 = !DILocation(line: 1701, column: 3, scope: !4690)
!4763 = !DILocation(line: 1701, column: 9, scope: !4690)
!4764 = !DILocation(line: 1701, column: 14, scope: !4690)
!4765 = !DILocation(line: 1703, column: 3, scope: !4690)
!4766 = !DILocation(line: 1704, column: 1, scope: !4690)
!4767 = distinct !DISubprogram(name: "binn_list_next", scope: !384, file: !384, line: 1708, type: !4768, scopeLine: 1708, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4768 = !DISubroutineType(types: !4769)
!4769 = !{!393, !4693, !386}
!4770 = !DILocalVariable(name: "iter", arg: 1, scope: !4767, file: !384, line: 1708, type: !4693)
!4771 = !DILocation(line: 1708, column: 41, scope: !4767)
!4772 = !DILocalVariable(name: "value", arg: 2, scope: !4767, file: !384, line: 1708, type: !386)
!4773 = !DILocation(line: 1708, column: 53, scope: !4767)
!4774 = !DILocalVariable(name: "pnow", scope: !4767, file: !384, line: 1709, type: !439)
!4775 = !DILocation(line: 1709, column: 18, scope: !4767)
!4776 = !DILocation(line: 1711, column: 8, scope: !4777)
!4777 = distinct !DILexicalBlock(scope: !4767, file: !384, line: 1711, column: 7)
!4778 = !DILocation(line: 1711, column: 13, scope: !4777)
!4779 = !DILocation(line: 1711, column: 19, scope: !4777)
!4780 = !DILocation(line: 1711, column: 23, scope: !4777)
!4781 = !DILocation(line: 1711, column: 29, scope: !4777)
!4782 = !DILocation(line: 1711, column: 35, scope: !4777)
!4783 = !DILocation(line: 1711, column: 41, scope: !4777)
!4784 = !DILocation(line: 1711, column: 45, scope: !4777)
!4785 = !DILocation(line: 1711, column: 51, scope: !4777)
!4786 = !DILocation(line: 1711, column: 59, scope: !4777)
!4787 = !DILocation(line: 1711, column: 65, scope: !4777)
!4788 = !DILocation(line: 1711, column: 57, scope: !4777)
!4789 = !DILocation(line: 1711, column: 73, scope: !4777)
!4790 = !DILocation(line: 1711, column: 77, scope: !4777)
!4791 = !DILocation(line: 1711, column: 83, scope: !4777)
!4792 = !DILocation(line: 1711, column: 93, scope: !4777)
!4793 = !DILocation(line: 1711, column: 99, scope: !4777)
!4794 = !DILocation(line: 1711, column: 91, scope: !4777)
!4795 = !DILocation(line: 1711, column: 106, scope: !4777)
!4796 = !DILocation(line: 1711, column: 110, scope: !4777)
!4797 = !DILocation(line: 1711, column: 116, scope: !4777)
!4798 = !DILocation(line: 1711, column: 121, scope: !4777)
!4799 = !DILocation(line: 1711, column: 7, scope: !4767)
!4800 = !DILocation(line: 1711, column: 136, scope: !4777)
!4801 = !DILocation(line: 1713, column: 3, scope: !4767)
!4802 = !DILocation(line: 1713, column: 9, scope: !4767)
!4803 = !DILocation(line: 1713, column: 16, scope: !4767)
!4804 = !DILocation(line: 1714, column: 7, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4767, file: !384, line: 1714, column: 7)
!4806 = !DILocation(line: 1714, column: 13, scope: !4805)
!4807 = !DILocation(line: 1714, column: 23, scope: !4805)
!4808 = !DILocation(line: 1714, column: 29, scope: !4805)
!4809 = !DILocation(line: 1714, column: 21, scope: !4805)
!4810 = !DILocation(line: 1714, column: 7, scope: !4767)
!4811 = !DILocation(line: 1714, column: 36, scope: !4805)
!4812 = !DILocation(line: 1716, column: 10, scope: !4767)
!4813 = !DILocation(line: 1716, column: 16, scope: !4767)
!4814 = !DILocation(line: 1716, column: 8, scope: !4767)
!4815 = !DILocation(line: 1717, column: 32, scope: !4767)
!4816 = !DILocation(line: 1717, column: 38, scope: !4767)
!4817 = !DILocation(line: 1717, column: 44, scope: !4767)
!4818 = !DILocation(line: 1717, column: 17, scope: !4767)
!4819 = !DILocation(line: 1717, column: 3, scope: !4767)
!4820 = !DILocation(line: 1717, column: 9, scope: !4767)
!4821 = !DILocation(line: 1717, column: 15, scope: !4767)
!4822 = !DILocation(line: 1718, column: 7, scope: !4823)
!4823 = distinct !DILexicalBlock(scope: !4767, file: !384, line: 1718, column: 7)
!4824 = !DILocation(line: 1718, column: 13, scope: !4823)
!4825 = !DILocation(line: 1718, column: 19, scope: !4823)
!4826 = !DILocation(line: 1718, column: 24, scope: !4823)
!4827 = !DILocation(line: 1718, column: 27, scope: !4823)
!4828 = !DILocation(line: 1718, column: 33, scope: !4823)
!4829 = !DILocation(line: 1718, column: 41, scope: !4823)
!4830 = !DILocation(line: 1718, column: 39, scope: !4823)
!4831 = !DILocation(line: 1718, column: 7, scope: !4767)
!4832 = !DILocation(line: 1718, column: 47, scope: !4823)
!4833 = !DILocation(line: 1720, column: 19, scope: !4767)
!4834 = !DILocation(line: 1720, column: 25, scope: !4767)
!4835 = !DILocation(line: 1720, column: 10, scope: !4767)
!4836 = !DILocation(line: 1720, column: 3, scope: !4767)
!4837 = !DILocation(line: 1722, column: 1, scope: !4767)
!4838 = distinct !DISubprogram(name: "binn_map_next", scope: !384, file: !384, line: 1767, type: !4839, scopeLine: 1767, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4839 = !DISubroutineType(types: !4840)
!4840 = !{!393, !4693, !440, !386}
!4841 = !DILocalVariable(name: "iter", arg: 1, scope: !4838, file: !384, line: 1767, type: !4693)
!4842 = !DILocation(line: 1767, column: 40, scope: !4838)
!4843 = !DILocalVariable(name: "pid", arg: 2, scope: !4838, file: !384, line: 1767, type: !440)
!4844 = !DILocation(line: 1767, column: 51, scope: !4838)
!4845 = !DILocalVariable(name: "value", arg: 3, scope: !4838, file: !384, line: 1767, type: !386)
!4846 = !DILocation(line: 1767, column: 62, scope: !4838)
!4847 = !DILocation(line: 1769, column: 40, scope: !4838)
!4848 = !DILocation(line: 1769, column: 46, scope: !4838)
!4849 = !DILocation(line: 1769, column: 57, scope: !4838)
!4850 = !DILocation(line: 1769, column: 10, scope: !4838)
!4851 = !DILocation(line: 1769, column: 3, scope: !4838)
!4852 = distinct !DISubprogram(name: "binn_read_next_pair", linkageName: "_ZL19binn_read_next_pairiP16binn_iter_structPiPcP11binn_struct", scope: !384, file: !384, line: 1726, type: !4853, scopeLine: 1726, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4853 = !DISubroutineType(types: !4854)
!4854 = !{!393, !101, !4693, !440, !103, !386}
!4855 = !DILocalVariable(name: "expected_type", arg: 1, scope: !4852, file: !384, line: 1726, type: !101)
!4856 = !DILocation(line: 1726, column: 43, scope: !4852)
!4857 = !DILocalVariable(name: "iter", arg: 2, scope: !4852, file: !384, line: 1726, type: !4693)
!4858 = !DILocation(line: 1726, column: 69, scope: !4852)
!4859 = !DILocalVariable(name: "pid", arg: 3, scope: !4852, file: !384, line: 1726, type: !440)
!4860 = !DILocation(line: 1726, column: 80, scope: !4852)
!4861 = !DILocalVariable(name: "pkey", arg: 4, scope: !4852, file: !384, line: 1726, type: !103)
!4862 = !DILocation(line: 1726, column: 91, scope: !4852)
!4863 = !DILocalVariable(name: "value", arg: 5, scope: !4852, file: !384, line: 1726, type: !386)
!4864 = !DILocation(line: 1726, column: 103, scope: !4852)
!4865 = !DILocalVariable(name: "int32", scope: !4852, file: !384, line: 1727, type: !101)
!4866 = !DILocation(line: 1727, column: 8, scope: !4852)
!4867 = !DILocalVariable(name: "id", scope: !4852, file: !384, line: 1727, type: !101)
!4868 = !DILocation(line: 1727, column: 15, scope: !4852)
!4869 = !DILocalVariable(name: "p", scope: !4852, file: !384, line: 1728, type: !439)
!4870 = !DILocation(line: 1728, column: 18, scope: !4852)
!4871 = !DILocalVariable(name: "key", scope: !4852, file: !384, line: 1728, type: !439)
!4872 = !DILocation(line: 1728, column: 22, scope: !4852)
!4873 = !DILocalVariable(name: "len", scope: !4852, file: !384, line: 1729, type: !169)
!4874 = !DILocation(line: 1729, column: 18, scope: !4852)
!4875 = !DILocation(line: 1731, column: 8, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4852, file: !384, line: 1731, column: 7)
!4877 = !DILocation(line: 1731, column: 13, scope: !4876)
!4878 = !DILocation(line: 1731, column: 19, scope: !4876)
!4879 = !DILocation(line: 1731, column: 23, scope: !4876)
!4880 = !DILocation(line: 1731, column: 29, scope: !4876)
!4881 = !DILocation(line: 1731, column: 35, scope: !4876)
!4882 = !DILocation(line: 1731, column: 41, scope: !4876)
!4883 = !DILocation(line: 1731, column: 45, scope: !4876)
!4884 = !DILocation(line: 1731, column: 51, scope: !4876)
!4885 = !DILocation(line: 1731, column: 59, scope: !4876)
!4886 = !DILocation(line: 1731, column: 65, scope: !4876)
!4887 = !DILocation(line: 1731, column: 57, scope: !4876)
!4888 = !DILocation(line: 1731, column: 73, scope: !4876)
!4889 = !DILocation(line: 1731, column: 77, scope: !4876)
!4890 = !DILocation(line: 1731, column: 83, scope: !4876)
!4891 = !DILocation(line: 1731, column: 93, scope: !4876)
!4892 = !DILocation(line: 1731, column: 99, scope: !4876)
!4893 = !DILocation(line: 1731, column: 91, scope: !4876)
!4894 = !DILocation(line: 1731, column: 106, scope: !4876)
!4895 = !DILocation(line: 1731, column: 110, scope: !4876)
!4896 = !DILocation(line: 1731, column: 116, scope: !4876)
!4897 = !DILocation(line: 1731, column: 124, scope: !4876)
!4898 = !DILocation(line: 1731, column: 121, scope: !4876)
!4899 = !DILocation(line: 1731, column: 7, scope: !4852)
!4900 = !DILocation(line: 1731, column: 140, scope: !4876)
!4901 = !DILocation(line: 1733, column: 3, scope: !4852)
!4902 = !DILocation(line: 1733, column: 9, scope: !4852)
!4903 = !DILocation(line: 1733, column: 16, scope: !4852)
!4904 = !DILocation(line: 1734, column: 7, scope: !4905)
!4905 = distinct !DILexicalBlock(scope: !4852, file: !384, line: 1734, column: 7)
!4906 = !DILocation(line: 1734, column: 13, scope: !4905)
!4907 = !DILocation(line: 1734, column: 23, scope: !4905)
!4908 = !DILocation(line: 1734, column: 29, scope: !4905)
!4909 = !DILocation(line: 1734, column: 21, scope: !4905)
!4910 = !DILocation(line: 1734, column: 7, scope: !4852)
!4911 = !DILocation(line: 1734, column: 36, scope: !4905)
!4912 = !DILocation(line: 1736, column: 7, scope: !4852)
!4913 = !DILocation(line: 1736, column: 13, scope: !4852)
!4914 = !DILocation(line: 1736, column: 5, scope: !4852)
!4915 = !DILocation(line: 1738, column: 11, scope: !4852)
!4916 = !DILocation(line: 1738, column: 3, scope: !4852)
!4917 = !DILocation(line: 1740, column: 23, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4852, file: !384, line: 1738, column: 26)
!4919 = !DILocation(line: 1740, column: 15, scope: !4918)
!4920 = !DILocation(line: 1740, column: 13, scope: !4918)
!4921 = !DILocation(line: 1740, column: 29, scope: !4918)
!4922 = !DILocation(line: 1741, column: 24, scope: !4918)
!4923 = !DILocation(line: 1741, column: 15, scope: !4918)
!4924 = !DILocation(line: 1741, column: 13, scope: !4918)
!4925 = !DILocation(line: 1742, column: 11, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4918, file: !384, line: 1742, column: 11)
!4927 = !DILocation(line: 1742, column: 15, scope: !4926)
!4928 = !DILocation(line: 1742, column: 21, scope: !4926)
!4929 = !DILocation(line: 1742, column: 13, scope: !4926)
!4930 = !DILocation(line: 1742, column: 11, scope: !4918)
!4931 = !DILocation(line: 1742, column: 29, scope: !4926)
!4932 = !DILocation(line: 1743, column: 12, scope: !4918)
!4933 = !DILocation(line: 1743, column: 10, scope: !4918)
!4934 = !DILocation(line: 1744, column: 11, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4918, file: !384, line: 1744, column: 11)
!4936 = !DILocation(line: 1744, column: 11, scope: !4918)
!4937 = !DILocation(line: 1744, column: 23, scope: !4935)
!4938 = !DILocation(line: 1744, column: 17, scope: !4935)
!4939 = !DILocation(line: 1744, column: 21, scope: !4935)
!4940 = !DILocation(line: 1744, column: 16, scope: !4935)
!4941 = !DILocation(line: 1745, column: 7, scope: !4918)
!4942 = !DILocation(line: 1747, column: 32, scope: !4918)
!4943 = !DILocation(line: 1747, column: 13, scope: !4918)
!4944 = !DILocation(line: 1747, column: 11, scope: !4918)
!4945 = !DILocation(line: 1747, column: 37, scope: !4918)
!4946 = !DILocation(line: 1748, column: 13, scope: !4918)
!4947 = !DILocation(line: 1748, column: 11, scope: !4918)
!4948 = !DILocation(line: 1749, column: 12, scope: !4918)
!4949 = !DILocation(line: 1749, column: 9, scope: !4918)
!4950 = !DILocation(line: 1750, column: 11, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4918, file: !384, line: 1750, column: 11)
!4952 = !DILocation(line: 1750, column: 15, scope: !4951)
!4953 = !DILocation(line: 1750, column: 21, scope: !4951)
!4954 = !DILocation(line: 1750, column: 13, scope: !4951)
!4955 = !DILocation(line: 1750, column: 11, scope: !4918)
!4956 = !DILocation(line: 1750, column: 29, scope: !4951)
!4957 = !DILocation(line: 1751, column: 11, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4918, file: !384, line: 1751, column: 11)
!4959 = !DILocation(line: 1751, column: 11, scope: !4918)
!4960 = !DILocation(line: 1752, column: 16, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4958, file: !384, line: 1751, column: 17)
!4962 = !DILocation(line: 1752, column: 22, scope: !4961)
!4963 = !DILocation(line: 1752, column: 27, scope: !4961)
!4964 = !DILocation(line: 1752, column: 9, scope: !4961)
!4965 = !DILocation(line: 1753, column: 9, scope: !4961)
!4966 = !DILocation(line: 1753, column: 14, scope: !4961)
!4967 = !DILocation(line: 1753, column: 19, scope: !4961)
!4968 = !DILocation(line: 1754, column: 7, scope: !4961)
!4969 = !DILocation(line: 1755, column: 7, scope: !4918)
!4970 = !DILocation(line: 1758, column: 32, scope: !4852)
!4971 = !DILocation(line: 1758, column: 35, scope: !4852)
!4972 = !DILocation(line: 1758, column: 41, scope: !4852)
!4973 = !DILocation(line: 1758, column: 17, scope: !4852)
!4974 = !DILocation(line: 1758, column: 3, scope: !4852)
!4975 = !DILocation(line: 1758, column: 9, scope: !4852)
!4976 = !DILocation(line: 1758, column: 15, scope: !4852)
!4977 = !DILocation(line: 1759, column: 7, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4852, file: !384, line: 1759, column: 7)
!4979 = !DILocation(line: 1759, column: 13, scope: !4978)
!4980 = !DILocation(line: 1759, column: 19, scope: !4978)
!4981 = !DILocation(line: 1759, column: 24, scope: !4978)
!4982 = !DILocation(line: 1759, column: 27, scope: !4978)
!4983 = !DILocation(line: 1759, column: 33, scope: !4978)
!4984 = !DILocation(line: 1759, column: 41, scope: !4978)
!4985 = !DILocation(line: 1759, column: 39, scope: !4978)
!4986 = !DILocation(line: 1759, column: 7, scope: !4852)
!4987 = !DILocation(line: 1759, column: 44, scope: !4978)
!4988 = !DILocation(line: 1761, column: 19, scope: !4852)
!4989 = !DILocation(line: 1761, column: 22, scope: !4852)
!4990 = !DILocation(line: 1761, column: 10, scope: !4852)
!4991 = !DILocation(line: 1761, column: 3, scope: !4852)
!4992 = !DILocation(line: 1763, column: 1, scope: !4852)
!4993 = distinct !DISubprogram(name: "binn_object_next", scope: !384, file: !384, line: 1775, type: !4994, scopeLine: 1775, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!4994 = !DISubroutineType(types: !4995)
!4995 = !{!393, !4693, !103, !386}
!4996 = !DILocalVariable(name: "iter", arg: 1, scope: !4993, file: !384, line: 1775, type: !4693)
!4997 = !DILocation(line: 1775, column: 43, scope: !4993)
!4998 = !DILocalVariable(name: "pkey", arg: 2, scope: !4993, file: !384, line: 1775, type: !103)
!4999 = !DILocation(line: 1775, column: 55, scope: !4993)
!5000 = !DILocalVariable(name: "value", arg: 3, scope: !4993, file: !384, line: 1775, type: !386)
!5001 = !DILocation(line: 1775, column: 67, scope: !4993)
!5002 = !DILocation(line: 1777, column: 43, scope: !4993)
!5003 = !DILocation(line: 1777, column: 55, scope: !4993)
!5004 = !DILocation(line: 1777, column: 61, scope: !4993)
!5005 = !DILocation(line: 1777, column: 10, scope: !4993)
!5006 = !DILocation(line: 1777, column: 3, scope: !4993)
!5007 = distinct !DISubprogram(name: "binn_list_next_value", scope: !384, file: !384, line: 1784, type: !5008, scopeLine: 1784, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5008 = !DISubroutineType(types: !5009)
!5009 = !{!386, !4693}
!5010 = !DILocalVariable(name: "iter", arg: 1, scope: !5007, file: !384, line: 1784, type: !4693)
!5011 = !DILocation(line: 1784, column: 49, scope: !5007)
!5012 = !DILocalVariable(name: "value", scope: !5007, file: !384, line: 1785, type: !386)
!5013 = !DILocation(line: 1785, column: 9, scope: !5007)
!5014 = !DILocation(line: 1787, column: 20, scope: !5007)
!5015 = !DILocation(line: 1787, column: 11, scope: !5007)
!5016 = !DILocation(line: 1787, column: 9, scope: !5007)
!5017 = !DILocation(line: 1789, column: 22, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !5007, file: !384, line: 1789, column: 7)
!5019 = !DILocation(line: 1789, column: 28, scope: !5018)
!5020 = !DILocation(line: 1789, column: 7, scope: !5018)
!5021 = !DILocation(line: 1789, column: 35, scope: !5018)
!5022 = !DILocation(line: 1789, column: 7, scope: !5007)
!5023 = !DILocation(line: 1790, column: 5, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !5018, file: !384, line: 1789, column: 45)
!5025 = !DILocation(line: 1790, column: 13, scope: !5024)
!5026 = !DILocation(line: 1791, column: 5, scope: !5024)
!5027 = !DILocation(line: 1794, column: 3, scope: !5007)
!5028 = !DILocation(line: 1794, column: 10, scope: !5007)
!5029 = !DILocation(line: 1794, column: 20, scope: !5007)
!5030 = !DILocation(line: 1795, column: 10, scope: !5007)
!5031 = !DILocation(line: 1795, column: 3, scope: !5007)
!5032 = !DILocation(line: 1797, column: 1, scope: !5007)
!5033 = distinct !DISubprogram(name: "binn_map_next_value", scope: !384, file: !384, line: 1801, type: !5034, scopeLine: 1801, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5034 = !DISubroutineType(types: !5035)
!5035 = !{!386, !4693, !440}
!5036 = !DILocalVariable(name: "iter", arg: 1, scope: !5033, file: !384, line: 1801, type: !4693)
!5037 = !DILocation(line: 1801, column: 48, scope: !5033)
!5038 = !DILocalVariable(name: "pid", arg: 2, scope: !5033, file: !384, line: 1801, type: !440)
!5039 = !DILocation(line: 1801, column: 59, scope: !5033)
!5040 = !DILocalVariable(name: "value", scope: !5033, file: !384, line: 1802, type: !386)
!5041 = !DILocation(line: 1802, column: 9, scope: !5033)
!5042 = !DILocation(line: 1804, column: 20, scope: !5033)
!5043 = !DILocation(line: 1804, column: 11, scope: !5033)
!5044 = !DILocation(line: 1804, column: 9, scope: !5033)
!5045 = !DILocation(line: 1806, column: 21, scope: !5046)
!5046 = distinct !DILexicalBlock(scope: !5033, file: !384, line: 1806, column: 7)
!5047 = !DILocation(line: 1806, column: 27, scope: !5046)
!5048 = !DILocation(line: 1806, column: 32, scope: !5046)
!5049 = !DILocation(line: 1806, column: 7, scope: !5046)
!5050 = !DILocation(line: 1806, column: 39, scope: !5046)
!5051 = !DILocation(line: 1806, column: 7, scope: !5033)
!5052 = !DILocation(line: 1807, column: 5, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5046, file: !384, line: 1806, column: 49)
!5054 = !DILocation(line: 1807, column: 13, scope: !5053)
!5055 = !DILocation(line: 1808, column: 5, scope: !5053)
!5056 = !DILocation(line: 1811, column: 3, scope: !5033)
!5057 = !DILocation(line: 1811, column: 10, scope: !5033)
!5058 = !DILocation(line: 1811, column: 20, scope: !5033)
!5059 = !DILocation(line: 1812, column: 10, scope: !5033)
!5060 = !DILocation(line: 1812, column: 3, scope: !5033)
!5061 = !DILocation(line: 1814, column: 1, scope: !5033)
!5062 = distinct !DISubprogram(name: "binn_object_next_value", scope: !384, file: !384, line: 1818, type: !5063, scopeLine: 1818, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5063 = !DISubroutineType(types: !5064)
!5064 = !{!386, !4693, !103}
!5065 = !DILocalVariable(name: "iter", arg: 1, scope: !5062, file: !384, line: 1818, type: !4693)
!5066 = !DILocation(line: 1818, column: 51, scope: !5062)
!5067 = !DILocalVariable(name: "pkey", arg: 2, scope: !5062, file: !384, line: 1818, type: !103)
!5068 = !DILocation(line: 1818, column: 63, scope: !5062)
!5069 = !DILocalVariable(name: "value", scope: !5062, file: !384, line: 1819, type: !386)
!5070 = !DILocation(line: 1819, column: 9, scope: !5062)
!5071 = !DILocation(line: 1821, column: 20, scope: !5062)
!5072 = !DILocation(line: 1821, column: 11, scope: !5062)
!5073 = !DILocation(line: 1821, column: 9, scope: !5062)
!5074 = !DILocation(line: 1823, column: 24, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !5062, file: !384, line: 1823, column: 7)
!5076 = !DILocation(line: 1823, column: 30, scope: !5075)
!5077 = !DILocation(line: 1823, column: 36, scope: !5075)
!5078 = !DILocation(line: 1823, column: 7, scope: !5075)
!5079 = !DILocation(line: 1823, column: 43, scope: !5075)
!5080 = !DILocation(line: 1823, column: 7, scope: !5062)
!5081 = !DILocation(line: 1824, column: 5, scope: !5082)
!5082 = distinct !DILexicalBlock(scope: !5075, file: !384, line: 1823, column: 53)
!5083 = !DILocation(line: 1824, column: 13, scope: !5082)
!5084 = !DILocation(line: 1825, column: 5, scope: !5082)
!5085 = !DILocation(line: 1828, column: 3, scope: !5062)
!5086 = !DILocation(line: 1828, column: 10, scope: !5062)
!5087 = !DILocation(line: 1828, column: 20, scope: !5062)
!5088 = !DILocation(line: 1829, column: 10, scope: !5062)
!5089 = !DILocation(line: 1829, column: 3, scope: !5062)
!5090 = !DILocation(line: 1831, column: 1, scope: !5062)
!5091 = distinct !DISubprogram(name: "binn_list_read_next", scope: !384, file: !384, line: 1836, type: !5092, scopeLine: 1836, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5092 = !DISubroutineType(types: !5093)
!5093 = !{!82, !4693, !440, !440}
!5094 = !DILocalVariable(name: "iter", arg: 1, scope: !5091, file: !384, line: 1836, type: !4693)
!5095 = !DILocation(line: 1836, column: 48, scope: !5091)
!5096 = !DILocalVariable(name: "ptype", arg: 2, scope: !5091, file: !384, line: 1836, type: !440)
!5097 = !DILocation(line: 1836, column: 59, scope: !5091)
!5098 = !DILocalVariable(name: "psize", arg: 3, scope: !5091, file: !384, line: 1836, type: !440)
!5099 = !DILocation(line: 1836, column: 71, scope: !5091)
!5100 = !DILocalVariable(name: "value", scope: !5091, file: !384, line: 1837, type: !387)
!5101 = !DILocation(line: 1837, column: 8, scope: !5091)
!5102 = !DILocation(line: 1839, column: 22, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5091, file: !384, line: 1839, column: 7)
!5104 = !DILocation(line: 1839, column: 7, scope: !5103)
!5105 = !DILocation(line: 1839, column: 36, scope: !5103)
!5106 = !DILocation(line: 1839, column: 7, scope: !5091)
!5107 = !DILocation(line: 1839, column: 46, scope: !5103)
!5108 = !DILocation(line: 1840, column: 7, scope: !5109)
!5109 = distinct !DILexicalBlock(scope: !5091, file: !384, line: 1840, column: 7)
!5110 = !DILocation(line: 1840, column: 7, scope: !5091)
!5111 = !DILocation(line: 1840, column: 29, scope: !5109)
!5112 = !DILocation(line: 1840, column: 15, scope: !5109)
!5113 = !DILocation(line: 1840, column: 21, scope: !5109)
!5114 = !DILocation(line: 1840, column: 14, scope: !5109)
!5115 = !DILocation(line: 1841, column: 7, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5091, file: !384, line: 1841, column: 7)
!5117 = !DILocation(line: 1841, column: 7, scope: !5091)
!5118 = !DILocation(line: 1841, column: 29, scope: !5116)
!5119 = !DILocation(line: 1841, column: 15, scope: !5116)
!5120 = !DILocation(line: 1841, column: 21, scope: !5116)
!5121 = !DILocation(line: 1841, column: 14, scope: !5116)
!5122 = !DILocation(line: 1843, column: 10, scope: !5091)
!5123 = !DILocation(line: 1843, column: 3, scope: !5091)
!5124 = !DILocation(line: 1848, column: 1, scope: !5091)
!5125 = distinct !DISubprogram(name: "binn_map_read_next", scope: !384, file: !384, line: 1852, type: !5126, scopeLine: 1852, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5126 = !DISubroutineType(types: !5127)
!5127 = !{!82, !4693, !440, !440, !440}
!5128 = !DILocalVariable(name: "iter", arg: 1, scope: !5125, file: !384, line: 1852, type: !4693)
!5129 = !DILocation(line: 1852, column: 47, scope: !5125)
!5130 = !DILocalVariable(name: "pid", arg: 2, scope: !5125, file: !384, line: 1852, type: !440)
!5131 = !DILocation(line: 1852, column: 58, scope: !5125)
!5132 = !DILocalVariable(name: "ptype", arg: 3, scope: !5125, file: !384, line: 1852, type: !440)
!5133 = !DILocation(line: 1852, column: 68, scope: !5125)
!5134 = !DILocalVariable(name: "psize", arg: 4, scope: !5125, file: !384, line: 1852, type: !440)
!5135 = !DILocation(line: 1852, column: 80, scope: !5125)
!5136 = !DILocalVariable(name: "value", scope: !5125, file: !384, line: 1853, type: !387)
!5137 = !DILocation(line: 1853, column: 8, scope: !5125)
!5138 = !DILocation(line: 1855, column: 21, scope: !5139)
!5139 = distinct !DILexicalBlock(scope: !5125, file: !384, line: 1855, column: 7)
!5140 = !DILocation(line: 1855, column: 27, scope: !5139)
!5141 = !DILocation(line: 1855, column: 7, scope: !5139)
!5142 = !DILocation(line: 1855, column: 40, scope: !5139)
!5143 = !DILocation(line: 1855, column: 7, scope: !5125)
!5144 = !DILocation(line: 1855, column: 50, scope: !5139)
!5145 = !DILocation(line: 1856, column: 7, scope: !5146)
!5146 = distinct !DILexicalBlock(scope: !5125, file: !384, line: 1856, column: 7)
!5147 = !DILocation(line: 1856, column: 7, scope: !5125)
!5148 = !DILocation(line: 1856, column: 29, scope: !5146)
!5149 = !DILocation(line: 1856, column: 15, scope: !5146)
!5150 = !DILocation(line: 1856, column: 21, scope: !5146)
!5151 = !DILocation(line: 1856, column: 14, scope: !5146)
!5152 = !DILocation(line: 1857, column: 7, scope: !5153)
!5153 = distinct !DILexicalBlock(scope: !5125, file: !384, line: 1857, column: 7)
!5154 = !DILocation(line: 1857, column: 7, scope: !5125)
!5155 = !DILocation(line: 1857, column: 29, scope: !5153)
!5156 = !DILocation(line: 1857, column: 15, scope: !5153)
!5157 = !DILocation(line: 1857, column: 21, scope: !5153)
!5158 = !DILocation(line: 1857, column: 14, scope: !5153)
!5159 = !DILocation(line: 1859, column: 10, scope: !5125)
!5160 = !DILocation(line: 1859, column: 3, scope: !5125)
!5161 = !DILocation(line: 1864, column: 1, scope: !5125)
!5162 = distinct !DISubprogram(name: "binn_object_read_next", scope: !384, file: !384, line: 1868, type: !5163, scopeLine: 1868, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5163 = !DISubroutineType(types: !5164)
!5164 = !{!82, !4693, !103, !440, !440}
!5165 = !DILocalVariable(name: "iter", arg: 1, scope: !5162, file: !384, line: 1868, type: !4693)
!5166 = !DILocation(line: 1868, column: 50, scope: !5162)
!5167 = !DILocalVariable(name: "pkey", arg: 2, scope: !5162, file: !384, line: 1868, type: !103)
!5168 = !DILocation(line: 1868, column: 62, scope: !5162)
!5169 = !DILocalVariable(name: "ptype", arg: 3, scope: !5162, file: !384, line: 1868, type: !440)
!5170 = !DILocation(line: 1868, column: 73, scope: !5162)
!5171 = !DILocalVariable(name: "psize", arg: 4, scope: !5162, file: !384, line: 1868, type: !440)
!5172 = !DILocation(line: 1868, column: 85, scope: !5162)
!5173 = !DILocalVariable(name: "value", scope: !5162, file: !384, line: 1869, type: !387)
!5174 = !DILocation(line: 1869, column: 8, scope: !5162)
!5175 = !DILocation(line: 1871, column: 24, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5162, file: !384, line: 1871, column: 7)
!5177 = !DILocation(line: 1871, column: 30, scope: !5176)
!5178 = !DILocation(line: 1871, column: 7, scope: !5176)
!5179 = !DILocation(line: 1871, column: 44, scope: !5176)
!5180 = !DILocation(line: 1871, column: 7, scope: !5162)
!5181 = !DILocation(line: 1871, column: 54, scope: !5176)
!5182 = !DILocation(line: 1872, column: 7, scope: !5183)
!5183 = distinct !DILexicalBlock(scope: !5162, file: !384, line: 1872, column: 7)
!5184 = !DILocation(line: 1872, column: 7, scope: !5162)
!5185 = !DILocation(line: 1872, column: 29, scope: !5183)
!5186 = !DILocation(line: 1872, column: 15, scope: !5183)
!5187 = !DILocation(line: 1872, column: 21, scope: !5183)
!5188 = !DILocation(line: 1872, column: 14, scope: !5183)
!5189 = !DILocation(line: 1873, column: 7, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5162, file: !384, line: 1873, column: 7)
!5191 = !DILocation(line: 1873, column: 7, scope: !5162)
!5192 = !DILocation(line: 1873, column: 29, scope: !5190)
!5193 = !DILocation(line: 1873, column: 15, scope: !5190)
!5194 = !DILocation(line: 1873, column: 21, scope: !5190)
!5195 = !DILocation(line: 1873, column: 14, scope: !5190)
!5196 = !DILocation(line: 1875, column: 10, scope: !5162)
!5197 = !DILocation(line: 1875, column: 3, scope: !5162)
!5198 = !DILocation(line: 1880, column: 1, scope: !5162)
!5199 = distinct !DISubprogram(name: "binn_get_write_storage", scope: !384, file: !384, line: 1887, type: !4635, scopeLine: 1887, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5200 = !DILocalVariable(name: "type", arg: 1, scope: !5199, file: !384, line: 1887, type: !101)
!5201 = !DILocation(line: 1887, column: 41, scope: !5199)
!5202 = !DILocalVariable(name: "storage_type", scope: !5199, file: !384, line: 1888, type: !101)
!5203 = !DILocation(line: 1888, column: 7, scope: !5199)
!5204 = !DILocation(line: 1890, column: 11, scope: !5199)
!5205 = !DILocation(line: 1890, column: 3, scope: !5199)
!5206 = !DILocation(line: 1893, column: 7, scope: !5207)
!5207 = distinct !DILexicalBlock(scope: !5199, file: !384, line: 1890, column: 17)
!5208 = !DILocation(line: 1896, column: 7, scope: !5207)
!5209 = !DILocation(line: 1899, column: 26, scope: !5207)
!5210 = !DILocation(line: 1899, column: 7, scope: !5207)
!5211 = !DILocation(line: 1900, column: 14, scope: !5207)
!5212 = !DILocation(line: 1900, column: 7, scope: !5207)
!5213 = !DILocation(line: 1903, column: 1, scope: !5199)
!5214 = distinct !DISubprogram(name: "binn_list_add", scope: !384, file: !384, line: 2285, type: !5215, scopeLine: 2285, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5215 = !DISubroutineType(types: !5216)
!5216 = !{!393, !386, !101, !82, !101}
!5217 = !DILocalVariable(name: "list", arg: 1, scope: !5214, file: !384, line: 2285, type: !386)
!5218 = !DILocation(line: 2285, column: 35, scope: !5214)
!5219 = !DILocalVariable(name: "type", arg: 2, scope: !5214, file: !384, line: 2285, type: !101)
!5220 = !DILocation(line: 2285, column: 45, scope: !5214)
!5221 = !DILocalVariable(name: "pvalue", arg: 3, scope: !5214, file: !384, line: 2285, type: !82)
!5222 = !DILocation(line: 2285, column: 57, scope: !5214)
!5223 = !DILocalVariable(name: "size", arg: 4, scope: !5214, file: !384, line: 2285, type: !101)
!5224 = !DILocation(line: 2285, column: 69, scope: !5214)
!5225 = !DILocation(line: 2287, column: 7, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5214, file: !384, line: 2287, column: 7)
!5227 = !DILocation(line: 2287, column: 52, scope: !5226)
!5228 = !DILocation(line: 2287, column: 7, scope: !5214)
!5229 = !DILocation(line: 2287, column: 62, scope: !5226)
!5230 = !DILocation(line: 2289, column: 28, scope: !5214)
!5231 = !DILocation(line: 2289, column: 34, scope: !5214)
!5232 = !DILocation(line: 2289, column: 40, scope: !5214)
!5233 = !DILocation(line: 2289, column: 48, scope: !5214)
!5234 = !DILocation(line: 2289, column: 10, scope: !5214)
!5235 = !DILocation(line: 2289, column: 3, scope: !5214)
!5236 = !DILocation(line: 2291, column: 1, scope: !5214)
!5237 = distinct !DISubprogram(name: "GetWriteConvertedData", linkageName: "_ZL21GetWriteConvertedDataPiPPvS_", scope: !384, file: !384, line: 1930, type: !5238, scopeLine: 1930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5238 = !DISubroutineType(types: !5239)
!5239 = !{!393, !440, !5240, !440}
!5240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!5241 = !DILocalVariable(name: "ptype", arg: 1, scope: !5237, file: !384, line: 1930, type: !440)
!5242 = !DILocation(line: 1930, column: 46, scope: !5237)
!5243 = !DILocalVariable(name: "ppvalue", arg: 2, scope: !5237, file: !384, line: 1930, type: !5240)
!5244 = !DILocation(line: 1930, column: 60, scope: !5237)
!5245 = !DILocalVariable(name: "psize", arg: 3, scope: !5237, file: !384, line: 1930, type: !440)
!5246 = !DILocation(line: 1930, column: 74, scope: !5237)
!5247 = !DILocalVariable(name: "type", scope: !5237, file: !384, line: 1931, type: !101)
!5248 = !DILocation(line: 1931, column: 8, scope: !5237)
!5249 = !DILocalVariable(name: "f1", scope: !5237, file: !384, line: 1932, type: !433)
!5250 = !DILocation(line: 1932, column: 10, scope: !5237)
!5251 = !DILocalVariable(name: "d1", scope: !5237, file: !384, line: 1933, type: !435)
!5252 = !DILocation(line: 1933, column: 10, scope: !5237)
!5253 = !DILocalVariable(name: "pstr", scope: !5237, file: !384, line: 1934, type: !5254)
!5254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !90, size: 1024, elements: !5255)
!5255 = !{!5256}
!5256 = !DISubrange(count: 128)
!5257 = !DILocation(line: 1934, column: 8, scope: !5237)
!5258 = !DILocation(line: 1940, column: 11, scope: !5237)
!5259 = !DILocation(line: 1940, column: 10, scope: !5237)
!5260 = !DILocation(line: 1940, column: 8, scope: !5237)
!5261 = !DILocation(line: 1942, column: 8, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5237, file: !384, line: 1942, column: 7)
!5263 = !DILocation(line: 1942, column: 7, scope: !5262)
!5264 = !DILocation(line: 1942, column: 16, scope: !5262)
!5265 = !DILocation(line: 1942, column: 7, scope: !5237)
!5266 = !DILocation(line: 1943, column: 13, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5262, file: !384, line: 1942, column: 25)
!5268 = !DILocation(line: 1943, column: 5, scope: !5267)
!5269 = !DILocation(line: 1947, column: 9, scope: !5270)
!5270 = distinct !DILexicalBlock(scope: !5267, file: !384, line: 1943, column: 19)
!5271 = !DILocation(line: 1950, column: 14, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5270, file: !384, line: 1950, column: 13)
!5273 = !DILocation(line: 1950, column: 13, scope: !5272)
!5274 = !DILocation(line: 1950, column: 20, scope: !5272)
!5275 = !DILocation(line: 1950, column: 13, scope: !5270)
!5276 = !DILocation(line: 1950, column: 26, scope: !5272)
!5277 = !DILocation(line: 1950, column: 23, scope: !5272)
!5278 = !DILocation(line: 1952, column: 9, scope: !5270)
!5279 = !DILocation(line: 1954, column: 3, scope: !5267)
!5280 = !DILocation(line: 1956, column: 11, scope: !5237)
!5281 = !DILocation(line: 1956, column: 3, scope: !5237)
!5282 = !DILocation(line: 1980, column: 7, scope: !5283)
!5283 = distinct !DILexicalBlock(scope: !5237, file: !384, line: 1956, column: 17)
!5284 = !DILocation(line: 1986, column: 7, scope: !5283)
!5285 = !DILocation(line: 1990, column: 22, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5283, file: !384, line: 1990, column: 11)
!5287 = !DILocation(line: 1990, column: 12, scope: !5286)
!5288 = !DILocation(line: 1990, column: 11, scope: !5286)
!5289 = !DILocation(line: 1990, column: 31, scope: !5286)
!5290 = !DILocation(line: 1990, column: 11, scope: !5283)
!5291 = !DILocation(line: 1991, column: 14, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5286, file: !384, line: 1990, column: 41)
!5293 = !DILocation(line: 1992, column: 7, scope: !5292)
!5294 = !DILocation(line: 1993, column: 14, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5286, file: !384, line: 1992, column: 14)
!5296 = !DILocation(line: 1995, column: 16, scope: !5283)
!5297 = !DILocation(line: 1995, column: 8, scope: !5283)
!5298 = !DILocation(line: 1995, column: 14, scope: !5283)
!5299 = !DILocation(line: 1996, column: 7, scope: !5283)
!5300 = !DILocation(line: 2000, column: 3, scope: !5237)
!5301 = !DILocation(line: 2002, column: 1, scope: !5237)
!5302 = distinct !DISubprogram(name: "binn_list_add_raw", linkageName: "_ZL17binn_list_add_rawP11binn_structiPvi", scope: !384, file: !384, line: 590, type: !5215, scopeLine: 590, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5303 = !DILocalVariable(name: "item", arg: 1, scope: !5302, file: !384, line: 590, type: !386)
!5304 = !DILocation(line: 590, column: 43, scope: !5302)
!5305 = !DILocalVariable(name: "type", arg: 2, scope: !5302, file: !384, line: 590, type: !101)
!5306 = !DILocation(line: 590, column: 53, scope: !5302)
!5307 = !DILocalVariable(name: "pvalue", arg: 3, scope: !5302, file: !384, line: 590, type: !82)
!5308 = !DILocation(line: 590, column: 65, scope: !5302)
!5309 = !DILocalVariable(name: "size", arg: 4, scope: !5302, file: !384, line: 590, type: !101)
!5310 = !DILocation(line: 590, column: 77, scope: !5302)
!5311 = !DILocation(line: 592, column: 8, scope: !5312)
!5312 = distinct !DILexicalBlock(scope: !5302, file: !384, line: 592, column: 7)
!5313 = !DILocation(line: 592, column: 13, scope: !5312)
!5314 = !DILocation(line: 592, column: 22, scope: !5312)
!5315 = !DILocation(line: 592, column: 26, scope: !5312)
!5316 = !DILocation(line: 592, column: 32, scope: !5312)
!5317 = !DILocation(line: 592, column: 37, scope: !5312)
!5318 = !DILocation(line: 592, column: 51, scope: !5312)
!5319 = !DILocation(line: 592, column: 55, scope: !5312)
!5320 = !DILocation(line: 592, column: 61, scope: !5312)
!5321 = !DILocation(line: 592, column: 70, scope: !5312)
!5322 = !DILocation(line: 592, column: 7, scope: !5302)
!5323 = !DILocation(line: 592, column: 81, scope: !5312)
!5324 = !DILocation(line: 596, column: 16, scope: !5325)
!5325 = distinct !DILexicalBlock(scope: !5302, file: !384, line: 596, column: 7)
!5326 = !DILocation(line: 596, column: 22, scope: !5325)
!5327 = !DILocation(line: 596, column: 28, scope: !5325)
!5328 = !DILocation(line: 596, column: 36, scope: !5325)
!5329 = !DILocation(line: 596, column: 7, scope: !5325)
!5330 = !DILocation(line: 596, column: 42, scope: !5325)
!5331 = !DILocation(line: 596, column: 7, scope: !5302)
!5332 = !DILocation(line: 596, column: 52, scope: !5325)
!5333 = !DILocation(line: 598, column: 3, scope: !5302)
!5334 = !DILocation(line: 598, column: 9, scope: !5302)
!5335 = !DILocation(line: 598, column: 14, scope: !5302)
!5336 = !DILocation(line: 600, column: 3, scope: !5302)
!5337 = !DILocation(line: 602, column: 1, scope: !5302)
!5338 = distinct !DISubprogram(name: "AddValue", linkageName: "_ZL8AddValueP11binn_structiPvi", scope: !384, file: !384, line: 767, type: !5215, scopeLine: 767, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5339 = !DILocalVariable(name: "item", arg: 1, scope: !5338, file: !384, line: 767, type: !386)
!5340 = !DILocation(line: 767, column: 34, scope: !5338)
!5341 = !DILocalVariable(name: "type", arg: 2, scope: !5338, file: !384, line: 767, type: !101)
!5342 = !DILocation(line: 767, column: 44, scope: !5338)
!5343 = !DILocalVariable(name: "pvalue", arg: 3, scope: !5338, file: !384, line: 767, type: !82)
!5344 = !DILocation(line: 767, column: 56, scope: !5338)
!5345 = !DILocalVariable(name: "size", arg: 4, scope: !5338, file: !384, line: 767, type: !101)
!5346 = !DILocation(line: 767, column: 68, scope: !5338)
!5347 = !DILocalVariable(name: "int32", scope: !5338, file: !384, line: 768, type: !101)
!5348 = !DILocation(line: 768, column: 9, scope: !5338)
!5349 = !DILocalVariable(name: "ArgSize", scope: !5338, file: !384, line: 768, type: !101)
!5350 = !DILocation(line: 768, column: 16, scope: !5338)
!5351 = !DILocalVariable(name: "storage_type", scope: !5338, file: !384, line: 768, type: !101)
!5352 = !DILocation(line: 768, column: 25, scope: !5338)
!5353 = !DILocalVariable(name: "extra_type", scope: !5338, file: !384, line: 768, type: !101)
!5354 = !DILocation(line: 768, column: 39, scope: !5338)
!5355 = !DILocalVariable(name: "int16", scope: !5338, file: !384, line: 769, type: !415)
!5356 = !DILocation(line: 769, column: 9, scope: !5338)
!5357 = !DILocalVariable(name: "int64", scope: !5338, file: !384, line: 770, type: !424)
!5358 = !DILocation(line: 770, column: 10, scope: !5338)
!5359 = !DILocalVariable(name: "p", scope: !5338, file: !384, line: 771, type: !439)
!5360 = !DILocation(line: 771, column: 18, scope: !5338)
!5361 = !DILocalVariable(name: "ptr", scope: !5338, file: !384, line: 771, type: !439)
!5362 = !DILocation(line: 771, column: 22, scope: !5338)
!5363 = !DILocation(line: 773, column: 22, scope: !5338)
!5364 = !DILocation(line: 773, column: 3, scope: !5338)
!5365 = !DILocation(line: 775, column: 7, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5338, file: !384, line: 775, column: 7)
!5367 = !DILocation(line: 775, column: 14, scope: !5366)
!5368 = !DILocation(line: 775, column: 7, scope: !5338)
!5369 = !DILocation(line: 776, column: 13, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5366, file: !384, line: 775, column: 23)
!5371 = !DILocation(line: 776, column: 5, scope: !5370)
!5372 = !DILocation(line: 778, column: 9, scope: !5373)
!5373 = distinct !DILexicalBlock(scope: !5370, file: !384, line: 776, column: 27)
!5374 = !DILocation(line: 781, column: 13, scope: !5375)
!5375 = distinct !DILexicalBlock(scope: !5373, file: !384, line: 781, column: 13)
!5376 = !DILocation(line: 781, column: 18, scope: !5375)
!5377 = !DILocation(line: 781, column: 13, scope: !5373)
!5378 = !DILocation(line: 781, column: 24, scope: !5375)
!5379 = !DILocation(line: 781, column: 21, scope: !5375)
!5380 = !DILocation(line: 783, column: 9, scope: !5373)
!5381 = !DILocation(line: 785, column: 3, scope: !5370)
!5382 = !DILocation(line: 787, column: 20, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5338, file: !384, line: 787, column: 7)
!5384 = !DILocation(line: 787, column: 8, scope: !5383)
!5385 = !DILocation(line: 787, column: 26, scope: !5383)
!5386 = !DILocation(line: 787, column: 46, scope: !5383)
!5387 = !DILocation(line: 787, column: 50, scope: !5383)
!5388 = !DILocation(line: 787, column: 56, scope: !5383)
!5389 = !DILocation(line: 787, column: 80, scope: !5383)
!5390 = !DILocation(line: 787, column: 7, scope: !5338)
!5391 = !DILocation(line: 788, column: 49, scope: !5383)
!5392 = !DILocation(line: 788, column: 14, scope: !5383)
!5393 = !DILocation(line: 788, column: 12, scope: !5383)
!5394 = !DILocation(line: 788, column: 5, scope: !5383)
!5395 = !DILocation(line: 790, column: 11, scope: !5338)
!5396 = !DILocation(line: 790, column: 3, scope: !5338)
!5397 = !DILocation(line: 792, column: 12, scope: !5398)
!5398 = distinct !DILexicalBlock(scope: !5338, file: !384, line: 790, column: 25)
!5399 = !DILocation(line: 793, column: 17, scope: !5398)
!5400 = !DILocation(line: 793, column: 15, scope: !5398)
!5401 = !DILocation(line: 794, column: 7, scope: !5398)
!5402 = !DILocation(line: 796, column: 12, scope: !5398)
!5403 = !DILocation(line: 797, column: 17, scope: !5398)
!5404 = !DILocation(line: 797, column: 15, scope: !5398)
!5405 = !DILocation(line: 798, column: 7, scope: !5398)
!5406 = !DILocation(line: 800, column: 12, scope: !5398)
!5407 = !DILocation(line: 801, column: 17, scope: !5398)
!5408 = !DILocation(line: 801, column: 15, scope: !5398)
!5409 = !DILocation(line: 802, column: 7, scope: !5398)
!5410 = !DILocation(line: 804, column: 12, scope: !5398)
!5411 = !DILocation(line: 805, column: 17, scope: !5398)
!5412 = !DILocation(line: 805, column: 15, scope: !5398)
!5413 = !DILocation(line: 806, column: 7, scope: !5398)
!5414 = !DILocation(line: 808, column: 12, scope: !5398)
!5415 = !DILocation(line: 809, column: 17, scope: !5398)
!5416 = !DILocation(line: 809, column: 15, scope: !5398)
!5417 = !DILocation(line: 810, column: 7, scope: !5398)
!5418 = !DILocation(line: 812, column: 11, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5398, file: !384, line: 812, column: 11)
!5420 = !DILocation(line: 812, column: 16, scope: !5419)
!5421 = !DILocation(line: 812, column: 11, scope: !5398)
!5422 = !DILocation(line: 812, column: 21, scope: !5419)
!5423 = !DILocation(line: 814, column: 17, scope: !5398)
!5424 = !DILocation(line: 814, column: 22, scope: !5398)
!5425 = !DILocation(line: 814, column: 15, scope: !5398)
!5426 = !DILocation(line: 815, column: 7, scope: !5398)
!5427 = !DILocation(line: 817, column: 11, scope: !5428)
!5428 = distinct !DILexicalBlock(scope: !5398, file: !384, line: 817, column: 11)
!5429 = !DILocation(line: 817, column: 16, scope: !5428)
!5430 = !DILocation(line: 817, column: 11, scope: !5398)
!5431 = !DILocation(line: 817, column: 21, scope: !5428)
!5432 = !DILocation(line: 818, column: 11, scope: !5433)
!5433 = distinct !DILexicalBlock(scope: !5398, file: !384, line: 818, column: 11)
!5434 = !DILocation(line: 818, column: 16, scope: !5433)
!5435 = !DILocation(line: 818, column: 11, scope: !5398)
!5436 = !DILocation(line: 818, column: 47, scope: !5433)
!5437 = !DILocation(line: 818, column: 29, scope: !5433)
!5438 = !DILocation(line: 818, column: 27, scope: !5433)
!5439 = !DILocation(line: 818, column: 22, scope: !5433)
!5440 = !DILocation(line: 819, column: 17, scope: !5398)
!5441 = !DILocation(line: 819, column: 22, scope: !5398)
!5442 = !DILocation(line: 819, column: 15, scope: !5398)
!5443 = !DILocation(line: 820, column: 7, scope: !5398)
!5444 = !DILocation(line: 822, column: 11, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5398, file: !384, line: 822, column: 11)
!5446 = !DILocation(line: 822, column: 16, scope: !5445)
!5447 = !DILocation(line: 822, column: 11, scope: !5398)
!5448 = !DILocation(line: 822, column: 22, scope: !5445)
!5449 = !DILocation(line: 823, column: 17, scope: !5398)
!5450 = !DILocation(line: 823, column: 15, scope: !5398)
!5451 = !DILocation(line: 824, column: 7, scope: !5398)
!5452 = !DILocation(line: 826, column: 7, scope: !5398)
!5453 = !DILocation(line: 829, column: 11, scope: !5338)
!5454 = !DILocation(line: 830, column: 23, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5338, file: !384, line: 830, column: 7)
!5456 = !DILocation(line: 830, column: 29, scope: !5455)
!5457 = !DILocation(line: 830, column: 7, scope: !5455)
!5458 = !DILocation(line: 830, column: 38, scope: !5455)
!5459 = !DILocation(line: 830, column: 7, scope: !5338)
!5460 = !DILocation(line: 830, column: 48, scope: !5455)
!5461 = !DILocation(line: 833, column: 26, scope: !5338)
!5462 = !DILocation(line: 833, column: 32, scope: !5338)
!5463 = !DILocation(line: 833, column: 40, scope: !5338)
!5464 = !DILocation(line: 833, column: 46, scope: !5338)
!5465 = !DILocation(line: 833, column: 38, scope: !5338)
!5466 = !DILocation(line: 833, column: 5, scope: !5338)
!5467 = !DILocation(line: 836, column: 7, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5338, file: !384, line: 836, column: 7)
!5469 = !DILocation(line: 836, column: 20, scope: !5468)
!5470 = !DILocation(line: 836, column: 7, scope: !5338)
!5471 = !DILocation(line: 837, column: 11, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5468, file: !384, line: 836, column: 47)
!5473 = !DILocation(line: 837, column: 9, scope: !5472)
!5474 = !DILocation(line: 838, column: 9, scope: !5475)
!5475 = distinct !DILexicalBlock(scope: !5472, file: !384, line: 838, column: 9)
!5476 = !DILocation(line: 838, column: 14, scope: !5475)
!5477 = !DILocation(line: 838, column: 9, scope: !5472)
!5478 = !DILocation(line: 839, column: 21, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5475, file: !384, line: 838, column: 21)
!5480 = !DILocation(line: 839, column: 14, scope: !5479)
!5481 = !DILocation(line: 839, column: 12, scope: !5479)
!5482 = !DILocation(line: 840, column: 13, scope: !5479)
!5483 = !DILocation(line: 840, column: 12, scope: !5479)
!5484 = !DILocation(line: 840, column: 8, scope: !5479)
!5485 = !DILocation(line: 840, column: 10, scope: !5479)
!5486 = !DILocation(line: 840, column: 19, scope: !5479)
!5487 = !DILocation(line: 841, column: 7, scope: !5479)
!5488 = !DILocation(line: 841, column: 13, scope: !5479)
!5489 = !DILocation(line: 841, column: 22, scope: !5479)
!5490 = !DILocation(line: 842, column: 10, scope: !5479)
!5491 = !DILocation(line: 843, column: 5, scope: !5479)
!5492 = !DILocation(line: 844, column: 11, scope: !5472)
!5493 = !DILocation(line: 844, column: 10, scope: !5472)
!5494 = !DILocation(line: 844, column: 6, scope: !5472)
!5495 = !DILocation(line: 844, column: 8, scope: !5472)
!5496 = !DILocation(line: 844, column: 17, scope: !5472)
!5497 = !DILocation(line: 845, column: 5, scope: !5472)
!5498 = !DILocation(line: 845, column: 11, scope: !5472)
!5499 = !DILocation(line: 845, column: 20, scope: !5472)
!5500 = !DILocation(line: 846, column: 3, scope: !5472)
!5501 = !DILocation(line: 848, column: 11, scope: !5338)
!5502 = !DILocation(line: 848, column: 3, scope: !5338)
!5503 = !DILocation(line: 851, column: 7, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5338, file: !384, line: 848, column: 25)
!5505 = !DILocation(line: 854, column: 34, scope: !5504)
!5506 = !DILocation(line: 854, column: 23, scope: !5504)
!5507 = !DILocation(line: 854, column: 18, scope: !5504)
!5508 = !DILocation(line: 854, column: 21, scope: !5504)
!5509 = !DILocation(line: 855, column: 7, scope: !5504)
!5510 = !DILocation(line: 855, column: 13, scope: !5504)
!5511 = !DILocation(line: 855, column: 23, scope: !5504)
!5512 = !DILocation(line: 856, column: 7, scope: !5504)
!5513 = !DILocation(line: 859, column: 27, scope: !5504)
!5514 = !DILocation(line: 859, column: 17, scope: !5504)
!5515 = !DILocation(line: 859, column: 15, scope: !5504)
!5516 = !DILocation(line: 859, column: 13, scope: !5504)
!5517 = !DILocation(line: 860, column: 22, scope: !5504)
!5518 = !DILocation(line: 860, column: 15, scope: !5504)
!5519 = !DILocation(line: 860, column: 13, scope: !5504)
!5520 = !DILocation(line: 861, column: 24, scope: !5504)
!5521 = !DILocation(line: 861, column: 19, scope: !5504)
!5522 = !DILocation(line: 861, column: 7, scope: !5504)
!5523 = !DILocation(line: 861, column: 22, scope: !5504)
!5524 = !DILocation(line: 862, column: 7, scope: !5504)
!5525 = !DILocation(line: 862, column: 13, scope: !5504)
!5526 = !DILocation(line: 862, column: 23, scope: !5504)
!5527 = !DILocation(line: 863, column: 7, scope: !5504)
!5528 = !DILocation(line: 866, column: 25, scope: !5504)
!5529 = !DILocation(line: 866, column: 17, scope: !5504)
!5530 = !DILocation(line: 866, column: 15, scope: !5504)
!5531 = !DILocation(line: 866, column: 13, scope: !5504)
!5532 = !DILocation(line: 867, column: 22, scope: !5504)
!5533 = !DILocation(line: 867, column: 15, scope: !5504)
!5534 = !DILocation(line: 867, column: 13, scope: !5504)
!5535 = !DILocation(line: 868, column: 22, scope: !5504)
!5536 = !DILocation(line: 868, column: 17, scope: !5504)
!5537 = !DILocation(line: 868, column: 7, scope: !5504)
!5538 = !DILocation(line: 868, column: 20, scope: !5504)
!5539 = !DILocation(line: 869, column: 7, scope: !5504)
!5540 = !DILocation(line: 869, column: 13, scope: !5504)
!5541 = !DILocation(line: 869, column: 23, scope: !5504)
!5542 = !DILocation(line: 870, column: 7, scope: !5504)
!5543 = !DILocation(line: 873, column: 28, scope: !5504)
!5544 = !DILocation(line: 873, column: 17, scope: !5504)
!5545 = !DILocation(line: 873, column: 15, scope: !5504)
!5546 = !DILocation(line: 873, column: 13, scope: !5504)
!5547 = !DILocation(line: 874, column: 22, scope: !5504)
!5548 = !DILocation(line: 874, column: 15, scope: !5504)
!5549 = !DILocation(line: 874, column: 13, scope: !5504)
!5550 = !DILocation(line: 875, column: 25, scope: !5504)
!5551 = !DILocation(line: 875, column: 20, scope: !5504)
!5552 = !DILocation(line: 875, column: 7, scope: !5504)
!5553 = !DILocation(line: 875, column: 23, scope: !5504)
!5554 = !DILocation(line: 876, column: 7, scope: !5504)
!5555 = !DILocation(line: 876, column: 13, scope: !5504)
!5556 = !DILocation(line: 876, column: 23, scope: !5504)
!5557 = !DILocation(line: 877, column: 7, scope: !5504)
!5558 = !DILocation(line: 879, column: 22, scope: !5504)
!5559 = !DILocation(line: 879, column: 15, scope: !5504)
!5560 = !DILocation(line: 879, column: 13, scope: !5504)
!5561 = !DILocation(line: 880, column: 22, scope: !5504)
!5562 = !DILocation(line: 880, column: 17, scope: !5504)
!5563 = !DILocation(line: 880, column: 7, scope: !5504)
!5564 = !DILocation(line: 880, column: 20, scope: !5504)
!5565 = !DILocation(line: 881, column: 9, scope: !5504)
!5566 = !DILocation(line: 882, column: 14, scope: !5504)
!5567 = !DILocation(line: 882, column: 17, scope: !5504)
!5568 = !DILocation(line: 882, column: 25, scope: !5504)
!5569 = !DILocation(line: 882, column: 7, scope: !5504)
!5570 = !DILocation(line: 883, column: 30, scope: !5504)
!5571 = !DILocation(line: 883, column: 28, scope: !5504)
!5572 = !DILocation(line: 883, column: 7, scope: !5504)
!5573 = !DILocation(line: 883, column: 13, scope: !5504)
!5574 = !DILocation(line: 883, column: 23, scope: !5504)
!5575 = !DILocation(line: 884, column: 7, scope: !5504)
!5576 = !DILocation(line: 886, column: 11, scope: !5577)
!5577 = distinct !DILexicalBlock(scope: !5504, file: !384, line: 886, column: 11)
!5578 = !DILocation(line: 886, column: 16, scope: !5577)
!5579 = !DILocation(line: 886, column: 11, scope: !5504)
!5580 = !DILocation(line: 887, column: 17, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5577, file: !384, line: 886, column: 23)
!5582 = !DILocation(line: 887, column: 22, scope: !5581)
!5583 = !DILocation(line: 887, column: 15, scope: !5581)
!5584 = !DILocation(line: 888, column: 24, scope: !5581)
!5585 = !DILocation(line: 888, column: 17, scope: !5581)
!5586 = !DILocation(line: 888, column: 15, scope: !5581)
!5587 = !DILocation(line: 889, column: 24, scope: !5581)
!5588 = !DILocation(line: 889, column: 19, scope: !5581)
!5589 = !DILocation(line: 889, column: 9, scope: !5581)
!5590 = !DILocation(line: 889, column: 22, scope: !5581)
!5591 = !DILocation(line: 890, column: 11, scope: !5581)
!5592 = !DILocation(line: 891, column: 9, scope: !5581)
!5593 = !DILocation(line: 891, column: 15, scope: !5581)
!5594 = !DILocation(line: 891, column: 25, scope: !5581)
!5595 = !DILocation(line: 892, column: 7, scope: !5581)
!5596 = !DILocation(line: 893, column: 34, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5577, file: !384, line: 892, column: 14)
!5598 = !DILocation(line: 893, column: 29, scope: !5597)
!5599 = !DILocation(line: 893, column: 32, scope: !5597)
!5600 = !DILocation(line: 894, column: 10, scope: !5597)
!5601 = !DILocation(line: 895, column: 9, scope: !5597)
!5602 = !DILocation(line: 895, column: 15, scope: !5597)
!5603 = !DILocation(line: 895, column: 24, scope: !5597)
!5604 = !DILocation(line: 897, column: 14, scope: !5504)
!5605 = !DILocation(line: 897, column: 17, scope: !5504)
!5606 = !DILocation(line: 897, column: 25, scope: !5504)
!5607 = !DILocation(line: 897, column: 7, scope: !5504)
!5608 = !DILocation(line: 898, column: 12, scope: !5504)
!5609 = !DILocation(line: 898, column: 9, scope: !5504)
!5610 = !DILocation(line: 899, column: 18, scope: !5504)
!5611 = !DILocation(line: 899, column: 21, scope: !5504)
!5612 = !DILocation(line: 900, column: 11, scope: !5504)
!5613 = !DILocation(line: 901, column: 26, scope: !5504)
!5614 = !DILocation(line: 901, column: 7, scope: !5504)
!5615 = !DILocation(line: 901, column: 13, scope: !5504)
!5616 = !DILocation(line: 901, column: 23, scope: !5504)
!5617 = !DILocation(line: 902, column: 7, scope: !5504)
!5618 = !DILocation(line: 904, column: 14, scope: !5504)
!5619 = !DILocation(line: 904, column: 17, scope: !5504)
!5620 = !DILocation(line: 904, column: 25, scope: !5504)
!5621 = !DILocation(line: 904, column: 7, scope: !5504)
!5622 = !DILocation(line: 905, column: 26, scope: !5504)
!5623 = !DILocation(line: 905, column: 7, scope: !5504)
!5624 = !DILocation(line: 905, column: 13, scope: !5504)
!5625 = !DILocation(line: 905, column: 23, scope: !5504)
!5626 = !DILocation(line: 906, column: 7, scope: !5504)
!5627 = !DILocation(line: 909, column: 3, scope: !5338)
!5628 = !DILocation(line: 909, column: 9, scope: !5338)
!5629 = !DILocation(line: 909, column: 15, scope: !5338)
!5630 = !DILocation(line: 911, column: 3, scope: !5338)
!5631 = !DILocation(line: 912, column: 1, scope: !5338)
!5632 = distinct !DISubprogram(name: "type_family", linkageName: "_ZL11type_familyi", scope: !384, file: !384, line: 2006, type: !4635, scopeLine: 2006, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5633 = !DILocalVariable(name: "type", arg: 1, scope: !5632, file: !384, line: 2006, type: !101)
!5634 = !DILocation(line: 2006, column: 34, scope: !5632)
!5635 = !DILocation(line: 2008, column: 11, scope: !5632)
!5636 = !DILocation(line: 2008, column: 3, scope: !5632)
!5637 = !DILocation(line: 2012, column: 7, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5632, file: !384, line: 2008, column: 17)
!5639 = !DILocation(line: 2022, column: 7, scope: !5638)
!5640 = !DILocation(line: 2030, column: 7, scope: !5638)
!5641 = !DILocation(line: 2038, column: 7, scope: !5638)
!5642 = !DILocation(line: 2045, column: 7, scope: !5638)
!5643 = !DILocation(line: 2052, column: 7, scope: !5638)
!5644 = !DILocation(line: 2055, column: 7, scope: !5638)
!5645 = !DILocation(line: 2058, column: 7, scope: !5638)
!5646 = !DILocation(line: 2062, column: 7, scope: !5638)
!5647 = !DILocation(line: 2065, column: 1, scope: !5632)
!5648 = distinct !DISubprogram(name: "compress_int", linkageName: "_ZL12compress_intPiS_Pv", scope: !384, file: !384, line: 677, type: !5649, scopeLine: 677, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5649 = !DISubroutineType(types: !5650)
!5650 = !{!82, !440, !440, !82}
!5651 = !DILocalVariable(name: "pstorage_type", arg: 1, scope: !5648, file: !384, line: 677, type: !440)
!5652 = !DILocation(line: 677, column: 39, scope: !5648)
!5653 = !DILocalVariable(name: "ptype", arg: 2, scope: !5648, file: !384, line: 677, type: !440)
!5654 = !DILocation(line: 677, column: 59, scope: !5648)
!5655 = !DILocalVariable(name: "psource", arg: 3, scope: !5648, file: !384, line: 677, type: !82)
!5656 = !DILocation(line: 677, column: 72, scope: !5648)
!5657 = !DILocalVariable(name: "storage_type", scope: !5648, file: !384, line: 678, type: !101)
!5658 = !DILocation(line: 678, column: 7, scope: !5648)
!5659 = !DILocalVariable(name: "storage_type2", scope: !5648, file: !384, line: 678, type: !101)
!5660 = !DILocation(line: 678, column: 21, scope: !5648)
!5661 = !DILocalVariable(name: "type", scope: !5648, file: !384, line: 678, type: !101)
!5662 = !DILocation(line: 678, column: 36, scope: !5648)
!5663 = !DILocalVariable(name: "type2", scope: !5648, file: !384, line: 678, type: !101)
!5664 = !DILocation(line: 678, column: 42, scope: !5648)
!5665 = !DILocalVariable(name: "vint", scope: !5648, file: !384, line: 679, type: !418)
!5666 = !DILocation(line: 679, column: 10, scope: !5648)
!5667 = !DILocalVariable(name: "vuint", scope: !5648, file: !384, line: 680, type: !424)
!5668 = !DILocation(line: 680, column: 10, scope: !5648)
!5669 = !DILocalVariable(name: "pvalue", scope: !5648, file: !384, line: 681, type: !103)
!5670 = !DILocation(line: 681, column: 9, scope: !5648)
!5671 = !DILocation(line: 686, column: 19, scope: !5648)
!5672 = !DILocation(line: 686, column: 18, scope: !5648)
!5673 = !DILocation(line: 686, column: 16, scope: !5648)
!5674 = !DILocation(line: 687, column: 7, scope: !5675)
!5675 = distinct !DILexicalBlock(scope: !5648, file: !384, line: 687, column: 7)
!5676 = !DILocation(line: 687, column: 20, scope: !5675)
!5677 = !DILocation(line: 687, column: 7, scope: !5648)
!5678 = !DILocation(line: 687, column: 49, scope: !5675)
!5679 = !DILocation(line: 687, column: 42, scope: !5675)
!5680 = !DILocation(line: 689, column: 11, scope: !5648)
!5681 = !DILocation(line: 689, column: 10, scope: !5648)
!5682 = !DILocation(line: 689, column: 8, scope: !5648)
!5683 = !DILocation(line: 691, column: 11, scope: !5648)
!5684 = !DILocation(line: 691, column: 3, scope: !5648)
!5685 = !DILocation(line: 693, column: 21, scope: !5686)
!5686 = distinct !DILexicalBlock(scope: !5648, file: !384, line: 691, column: 17)
!5687 = !DILocation(line: 693, column: 13, scope: !5686)
!5688 = !DILocation(line: 693, column: 12, scope: !5686)
!5689 = !DILocation(line: 693, column: 10, scope: !5686)
!5690 = !DILocation(line: 694, column: 5, scope: !5686)
!5691 = !DILocation(line: 696, column: 19, scope: !5686)
!5692 = !DILocation(line: 696, column: 13, scope: !5686)
!5693 = !DILocation(line: 696, column: 12, scope: !5686)
!5694 = !DILocation(line: 696, column: 10, scope: !5686)
!5695 = !DILocation(line: 697, column: 5, scope: !5686)
!5696 = !DILocation(line: 699, column: 21, scope: !5686)
!5697 = !DILocation(line: 699, column: 13, scope: !5686)
!5698 = !DILocation(line: 699, column: 12, scope: !5686)
!5699 = !DILocation(line: 699, column: 10, scope: !5686)
!5700 = !DILocation(line: 700, column: 5, scope: !5686)
!5701 = !DILocation(line: 702, column: 23, scope: !5686)
!5702 = !DILocation(line: 702, column: 14, scope: !5686)
!5703 = !DILocation(line: 702, column: 13, scope: !5686)
!5704 = !DILocation(line: 702, column: 11, scope: !5686)
!5705 = !DILocation(line: 703, column: 5, scope: !5686)
!5706 = !DILocation(line: 705, column: 29, scope: !5686)
!5707 = !DILocation(line: 705, column: 14, scope: !5686)
!5708 = !DILocation(line: 705, column: 13, scope: !5686)
!5709 = !DILocation(line: 705, column: 11, scope: !5686)
!5710 = !DILocation(line: 706, column: 5, scope: !5686)
!5711 = !DILocation(line: 708, column: 31, scope: !5686)
!5712 = !DILocation(line: 708, column: 14, scope: !5686)
!5713 = !DILocation(line: 708, column: 13, scope: !5686)
!5714 = !DILocation(line: 708, column: 11, scope: !5686)
!5715 = !DILocation(line: 709, column: 5, scope: !5686)
!5716 = !DILocation(line: 710, column: 3, scope: !5686)
!5717 = !DILabel(scope: !5648, name: "loc_signed", file: !384, line: 712)
!5718 = !DILocation(line: 712, column: 1, scope: !5648)
!5719 = !DILocation(line: 714, column: 7, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5648, file: !384, line: 714, column: 7)
!5721 = !DILocation(line: 714, column: 12, scope: !5720)
!5722 = !DILocation(line: 714, column: 7, scope: !5648)
!5723 = !DILocation(line: 715, column: 13, scope: !5724)
!5724 = distinct !DILexicalBlock(scope: !5720, file: !384, line: 714, column: 18)
!5725 = !DILocation(line: 715, column: 11, scope: !5724)
!5726 = !DILocation(line: 716, column: 5, scope: !5724)
!5727 = !DILocation(line: 721, column: 7, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5648, file: !384, line: 721, column: 7)
!5729 = !DILocation(line: 721, column: 12, scope: !5728)
!5730 = !DILocation(line: 721, column: 7, scope: !5648)
!5731 = !DILocation(line: 722, column: 11, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5728, file: !384, line: 721, column: 25)
!5733 = !DILocation(line: 723, column: 3, scope: !5732)
!5734 = !DILocation(line: 724, column: 7, scope: !5735)
!5735 = distinct !DILexicalBlock(scope: !5728, file: !384, line: 724, column: 7)
!5736 = !DILocation(line: 724, column: 12, scope: !5735)
!5737 = !DILocation(line: 724, column: 7, scope: !5728)
!5738 = !DILocation(line: 725, column: 11, scope: !5739)
!5739 = distinct !DILexicalBlock(scope: !5735, file: !384, line: 724, column: 26)
!5740 = !DILocation(line: 726, column: 3, scope: !5739)
!5741 = !DILocation(line: 727, column: 7, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5735, file: !384, line: 727, column: 7)
!5743 = !DILocation(line: 727, column: 12, scope: !5742)
!5744 = !DILocation(line: 727, column: 7, scope: !5735)
!5745 = !DILocation(line: 728, column: 11, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5742, file: !384, line: 727, column: 26)
!5747 = !DILocation(line: 729, column: 3, scope: !5746)
!5748 = !DILocation(line: 730, column: 3, scope: !5648)
!5749 = !DILabel(scope: !5648, name: "loc_positive", file: !384, line: 732)
!5750 = !DILocation(line: 732, column: 1, scope: !5648)
!5751 = !DILocation(line: 734, column: 7, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5648, file: !384, line: 734, column: 7)
!5753 = !DILocation(line: 734, column: 13, scope: !5752)
!5754 = !DILocation(line: 734, column: 7, scope: !5648)
!5755 = !DILocation(line: 735, column: 11, scope: !5756)
!5756 = distinct !DILexicalBlock(scope: !5752, file: !384, line: 734, column: 27)
!5757 = !DILocation(line: 736, column: 3, scope: !5756)
!5758 = !DILocation(line: 737, column: 7, scope: !5759)
!5759 = distinct !DILexicalBlock(scope: !5752, file: !384, line: 737, column: 7)
!5760 = !DILocation(line: 737, column: 13, scope: !5759)
!5761 = !DILocation(line: 737, column: 7, scope: !5752)
!5762 = !DILocation(line: 738, column: 11, scope: !5763)
!5763 = distinct !DILexicalBlock(scope: !5759, file: !384, line: 737, column: 28)
!5764 = !DILocation(line: 739, column: 3, scope: !5763)
!5765 = !DILocation(line: 740, column: 7, scope: !5766)
!5766 = distinct !DILexicalBlock(scope: !5759, file: !384, line: 740, column: 7)
!5767 = !DILocation(line: 740, column: 13, scope: !5766)
!5768 = !DILocation(line: 740, column: 7, scope: !5759)
!5769 = !DILocation(line: 741, column: 11, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5766, file: !384, line: 740, column: 28)
!5771 = !DILocation(line: 742, column: 3, scope: !5770)
!5772 = !DILocation(line: 734, column: 16, scope: !5752)
!5773 = !DILabel(scope: !5648, name: "loc_exit", file: !384, line: 744)
!5774 = !DILocation(line: 744, column: 1, scope: !5648)
!5775 = !DILocation(line: 746, column: 21, scope: !5648)
!5776 = !DILocation(line: 746, column: 10, scope: !5648)
!5777 = !DILocation(line: 748, column: 8, scope: !5778)
!5778 = distinct !DILexicalBlock(scope: !5648, file: !384, line: 748, column: 7)
!5779 = !DILocation(line: 748, column: 7, scope: !5778)
!5780 = !DILocation(line: 748, column: 15, scope: !5778)
!5781 = !DILocation(line: 748, column: 19, scope: !5778)
!5782 = !DILocation(line: 748, column: 28, scope: !5778)
!5783 = !DILocation(line: 748, column: 25, scope: !5778)
!5784 = !DILocation(line: 748, column: 7, scope: !5648)
!5785 = !DILocation(line: 749, column: 14, scope: !5786)
!5786 = distinct !DILexicalBlock(scope: !5778, file: !384, line: 748, column: 35)
!5787 = !DILocation(line: 749, column: 6, scope: !5786)
!5788 = !DILocation(line: 749, column: 12, scope: !5786)
!5789 = !DILocation(line: 750, column: 44, scope: !5786)
!5790 = !DILocation(line: 750, column: 21, scope: !5786)
!5791 = !DILocation(line: 750, column: 19, scope: !5786)
!5792 = !DILocation(line: 751, column: 22, scope: !5786)
!5793 = !DILocation(line: 751, column: 6, scope: !5786)
!5794 = !DILocation(line: 751, column: 20, scope: !5786)
!5795 = !DILocation(line: 757, column: 3, scope: !5786)
!5796 = !DILocation(line: 759, column: 10, scope: !5648)
!5797 = !DILocation(line: 759, column: 3, scope: !5648)
!5798 = !DILocation(line: 761, column: 1, scope: !5648)
!5799 = distinct !DISubprogram(name: "strlen2", linkageName: "_ZL7strlen2Pc", scope: !384, file: !384, line: 160, type: !5800, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5800 = !DISubroutineType(types: !5801)
!5801 = !{!457, !103}
!5802 = !DILocalVariable(name: "str", arg: 1, scope: !5799, file: !384, line: 160, type: !103)
!5803 = !DILocation(line: 160, column: 35, scope: !5799)
!5804 = !DILocation(line: 162, column: 7, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5799, file: !384, line: 162, column: 7)
!5806 = !DILocation(line: 162, column: 11, scope: !5805)
!5807 = !DILocation(line: 162, column: 7, scope: !5799)
!5808 = !DILocation(line: 162, column: 20, scope: !5805)
!5809 = !DILocation(line: 163, column: 17, scope: !5799)
!5810 = !DILocation(line: 163, column: 10, scope: !5799)
!5811 = !DILocation(line: 163, column: 3, scope: !5799)
!5812 = !DILocation(line: 165, column: 1, scope: !5799)
!5813 = distinct !DISubprogram(name: "CheckAllocation", linkageName: "_ZL15CheckAllocationP11binn_structi", scope: !384, file: !384, line: 407, type: !5814, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5814 = !DISubroutineType(types: !5815)
!5815 = !{!393, !386, !101}
!5816 = !DILocalVariable(name: "item", arg: 1, scope: !5813, file: !384, line: 407, type: !386)
!5817 = !DILocation(line: 407, column: 41, scope: !5813)
!5818 = !DILocalVariable(name: "add_size", arg: 2, scope: !5813, file: !384, line: 407, type: !101)
!5819 = !DILocation(line: 407, column: 51, scope: !5813)
!5820 = !DILocalVariable(name: "alloc_size", scope: !5813, file: !384, line: 408, type: !101)
!5821 = !DILocation(line: 408, column: 8, scope: !5813)
!5822 = !DILocalVariable(name: "ptr", scope: !5813, file: !384, line: 409, type: !82)
!5823 = !DILocation(line: 409, column: 9, scope: !5813)
!5824 = !DILocation(line: 411, column: 7, scope: !5825)
!5825 = distinct !DILexicalBlock(scope: !5813, file: !384, line: 411, column: 7)
!5826 = !DILocation(line: 411, column: 13, scope: !5825)
!5827 = !DILocation(line: 411, column: 25, scope: !5825)
!5828 = !DILocation(line: 411, column: 23, scope: !5825)
!5829 = !DILocation(line: 411, column: 36, scope: !5825)
!5830 = !DILocation(line: 411, column: 42, scope: !5825)
!5831 = !DILocation(line: 411, column: 34, scope: !5825)
!5832 = !DILocation(line: 411, column: 7, scope: !5813)
!5833 = !DILocation(line: 412, column: 9, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5835, file: !384, line: 412, column: 9)
!5835 = distinct !DILexicalBlock(scope: !5825, file: !384, line: 411, column: 54)
!5836 = !DILocation(line: 412, column: 15, scope: !5834)
!5837 = !DILocation(line: 412, column: 9, scope: !5835)
!5838 = !DILocation(line: 412, column: 30, scope: !5834)
!5839 = !DILocation(line: 413, column: 33, scope: !5835)
!5840 = !DILocation(line: 413, column: 39, scope: !5835)
!5841 = !DILocation(line: 413, column: 51, scope: !5835)
!5842 = !DILocation(line: 413, column: 49, scope: !5835)
!5843 = !DILocation(line: 413, column: 61, scope: !5835)
!5844 = !DILocation(line: 413, column: 67, scope: !5835)
!5845 = !DILocation(line: 413, column: 18, scope: !5835)
!5846 = !DILocation(line: 413, column: 16, scope: !5835)
!5847 = !DILocation(line: 414, column: 11, scope: !5835)
!5848 = !DILocation(line: 414, column: 22, scope: !5835)
!5849 = !DILocation(line: 414, column: 28, scope: !5835)
!5850 = !DILocation(line: 414, column: 34, scope: !5835)
!5851 = !DILocation(line: 414, column: 9, scope: !5835)
!5852 = !DILocation(line: 415, column: 9, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5835, file: !384, line: 415, column: 9)
!5854 = !DILocation(line: 415, column: 13, scope: !5853)
!5855 = !DILocation(line: 415, column: 9, scope: !5835)
!5856 = !DILocation(line: 415, column: 22, scope: !5853)
!5857 = !DILocation(line: 416, column: 18, scope: !5835)
!5858 = !DILocation(line: 416, column: 5, scope: !5835)
!5859 = !DILocation(line: 416, column: 11, scope: !5835)
!5860 = !DILocation(line: 416, column: 16, scope: !5835)
!5861 = !DILocation(line: 417, column: 24, scope: !5835)
!5862 = !DILocation(line: 417, column: 5, scope: !5835)
!5863 = !DILocation(line: 417, column: 11, scope: !5835)
!5864 = !DILocation(line: 417, column: 22, scope: !5835)
!5865 = !DILocation(line: 418, column: 3, scope: !5835)
!5866 = !DILocation(line: 420, column: 3, scope: !5813)
!5867 = !DILocation(line: 422, column: 1, scope: !5813)
!5868 = distinct !DISubprogram(name: "CalcAllocation", linkageName: "_ZL14CalcAllocationii", scope: !384, file: !384, line: 393, type: !2253, scopeLine: 393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5869 = !DILocalVariable(name: "needed_size", arg: 1, scope: !5868, file: !384, line: 393, type: !101)
!5870 = !DILocation(line: 393, column: 37, scope: !5868)
!5871 = !DILocalVariable(name: "alloc_size", arg: 2, scope: !5868, file: !384, line: 393, type: !101)
!5872 = !DILocation(line: 393, column: 54, scope: !5868)
!5873 = !DILocalVariable(name: "calc_size", scope: !5868, file: !384, line: 394, type: !101)
!5874 = !DILocation(line: 394, column: 7, scope: !5868)
!5875 = !DILocation(line: 396, column: 15, scope: !5868)
!5876 = !DILocation(line: 396, column: 13, scope: !5868)
!5877 = !DILocation(line: 397, column: 3, scope: !5868)
!5878 = !DILocation(line: 397, column: 10, scope: !5868)
!5879 = !DILocation(line: 397, column: 22, scope: !5868)
!5880 = !DILocation(line: 397, column: 20, scope: !5868)
!5881 = !DILocation(line: 398, column: 15, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5868, file: !384, line: 397, column: 35)
!5883 = distinct !{!5883, !5877, !5884}
!5884 = !DILocation(line: 400, column: 3, scope: !5868)
!5885 = !DILocation(line: 401, column: 10, scope: !5868)
!5886 = !DILocation(line: 401, column: 3, scope: !5868)
!5887 = distinct !DISubprogram(name: "binn_map_set", scope: !384, file: !384, line: 2295, type: !5888, scopeLine: 2295, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5888 = !DISubroutineType(types: !5889)
!5889 = !{!393, !386, !101, !101, !82, !101}
!5890 = !DILocalVariable(name: "map", arg: 1, scope: !5887, file: !384, line: 2295, type: !386)
!5891 = !DILocation(line: 2295, column: 34, scope: !5887)
!5892 = !DILocalVariable(name: "id", arg: 2, scope: !5887, file: !384, line: 2295, type: !101)
!5893 = !DILocation(line: 2295, column: 43, scope: !5887)
!5894 = !DILocalVariable(name: "type", arg: 3, scope: !5887, file: !384, line: 2295, type: !101)
!5895 = !DILocation(line: 2295, column: 51, scope: !5887)
!5896 = !DILocalVariable(name: "pvalue", arg: 4, scope: !5887, file: !384, line: 2295, type: !82)
!5897 = !DILocation(line: 2295, column: 63, scope: !5887)
!5898 = !DILocalVariable(name: "size", arg: 5, scope: !5887, file: !384, line: 2295, type: !101)
!5899 = !DILocation(line: 2295, column: 75, scope: !5887)
!5900 = !DILocation(line: 2297, column: 7, scope: !5901)
!5901 = distinct !DILexicalBlock(scope: !5887, file: !384, line: 2297, column: 7)
!5902 = !DILocation(line: 2297, column: 52, scope: !5901)
!5903 = !DILocation(line: 2297, column: 7, scope: !5887)
!5904 = !DILocation(line: 2297, column: 62, scope: !5901)
!5905 = !DILocation(line: 2299, column: 27, scope: !5887)
!5906 = !DILocation(line: 2299, column: 32, scope: !5887)
!5907 = !DILocation(line: 2299, column: 36, scope: !5887)
!5908 = !DILocation(line: 2299, column: 42, scope: !5887)
!5909 = !DILocation(line: 2299, column: 50, scope: !5887)
!5910 = !DILocation(line: 2299, column: 10, scope: !5887)
!5911 = !DILocation(line: 2299, column: 3, scope: !5887)
!5912 = !DILocation(line: 2301, column: 1, scope: !5887)
!5913 = distinct !DISubprogram(name: "binn_map_set_raw", linkageName: "_ZL16binn_map_set_rawP11binn_structiiPvi", scope: !384, file: !384, line: 645, type: !5888, scopeLine: 645, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5914 = !DILocalVariable(name: "item", arg: 1, scope: !5913, file: !384, line: 645, type: !386)
!5915 = !DILocation(line: 645, column: 42, scope: !5913)
!5916 = !DILocalVariable(name: "id", arg: 2, scope: !5913, file: !384, line: 645, type: !101)
!5917 = !DILocation(line: 645, column: 52, scope: !5913)
!5918 = !DILocalVariable(name: "type", arg: 3, scope: !5913, file: !384, line: 645, type: !101)
!5919 = !DILocation(line: 645, column: 60, scope: !5913)
!5920 = !DILocalVariable(name: "pvalue", arg: 4, scope: !5913, file: !384, line: 645, type: !82)
!5921 = !DILocation(line: 645, column: 72, scope: !5913)
!5922 = !DILocalVariable(name: "size", arg: 5, scope: !5913, file: !384, line: 645, type: !101)
!5923 = !DILocation(line: 645, column: 84, scope: !5913)
!5924 = !DILocalVariable(name: "p", scope: !5913, file: !384, line: 646, type: !439)
!5925 = !DILocation(line: 646, column: 18, scope: !5913)
!5926 = !DILocalVariable(name: "int32", scope: !5913, file: !384, line: 647, type: !101)
!5927 = !DILocation(line: 647, column: 7, scope: !5913)
!5928 = !DILocation(line: 649, column: 8, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5913, file: !384, line: 649, column: 7)
!5930 = !DILocation(line: 649, column: 13, scope: !5929)
!5931 = !DILocation(line: 649, column: 22, scope: !5929)
!5932 = !DILocation(line: 649, column: 26, scope: !5929)
!5933 = !DILocation(line: 649, column: 32, scope: !5929)
!5934 = !DILocation(line: 649, column: 37, scope: !5929)
!5935 = !DILocation(line: 649, column: 50, scope: !5929)
!5936 = !DILocation(line: 649, column: 54, scope: !5929)
!5937 = !DILocation(line: 649, column: 60, scope: !5929)
!5938 = !DILocation(line: 649, column: 69, scope: !5929)
!5939 = !DILocation(line: 649, column: 7, scope: !5913)
!5940 = !DILocation(line: 649, column: 80, scope: !5929)
!5941 = !DILocation(line: 652, column: 35, scope: !5913)
!5942 = !DILocation(line: 652, column: 41, scope: !5913)
!5943 = !DILocation(line: 652, column: 64, scope: !5913)
!5944 = !DILocation(line: 652, column: 70, scope: !5913)
!5945 = !DILocation(line: 652, column: 81, scope: !5913)
!5946 = !DILocation(line: 652, column: 87, scope: !5913)
!5947 = !DILocation(line: 652, column: 94, scope: !5913)
!5948 = !DILocation(line: 652, column: 7, scope: !5913)
!5949 = !DILocation(line: 652, column: 5, scope: !5913)
!5950 = !DILocation(line: 653, column: 7, scope: !5951)
!5951 = distinct !DILexicalBlock(scope: !5913, file: !384, line: 653, column: 7)
!5952 = !DILocation(line: 653, column: 7, scope: !5913)
!5953 = !DILocation(line: 653, column: 10, scope: !5951)
!5954 = !DILocation(line: 657, column: 23, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5913, file: !384, line: 657, column: 7)
!5956 = !DILocation(line: 657, column: 7, scope: !5955)
!5957 = !DILocation(line: 657, column: 32, scope: !5955)
!5958 = !DILocation(line: 657, column: 7, scope: !5913)
!5959 = !DILocation(line: 657, column: 42, scope: !5955)
!5960 = !DILocation(line: 659, column: 18, scope: !5913)
!5961 = !DILocation(line: 659, column: 11, scope: !5913)
!5962 = !DILocation(line: 659, column: 9, scope: !5913)
!5963 = !DILocation(line: 660, column: 26, scope: !5913)
!5964 = !DILocation(line: 660, column: 32, scope: !5913)
!5965 = !DILocation(line: 660, column: 40, scope: !5913)
!5966 = !DILocation(line: 660, column: 46, scope: !5913)
!5967 = !DILocation(line: 660, column: 38, scope: !5913)
!5968 = !DILocation(line: 660, column: 5, scope: !5913)
!5969 = !DILocation(line: 661, column: 17, scope: !5913)
!5970 = !DILocation(line: 661, column: 12, scope: !5913)
!5971 = !DILocation(line: 661, column: 3, scope: !5913)
!5972 = !DILocation(line: 661, column: 15, scope: !5913)
!5973 = !DILocation(line: 662, column: 3, scope: !5913)
!5974 = !DILocation(line: 662, column: 9, scope: !5913)
!5975 = !DILocation(line: 662, column: 19, scope: !5913)
!5976 = !DILocation(line: 664, column: 16, scope: !5977)
!5977 = distinct !DILexicalBlock(scope: !5913, file: !384, line: 664, column: 7)
!5978 = !DILocation(line: 664, column: 22, scope: !5977)
!5979 = !DILocation(line: 664, column: 28, scope: !5977)
!5980 = !DILocation(line: 664, column: 36, scope: !5977)
!5981 = !DILocation(line: 664, column: 7, scope: !5977)
!5982 = !DILocation(line: 664, column: 42, scope: !5977)
!5983 = !DILocation(line: 664, column: 7, scope: !5913)
!5984 = !DILocation(line: 665, column: 5, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5977, file: !384, line: 664, column: 52)
!5986 = !DILocation(line: 665, column: 11, scope: !5985)
!5987 = !DILocation(line: 665, column: 21, scope: !5985)
!5988 = !DILocation(line: 666, column: 5, scope: !5985)
!5989 = !DILocation(line: 669, column: 3, scope: !5913)
!5990 = !DILocation(line: 669, column: 9, scope: !5913)
!5991 = !DILocation(line: 669, column: 14, scope: !5913)
!5992 = !DILocation(line: 671, column: 3, scope: !5913)
!5993 = !DILocation(line: 673, column: 1, scope: !5913)
!5994 = distinct !DISubprogram(name: "binn_object_set", scope: !384, file: !384, line: 2305, type: !5995, scopeLine: 2305, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!5995 = !DISubroutineType(types: !5996)
!5996 = !{!393, !386, !103, !101, !82, !101}
!5997 = !DILocalVariable(name: "obj", arg: 1, scope: !5994, file: !384, line: 2305, type: !386)
!5998 = !DILocation(line: 2305, column: 37, scope: !5994)
!5999 = !DILocalVariable(name: "key", arg: 2, scope: !5994, file: !384, line: 2305, type: !103)
!6000 = !DILocation(line: 2305, column: 48, scope: !5994)
!6001 = !DILocalVariable(name: "type", arg: 3, scope: !5994, file: !384, line: 2305, type: !101)
!6002 = !DILocation(line: 2305, column: 57, scope: !5994)
!6003 = !DILocalVariable(name: "pvalue", arg: 4, scope: !5994, file: !384, line: 2305, type: !82)
!6004 = !DILocation(line: 2305, column: 69, scope: !5994)
!6005 = !DILocalVariable(name: "size", arg: 5, scope: !5994, file: !384, line: 2305, type: !101)
!6006 = !DILocation(line: 2305, column: 81, scope: !5994)
!6007 = !DILocation(line: 2307, column: 7, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !5994, file: !384, line: 2307, column: 7)
!6009 = !DILocation(line: 2307, column: 52, scope: !6008)
!6010 = !DILocation(line: 2307, column: 7, scope: !5994)
!6011 = !DILocation(line: 2307, column: 62, scope: !6008)
!6012 = !DILocation(line: 2309, column: 30, scope: !5994)
!6013 = !DILocation(line: 2309, column: 35, scope: !5994)
!6014 = !DILocation(line: 2309, column: 40, scope: !5994)
!6015 = !DILocation(line: 2309, column: 46, scope: !5994)
!6016 = !DILocation(line: 2309, column: 54, scope: !5994)
!6017 = !DILocation(line: 2309, column: 10, scope: !5994)
!6018 = !DILocation(line: 2309, column: 3, scope: !5994)
!6019 = !DILocation(line: 2311, column: 1, scope: !5994)
!6020 = distinct !DISubprogram(name: "binn_object_set_raw", linkageName: "_ZL19binn_object_set_rawP11binn_structPciPvi", scope: !384, file: !384, line: 606, type: !5995, scopeLine: 606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6021 = !DILocalVariable(name: "item", arg: 1, scope: !6020, file: !384, line: 606, type: !386)
!6022 = !DILocation(line: 606, column: 45, scope: !6020)
!6023 = !DILocalVariable(name: "key", arg: 2, scope: !6020, file: !384, line: 606, type: !103)
!6024 = !DILocation(line: 606, column: 57, scope: !6020)
!6025 = !DILocalVariable(name: "type", arg: 3, scope: !6020, file: !384, line: 606, type: !101)
!6026 = !DILocation(line: 606, column: 66, scope: !6020)
!6027 = !DILocalVariable(name: "pvalue", arg: 4, scope: !6020, file: !384, line: 606, type: !82)
!6028 = !DILocation(line: 606, column: 78, scope: !6020)
!6029 = !DILocalVariable(name: "size", arg: 5, scope: !6020, file: !384, line: 606, type: !101)
!6030 = !DILocation(line: 606, column: 90, scope: !6020)
!6031 = !DILocalVariable(name: "p", scope: !6020, file: !384, line: 607, type: !439)
!6032 = !DILocation(line: 607, column: 18, scope: !6020)
!6033 = !DILocalVariable(name: "len", scope: !6020, file: !384, line: 607, type: !153)
!6034 = !DILocation(line: 607, column: 21, scope: !6020)
!6035 = !DILocalVariable(name: "int32", scope: !6020, file: !384, line: 608, type: !101)
!6036 = !DILocation(line: 608, column: 7, scope: !6020)
!6037 = !DILocation(line: 610, column: 8, scope: !6038)
!6038 = distinct !DILexicalBlock(scope: !6020, file: !384, line: 610, column: 7)
!6039 = !DILocation(line: 610, column: 13, scope: !6038)
!6040 = !DILocation(line: 610, column: 22, scope: !6038)
!6041 = !DILocation(line: 610, column: 26, scope: !6038)
!6042 = !DILocation(line: 610, column: 32, scope: !6038)
!6043 = !DILocation(line: 610, column: 37, scope: !6038)
!6044 = !DILocation(line: 610, column: 53, scope: !6038)
!6045 = !DILocation(line: 610, column: 57, scope: !6038)
!6046 = !DILocation(line: 610, column: 63, scope: !6038)
!6047 = !DILocation(line: 610, column: 72, scope: !6038)
!6048 = !DILocation(line: 610, column: 7, scope: !6020)
!6049 = !DILocation(line: 610, column: 83, scope: !6038)
!6050 = !DILocation(line: 612, column: 7, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !6020, file: !384, line: 612, column: 7)
!6052 = !DILocation(line: 612, column: 11, scope: !6051)
!6053 = !DILocation(line: 612, column: 7, scope: !6020)
!6054 = !DILocation(line: 612, column: 20, scope: !6051)
!6055 = !DILocation(line: 613, column: 18, scope: !6020)
!6056 = !DILocation(line: 613, column: 11, scope: !6020)
!6057 = !DILocation(line: 613, column: 9, scope: !6020)
!6058 = !DILocation(line: 614, column: 7, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6020, file: !384, line: 614, column: 7)
!6060 = !DILocation(line: 614, column: 13, scope: !6059)
!6061 = !DILocation(line: 614, column: 7, scope: !6020)
!6062 = !DILocation(line: 614, column: 20, scope: !6059)
!6063 = !DILocation(line: 617, column: 36, scope: !6020)
!6064 = !DILocation(line: 617, column: 42, scope: !6020)
!6065 = !DILocation(line: 617, column: 65, scope: !6020)
!6066 = !DILocation(line: 617, column: 71, scope: !6020)
!6067 = !DILocation(line: 617, column: 82, scope: !6020)
!6068 = !DILocation(line: 617, column: 88, scope: !6020)
!6069 = !DILocation(line: 617, column: 95, scope: !6020)
!6070 = !DILocation(line: 617, column: 7, scope: !6020)
!6071 = !DILocation(line: 617, column: 5, scope: !6020)
!6072 = !DILocation(line: 618, column: 7, scope: !6073)
!6073 = distinct !DILexicalBlock(scope: !6020, file: !384, line: 618, column: 7)
!6074 = !DILocation(line: 618, column: 7, scope: !6020)
!6075 = !DILocation(line: 618, column: 10, scope: !6073)
!6076 = !DILocation(line: 622, column: 23, scope: !6077)
!6077 = distinct !DILexicalBlock(scope: !6020, file: !384, line: 622, column: 7)
!6078 = !DILocation(line: 622, column: 33, scope: !6077)
!6079 = !DILocation(line: 622, column: 31, scope: !6077)
!6080 = !DILocation(line: 622, column: 7, scope: !6077)
!6081 = !DILocation(line: 622, column: 40, scope: !6077)
!6082 = !DILocation(line: 622, column: 7, scope: !6020)
!6083 = !DILocation(line: 622, column: 50, scope: !6077)
!6084 = !DILocation(line: 624, column: 26, scope: !6020)
!6085 = !DILocation(line: 624, column: 32, scope: !6020)
!6086 = !DILocation(line: 624, column: 40, scope: !6020)
!6087 = !DILocation(line: 624, column: 46, scope: !6020)
!6088 = !DILocation(line: 624, column: 38, scope: !6020)
!6089 = !DILocation(line: 624, column: 5, scope: !6020)
!6090 = !DILocation(line: 625, column: 9, scope: !6020)
!6091 = !DILocation(line: 625, column: 7, scope: !6020)
!6092 = !DILocation(line: 626, column: 8, scope: !6020)
!6093 = !DILocation(line: 626, column: 4, scope: !6020)
!6094 = !DILocation(line: 626, column: 6, scope: !6020)
!6095 = !DILocation(line: 627, column: 4, scope: !6020)
!6096 = !DILocation(line: 628, column: 10, scope: !6020)
!6097 = !DILocation(line: 628, column: 13, scope: !6020)
!6098 = !DILocation(line: 628, column: 18, scope: !6020)
!6099 = !DILocation(line: 628, column: 3, scope: !6020)
!6100 = !DILocation(line: 629, column: 8, scope: !6020)
!6101 = !DILocation(line: 630, column: 22, scope: !6020)
!6102 = !DILocation(line: 630, column: 3, scope: !6020)
!6103 = !DILocation(line: 630, column: 9, scope: !6020)
!6104 = !DILocation(line: 630, column: 19, scope: !6020)
!6105 = !DILocation(line: 632, column: 16, scope: !6106)
!6106 = distinct !DILexicalBlock(scope: !6020, file: !384, line: 632, column: 7)
!6107 = !DILocation(line: 632, column: 22, scope: !6106)
!6108 = !DILocation(line: 632, column: 28, scope: !6106)
!6109 = !DILocation(line: 632, column: 36, scope: !6106)
!6110 = !DILocation(line: 632, column: 7, scope: !6106)
!6111 = !DILocation(line: 632, column: 42, scope: !6106)
!6112 = !DILocation(line: 632, column: 7, scope: !6020)
!6113 = !DILocation(line: 633, column: 24, scope: !6114)
!6114 = distinct !DILexicalBlock(scope: !6106, file: !384, line: 632, column: 52)
!6115 = !DILocation(line: 633, column: 5, scope: !6114)
!6116 = !DILocation(line: 633, column: 11, scope: !6114)
!6117 = !DILocation(line: 633, column: 21, scope: !6114)
!6118 = !DILocation(line: 634, column: 5, scope: !6114)
!6119 = !DILocation(line: 637, column: 3, scope: !6020)
!6120 = !DILocation(line: 637, column: 9, scope: !6020)
!6121 = !DILocation(line: 637, column: 14, scope: !6020)
!6122 = !DILocation(line: 639, column: 3, scope: !6020)
!6123 = !DILocation(line: 641, column: 1, scope: !6020)
!6124 = distinct !DISubprogram(name: "binn_add_value", linkageName: "_Z14binn_add_valueP11binn_structiiPciPvi", scope: !384, file: !384, line: 2316, type: !6125, scopeLine: 2316, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6125 = !DISubroutineType(types: !6126)
!6126 = !{!393, !386, !101, !101, !103, !101, !82, !101}
!6127 = !DILocalVariable(name: "item", arg: 1, scope: !6124, file: !384, line: 2316, type: !386)
!6128 = !DILocation(line: 2316, column: 36, scope: !6124)
!6129 = !DILocalVariable(name: "binn_type", arg: 2, scope: !6124, file: !384, line: 2316, type: !101)
!6130 = !DILocation(line: 2316, column: 46, scope: !6124)
!6131 = !DILocalVariable(name: "id", arg: 3, scope: !6124, file: !384, line: 2316, type: !101)
!6132 = !DILocation(line: 2316, column: 61, scope: !6124)
!6133 = !DILocalVariable(name: "name", arg: 4, scope: !6124, file: !384, line: 2316, type: !103)
!6134 = !DILocation(line: 2316, column: 71, scope: !6124)
!6135 = !DILocalVariable(name: "type", arg: 5, scope: !6124, file: !384, line: 2316, type: !101)
!6136 = !DILocation(line: 2316, column: 81, scope: !6124)
!6137 = !DILocalVariable(name: "pvalue", arg: 6, scope: !6124, file: !384, line: 2316, type: !82)
!6138 = !DILocation(line: 2316, column: 93, scope: !6124)
!6139 = !DILocalVariable(name: "size", arg: 7, scope: !6124, file: !384, line: 2316, type: !101)
!6140 = !DILocation(line: 2316, column: 105, scope: !6124)
!6141 = !DILocation(line: 2318, column: 11, scope: !6124)
!6142 = !DILocation(line: 2318, column: 3, scope: !6124)
!6143 = !DILocation(line: 2320, column: 28, scope: !6144)
!6144 = distinct !DILexicalBlock(scope: !6124, file: !384, line: 2318, column: 22)
!6145 = !DILocation(line: 2320, column: 34, scope: !6144)
!6146 = !DILocation(line: 2320, column: 40, scope: !6144)
!6147 = !DILocation(line: 2320, column: 48, scope: !6144)
!6148 = !DILocation(line: 2320, column: 14, scope: !6144)
!6149 = !DILocation(line: 2320, column: 7, scope: !6144)
!6150 = !DILocation(line: 2322, column: 27, scope: !6144)
!6151 = !DILocation(line: 2322, column: 33, scope: !6144)
!6152 = !DILocation(line: 2322, column: 37, scope: !6144)
!6153 = !DILocation(line: 2322, column: 43, scope: !6144)
!6154 = !DILocation(line: 2322, column: 51, scope: !6144)
!6155 = !DILocation(line: 2322, column: 14, scope: !6144)
!6156 = !DILocation(line: 2322, column: 7, scope: !6144)
!6157 = !DILocation(line: 2324, column: 30, scope: !6144)
!6158 = !DILocation(line: 2324, column: 36, scope: !6144)
!6159 = !DILocation(line: 2324, column: 42, scope: !6144)
!6160 = !DILocation(line: 2324, column: 48, scope: !6144)
!6161 = !DILocation(line: 2324, column: 56, scope: !6144)
!6162 = !DILocation(line: 2324, column: 14, scope: !6144)
!6163 = !DILocation(line: 2324, column: 7, scope: !6144)
!6164 = !DILocation(line: 2326, column: 7, scope: !6144)
!6165 = !DILocation(line: 2329, column: 1, scope: !6124)
!6166 = distinct !DISubprogram(name: "binn_list_add_new", scope: !384, file: !384, line: 2334, type: !6167, scopeLine: 2334, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6167 = !DISubroutineType(types: !6168)
!6168 = !{!393, !386, !386}
!6169 = !DILocalVariable(name: "list", arg: 1, scope: !6166, file: !384, line: 2334, type: !386)
!6170 = !DILocation(line: 2334, column: 39, scope: !6166)
!6171 = !DILocalVariable(name: "value", arg: 2, scope: !6166, file: !384, line: 2334, type: !386)
!6172 = !DILocation(line: 2334, column: 51, scope: !6166)
!6173 = !DILocalVariable(name: "retval", scope: !6166, file: !384, line: 2335, type: !393)
!6174 = !DILocation(line: 2335, column: 8, scope: !6166)
!6175 = !DILocation(line: 2337, column: 32, scope: !6166)
!6176 = !DILocation(line: 2337, column: 38, scope: !6166)
!6177 = !DILocalVariable(name: "list", arg: 1, scope: !6178, file: !388, line: 628, type: !386)
!6178 = distinct !DISubprogram(name: "binn_list_add_value", linkageName: "_ZL19binn_list_add_valueP11binn_structS0_", scope: !388, file: !388, line: 628, type: !6167, scopeLine: 628, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6179 = !DILocation(line: 628, column: 46, scope: !6178, inlinedAt: !6180)
!6180 = distinct !DILocation(line: 2337, column: 12, scope: !6166)
!6181 = !DILocalVariable(name: "value", arg: 2, scope: !6178, file: !388, line: 628, type: !386)
!6182 = !DILocation(line: 628, column: 58, scope: !6178, inlinedAt: !6180)
!6183 = !DILocation(line: 629, column: 24, scope: !6178, inlinedAt: !6180)
!6184 = !DILocation(line: 629, column: 30, scope: !6178, inlinedAt: !6180)
!6185 = !DILocation(line: 629, column: 37, scope: !6178, inlinedAt: !6180)
!6186 = !DILocation(line: 629, column: 52, scope: !6178, inlinedAt: !6180)
!6187 = !DILocation(line: 629, column: 43, scope: !6178, inlinedAt: !6180)
!6188 = !DILocation(line: 629, column: 70, scope: !6178, inlinedAt: !6180)
!6189 = !DILocation(line: 629, column: 60, scope: !6178, inlinedAt: !6180)
!6190 = !DILocation(line: 629, column: 10, scope: !6178, inlinedAt: !6180)
!6191 = !DILocation(line: 2337, column: 10, scope: !6166)
!6192 = !DILocation(line: 2338, column: 7, scope: !6193)
!6193 = distinct !DILexicalBlock(scope: !6166, file: !384, line: 2338, column: 7)
!6194 = !DILocation(line: 2338, column: 7, scope: !6166)
!6195 = !DILocation(line: 2338, column: 14, scope: !6193)
!6196 = !DILocation(line: 2338, column: 22, scope: !6193)
!6197 = !DILocation(line: 2339, column: 10, scope: !6166)
!6198 = !DILocation(line: 2339, column: 3, scope: !6166)
!6199 = distinct !DISubprogram(name: "binn_map_set_new", scope: !384, file: !384, line: 2345, type: !6200, scopeLine: 2345, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6200 = !DISubroutineType(types: !6201)
!6201 = !{!393, !386, !101, !386}
!6202 = !DILocalVariable(name: "map", arg: 1, scope: !6199, file: !384, line: 2345, type: !386)
!6203 = !DILocation(line: 2345, column: 38, scope: !6199)
!6204 = !DILocalVariable(name: "id", arg: 2, scope: !6199, file: !384, line: 2345, type: !101)
!6205 = !DILocation(line: 2345, column: 47, scope: !6199)
!6206 = !DILocalVariable(name: "value", arg: 3, scope: !6199, file: !384, line: 2345, type: !386)
!6207 = !DILocation(line: 2345, column: 57, scope: !6199)
!6208 = !DILocalVariable(name: "retval", scope: !6199, file: !384, line: 2346, type: !393)
!6209 = !DILocation(line: 2346, column: 8, scope: !6199)
!6210 = !DILocation(line: 2348, column: 31, scope: !6199)
!6211 = !DILocation(line: 2348, column: 36, scope: !6199)
!6212 = !DILocation(line: 2348, column: 40, scope: !6199)
!6213 = !DILocalVariable(name: "map", arg: 1, scope: !6214, file: !388, line: 685, type: !386)
!6214 = distinct !DISubprogram(name: "binn_map_set_value", linkageName: "_ZL18binn_map_set_valueP11binn_structiS0_", scope: !388, file: !388, line: 685, type: !6200, scopeLine: 685, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6215 = !DILocation(line: 685, column: 45, scope: !6214, inlinedAt: !6216)
!6216 = distinct !DILocation(line: 2348, column: 12, scope: !6199)
!6217 = !DILocalVariable(name: "id", arg: 2, scope: !6214, file: !388, line: 685, type: !101)
!6218 = !DILocation(line: 685, column: 54, scope: !6214, inlinedAt: !6216)
!6219 = !DILocalVariable(name: "value", arg: 3, scope: !6214, file: !388, line: 685, type: !386)
!6220 = !DILocation(line: 685, column: 64, scope: !6214, inlinedAt: !6216)
!6221 = !DILocation(line: 686, column: 23, scope: !6214, inlinedAt: !6216)
!6222 = !DILocation(line: 686, column: 28, scope: !6214, inlinedAt: !6216)
!6223 = !DILocation(line: 686, column: 32, scope: !6214, inlinedAt: !6216)
!6224 = !DILocation(line: 686, column: 39, scope: !6214, inlinedAt: !6216)
!6225 = !DILocation(line: 686, column: 54, scope: !6214, inlinedAt: !6216)
!6226 = !DILocation(line: 686, column: 45, scope: !6214, inlinedAt: !6216)
!6227 = !DILocation(line: 686, column: 72, scope: !6214, inlinedAt: !6216)
!6228 = !DILocation(line: 686, column: 62, scope: !6214, inlinedAt: !6216)
!6229 = !DILocation(line: 686, column: 10, scope: !6214, inlinedAt: !6216)
!6230 = !DILocation(line: 2348, column: 10, scope: !6199)
!6231 = !DILocation(line: 2349, column: 7, scope: !6232)
!6232 = distinct !DILexicalBlock(scope: !6199, file: !384, line: 2349, column: 7)
!6233 = !DILocation(line: 2349, column: 7, scope: !6199)
!6234 = !DILocation(line: 2349, column: 14, scope: !6232)
!6235 = !DILocation(line: 2349, column: 22, scope: !6232)
!6236 = !DILocation(line: 2350, column: 10, scope: !6199)
!6237 = !DILocation(line: 2350, column: 3, scope: !6199)
!6238 = distinct !DISubprogram(name: "binn_object_set_new", scope: !384, file: !384, line: 2356, type: !6239, scopeLine: 2356, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6239 = !DISubroutineType(types: !6240)
!6240 = !{!393, !386, !103, !386}
!6241 = !DILocalVariable(name: "obj", arg: 1, scope: !6238, file: !384, line: 2356, type: !386)
!6242 = !DILocation(line: 2356, column: 41, scope: !6238)
!6243 = !DILocalVariable(name: "key", arg: 2, scope: !6238, file: !384, line: 2356, type: !103)
!6244 = !DILocation(line: 2356, column: 52, scope: !6238)
!6245 = !DILocalVariable(name: "value", arg: 3, scope: !6238, file: !384, line: 2356, type: !386)
!6246 = !DILocation(line: 2356, column: 63, scope: !6238)
!6247 = !DILocalVariable(name: "retval", scope: !6238, file: !384, line: 2357, type: !393)
!6248 = !DILocation(line: 2357, column: 8, scope: !6238)
!6249 = !DILocation(line: 2359, column: 34, scope: !6238)
!6250 = !DILocation(line: 2359, column: 39, scope: !6238)
!6251 = !DILocation(line: 2359, column: 44, scope: !6238)
!6252 = !DILocalVariable(name: "obj", arg: 1, scope: !6253, file: !388, line: 742, type: !386)
!6253 = distinct !DISubprogram(name: "binn_object_set_value", linkageName: "_ZL21binn_object_set_valueP11binn_structPcS0_", scope: !388, file: !388, line: 742, type: !6239, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6254 = !DILocation(line: 742, column: 48, scope: !6253, inlinedAt: !6255)
!6255 = distinct !DILocation(line: 2359, column: 12, scope: !6238)
!6256 = !DILocalVariable(name: "key", arg: 2, scope: !6253, file: !388, line: 742, type: !103)
!6257 = !DILocation(line: 742, column: 59, scope: !6253, inlinedAt: !6255)
!6258 = !DILocalVariable(name: "value", arg: 3, scope: !6253, file: !388, line: 742, type: !386)
!6259 = !DILocation(line: 742, column: 70, scope: !6253, inlinedAt: !6255)
!6260 = !DILocation(line: 743, column: 26, scope: !6253, inlinedAt: !6255)
!6261 = !DILocation(line: 743, column: 31, scope: !6253, inlinedAt: !6255)
!6262 = !DILocation(line: 743, column: 36, scope: !6253, inlinedAt: !6255)
!6263 = !DILocation(line: 743, column: 43, scope: !6253, inlinedAt: !6255)
!6264 = !DILocation(line: 743, column: 58, scope: !6253, inlinedAt: !6255)
!6265 = !DILocation(line: 743, column: 49, scope: !6253, inlinedAt: !6255)
!6266 = !DILocation(line: 743, column: 76, scope: !6253, inlinedAt: !6255)
!6267 = !DILocation(line: 743, column: 66, scope: !6253, inlinedAt: !6255)
!6268 = !DILocation(line: 743, column: 10, scope: !6253, inlinedAt: !6255)
!6269 = !DILocation(line: 2359, column: 10, scope: !6238)
!6270 = !DILocation(line: 2360, column: 7, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6238, file: !384, line: 2360, column: 7)
!6272 = !DILocation(line: 2360, column: 7, scope: !6238)
!6273 = !DILocation(line: 2360, column: 14, scope: !6271)
!6274 = !DILocation(line: 2360, column: 22, scope: !6271)
!6275 = !DILocation(line: 2361, column: 10, scope: !6238)
!6276 = !DILocation(line: 2361, column: 3, scope: !6238)
!6277 = distinct !DISubprogram(name: "binn_list_value", scope: !384, file: !384, line: 2369, type: !6278, scopeLine: 2369, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6278 = !DISubroutineType(types: !6279)
!6279 = !{!386, !82, !101}
!6280 = !DILocalVariable(name: "ptr", arg: 1, scope: !6277, file: !384, line: 2369, type: !82)
!6281 = !DILocation(line: 2369, column: 39, scope: !6277)
!6282 = !DILocalVariable(name: "pos", arg: 2, scope: !6277, file: !384, line: 2369, type: !101)
!6283 = !DILocation(line: 2369, column: 48, scope: !6277)
!6284 = !DILocalVariable(name: "value", scope: !6277, file: !384, line: 2370, type: !386)
!6285 = !DILocation(line: 2370, column: 9, scope: !6277)
!6286 = !DILocation(line: 2372, column: 20, scope: !6277)
!6287 = !DILocation(line: 2372, column: 11, scope: !6277)
!6288 = !DILocation(line: 2372, column: 9, scope: !6277)
!6289 = !DILocation(line: 2374, column: 27, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6277, file: !384, line: 2374, column: 7)
!6291 = !DILocation(line: 2374, column: 32, scope: !6290)
!6292 = !DILocation(line: 2374, column: 37, scope: !6290)
!6293 = !DILocation(line: 2374, column: 7, scope: !6290)
!6294 = !DILocation(line: 2374, column: 44, scope: !6290)
!6295 = !DILocation(line: 2374, column: 7, scope: !6277)
!6296 = !DILocation(line: 2375, column: 5, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6290, file: !384, line: 2374, column: 54)
!6298 = !DILocation(line: 2375, column: 13, scope: !6297)
!6299 = !DILocation(line: 2376, column: 5, scope: !6297)
!6300 = !DILocation(line: 2379, column: 3, scope: !6277)
!6301 = !DILocation(line: 2379, column: 10, scope: !6277)
!6302 = !DILocation(line: 2379, column: 20, scope: !6277)
!6303 = !DILocation(line: 2380, column: 10, scope: !6277)
!6304 = !DILocation(line: 2380, column: 3, scope: !6277)
!6305 = !DILocation(line: 2382, column: 1, scope: !6277)
!6306 = distinct !DISubprogram(name: "binn_map_value", scope: !384, file: !384, line: 2386, type: !6278, scopeLine: 2386, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6307 = !DILocalVariable(name: "ptr", arg: 1, scope: !6306, file: !384, line: 2386, type: !82)
!6308 = !DILocation(line: 2386, column: 38, scope: !6306)
!6309 = !DILocalVariable(name: "id", arg: 2, scope: !6306, file: !384, line: 2386, type: !101)
!6310 = !DILocation(line: 2386, column: 47, scope: !6306)
!6311 = !DILocalVariable(name: "value", scope: !6306, file: !384, line: 2387, type: !386)
!6312 = !DILocation(line: 2387, column: 9, scope: !6306)
!6313 = !DILocation(line: 2389, column: 20, scope: !6306)
!6314 = !DILocation(line: 2389, column: 11, scope: !6306)
!6315 = !DILocation(line: 2389, column: 9, scope: !6306)
!6316 = !DILocation(line: 2391, column: 26, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !6306, file: !384, line: 2391, column: 7)
!6318 = !DILocation(line: 2391, column: 31, scope: !6317)
!6319 = !DILocation(line: 2391, column: 35, scope: !6317)
!6320 = !DILocation(line: 2391, column: 7, scope: !6317)
!6321 = !DILocation(line: 2391, column: 42, scope: !6317)
!6322 = !DILocation(line: 2391, column: 7, scope: !6306)
!6323 = !DILocation(line: 2392, column: 5, scope: !6324)
!6324 = distinct !DILexicalBlock(scope: !6317, file: !384, line: 2391, column: 52)
!6325 = !DILocation(line: 2392, column: 13, scope: !6324)
!6326 = !DILocation(line: 2393, column: 5, scope: !6324)
!6327 = !DILocation(line: 2396, column: 3, scope: !6306)
!6328 = !DILocation(line: 2396, column: 10, scope: !6306)
!6329 = !DILocation(line: 2396, column: 20, scope: !6306)
!6330 = !DILocation(line: 2397, column: 10, scope: !6306)
!6331 = !DILocation(line: 2397, column: 3, scope: !6306)
!6332 = !DILocation(line: 2399, column: 1, scope: !6306)
!6333 = distinct !DISubprogram(name: "binn_object_value", scope: !384, file: !384, line: 2403, type: !6334, scopeLine: 2403, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6334 = !DISubroutineType(types: !6335)
!6335 = !{!386, !82, !103}
!6336 = !DILocalVariable(name: "ptr", arg: 1, scope: !6333, file: !384, line: 2403, type: !82)
!6337 = !DILocation(line: 2403, column: 41, scope: !6333)
!6338 = !DILocalVariable(name: "key", arg: 2, scope: !6333, file: !384, line: 2403, type: !103)
!6339 = !DILocation(line: 2403, column: 52, scope: !6333)
!6340 = !DILocalVariable(name: "value", scope: !6333, file: !384, line: 2404, type: !386)
!6341 = !DILocation(line: 2404, column: 9, scope: !6333)
!6342 = !DILocation(line: 2406, column: 20, scope: !6333)
!6343 = !DILocation(line: 2406, column: 11, scope: !6333)
!6344 = !DILocation(line: 2406, column: 9, scope: !6333)
!6345 = !DILocation(line: 2408, column: 29, scope: !6346)
!6346 = distinct !DILexicalBlock(scope: !6333, file: !384, line: 2408, column: 7)
!6347 = !DILocation(line: 2408, column: 34, scope: !6346)
!6348 = !DILocation(line: 2408, column: 39, scope: !6346)
!6349 = !DILocation(line: 2408, column: 7, scope: !6346)
!6350 = !DILocation(line: 2408, column: 46, scope: !6346)
!6351 = !DILocation(line: 2408, column: 7, scope: !6333)
!6352 = !DILocation(line: 2409, column: 5, scope: !6353)
!6353 = distinct !DILexicalBlock(scope: !6346, file: !384, line: 2408, column: 56)
!6354 = !DILocation(line: 2409, column: 13, scope: !6353)
!6355 = !DILocation(line: 2410, column: 5, scope: !6353)
!6356 = !DILocation(line: 2413, column: 3, scope: !6333)
!6357 = !DILocation(line: 2413, column: 10, scope: !6333)
!6358 = !DILocation(line: 2413, column: 20, scope: !6333)
!6359 = !DILocation(line: 2414, column: 10, scope: !6333)
!6360 = !DILocation(line: 2414, column: 3, scope: !6333)
!6361 = !DILocation(line: 2416, column: 1, scope: !6333)
!6362 = distinct !DISubprogram(name: "binn_list_read", scope: !384, file: !384, line: 2421, type: !6363, scopeLine: 2421, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6363 = !DISubroutineType(types: !6364)
!6364 = !{!82, !82, !101, !440, !440}
!6365 = !DILocalVariable(name: "list", arg: 1, scope: !6362, file: !384, line: 2421, type: !82)
!6366 = !DILocation(line: 2421, column: 38, scope: !6362)
!6367 = !DILocalVariable(name: "pos", arg: 2, scope: !6362, file: !384, line: 2421, type: !101)
!6368 = !DILocation(line: 2421, column: 48, scope: !6362)
!6369 = !DILocalVariable(name: "ptype", arg: 3, scope: !6362, file: !384, line: 2421, type: !440)
!6370 = !DILocation(line: 2421, column: 58, scope: !6362)
!6371 = !DILocalVariable(name: "psize", arg: 4, scope: !6362, file: !384, line: 2421, type: !440)
!6372 = !DILocation(line: 2421, column: 70, scope: !6362)
!6373 = !DILocalVariable(name: "value", scope: !6362, file: !384, line: 2422, type: !387)
!6374 = !DILocation(line: 2422, column: 8, scope: !6362)
!6375 = !DILocation(line: 2424, column: 27, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6362, file: !384, line: 2424, column: 7)
!6377 = !DILocation(line: 2424, column: 33, scope: !6376)
!6378 = !DILocation(line: 2424, column: 7, scope: !6376)
!6379 = !DILocation(line: 2424, column: 46, scope: !6376)
!6380 = !DILocation(line: 2424, column: 7, scope: !6362)
!6381 = !DILocation(line: 2424, column: 56, scope: !6376)
!6382 = !DILocation(line: 2425, column: 7, scope: !6383)
!6383 = distinct !DILexicalBlock(scope: !6362, file: !384, line: 2425, column: 7)
!6384 = !DILocation(line: 2425, column: 7, scope: !6362)
!6385 = !DILocation(line: 2425, column: 29, scope: !6383)
!6386 = !DILocation(line: 2425, column: 15, scope: !6383)
!6387 = !DILocation(line: 2425, column: 21, scope: !6383)
!6388 = !DILocation(line: 2425, column: 14, scope: !6383)
!6389 = !DILocation(line: 2426, column: 7, scope: !6390)
!6390 = distinct !DILexicalBlock(scope: !6362, file: !384, line: 2426, column: 7)
!6391 = !DILocation(line: 2426, column: 7, scope: !6362)
!6392 = !DILocation(line: 2426, column: 29, scope: !6390)
!6393 = !DILocation(line: 2426, column: 15, scope: !6390)
!6394 = !DILocation(line: 2426, column: 21, scope: !6390)
!6395 = !DILocation(line: 2426, column: 14, scope: !6390)
!6396 = !DILocation(line: 2428, column: 10, scope: !6362)
!6397 = !DILocation(line: 2428, column: 3, scope: !6362)
!6398 = !DILocation(line: 2433, column: 1, scope: !6362)
!6399 = distinct !DISubprogram(name: "binn_map_read", scope: !384, file: !384, line: 2437, type: !6363, scopeLine: 2437, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6400 = !DILocalVariable(name: "map", arg: 1, scope: !6399, file: !384, line: 2437, type: !82)
!6401 = !DILocation(line: 2437, column: 37, scope: !6399)
!6402 = !DILocalVariable(name: "id", arg: 2, scope: !6399, file: !384, line: 2437, type: !101)
!6403 = !DILocation(line: 2437, column: 46, scope: !6399)
!6404 = !DILocalVariable(name: "ptype", arg: 3, scope: !6399, file: !384, line: 2437, type: !440)
!6405 = !DILocation(line: 2437, column: 55, scope: !6399)
!6406 = !DILocalVariable(name: "psize", arg: 4, scope: !6399, file: !384, line: 2437, type: !440)
!6407 = !DILocation(line: 2437, column: 67, scope: !6399)
!6408 = !DILocalVariable(name: "value", scope: !6399, file: !384, line: 2438, type: !387)
!6409 = !DILocation(line: 2438, column: 8, scope: !6399)
!6410 = !DILocation(line: 2440, column: 26, scope: !6411)
!6411 = distinct !DILexicalBlock(scope: !6399, file: !384, line: 2440, column: 7)
!6412 = !DILocation(line: 2440, column: 31, scope: !6411)
!6413 = !DILocation(line: 2440, column: 7, scope: !6411)
!6414 = !DILocation(line: 2440, column: 43, scope: !6411)
!6415 = !DILocation(line: 2440, column: 7, scope: !6399)
!6416 = !DILocation(line: 2440, column: 53, scope: !6411)
!6417 = !DILocation(line: 2441, column: 7, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6399, file: !384, line: 2441, column: 7)
!6419 = !DILocation(line: 2441, column: 7, scope: !6399)
!6420 = !DILocation(line: 2441, column: 29, scope: !6418)
!6421 = !DILocation(line: 2441, column: 15, scope: !6418)
!6422 = !DILocation(line: 2441, column: 21, scope: !6418)
!6423 = !DILocation(line: 2441, column: 14, scope: !6418)
!6424 = !DILocation(line: 2442, column: 7, scope: !6425)
!6425 = distinct !DILexicalBlock(scope: !6399, file: !384, line: 2442, column: 7)
!6426 = !DILocation(line: 2442, column: 7, scope: !6399)
!6427 = !DILocation(line: 2442, column: 29, scope: !6425)
!6428 = !DILocation(line: 2442, column: 15, scope: !6425)
!6429 = !DILocation(line: 2442, column: 21, scope: !6425)
!6430 = !DILocation(line: 2442, column: 14, scope: !6425)
!6431 = !DILocation(line: 2444, column: 10, scope: !6399)
!6432 = !DILocation(line: 2444, column: 3, scope: !6399)
!6433 = !DILocation(line: 2449, column: 1, scope: !6399)
!6434 = distinct !DISubprogram(name: "binn_object_read", scope: !384, file: !384, line: 2453, type: !6435, scopeLine: 2453, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6435 = !DISubroutineType(types: !6436)
!6436 = !{!82, !82, !103, !440, !440}
!6437 = !DILocalVariable(name: "obj", arg: 1, scope: !6434, file: !384, line: 2453, type: !82)
!6438 = !DILocation(line: 2453, column: 40, scope: !6434)
!6439 = !DILocalVariable(name: "key", arg: 2, scope: !6434, file: !384, line: 2453, type: !103)
!6440 = !DILocation(line: 2453, column: 51, scope: !6434)
!6441 = !DILocalVariable(name: "ptype", arg: 3, scope: !6434, file: !384, line: 2453, type: !440)
!6442 = !DILocation(line: 2453, column: 61, scope: !6434)
!6443 = !DILocalVariable(name: "psize", arg: 4, scope: !6434, file: !384, line: 2453, type: !440)
!6444 = !DILocation(line: 2453, column: 73, scope: !6434)
!6445 = !DILocalVariable(name: "value", scope: !6434, file: !384, line: 2454, type: !387)
!6446 = !DILocation(line: 2454, column: 8, scope: !6434)
!6447 = !DILocation(line: 2456, column: 29, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !6434, file: !384, line: 2456, column: 7)
!6449 = !DILocation(line: 2456, column: 34, scope: !6448)
!6450 = !DILocation(line: 2456, column: 7, scope: !6448)
!6451 = !DILocation(line: 2456, column: 47, scope: !6448)
!6452 = !DILocation(line: 2456, column: 7, scope: !6434)
!6453 = !DILocation(line: 2456, column: 57, scope: !6448)
!6454 = !DILocation(line: 2457, column: 7, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6434, file: !384, line: 2457, column: 7)
!6456 = !DILocation(line: 2457, column: 7, scope: !6434)
!6457 = !DILocation(line: 2457, column: 29, scope: !6455)
!6458 = !DILocation(line: 2457, column: 15, scope: !6455)
!6459 = !DILocation(line: 2457, column: 21, scope: !6455)
!6460 = !DILocation(line: 2457, column: 14, scope: !6455)
!6461 = !DILocation(line: 2458, column: 7, scope: !6462)
!6462 = distinct !DILexicalBlock(scope: !6434, file: !384, line: 2458, column: 7)
!6463 = !DILocation(line: 2458, column: 7, scope: !6434)
!6464 = !DILocation(line: 2458, column: 29, scope: !6462)
!6465 = !DILocation(line: 2458, column: 15, scope: !6462)
!6466 = !DILocation(line: 2458, column: 21, scope: !6462)
!6467 = !DILocation(line: 2458, column: 14, scope: !6462)
!6468 = !DILocation(line: 2460, column: 10, scope: !6434)
!6469 = !DILocation(line: 2460, column: 3, scope: !6434)
!6470 = !DILocation(line: 2465, column: 1, scope: !6434)
!6471 = distinct !DISubprogram(name: "binn_list_get", scope: !384, file: !384, line: 2470, type: !6472, scopeLine: 2470, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6472 = !DISubroutineType(types: !6473)
!6473 = !{!393, !82, !101, !101, !82, !440}
!6474 = !DILocalVariable(name: "ptr", arg: 1, scope: !6471, file: !384, line: 2470, type: !82)
!6475 = !DILocation(line: 2470, column: 35, scope: !6471)
!6476 = !DILocalVariable(name: "pos", arg: 2, scope: !6471, file: !384, line: 2470, type: !101)
!6477 = !DILocation(line: 2470, column: 44, scope: !6471)
!6478 = !DILocalVariable(name: "type", arg: 3, scope: !6471, file: !384, line: 2470, type: !101)
!6479 = !DILocation(line: 2470, column: 53, scope: !6471)
!6480 = !DILocalVariable(name: "pvalue", arg: 4, scope: !6471, file: !384, line: 2470, type: !82)
!6481 = !DILocation(line: 2470, column: 65, scope: !6471)
!6482 = !DILocalVariable(name: "psize", arg: 5, scope: !6471, file: !384, line: 2470, type: !440)
!6483 = !DILocation(line: 2470, column: 78, scope: !6471)
!6484 = !DILocalVariable(name: "value", scope: !6471, file: !384, line: 2471, type: !387)
!6485 = !DILocation(line: 2471, column: 8, scope: !6471)
!6486 = !DILocalVariable(name: "storage_type", scope: !6471, file: !384, line: 2472, type: !101)
!6487 = !DILocation(line: 2472, column: 7, scope: !6471)
!6488 = !DILocation(line: 2474, column: 40, scope: !6471)
!6489 = !DILocation(line: 2474, column: 18, scope: !6471)
!6490 = !DILocation(line: 2474, column: 16, scope: !6471)
!6491 = !DILocation(line: 2475, column: 8, scope: !6492)
!6492 = distinct !DILexicalBlock(scope: !6471, file: !384, line: 2475, column: 7)
!6493 = !DILocation(line: 2475, column: 21, scope: !6492)
!6494 = !DILocation(line: 2475, column: 46, scope: !6492)
!6495 = !DILocation(line: 2475, column: 50, scope: !6492)
!6496 = !DILocation(line: 2475, column: 57, scope: !6492)
!6497 = !DILocation(line: 2475, column: 7, scope: !6471)
!6498 = !DILocation(line: 2475, column: 67, scope: !6492)
!6499 = !DILocation(line: 2477, column: 14, scope: !6471)
!6500 = !DILocation(line: 2477, column: 22, scope: !6471)
!6501 = !DILocation(line: 2477, column: 3, scope: !6471)
!6502 = !DILocation(line: 2479, column: 27, scope: !6503)
!6503 = distinct !DILexicalBlock(scope: !6471, file: !384, line: 2479, column: 7)
!6504 = !DILocation(line: 2479, column: 32, scope: !6503)
!6505 = !DILocation(line: 2479, column: 7, scope: !6503)
!6506 = !DILocation(line: 2479, column: 45, scope: !6503)
!6507 = !DILocation(line: 2479, column: 7, scope: !6471)
!6508 = !DILocation(line: 2479, column: 55, scope: !6503)
!6509 = !DILocation(line: 2481, column: 24, scope: !6510)
!6510 = distinct !DILexicalBlock(scope: !6471, file: !384, line: 2481, column: 7)
!6511 = !DILocation(line: 2481, column: 29, scope: !6510)
!6512 = !DILocation(line: 2481, column: 43, scope: !6510)
!6513 = !DILocation(line: 2481, column: 49, scope: !6510)
!6514 = !DILocation(line: 2481, column: 55, scope: !6510)
!6515 = !DILocation(line: 2481, column: 7, scope: !6510)
!6516 = !DILocation(line: 2481, column: 69, scope: !6510)
!6517 = !DILocation(line: 2481, column: 7, scope: !6471)
!6518 = !DILocation(line: 2481, column: 79, scope: !6510)
!6519 = !DILocation(line: 2483, column: 7, scope: !6520)
!6520 = distinct !DILexicalBlock(scope: !6471, file: !384, line: 2483, column: 7)
!6521 = !DILocation(line: 2483, column: 7, scope: !6471)
!6522 = !DILocation(line: 2483, column: 29, scope: !6520)
!6523 = !DILocation(line: 2483, column: 15, scope: !6520)
!6524 = !DILocation(line: 2483, column: 21, scope: !6520)
!6525 = !DILocation(line: 2483, column: 14, scope: !6520)
!6526 = !DILocation(line: 2485, column: 3, scope: !6471)
!6527 = !DILocation(line: 2487, column: 1, scope: !6471)
!6528 = distinct !DISubprogram(name: "zero_value", linkageName: "_ZL10zero_valuePvi", scope: !384, file: !384, line: 2232, type: !6529, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6529 = !DISubroutineType(types: !6530)
!6530 = !{null, !82, !101}
!6531 = !DILocalVariable(name: "pvalue", arg: 1, scope: !6528, file: !384, line: 2232, type: !82)
!6532 = !DILocation(line: 2232, column: 36, scope: !6528)
!6533 = !DILocalVariable(name: "type", arg: 2, scope: !6528, file: !384, line: 2232, type: !101)
!6534 = !DILocation(line: 2232, column: 48, scope: !6528)
!6535 = !DILocation(line: 2235, column: 33, scope: !6528)
!6536 = !DILocation(line: 2235, column: 11, scope: !6528)
!6537 = !DILocation(line: 2235, column: 3, scope: !6528)
!6538 = !DILocation(line: 2237, column: 5, scope: !6539)
!6539 = distinct !DILexicalBlock(scope: !6528, file: !384, line: 2235, column: 40)
!6540 = !DILocation(line: 2239, column: 16, scope: !6539)
!6541 = !DILocation(line: 2239, column: 24, scope: !6539)
!6542 = !DILocation(line: 2241, column: 5, scope: !6539)
!6543 = !DILocation(line: 2243, column: 17, scope: !6539)
!6544 = !DILocation(line: 2243, column: 7, scope: !6539)
!6545 = !DILocation(line: 2243, column: 25, scope: !6539)
!6546 = !DILocation(line: 2245, column: 5, scope: !6539)
!6547 = !DILocation(line: 2247, column: 15, scope: !6539)
!6548 = !DILocation(line: 2247, column: 7, scope: !6539)
!6549 = !DILocation(line: 2247, column: 23, scope: !6539)
!6550 = !DILocation(line: 2249, column: 5, scope: !6539)
!6551 = !DILocation(line: 2251, column: 18, scope: !6539)
!6552 = !DILocation(line: 2251, column: 7, scope: !6539)
!6553 = !DILocation(line: 2251, column: 26, scope: !6539)
!6554 = !DILocation(line: 2253, column: 5, scope: !6539)
!6555 = !DILocation(line: 2257, column: 15, scope: !6539)
!6556 = !DILocation(line: 2257, column: 6, scope: !6539)
!6557 = !DILocation(line: 2257, column: 22, scope: !6539)
!6558 = !DILocation(line: 2258, column: 5, scope: !6539)
!6559 = !DILocation(line: 2263, column: 1, scope: !6528)
!6560 = distinct !DISubprogram(name: "copy_value", linkageName: "_ZL10copy_valuePvS_iii", scope: !384, file: !384, line: 2267, type: !6561, scopeLine: 2267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6561 = !DISubroutineType(types: !6562)
!6562 = !{!393, !82, !82, !101, !101, !101}
!6563 = !DILocalVariable(name: "psource", arg: 1, scope: !6560, file: !384, line: 2267, type: !82)
!6564 = !DILocation(line: 2267, column: 36, scope: !6560)
!6565 = !DILocalVariable(name: "pdest", arg: 2, scope: !6560, file: !384, line: 2267, type: !82)
!6566 = !DILocation(line: 2267, column: 51, scope: !6560)
!6567 = !DILocalVariable(name: "source_type", arg: 3, scope: !6560, file: !384, line: 2267, type: !101)
!6568 = !DILocation(line: 2267, column: 62, scope: !6560)
!6569 = !DILocalVariable(name: "dest_type", arg: 4, scope: !6560, file: !384, line: 2267, type: !101)
!6570 = !DILocation(line: 2267, column: 79, scope: !6560)
!6571 = !DILocalVariable(name: "data_store", arg: 5, scope: !6560, file: !384, line: 2267, type: !101)
!6572 = !DILocation(line: 2267, column: 94, scope: !6560)
!6573 = !DILocation(line: 2269, column: 19, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6560, file: !384, line: 2269, column: 7)
!6575 = !DILocation(line: 2269, column: 7, scope: !6574)
!6576 = !DILocation(line: 2269, column: 47, scope: !6574)
!6577 = !DILocation(line: 2269, column: 35, scope: !6574)
!6578 = !DILocation(line: 2269, column: 32, scope: !6574)
!6579 = !DILocation(line: 2269, column: 7, scope: !6560)
!6580 = !DILocation(line: 2269, column: 59, scope: !6574)
!6581 = !DILocation(line: 2271, column: 20, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6560, file: !384, line: 2271, column: 7)
!6583 = !DILocation(line: 2271, column: 8, scope: !6582)
!6584 = !DILocation(line: 2271, column: 33, scope: !6582)
!6585 = !DILocation(line: 2271, column: 53, scope: !6582)
!6586 = !DILocation(line: 2271, column: 57, scope: !6582)
!6587 = !DILocation(line: 2271, column: 72, scope: !6582)
!6588 = !DILocation(line: 2271, column: 69, scope: !6582)
!6589 = !DILocation(line: 2271, column: 7, scope: !6560)
!6590 = !DILocation(line: 2272, column: 27, scope: !6591)
!6591 = distinct !DILexicalBlock(scope: !6582, file: !384, line: 2271, column: 84)
!6592 = !DILocation(line: 2272, column: 36, scope: !6591)
!6593 = !DILocation(line: 2272, column: 43, scope: !6591)
!6594 = !DILocation(line: 2272, column: 56, scope: !6591)
!6595 = !DILocation(line: 2272, column: 12, scope: !6591)
!6596 = !DILocation(line: 2272, column: 5, scope: !6591)
!6597 = !DILocation(line: 2273, column: 27, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6582, file: !384, line: 2273, column: 14)
!6599 = !DILocation(line: 2273, column: 15, scope: !6598)
!6600 = !DILocation(line: 2273, column: 40, scope: !6598)
!6601 = !DILocation(line: 2273, column: 62, scope: !6598)
!6602 = !DILocation(line: 2273, column: 66, scope: !6598)
!6603 = !DILocation(line: 2273, column: 81, scope: !6598)
!6604 = !DILocation(line: 2273, column: 78, scope: !6598)
!6605 = !DILocation(line: 2273, column: 14, scope: !6582)
!6606 = !DILocation(line: 2274, column: 29, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6598, file: !384, line: 2273, column: 93)
!6608 = !DILocation(line: 2274, column: 38, scope: !6607)
!6609 = !DILocation(line: 2274, column: 45, scope: !6607)
!6610 = !DILocation(line: 2274, column: 58, scope: !6607)
!6611 = !DILocation(line: 2274, column: 12, scope: !6607)
!6612 = !DILocation(line: 2274, column: 5, scope: !6607)
!6613 = !DILocation(line: 2276, column: 27, scope: !6614)
!6614 = distinct !DILexicalBlock(scope: !6598, file: !384, line: 2275, column: 10)
!6615 = !DILocation(line: 2276, column: 36, scope: !6614)
!6616 = !DILocation(line: 2276, column: 43, scope: !6614)
!6617 = !DILocation(line: 2276, column: 12, scope: !6614)
!6618 = !DILocation(line: 2276, column: 5, scope: !6614)
!6619 = !DILocation(line: 2279, column: 1, scope: !6560)
!6620 = distinct !DISubprogram(name: "copy_int_value", linkageName: "_ZL14copy_int_valuePvS_ii", scope: !384, file: !384, line: 2124, type: !6621, scopeLine: 2124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6621 = !DISubroutineType(types: !6622)
!6622 = !{!393, !82, !82, !101, !101}
!6623 = !DILocalVariable(name: "psource", arg: 1, scope: !6620, file: !384, line: 2124, type: !82)
!6624 = !DILocation(line: 2124, column: 40, scope: !6620)
!6625 = !DILocalVariable(name: "pdest", arg: 2, scope: !6620, file: !384, line: 2124, type: !82)
!6626 = !DILocation(line: 2124, column: 55, scope: !6620)
!6627 = !DILocalVariable(name: "source_type", arg: 3, scope: !6620, file: !384, line: 2124, type: !101)
!6628 = !DILocation(line: 2124, column: 66, scope: !6620)
!6629 = !DILocalVariable(name: "dest_type", arg: 4, scope: !6620, file: !384, line: 2124, type: !101)
!6630 = !DILocation(line: 2124, column: 83, scope: !6620)
!6631 = !DILocalVariable(name: "vuint64", scope: !6620, file: !384, line: 2125, type: !424)
!6632 = !DILocation(line: 2125, column: 10, scope: !6620)
!6633 = !DILocalVariable(name: "vint64", scope: !6620, file: !384, line: 2125, type: !418)
!6634 = !DILocation(line: 2125, column: 25, scope: !6620)
!6635 = !DILocation(line: 2127, column: 11, scope: !6620)
!6636 = !DILocation(line: 2127, column: 3, scope: !6620)
!6637 = !DILocation(line: 2129, column: 30, scope: !6638)
!6638 = distinct !DILexicalBlock(scope: !6620, file: !384, line: 2127, column: 24)
!6639 = !DILocation(line: 2129, column: 14, scope: !6638)
!6640 = !DILocation(line: 2129, column: 12, scope: !6638)
!6641 = !DILocation(line: 2130, column: 5, scope: !6638)
!6642 = !DILocation(line: 2132, column: 24, scope: !6638)
!6643 = !DILocation(line: 2132, column: 15, scope: !6638)
!6644 = !DILocation(line: 2132, column: 14, scope: !6638)
!6645 = !DILocation(line: 2132, column: 12, scope: !6638)
!6646 = !DILocation(line: 2133, column: 5, scope: !6638)
!6647 = !DILocation(line: 2135, column: 22, scope: !6638)
!6648 = !DILocation(line: 2135, column: 15, scope: !6638)
!6649 = !DILocation(line: 2135, column: 14, scope: !6638)
!6650 = !DILocation(line: 2135, column: 12, scope: !6638)
!6651 = !DILocation(line: 2136, column: 5, scope: !6638)
!6652 = !DILocation(line: 2138, column: 24, scope: !6638)
!6653 = !DILocation(line: 2138, column: 15, scope: !6638)
!6654 = !DILocation(line: 2138, column: 14, scope: !6638)
!6655 = !DILocation(line: 2138, column: 12, scope: !6638)
!6656 = !DILocation(line: 2139, column: 5, scope: !6638)
!6657 = !DILocation(line: 2142, column: 33, scope: !6638)
!6658 = !DILocation(line: 2142, column: 15, scope: !6638)
!6659 = !DILocation(line: 2142, column: 13, scope: !6638)
!6660 = !DILocation(line: 2143, column: 5, scope: !6638)
!6661 = !DILocation(line: 2145, column: 34, scope: !6638)
!6662 = !DILocation(line: 2145, column: 16, scope: !6638)
!6663 = !DILocation(line: 2145, column: 15, scope: !6638)
!6664 = !DILocation(line: 2145, column: 13, scope: !6638)
!6665 = !DILocation(line: 2146, column: 5, scope: !6638)
!6666 = !DILocation(line: 2148, column: 32, scope: !6638)
!6667 = !DILocation(line: 2148, column: 16, scope: !6638)
!6668 = !DILocation(line: 2148, column: 15, scope: !6638)
!6669 = !DILocation(line: 2148, column: 13, scope: !6638)
!6670 = !DILocation(line: 2149, column: 5, scope: !6638)
!6671 = !DILocation(line: 2151, column: 26, scope: !6638)
!6672 = !DILocation(line: 2151, column: 16, scope: !6638)
!6673 = !DILocation(line: 2151, column: 15, scope: !6638)
!6674 = !DILocation(line: 2151, column: 13, scope: !6638)
!6675 = !DILocation(line: 2152, column: 5, scope: !6638)
!6676 = !DILocation(line: 2155, column: 5, scope: !6638)
!6677 = !DILocation(line: 2161, column: 17, scope: !6678)
!6678 = distinct !DILexicalBlock(scope: !6620, file: !384, line: 2161, column: 7)
!6679 = !DILocation(line: 2161, column: 8, scope: !6678)
!6680 = !DILocation(line: 2161, column: 30, scope: !6678)
!6681 = !DILocation(line: 2161, column: 52, scope: !6678)
!6682 = !DILocation(line: 2161, column: 65, scope: !6678)
!6683 = !DILocation(line: 2161, column: 56, scope: !6678)
!6684 = !DILocation(line: 2161, column: 76, scope: !6678)
!6685 = !DILocation(line: 2161, column: 7, scope: !6620)
!6686 = !DILocation(line: 2162, column: 9, scope: !6687)
!6687 = distinct !DILexicalBlock(scope: !6688, file: !384, line: 2162, column: 9)
!6688 = distinct !DILexicalBlock(scope: !6678, file: !384, line: 2161, column: 97)
!6689 = !DILocation(line: 2162, column: 17, scope: !6687)
!6690 = !DILocation(line: 2162, column: 9, scope: !6688)
!6691 = !DILocation(line: 2162, column: 30, scope: !6687)
!6692 = !DILocation(line: 2163, column: 14, scope: !6688)
!6693 = !DILocation(line: 2163, column: 12, scope: !6688)
!6694 = !DILocation(line: 2164, column: 3, scope: !6688)
!6695 = !DILocation(line: 2164, column: 24, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6678, file: !384, line: 2164, column: 14)
!6697 = !DILocation(line: 2164, column: 15, scope: !6696)
!6698 = !DILocation(line: 2164, column: 37, scope: !6696)
!6699 = !DILocation(line: 2164, column: 57, scope: !6696)
!6700 = !DILocation(line: 2164, column: 70, scope: !6696)
!6701 = !DILocation(line: 2164, column: 61, scope: !6696)
!6702 = !DILocation(line: 2164, column: 81, scope: !6696)
!6703 = !DILocation(line: 2164, column: 14, scope: !6678)
!6704 = !DILocation(line: 2165, column: 9, scope: !6705)
!6705 = distinct !DILexicalBlock(scope: !6706, file: !384, line: 2165, column: 9)
!6706 = distinct !DILexicalBlock(scope: !6696, file: !384, line: 2164, column: 104)
!6707 = !DILocation(line: 2165, column: 16, scope: !6705)
!6708 = !DILocation(line: 2165, column: 9, scope: !6706)
!6709 = !DILocation(line: 2165, column: 21, scope: !6705)
!6710 = !DILocation(line: 2166, column: 15, scope: !6706)
!6711 = !DILocation(line: 2166, column: 13, scope: !6706)
!6712 = !DILocation(line: 2167, column: 3, scope: !6706)
!6713 = !DILocation(line: 2170, column: 11, scope: !6620)
!6714 = !DILocation(line: 2170, column: 3, scope: !6620)
!6715 = !DILocation(line: 2172, column: 10, scope: !6716)
!6716 = distinct !DILexicalBlock(scope: !6717, file: !384, line: 2172, column: 9)
!6717 = distinct !DILexicalBlock(scope: !6620, file: !384, line: 2170, column: 22)
!6718 = !DILocation(line: 2172, column: 17, scope: !6716)
!6719 = !DILocation(line: 2172, column: 29, scope: !6716)
!6720 = !DILocation(line: 2172, column: 33, scope: !6716)
!6721 = !DILocation(line: 2172, column: 40, scope: !6716)
!6722 = !DILocation(line: 2172, column: 9, scope: !6717)
!6723 = !DILocation(line: 2172, column: 53, scope: !6716)
!6724 = !DILocation(line: 2173, column: 43, scope: !6717)
!6725 = !DILocation(line: 2173, column: 21, scope: !6717)
!6726 = !DILocation(line: 2173, column: 27, scope: !6717)
!6727 = !DILocation(line: 2174, column: 5, scope: !6717)
!6728 = !DILocation(line: 2176, column: 10, scope: !6729)
!6729 = distinct !DILexicalBlock(scope: !6717, file: !384, line: 2176, column: 9)
!6730 = !DILocation(line: 2176, column: 17, scope: !6729)
!6731 = !DILocation(line: 2176, column: 30, scope: !6729)
!6732 = !DILocation(line: 2176, column: 34, scope: !6729)
!6733 = !DILocation(line: 2176, column: 41, scope: !6729)
!6734 = !DILocation(line: 2176, column: 9, scope: !6717)
!6735 = !DILocation(line: 2176, column: 55, scope: !6729)
!6736 = !DILocation(line: 2177, column: 31, scope: !6717)
!6737 = !DILocation(line: 2177, column: 15, scope: !6717)
!6738 = !DILocation(line: 2177, column: 6, scope: !6717)
!6739 = !DILocation(line: 2177, column: 21, scope: !6717)
!6740 = !DILocation(line: 2178, column: 5, scope: !6717)
!6741 = !DILocation(line: 2180, column: 10, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6717, file: !384, line: 2180, column: 9)
!6743 = !DILocation(line: 2180, column: 17, scope: !6742)
!6744 = !DILocation(line: 2180, column: 30, scope: !6742)
!6745 = !DILocation(line: 2180, column: 34, scope: !6742)
!6746 = !DILocation(line: 2180, column: 41, scope: !6742)
!6747 = !DILocation(line: 2180, column: 9, scope: !6717)
!6748 = !DILocation(line: 2180, column: 55, scope: !6742)
!6749 = !DILocation(line: 2181, column: 27, scope: !6717)
!6750 = !DILocation(line: 2181, column: 13, scope: !6717)
!6751 = !DILocation(line: 2181, column: 6, scope: !6717)
!6752 = !DILocation(line: 2181, column: 19, scope: !6717)
!6753 = !DILocation(line: 2182, column: 5, scope: !6717)
!6754 = !DILocation(line: 2184, column: 23, scope: !6717)
!6755 = !DILocation(line: 2184, column: 15, scope: !6717)
!6756 = !DILocation(line: 2184, column: 6, scope: !6717)
!6757 = !DILocation(line: 2184, column: 21, scope: !6717)
!6758 = !DILocation(line: 2185, column: 5, scope: !6717)
!6759 = !DILocation(line: 2188, column: 9, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6717, file: !384, line: 2188, column: 9)
!6761 = !DILocation(line: 2188, column: 17, scope: !6760)
!6762 = !DILocation(line: 2188, column: 9, scope: !6717)
!6763 = !DILocation(line: 2188, column: 30, scope: !6760)
!6764 = !DILocation(line: 2189, column: 47, scope: !6717)
!6765 = !DILocation(line: 2189, column: 23, scope: !6717)
!6766 = !DILocation(line: 2189, column: 29, scope: !6717)
!6767 = !DILocation(line: 2190, column: 5, scope: !6717)
!6768 = !DILocation(line: 2192, column: 9, scope: !6769)
!6769 = distinct !DILexicalBlock(scope: !6717, file: !384, line: 2192, column: 9)
!6770 = !DILocation(line: 2192, column: 17, scope: !6769)
!6771 = !DILocation(line: 2192, column: 9, scope: !6717)
!6772 = !DILocation(line: 2192, column: 31, scope: !6769)
!6773 = !DILocation(line: 2193, column: 49, scope: !6717)
!6774 = !DILocation(line: 2193, column: 24, scope: !6717)
!6775 = !DILocation(line: 2193, column: 6, scope: !6717)
!6776 = !DILocation(line: 2193, column: 30, scope: !6717)
!6777 = !DILocation(line: 2194, column: 5, scope: !6717)
!6778 = !DILocation(line: 2196, column: 9, scope: !6779)
!6779 = distinct !DILexicalBlock(scope: !6717, file: !384, line: 2196, column: 9)
!6780 = !DILocation(line: 2196, column: 17, scope: !6779)
!6781 = !DILocation(line: 2196, column: 9, scope: !6717)
!6782 = !DILocation(line: 2196, column: 31, scope: !6779)
!6783 = !DILocation(line: 2197, column: 45, scope: !6717)
!6784 = !DILocation(line: 2197, column: 22, scope: !6717)
!6785 = !DILocation(line: 2197, column: 6, scope: !6717)
!6786 = !DILocation(line: 2197, column: 28, scope: !6717)
!6787 = !DILocation(line: 2198, column: 5, scope: !6717)
!6788 = !DILocation(line: 2200, column: 24, scope: !6717)
!6789 = !DILocation(line: 2200, column: 16, scope: !6717)
!6790 = !DILocation(line: 2200, column: 6, scope: !6717)
!6791 = !DILocation(line: 2200, column: 22, scope: !6717)
!6792 = !DILocation(line: 2201, column: 5, scope: !6717)
!6793 = !DILocation(line: 2204, column: 5, scope: !6717)
!6794 = !DILocation(line: 2207, column: 3, scope: !6620)
!6795 = !DILocation(line: 2209, column: 1, scope: !6620)
!6796 = distinct !DISubprogram(name: "copy_float_value", linkageName: "_ZL16copy_float_valuePvS_ii", scope: !384, file: !384, line: 2213, type: !6621, scopeLine: 2213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6797 = !DILocalVariable(name: "psource", arg: 1, scope: !6796, file: !384, line: 2213, type: !82)
!6798 = !DILocation(line: 2213, column: 42, scope: !6796)
!6799 = !DILocalVariable(name: "pdest", arg: 2, scope: !6796, file: !384, line: 2213, type: !82)
!6800 = !DILocation(line: 2213, column: 57, scope: !6796)
!6801 = !DILocalVariable(name: "source_type", arg: 3, scope: !6796, file: !384, line: 2213, type: !101)
!6802 = !DILocation(line: 2213, column: 68, scope: !6796)
!6803 = !DILocalVariable(name: "dest_type", arg: 4, scope: !6796, file: !384, line: 2213, type: !101)
!6804 = !DILocation(line: 2213, column: 85, scope: !6796)
!6805 = !DILocation(line: 2215, column: 11, scope: !6796)
!6806 = !DILocation(line: 2215, column: 3, scope: !6796)
!6807 = !DILocation(line: 2217, column: 34, scope: !6808)
!6808 = distinct !DILexicalBlock(scope: !6796, file: !384, line: 2215, column: 24)
!6809 = !DILocation(line: 2217, column: 25, scope: !6808)
!6810 = !DILocation(line: 2217, column: 24, scope: !6808)
!6811 = !DILocation(line: 2217, column: 16, scope: !6808)
!6812 = !DILocation(line: 2217, column: 6, scope: !6808)
!6813 = !DILocation(line: 2217, column: 22, scope: !6808)
!6814 = !DILocation(line: 2218, column: 5, scope: !6808)
!6815 = !DILocation(line: 2220, column: 42, scope: !6808)
!6816 = !DILocation(line: 2220, column: 32, scope: !6808)
!6817 = !DILocation(line: 2220, column: 31, scope: !6808)
!6818 = !DILocation(line: 2220, column: 15, scope: !6808)
!6819 = !DILocation(line: 2220, column: 6, scope: !6808)
!6820 = !DILocation(line: 2220, column: 21, scope: !6808)
!6821 = !DILocation(line: 2221, column: 5, scope: !6808)
!6822 = !DILocation(line: 2223, column: 5, scope: !6808)
!6823 = !DILocation(line: 2226, column: 3, scope: !6796)
!6824 = !DILocation(line: 2228, column: 1, scope: !6796)
!6825 = distinct !DISubprogram(name: "copy_raw_value", linkageName: "_ZL14copy_raw_valuePvS_i", scope: !384, file: !384, line: 2092, type: !6826, scopeLine: 2092, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6826 = !DISubroutineType(types: !6827)
!6827 = !{!393, !82, !82, !101}
!6828 = !DILocalVariable(name: "psource", arg: 1, scope: !6825, file: !384, line: 2092, type: !82)
!6829 = !DILocation(line: 2092, column: 40, scope: !6825)
!6830 = !DILocalVariable(name: "pdest", arg: 2, scope: !6825, file: !384, line: 2092, type: !82)
!6831 = !DILocation(line: 2092, column: 55, scope: !6825)
!6832 = !DILocalVariable(name: "data_store", arg: 3, scope: !6825, file: !384, line: 2092, type: !101)
!6833 = !DILocation(line: 2092, column: 66, scope: !6825)
!6834 = !DILocation(line: 2094, column: 11, scope: !6825)
!6835 = !DILocation(line: 2094, column: 3, scope: !6825)
!6836 = !DILocation(line: 2096, column: 5, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6825, file: !384, line: 2094, column: 23)
!6838 = !DILocation(line: 2098, column: 34, scope: !6837)
!6839 = !DILocation(line: 2098, column: 25, scope: !6837)
!6840 = !DILocation(line: 2098, column: 16, scope: !6837)
!6841 = !DILocation(line: 2098, column: 23, scope: !6837)
!6842 = !DILocation(line: 2099, column: 5, scope: !6837)
!6843 = !DILocation(line: 2101, column: 36, scope: !6837)
!6844 = !DILocation(line: 2101, column: 27, scope: !6837)
!6845 = !DILocation(line: 2101, column: 26, scope: !6837)
!6846 = !DILocation(line: 2101, column: 17, scope: !6837)
!6847 = !DILocation(line: 2101, column: 7, scope: !6837)
!6848 = !DILocation(line: 2101, column: 24, scope: !6837)
!6849 = !DILocation(line: 2102, column: 5, scope: !6837)
!6850 = !DILocation(line: 2104, column: 32, scope: !6837)
!6851 = !DILocation(line: 2104, column: 25, scope: !6837)
!6852 = !DILocation(line: 2104, column: 24, scope: !6837)
!6853 = !DILocation(line: 2104, column: 15, scope: !6837)
!6854 = !DILocation(line: 2104, column: 7, scope: !6837)
!6855 = !DILocation(line: 2104, column: 22, scope: !6837)
!6856 = !DILocation(line: 2105, column: 5, scope: !6837)
!6857 = !DILocation(line: 2107, column: 38, scope: !6837)
!6858 = !DILocation(line: 2107, column: 28, scope: !6837)
!6859 = !DILocation(line: 2107, column: 27, scope: !6837)
!6860 = !DILocation(line: 2107, column: 18, scope: !6837)
!6861 = !DILocation(line: 2107, column: 7, scope: !6837)
!6862 = !DILocation(line: 2107, column: 25, scope: !6837)
!6863 = !DILocation(line: 2108, column: 5, scope: !6837)
!6864 = !DILocation(line: 2112, column: 34, scope: !6837)
!6865 = !DILocation(line: 2112, column: 17, scope: !6837)
!6866 = !DILocation(line: 2112, column: 7, scope: !6837)
!6867 = !DILocation(line: 2112, column: 24, scope: !6837)
!6868 = !DILocation(line: 2113, column: 5, scope: !6837)
!6869 = !DILocation(line: 2115, column: 5, scope: !6837)
!6870 = !DILocation(line: 2118, column: 3, scope: !6825)
!6871 = !DILocation(line: 2120, column: 1, scope: !6825)
!6872 = distinct !DISubprogram(name: "int_type", linkageName: "_ZL8int_typei", scope: !384, file: !384, line: 2069, type: !4635, scopeLine: 2069, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6873 = !DILocalVariable(name: "type", arg: 1, scope: !6872, file: !384, line: 2069, type: !101)
!6874 = !DILocation(line: 2069, column: 31, scope: !6872)
!6875 = !DILocation(line: 2071, column: 11, scope: !6872)
!6876 = !DILocation(line: 2071, column: 3, scope: !6872)
!6877 = !DILocation(line: 2076, column: 5, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6872, file: !384, line: 2071, column: 17)
!6879 = !DILocation(line: 2082, column: 5, scope: !6878)
!6880 = !DILocation(line: 2085, column: 5, scope: !6878)
!6881 = !DILocation(line: 2088, column: 1, scope: !6872)
!6882 = distinct !DISubprogram(name: "binn_map_get", scope: !384, file: !384, line: 2491, type: !6472, scopeLine: 2491, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6883 = !DILocalVariable(name: "ptr", arg: 1, scope: !6882, file: !384, line: 2491, type: !82)
!6884 = !DILocation(line: 2491, column: 34, scope: !6882)
!6885 = !DILocalVariable(name: "id", arg: 2, scope: !6882, file: !384, line: 2491, type: !101)
!6886 = !DILocation(line: 2491, column: 43, scope: !6882)
!6887 = !DILocalVariable(name: "type", arg: 3, scope: !6882, file: !384, line: 2491, type: !101)
!6888 = !DILocation(line: 2491, column: 51, scope: !6882)
!6889 = !DILocalVariable(name: "pvalue", arg: 4, scope: !6882, file: !384, line: 2491, type: !82)
!6890 = !DILocation(line: 2491, column: 63, scope: !6882)
!6891 = !DILocalVariable(name: "psize", arg: 5, scope: !6882, file: !384, line: 2491, type: !440)
!6892 = !DILocation(line: 2491, column: 76, scope: !6882)
!6893 = !DILocalVariable(name: "value", scope: !6882, file: !384, line: 2492, type: !387)
!6894 = !DILocation(line: 2492, column: 8, scope: !6882)
!6895 = !DILocalVariable(name: "storage_type", scope: !6882, file: !384, line: 2493, type: !101)
!6896 = !DILocation(line: 2493, column: 7, scope: !6882)
!6897 = !DILocation(line: 2495, column: 40, scope: !6882)
!6898 = !DILocation(line: 2495, column: 18, scope: !6882)
!6899 = !DILocation(line: 2495, column: 16, scope: !6882)
!6900 = !DILocation(line: 2496, column: 8, scope: !6901)
!6901 = distinct !DILexicalBlock(scope: !6882, file: !384, line: 2496, column: 7)
!6902 = !DILocation(line: 2496, column: 21, scope: !6901)
!6903 = !DILocation(line: 2496, column: 46, scope: !6901)
!6904 = !DILocation(line: 2496, column: 50, scope: !6901)
!6905 = !DILocation(line: 2496, column: 57, scope: !6901)
!6906 = !DILocation(line: 2496, column: 7, scope: !6882)
!6907 = !DILocation(line: 2496, column: 67, scope: !6901)
!6908 = !DILocation(line: 2498, column: 14, scope: !6882)
!6909 = !DILocation(line: 2498, column: 22, scope: !6882)
!6910 = !DILocation(line: 2498, column: 3, scope: !6882)
!6911 = !DILocation(line: 2500, column: 26, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6882, file: !384, line: 2500, column: 7)
!6913 = !DILocation(line: 2500, column: 31, scope: !6912)
!6914 = !DILocation(line: 2500, column: 7, scope: !6912)
!6915 = !DILocation(line: 2500, column: 43, scope: !6912)
!6916 = !DILocation(line: 2500, column: 7, scope: !6882)
!6917 = !DILocation(line: 2500, column: 53, scope: !6912)
!6918 = !DILocation(line: 2502, column: 24, scope: !6919)
!6919 = distinct !DILexicalBlock(scope: !6882, file: !384, line: 2502, column: 7)
!6920 = !DILocation(line: 2502, column: 29, scope: !6919)
!6921 = !DILocation(line: 2502, column: 43, scope: !6919)
!6922 = !DILocation(line: 2502, column: 49, scope: !6919)
!6923 = !DILocation(line: 2502, column: 55, scope: !6919)
!6924 = !DILocation(line: 2502, column: 7, scope: !6919)
!6925 = !DILocation(line: 2502, column: 69, scope: !6919)
!6926 = !DILocation(line: 2502, column: 7, scope: !6882)
!6927 = !DILocation(line: 2502, column: 79, scope: !6919)
!6928 = !DILocation(line: 2504, column: 7, scope: !6929)
!6929 = distinct !DILexicalBlock(scope: !6882, file: !384, line: 2504, column: 7)
!6930 = !DILocation(line: 2504, column: 7, scope: !6882)
!6931 = !DILocation(line: 2504, column: 29, scope: !6929)
!6932 = !DILocation(line: 2504, column: 15, scope: !6929)
!6933 = !DILocation(line: 2504, column: 21, scope: !6929)
!6934 = !DILocation(line: 2504, column: 14, scope: !6929)
!6935 = !DILocation(line: 2506, column: 3, scope: !6882)
!6936 = !DILocation(line: 2508, column: 1, scope: !6882)
!6937 = distinct !DISubprogram(name: "binn_object_get", scope: !384, file: !384, line: 2514, type: !6938, scopeLine: 2514, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6938 = !DISubroutineType(types: !6939)
!6939 = !{!393, !82, !103, !101, !82, !440}
!6940 = !DILocalVariable(name: "ptr", arg: 1, scope: !6937, file: !384, line: 2514, type: !82)
!6941 = !DILocation(line: 2514, column: 37, scope: !6937)
!6942 = !DILocalVariable(name: "key", arg: 2, scope: !6937, file: !384, line: 2514, type: !103)
!6943 = !DILocation(line: 2514, column: 48, scope: !6937)
!6944 = !DILocalVariable(name: "type", arg: 3, scope: !6937, file: !384, line: 2514, type: !101)
!6945 = !DILocation(line: 2514, column: 57, scope: !6937)
!6946 = !DILocalVariable(name: "pvalue", arg: 4, scope: !6937, file: !384, line: 2514, type: !82)
!6947 = !DILocation(line: 2514, column: 69, scope: !6937)
!6948 = !DILocalVariable(name: "psize", arg: 5, scope: !6937, file: !384, line: 2514, type: !440)
!6949 = !DILocation(line: 2514, column: 82, scope: !6937)
!6950 = !DILocalVariable(name: "value", scope: !6937, file: !384, line: 2515, type: !387)
!6951 = !DILocation(line: 2515, column: 8, scope: !6937)
!6952 = !DILocalVariable(name: "storage_type", scope: !6937, file: !384, line: 2516, type: !101)
!6953 = !DILocation(line: 2516, column: 7, scope: !6937)
!6954 = !DILocation(line: 2518, column: 40, scope: !6937)
!6955 = !DILocation(line: 2518, column: 18, scope: !6937)
!6956 = !DILocation(line: 2518, column: 16, scope: !6937)
!6957 = !DILocation(line: 2519, column: 8, scope: !6958)
!6958 = distinct !DILexicalBlock(scope: !6937, file: !384, line: 2519, column: 7)
!6959 = !DILocation(line: 2519, column: 21, scope: !6958)
!6960 = !DILocation(line: 2519, column: 46, scope: !6958)
!6961 = !DILocation(line: 2519, column: 50, scope: !6958)
!6962 = !DILocation(line: 2519, column: 57, scope: !6958)
!6963 = !DILocation(line: 2519, column: 7, scope: !6937)
!6964 = !DILocation(line: 2519, column: 67, scope: !6958)
!6965 = !DILocation(line: 2521, column: 14, scope: !6937)
!6966 = !DILocation(line: 2521, column: 22, scope: !6937)
!6967 = !DILocation(line: 2521, column: 3, scope: !6937)
!6968 = !DILocation(line: 2523, column: 29, scope: !6969)
!6969 = distinct !DILexicalBlock(scope: !6937, file: !384, line: 2523, column: 7)
!6970 = !DILocation(line: 2523, column: 34, scope: !6969)
!6971 = !DILocation(line: 2523, column: 7, scope: !6969)
!6972 = !DILocation(line: 2523, column: 47, scope: !6969)
!6973 = !DILocation(line: 2523, column: 7, scope: !6937)
!6974 = !DILocation(line: 2523, column: 57, scope: !6969)
!6975 = !DILocation(line: 2525, column: 24, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6937, file: !384, line: 2525, column: 7)
!6977 = !DILocation(line: 2525, column: 29, scope: !6976)
!6978 = !DILocation(line: 2525, column: 43, scope: !6976)
!6979 = !DILocation(line: 2525, column: 49, scope: !6976)
!6980 = !DILocation(line: 2525, column: 55, scope: !6976)
!6981 = !DILocation(line: 2525, column: 7, scope: !6976)
!6982 = !DILocation(line: 2525, column: 69, scope: !6976)
!6983 = !DILocation(line: 2525, column: 7, scope: !6937)
!6984 = !DILocation(line: 2525, column: 79, scope: !6976)
!6985 = !DILocation(line: 2527, column: 7, scope: !6986)
!6986 = distinct !DILexicalBlock(scope: !6937, file: !384, line: 2527, column: 7)
!6987 = !DILocation(line: 2527, column: 7, scope: !6937)
!6988 = !DILocation(line: 2527, column: 29, scope: !6986)
!6989 = !DILocation(line: 2527, column: 15, scope: !6986)
!6990 = !DILocation(line: 2527, column: 21, scope: !6986)
!6991 = !DILocation(line: 2527, column: 14, scope: !6986)
!6992 = !DILocation(line: 2529, column: 3, scope: !6937)
!6993 = !DILocation(line: 2531, column: 1, scope: !6937)
!6994 = distinct !DISubprogram(name: "binn_list_int8", scope: !384, file: !384, line: 2543, type: !6995, scopeLine: 2543, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!6995 = !DISubroutineType(types: !6996)
!6996 = !{!413, !82, !101}
!6997 = !DILocalVariable(name: "list", arg: 1, scope: !6994, file: !384, line: 2543, type: !82)
!6998 = !DILocation(line: 2543, column: 43, scope: !6994)
!6999 = !DILocalVariable(name: "pos", arg: 2, scope: !6994, file: !384, line: 2543, type: !101)
!7000 = !DILocation(line: 2543, column: 53, scope: !6994)
!7001 = !DILocalVariable(name: "value", scope: !6994, file: !384, line: 2544, type: !413)
!7002 = !DILocation(line: 2544, column: 15, scope: !6994)
!7003 = !DILocation(line: 2546, column: 17, scope: !6994)
!7004 = !DILocation(line: 2546, column: 23, scope: !6994)
!7005 = !DILocation(line: 2546, column: 3, scope: !6994)
!7006 = !DILocation(line: 2548, column: 10, scope: !6994)
!7007 = !DILocation(line: 2548, column: 3, scope: !6994)
!7008 = distinct !DISubprogram(name: "binn_list_int16", scope: !384, file: !384, line: 2551, type: !7009, scopeLine: 2551, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7009 = !DISubroutineType(types: !7010)
!7010 = !{!415, !82, !101}
!7011 = !DILocalVariable(name: "list", arg: 1, scope: !7008, file: !384, line: 2551, type: !82)
!7012 = !DILocation(line: 2551, column: 38, scope: !7008)
!7013 = !DILocalVariable(name: "pos", arg: 2, scope: !7008, file: !384, line: 2551, type: !101)
!7014 = !DILocation(line: 2551, column: 48, scope: !7008)
!7015 = !DILocalVariable(name: "value", scope: !7008, file: !384, line: 2552, type: !415)
!7016 = !DILocation(line: 2552, column: 9, scope: !7008)
!7017 = !DILocation(line: 2554, column: 17, scope: !7008)
!7018 = !DILocation(line: 2554, column: 23, scope: !7008)
!7019 = !DILocation(line: 2554, column: 40, scope: !7008)
!7020 = !DILocation(line: 2554, column: 3, scope: !7008)
!7021 = !DILocation(line: 2556, column: 10, scope: !7008)
!7022 = !DILocation(line: 2556, column: 3, scope: !7008)
!7023 = distinct !DISubprogram(name: "binn_list_int32", scope: !384, file: !384, line: 2559, type: !7024, scopeLine: 2559, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7024 = !DISubroutineType(types: !7025)
!7025 = !{!101, !82, !101}
!7026 = !DILocalVariable(name: "list", arg: 1, scope: !7023, file: !384, line: 2559, type: !82)
!7027 = !DILocation(line: 2559, column: 36, scope: !7023)
!7028 = !DILocalVariable(name: "pos", arg: 2, scope: !7023, file: !384, line: 2559, type: !101)
!7029 = !DILocation(line: 2559, column: 46, scope: !7023)
!7030 = !DILocalVariable(name: "value", scope: !7023, file: !384, line: 2560, type: !101)
!7031 = !DILocation(line: 2560, column: 7, scope: !7023)
!7032 = !DILocation(line: 2562, column: 17, scope: !7023)
!7033 = !DILocation(line: 2562, column: 23, scope: !7023)
!7034 = !DILocation(line: 2562, column: 40, scope: !7023)
!7035 = !DILocation(line: 2562, column: 3, scope: !7023)
!7036 = !DILocation(line: 2564, column: 10, scope: !7023)
!7037 = !DILocation(line: 2564, column: 3, scope: !7023)
!7038 = distinct !DISubprogram(name: "binn_list_int64", scope: !384, file: !384, line: 2567, type: !7039, scopeLine: 2567, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7039 = !DISubroutineType(types: !7040)
!7040 = !{!418, !82, !101}
!7041 = !DILocalVariable(name: "list", arg: 1, scope: !7038, file: !384, line: 2567, type: !82)
!7042 = !DILocation(line: 2567, column: 38, scope: !7038)
!7043 = !DILocalVariable(name: "pos", arg: 2, scope: !7038, file: !384, line: 2567, type: !101)
!7044 = !DILocation(line: 2567, column: 48, scope: !7038)
!7045 = !DILocalVariable(name: "value", scope: !7038, file: !384, line: 2568, type: !418)
!7046 = !DILocation(line: 2568, column: 9, scope: !7038)
!7047 = !DILocation(line: 2570, column: 17, scope: !7038)
!7048 = !DILocation(line: 2570, column: 23, scope: !7038)
!7049 = !DILocation(line: 2570, column: 40, scope: !7038)
!7050 = !DILocation(line: 2570, column: 3, scope: !7038)
!7051 = !DILocation(line: 2572, column: 10, scope: !7038)
!7052 = !DILocation(line: 2572, column: 3, scope: !7038)
!7053 = distinct !DISubprogram(name: "binn_list_uint8", scope: !384, file: !384, line: 2575, type: !7054, scopeLine: 2575, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7054 = !DISubroutineType(types: !7055)
!7055 = !{!153, !82, !101}
!7056 = !DILocalVariable(name: "list", arg: 1, scope: !7053, file: !384, line: 2575, type: !82)
!7057 = !DILocation(line: 2575, column: 46, scope: !7053)
!7058 = !DILocalVariable(name: "pos", arg: 2, scope: !7053, file: !384, line: 2575, type: !101)
!7059 = !DILocation(line: 2575, column: 56, scope: !7053)
!7060 = !DILocalVariable(name: "value", scope: !7053, file: !384, line: 2576, type: !153)
!7061 = !DILocation(line: 2576, column: 17, scope: !7053)
!7062 = !DILocation(line: 2578, column: 17, scope: !7053)
!7063 = !DILocation(line: 2578, column: 23, scope: !7053)
!7064 = !DILocation(line: 2578, column: 3, scope: !7053)
!7065 = !DILocation(line: 2580, column: 10, scope: !7053)
!7066 = !DILocation(line: 2580, column: 3, scope: !7053)
!7067 = distinct !DISubprogram(name: "binn_list_uint16", scope: !384, file: !384, line: 2583, type: !7068, scopeLine: 2583, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7068 = !DISubroutineType(types: !7069)
!7069 = !{!169, !82, !101}
!7070 = !DILocalVariable(name: "list", arg: 1, scope: !7067, file: !384, line: 2583, type: !82)
!7071 = !DILocation(line: 2583, column: 48, scope: !7067)
!7072 = !DILocalVariable(name: "pos", arg: 2, scope: !7067, file: !384, line: 2583, type: !101)
!7073 = !DILocation(line: 2583, column: 58, scope: !7067)
!7074 = !DILocalVariable(name: "value", scope: !7067, file: !384, line: 2584, type: !169)
!7075 = !DILocation(line: 2584, column: 18, scope: !7067)
!7076 = !DILocation(line: 2586, column: 17, scope: !7067)
!7077 = !DILocation(line: 2586, column: 23, scope: !7067)
!7078 = !DILocation(line: 2586, column: 41, scope: !7067)
!7079 = !DILocation(line: 2586, column: 3, scope: !7067)
!7080 = !DILocation(line: 2588, column: 10, scope: !7067)
!7081 = !DILocation(line: 2588, column: 3, scope: !7067)
!7082 = distinct !DISubprogram(name: "binn_list_uint32", scope: !384, file: !384, line: 2591, type: !7083, scopeLine: 2591, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7083 = !DISubroutineType(types: !7084)
!7084 = !{!7, !82, !101}
!7085 = !DILocalVariable(name: "list", arg: 1, scope: !7082, file: !384, line: 2591, type: !82)
!7086 = !DILocation(line: 2591, column: 46, scope: !7082)
!7087 = !DILocalVariable(name: "pos", arg: 2, scope: !7082, file: !384, line: 2591, type: !101)
!7088 = !DILocation(line: 2591, column: 56, scope: !7082)
!7089 = !DILocalVariable(name: "value", scope: !7082, file: !384, line: 2592, type: !7)
!7090 = !DILocation(line: 2592, column: 16, scope: !7082)
!7091 = !DILocation(line: 2594, column: 17, scope: !7082)
!7092 = !DILocation(line: 2594, column: 23, scope: !7082)
!7093 = !DILocation(line: 2594, column: 41, scope: !7082)
!7094 = !DILocation(line: 2594, column: 3, scope: !7082)
!7095 = !DILocation(line: 2596, column: 10, scope: !7082)
!7096 = !DILocation(line: 2596, column: 3, scope: !7082)
!7097 = distinct !DISubprogram(name: "binn_list_uint64", scope: !384, file: !384, line: 2599, type: !7098, scopeLine: 2599, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7098 = !DISubroutineType(types: !7099)
!7099 = !{!424, !82, !101}
!7100 = !DILocalVariable(name: "list", arg: 1, scope: !7097, file: !384, line: 2599, type: !82)
!7101 = !DILocation(line: 2599, column: 40, scope: !7097)
!7102 = !DILocalVariable(name: "pos", arg: 2, scope: !7097, file: !384, line: 2599, type: !101)
!7103 = !DILocation(line: 2599, column: 50, scope: !7097)
!7104 = !DILocalVariable(name: "value", scope: !7097, file: !384, line: 2600, type: !424)
!7105 = !DILocation(line: 2600, column: 10, scope: !7097)
!7106 = !DILocation(line: 2602, column: 17, scope: !7097)
!7107 = !DILocation(line: 2602, column: 23, scope: !7097)
!7108 = !DILocation(line: 2602, column: 41, scope: !7097)
!7109 = !DILocation(line: 2602, column: 3, scope: !7097)
!7110 = !DILocation(line: 2604, column: 10, scope: !7097)
!7111 = !DILocation(line: 2604, column: 3, scope: !7097)
!7112 = distinct !DISubprogram(name: "binn_list_float", scope: !384, file: !384, line: 2607, type: !7113, scopeLine: 2607, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7113 = !DISubroutineType(types: !7114)
!7114 = !{!433, !82, !101}
!7115 = !DILocalVariable(name: "list", arg: 1, scope: !7112, file: !384, line: 2607, type: !82)
!7116 = !DILocation(line: 2607, column: 38, scope: !7112)
!7117 = !DILocalVariable(name: "pos", arg: 2, scope: !7112, file: !384, line: 2607, type: !101)
!7118 = !DILocation(line: 2607, column: 48, scope: !7112)
!7119 = !DILocalVariable(name: "value", scope: !7112, file: !384, line: 2608, type: !433)
!7120 = !DILocation(line: 2608, column: 9, scope: !7112)
!7121 = !DILocation(line: 2610, column: 17, scope: !7112)
!7122 = !DILocation(line: 2610, column: 23, scope: !7112)
!7123 = !DILocation(line: 2610, column: 42, scope: !7112)
!7124 = !DILocation(line: 2610, column: 3, scope: !7112)
!7125 = !DILocation(line: 2612, column: 10, scope: !7112)
!7126 = !DILocation(line: 2612, column: 3, scope: !7112)
!7127 = distinct !DISubprogram(name: "binn_list_double", scope: !384, file: !384, line: 2615, type: !7128, scopeLine: 2615, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7128 = !DISubroutineType(types: !7129)
!7129 = !{!435, !82, !101}
!7130 = !DILocalVariable(name: "list", arg: 1, scope: !7127, file: !384, line: 2615, type: !82)
!7131 = !DILocation(line: 2615, column: 40, scope: !7127)
!7132 = !DILocalVariable(name: "pos", arg: 2, scope: !7127, file: !384, line: 2615, type: !101)
!7133 = !DILocation(line: 2615, column: 50, scope: !7127)
!7134 = !DILocalVariable(name: "value", scope: !7127, file: !384, line: 2616, type: !435)
!7135 = !DILocation(line: 2616, column: 10, scope: !7127)
!7136 = !DILocation(line: 2618, column: 17, scope: !7127)
!7137 = !DILocation(line: 2618, column: 23, scope: !7127)
!7138 = !DILocation(line: 2618, column: 42, scope: !7127)
!7139 = !DILocation(line: 2618, column: 3, scope: !7127)
!7140 = !DILocation(line: 2620, column: 10, scope: !7127)
!7141 = !DILocation(line: 2620, column: 3, scope: !7127)
!7142 = distinct !DISubprogram(name: "binn_list_bool", scope: !384, file: !384, line: 2623, type: !7143, scopeLine: 2623, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7143 = !DISubroutineType(types: !7144)
!7144 = !{!393, !82, !101}
!7145 = !DILocalVariable(name: "list", arg: 1, scope: !7142, file: !384, line: 2623, type: !82)
!7146 = !DILocation(line: 2623, column: 36, scope: !7142)
!7147 = !DILocalVariable(name: "pos", arg: 2, scope: !7142, file: !384, line: 2623, type: !101)
!7148 = !DILocation(line: 2623, column: 46, scope: !7142)
!7149 = !DILocalVariable(name: "value", scope: !7142, file: !384, line: 2624, type: !393)
!7150 = !DILocation(line: 2624, column: 8, scope: !7142)
!7151 = !DILocation(line: 2626, column: 17, scope: !7142)
!7152 = !DILocation(line: 2626, column: 23, scope: !7142)
!7153 = !DILocation(line: 2626, column: 39, scope: !7142)
!7154 = !DILocation(line: 2626, column: 3, scope: !7142)
!7155 = !DILocation(line: 2628, column: 10, scope: !7142)
!7156 = !DILocation(line: 2628, column: 3, scope: !7142)
!7157 = distinct !DISubprogram(name: "binn_list_null", scope: !384, file: !384, line: 2631, type: !7143, scopeLine: 2631, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7158 = !DILocalVariable(name: "list", arg: 1, scope: !7157, file: !384, line: 2631, type: !82)
!7159 = !DILocation(line: 2631, column: 36, scope: !7157)
!7160 = !DILocalVariable(name: "pos", arg: 2, scope: !7157, file: !384, line: 2631, type: !101)
!7161 = !DILocation(line: 2631, column: 46, scope: !7157)
!7162 = !DILocation(line: 2633, column: 24, scope: !7157)
!7163 = !DILocation(line: 2633, column: 30, scope: !7157)
!7164 = !DILocation(line: 2633, column: 10, scope: !7157)
!7165 = !DILocation(line: 2633, column: 3, scope: !7157)
!7166 = distinct !DISubprogram(name: "binn_list_str", scope: !384, file: !384, line: 2637, type: !7167, scopeLine: 2637, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7167 = !DISubroutineType(types: !7168)
!7168 = !{!103, !82, !101}
!7169 = !DILocalVariable(name: "list", arg: 1, scope: !7166, file: !384, line: 2637, type: !82)
!7170 = !DILocation(line: 2637, column: 37, scope: !7166)
!7171 = !DILocalVariable(name: "pos", arg: 2, scope: !7166, file: !384, line: 2637, type: !101)
!7172 = !DILocation(line: 2637, column: 47, scope: !7166)
!7173 = !DILocalVariable(name: "value", scope: !7166, file: !384, line: 2638, type: !103)
!7174 = !DILocation(line: 2638, column: 9, scope: !7166)
!7175 = !DILocation(line: 2640, column: 17, scope: !7166)
!7176 = !DILocation(line: 2640, column: 23, scope: !7166)
!7177 = !DILocation(line: 2640, column: 41, scope: !7166)
!7178 = !DILocation(line: 2640, column: 3, scope: !7166)
!7179 = !DILocation(line: 2642, column: 10, scope: !7166)
!7180 = !DILocation(line: 2642, column: 3, scope: !7166)
!7181 = distinct !DISubprogram(name: "binn_list_blob", scope: !384, file: !384, line: 2645, type: !7182, scopeLine: 2645, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7182 = !DISubroutineType(types: !7183)
!7183 = !{!82, !82, !101, !440}
!7184 = !DILocalVariable(name: "list", arg: 1, scope: !7181, file: !384, line: 2645, type: !82)
!7185 = !DILocation(line: 2645, column: 38, scope: !7181)
!7186 = !DILocalVariable(name: "pos", arg: 2, scope: !7181, file: !384, line: 2645, type: !101)
!7187 = !DILocation(line: 2645, column: 48, scope: !7181)
!7188 = !DILocalVariable(name: "psize", arg: 3, scope: !7181, file: !384, line: 2645, type: !440)
!7189 = !DILocation(line: 2645, column: 58, scope: !7181)
!7190 = !DILocalVariable(name: "value", scope: !7181, file: !384, line: 2646, type: !82)
!7191 = !DILocation(line: 2646, column: 9, scope: !7181)
!7192 = !DILocation(line: 2648, column: 17, scope: !7181)
!7193 = !DILocation(line: 2648, column: 23, scope: !7181)
!7194 = !DILocation(line: 2648, column: 39, scope: !7181)
!7195 = !DILocation(line: 2648, column: 47, scope: !7181)
!7196 = !DILocation(line: 2648, column: 3, scope: !7181)
!7197 = !DILocation(line: 2650, column: 10, scope: !7181)
!7198 = !DILocation(line: 2650, column: 3, scope: !7181)
!7199 = distinct !DISubprogram(name: "binn_list_list", scope: !384, file: !384, line: 2653, type: !7200, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7200 = !DISubroutineType(types: !7201)
!7201 = !{!82, !82, !101}
!7202 = !DILocalVariable(name: "list", arg: 1, scope: !7199, file: !384, line: 2653, type: !82)
!7203 = !DILocation(line: 2653, column: 38, scope: !7199)
!7204 = !DILocalVariable(name: "pos", arg: 2, scope: !7199, file: !384, line: 2653, type: !101)
!7205 = !DILocation(line: 2653, column: 48, scope: !7199)
!7206 = !DILocalVariable(name: "value", scope: !7199, file: !384, line: 2654, type: !82)
!7207 = !DILocation(line: 2654, column: 9, scope: !7199)
!7208 = !DILocation(line: 2656, column: 17, scope: !7199)
!7209 = !DILocation(line: 2656, column: 23, scope: !7199)
!7210 = !DILocation(line: 2656, column: 39, scope: !7199)
!7211 = !DILocation(line: 2656, column: 3, scope: !7199)
!7212 = !DILocation(line: 2658, column: 10, scope: !7199)
!7213 = !DILocation(line: 2658, column: 3, scope: !7199)
!7214 = distinct !DISubprogram(name: "binn_list_map", scope: !384, file: !384, line: 2661, type: !7200, scopeLine: 2661, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7215 = !DILocalVariable(name: "list", arg: 1, scope: !7214, file: !384, line: 2661, type: !82)
!7216 = !DILocation(line: 2661, column: 37, scope: !7214)
!7217 = !DILocalVariable(name: "pos", arg: 2, scope: !7214, file: !384, line: 2661, type: !101)
!7218 = !DILocation(line: 2661, column: 47, scope: !7214)
!7219 = !DILocalVariable(name: "value", scope: !7214, file: !384, line: 2662, type: !82)
!7220 = !DILocation(line: 2662, column: 9, scope: !7214)
!7221 = !DILocation(line: 2664, column: 17, scope: !7214)
!7222 = !DILocation(line: 2664, column: 23, scope: !7214)
!7223 = !DILocation(line: 2664, column: 38, scope: !7214)
!7224 = !DILocation(line: 2664, column: 3, scope: !7214)
!7225 = !DILocation(line: 2666, column: 10, scope: !7214)
!7226 = !DILocation(line: 2666, column: 3, scope: !7214)
!7227 = distinct !DISubprogram(name: "binn_list_object", scope: !384, file: !384, line: 2669, type: !7200, scopeLine: 2669, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7228 = !DILocalVariable(name: "list", arg: 1, scope: !7227, file: !384, line: 2669, type: !82)
!7229 = !DILocation(line: 2669, column: 40, scope: !7227)
!7230 = !DILocalVariable(name: "pos", arg: 2, scope: !7227, file: !384, line: 2669, type: !101)
!7231 = !DILocation(line: 2669, column: 50, scope: !7227)
!7232 = !DILocalVariable(name: "value", scope: !7227, file: !384, line: 2670, type: !82)
!7233 = !DILocation(line: 2670, column: 9, scope: !7227)
!7234 = !DILocation(line: 2672, column: 17, scope: !7227)
!7235 = !DILocation(line: 2672, column: 23, scope: !7227)
!7236 = !DILocation(line: 2672, column: 41, scope: !7227)
!7237 = !DILocation(line: 2672, column: 3, scope: !7227)
!7238 = !DILocation(line: 2674, column: 10, scope: !7227)
!7239 = !DILocation(line: 2674, column: 3, scope: !7227)
!7240 = distinct !DISubprogram(name: "binn_map_int8", scope: !384, file: !384, line: 2679, type: !6995, scopeLine: 2679, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7241 = !DILocalVariable(name: "map", arg: 1, scope: !7240, file: !384, line: 2679, type: !82)
!7242 = !DILocation(line: 2679, column: 42, scope: !7240)
!7243 = !DILocalVariable(name: "id", arg: 2, scope: !7240, file: !384, line: 2679, type: !101)
!7244 = !DILocation(line: 2679, column: 51, scope: !7240)
!7245 = !DILocalVariable(name: "value", scope: !7240, file: !384, line: 2680, type: !413)
!7246 = !DILocation(line: 2680, column: 15, scope: !7240)
!7247 = !DILocation(line: 2682, column: 16, scope: !7240)
!7248 = !DILocation(line: 2682, column: 21, scope: !7240)
!7249 = !DILocation(line: 2682, column: 3, scope: !7240)
!7250 = !DILocation(line: 2684, column: 10, scope: !7240)
!7251 = !DILocation(line: 2684, column: 3, scope: !7240)
!7252 = distinct !DISubprogram(name: "binn_map_int16", scope: !384, file: !384, line: 2687, type: !7009, scopeLine: 2687, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7253 = !DILocalVariable(name: "map", arg: 1, scope: !7252, file: !384, line: 2687, type: !82)
!7254 = !DILocation(line: 2687, column: 37, scope: !7252)
!7255 = !DILocalVariable(name: "id", arg: 2, scope: !7252, file: !384, line: 2687, type: !101)
!7256 = !DILocation(line: 2687, column: 46, scope: !7252)
!7257 = !DILocalVariable(name: "value", scope: !7252, file: !384, line: 2688, type: !415)
!7258 = !DILocation(line: 2688, column: 9, scope: !7252)
!7259 = !DILocation(line: 2690, column: 16, scope: !7252)
!7260 = !DILocation(line: 2690, column: 21, scope: !7252)
!7261 = !DILocation(line: 2690, column: 37, scope: !7252)
!7262 = !DILocation(line: 2690, column: 3, scope: !7252)
!7263 = !DILocation(line: 2692, column: 10, scope: !7252)
!7264 = !DILocation(line: 2692, column: 3, scope: !7252)
!7265 = distinct !DISubprogram(name: "binn_map_int32", scope: !384, file: !384, line: 2695, type: !7024, scopeLine: 2695, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7266 = !DILocalVariable(name: "map", arg: 1, scope: !7265, file: !384, line: 2695, type: !82)
!7267 = !DILocation(line: 2695, column: 35, scope: !7265)
!7268 = !DILocalVariable(name: "id", arg: 2, scope: !7265, file: !384, line: 2695, type: !101)
!7269 = !DILocation(line: 2695, column: 44, scope: !7265)
!7270 = !DILocalVariable(name: "value", scope: !7265, file: !384, line: 2696, type: !101)
!7271 = !DILocation(line: 2696, column: 7, scope: !7265)
!7272 = !DILocation(line: 2698, column: 16, scope: !7265)
!7273 = !DILocation(line: 2698, column: 21, scope: !7265)
!7274 = !DILocation(line: 2698, column: 37, scope: !7265)
!7275 = !DILocation(line: 2698, column: 3, scope: !7265)
!7276 = !DILocation(line: 2700, column: 10, scope: !7265)
!7277 = !DILocation(line: 2700, column: 3, scope: !7265)
!7278 = distinct !DISubprogram(name: "binn_map_int64", scope: !384, file: !384, line: 2703, type: !7039, scopeLine: 2703, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7279 = !DILocalVariable(name: "map", arg: 1, scope: !7278, file: !384, line: 2703, type: !82)
!7280 = !DILocation(line: 2703, column: 37, scope: !7278)
!7281 = !DILocalVariable(name: "id", arg: 2, scope: !7278, file: !384, line: 2703, type: !101)
!7282 = !DILocation(line: 2703, column: 46, scope: !7278)
!7283 = !DILocalVariable(name: "value", scope: !7278, file: !384, line: 2704, type: !418)
!7284 = !DILocation(line: 2704, column: 9, scope: !7278)
!7285 = !DILocation(line: 2706, column: 16, scope: !7278)
!7286 = !DILocation(line: 2706, column: 21, scope: !7278)
!7287 = !DILocation(line: 2706, column: 37, scope: !7278)
!7288 = !DILocation(line: 2706, column: 3, scope: !7278)
!7289 = !DILocation(line: 2708, column: 10, scope: !7278)
!7290 = !DILocation(line: 2708, column: 3, scope: !7278)
!7291 = distinct !DISubprogram(name: "binn_map_uint8", scope: !384, file: !384, line: 2711, type: !7054, scopeLine: 2711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7292 = !DILocalVariable(name: "map", arg: 1, scope: !7291, file: !384, line: 2711, type: !82)
!7293 = !DILocation(line: 2711, column: 45, scope: !7291)
!7294 = !DILocalVariable(name: "id", arg: 2, scope: !7291, file: !384, line: 2711, type: !101)
!7295 = !DILocation(line: 2711, column: 54, scope: !7291)
!7296 = !DILocalVariable(name: "value", scope: !7291, file: !384, line: 2712, type: !153)
!7297 = !DILocation(line: 2712, column: 17, scope: !7291)
!7298 = !DILocation(line: 2714, column: 16, scope: !7291)
!7299 = !DILocation(line: 2714, column: 21, scope: !7291)
!7300 = !DILocation(line: 2714, column: 3, scope: !7291)
!7301 = !DILocation(line: 2716, column: 10, scope: !7291)
!7302 = !DILocation(line: 2716, column: 3, scope: !7291)
!7303 = distinct !DISubprogram(name: "binn_map_uint16", scope: !384, file: !384, line: 2719, type: !7068, scopeLine: 2719, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7304 = !DILocalVariable(name: "map", arg: 1, scope: !7303, file: !384, line: 2719, type: !82)
!7305 = !DILocation(line: 2719, column: 47, scope: !7303)
!7306 = !DILocalVariable(name: "id", arg: 2, scope: !7303, file: !384, line: 2719, type: !101)
!7307 = !DILocation(line: 2719, column: 56, scope: !7303)
!7308 = !DILocalVariable(name: "value", scope: !7303, file: !384, line: 2720, type: !169)
!7309 = !DILocation(line: 2720, column: 18, scope: !7303)
!7310 = !DILocation(line: 2722, column: 16, scope: !7303)
!7311 = !DILocation(line: 2722, column: 21, scope: !7303)
!7312 = !DILocation(line: 2722, column: 38, scope: !7303)
!7313 = !DILocation(line: 2722, column: 3, scope: !7303)
!7314 = !DILocation(line: 2724, column: 10, scope: !7303)
!7315 = !DILocation(line: 2724, column: 3, scope: !7303)
!7316 = distinct !DISubprogram(name: "binn_map_uint32", scope: !384, file: !384, line: 2727, type: !7083, scopeLine: 2727, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7317 = !DILocalVariable(name: "map", arg: 1, scope: !7316, file: !384, line: 2727, type: !82)
!7318 = !DILocation(line: 2727, column: 45, scope: !7316)
!7319 = !DILocalVariable(name: "id", arg: 2, scope: !7316, file: !384, line: 2727, type: !101)
!7320 = !DILocation(line: 2727, column: 54, scope: !7316)
!7321 = !DILocalVariable(name: "value", scope: !7316, file: !384, line: 2728, type: !7)
!7322 = !DILocation(line: 2728, column: 16, scope: !7316)
!7323 = !DILocation(line: 2730, column: 16, scope: !7316)
!7324 = !DILocation(line: 2730, column: 21, scope: !7316)
!7325 = !DILocation(line: 2730, column: 38, scope: !7316)
!7326 = !DILocation(line: 2730, column: 3, scope: !7316)
!7327 = !DILocation(line: 2732, column: 10, scope: !7316)
!7328 = !DILocation(line: 2732, column: 3, scope: !7316)
!7329 = distinct !DISubprogram(name: "binn_map_uint64", scope: !384, file: !384, line: 2735, type: !7098, scopeLine: 2735, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7330 = !DILocalVariable(name: "map", arg: 1, scope: !7329, file: !384, line: 2735, type: !82)
!7331 = !DILocation(line: 2735, column: 39, scope: !7329)
!7332 = !DILocalVariable(name: "id", arg: 2, scope: !7329, file: !384, line: 2735, type: !101)
!7333 = !DILocation(line: 2735, column: 48, scope: !7329)
!7334 = !DILocalVariable(name: "value", scope: !7329, file: !384, line: 2736, type: !424)
!7335 = !DILocation(line: 2736, column: 10, scope: !7329)
!7336 = !DILocation(line: 2738, column: 16, scope: !7329)
!7337 = !DILocation(line: 2738, column: 21, scope: !7329)
!7338 = !DILocation(line: 2738, column: 38, scope: !7329)
!7339 = !DILocation(line: 2738, column: 3, scope: !7329)
!7340 = !DILocation(line: 2740, column: 10, scope: !7329)
!7341 = !DILocation(line: 2740, column: 3, scope: !7329)
!7342 = distinct !DISubprogram(name: "binn_map_float", scope: !384, file: !384, line: 2743, type: !7113, scopeLine: 2743, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7343 = !DILocalVariable(name: "map", arg: 1, scope: !7342, file: !384, line: 2743, type: !82)
!7344 = !DILocation(line: 2743, column: 37, scope: !7342)
!7345 = !DILocalVariable(name: "id", arg: 2, scope: !7342, file: !384, line: 2743, type: !101)
!7346 = !DILocation(line: 2743, column: 46, scope: !7342)
!7347 = !DILocalVariable(name: "value", scope: !7342, file: !384, line: 2744, type: !433)
!7348 = !DILocation(line: 2744, column: 9, scope: !7342)
!7349 = !DILocation(line: 2746, column: 16, scope: !7342)
!7350 = !DILocation(line: 2746, column: 21, scope: !7342)
!7351 = !DILocation(line: 2746, column: 39, scope: !7342)
!7352 = !DILocation(line: 2746, column: 3, scope: !7342)
!7353 = !DILocation(line: 2748, column: 10, scope: !7342)
!7354 = !DILocation(line: 2748, column: 3, scope: !7342)
!7355 = distinct !DISubprogram(name: "binn_map_double", scope: !384, file: !384, line: 2751, type: !7128, scopeLine: 2751, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7356 = !DILocalVariable(name: "map", arg: 1, scope: !7355, file: !384, line: 2751, type: !82)
!7357 = !DILocation(line: 2751, column: 39, scope: !7355)
!7358 = !DILocalVariable(name: "id", arg: 2, scope: !7355, file: !384, line: 2751, type: !101)
!7359 = !DILocation(line: 2751, column: 48, scope: !7355)
!7360 = !DILocalVariable(name: "value", scope: !7355, file: !384, line: 2752, type: !435)
!7361 = !DILocation(line: 2752, column: 10, scope: !7355)
!7362 = !DILocation(line: 2754, column: 16, scope: !7355)
!7363 = !DILocation(line: 2754, column: 21, scope: !7355)
!7364 = !DILocation(line: 2754, column: 39, scope: !7355)
!7365 = !DILocation(line: 2754, column: 3, scope: !7355)
!7366 = !DILocation(line: 2756, column: 10, scope: !7355)
!7367 = !DILocation(line: 2756, column: 3, scope: !7355)
!7368 = distinct !DISubprogram(name: "binn_map_bool", scope: !384, file: !384, line: 2759, type: !7143, scopeLine: 2759, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7369 = !DILocalVariable(name: "map", arg: 1, scope: !7368, file: !384, line: 2759, type: !82)
!7370 = !DILocation(line: 2759, column: 35, scope: !7368)
!7371 = !DILocalVariable(name: "id", arg: 2, scope: !7368, file: !384, line: 2759, type: !101)
!7372 = !DILocation(line: 2759, column: 44, scope: !7368)
!7373 = !DILocalVariable(name: "value", scope: !7368, file: !384, line: 2760, type: !393)
!7374 = !DILocation(line: 2760, column: 8, scope: !7368)
!7375 = !DILocation(line: 2762, column: 16, scope: !7368)
!7376 = !DILocation(line: 2762, column: 21, scope: !7368)
!7377 = !DILocation(line: 2762, column: 36, scope: !7368)
!7378 = !DILocation(line: 2762, column: 3, scope: !7368)
!7379 = !DILocation(line: 2764, column: 10, scope: !7368)
!7380 = !DILocation(line: 2764, column: 3, scope: !7368)
!7381 = distinct !DISubprogram(name: "binn_map_null", scope: !384, file: !384, line: 2767, type: !7143, scopeLine: 2767, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7382 = !DILocalVariable(name: "map", arg: 1, scope: !7381, file: !384, line: 2767, type: !82)
!7383 = !DILocation(line: 2767, column: 35, scope: !7381)
!7384 = !DILocalVariable(name: "id", arg: 2, scope: !7381, file: !384, line: 2767, type: !101)
!7385 = !DILocation(line: 2767, column: 44, scope: !7381)
!7386 = !DILocation(line: 2769, column: 23, scope: !7381)
!7387 = !DILocation(line: 2769, column: 28, scope: !7381)
!7388 = !DILocation(line: 2769, column: 10, scope: !7381)
!7389 = !DILocation(line: 2769, column: 3, scope: !7381)
!7390 = distinct !DISubprogram(name: "binn_map_str", scope: !384, file: !384, line: 2773, type: !7167, scopeLine: 2773, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7391 = !DILocalVariable(name: "map", arg: 1, scope: !7390, file: !384, line: 2773, type: !82)
!7392 = !DILocation(line: 2773, column: 36, scope: !7390)
!7393 = !DILocalVariable(name: "id", arg: 2, scope: !7390, file: !384, line: 2773, type: !101)
!7394 = !DILocation(line: 2773, column: 45, scope: !7390)
!7395 = !DILocalVariable(name: "value", scope: !7390, file: !384, line: 2774, type: !103)
!7396 = !DILocation(line: 2774, column: 9, scope: !7390)
!7397 = !DILocation(line: 2776, column: 16, scope: !7390)
!7398 = !DILocation(line: 2776, column: 21, scope: !7390)
!7399 = !DILocation(line: 2776, column: 38, scope: !7390)
!7400 = !DILocation(line: 2776, column: 3, scope: !7390)
!7401 = !DILocation(line: 2778, column: 10, scope: !7390)
!7402 = !DILocation(line: 2778, column: 3, scope: !7390)
!7403 = distinct !DISubprogram(name: "binn_map_blob", scope: !384, file: !384, line: 2781, type: !7182, scopeLine: 2781, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7404 = !DILocalVariable(name: "map", arg: 1, scope: !7403, file: !384, line: 2781, type: !82)
!7405 = !DILocation(line: 2781, column: 37, scope: !7403)
!7406 = !DILocalVariable(name: "id", arg: 2, scope: !7403, file: !384, line: 2781, type: !101)
!7407 = !DILocation(line: 2781, column: 46, scope: !7403)
!7408 = !DILocalVariable(name: "psize", arg: 3, scope: !7403, file: !384, line: 2781, type: !440)
!7409 = !DILocation(line: 2781, column: 55, scope: !7403)
!7410 = !DILocalVariable(name: "value", scope: !7403, file: !384, line: 2782, type: !82)
!7411 = !DILocation(line: 2782, column: 9, scope: !7403)
!7412 = !DILocation(line: 2784, column: 16, scope: !7403)
!7413 = !DILocation(line: 2784, column: 21, scope: !7403)
!7414 = !DILocation(line: 2784, column: 36, scope: !7403)
!7415 = !DILocation(line: 2784, column: 44, scope: !7403)
!7416 = !DILocation(line: 2784, column: 3, scope: !7403)
!7417 = !DILocation(line: 2786, column: 10, scope: !7403)
!7418 = !DILocation(line: 2786, column: 3, scope: !7403)
!7419 = distinct !DISubprogram(name: "binn_map_list", scope: !384, file: !384, line: 2789, type: !7200, scopeLine: 2789, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7420 = !DILocalVariable(name: "map", arg: 1, scope: !7419, file: !384, line: 2789, type: !82)
!7421 = !DILocation(line: 2789, column: 37, scope: !7419)
!7422 = !DILocalVariable(name: "id", arg: 2, scope: !7419, file: !384, line: 2789, type: !101)
!7423 = !DILocation(line: 2789, column: 46, scope: !7419)
!7424 = !DILocalVariable(name: "value", scope: !7419, file: !384, line: 2790, type: !82)
!7425 = !DILocation(line: 2790, column: 9, scope: !7419)
!7426 = !DILocation(line: 2792, column: 16, scope: !7419)
!7427 = !DILocation(line: 2792, column: 21, scope: !7419)
!7428 = !DILocation(line: 2792, column: 36, scope: !7419)
!7429 = !DILocation(line: 2792, column: 3, scope: !7419)
!7430 = !DILocation(line: 2794, column: 10, scope: !7419)
!7431 = !DILocation(line: 2794, column: 3, scope: !7419)
!7432 = distinct !DISubprogram(name: "binn_map_map", scope: !384, file: !384, line: 2797, type: !7200, scopeLine: 2797, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7433 = !DILocalVariable(name: "map", arg: 1, scope: !7432, file: !384, line: 2797, type: !82)
!7434 = !DILocation(line: 2797, column: 36, scope: !7432)
!7435 = !DILocalVariable(name: "id", arg: 2, scope: !7432, file: !384, line: 2797, type: !101)
!7436 = !DILocation(line: 2797, column: 45, scope: !7432)
!7437 = !DILocalVariable(name: "value", scope: !7432, file: !384, line: 2798, type: !82)
!7438 = !DILocation(line: 2798, column: 9, scope: !7432)
!7439 = !DILocation(line: 2800, column: 16, scope: !7432)
!7440 = !DILocation(line: 2800, column: 21, scope: !7432)
!7441 = !DILocation(line: 2800, column: 35, scope: !7432)
!7442 = !DILocation(line: 2800, column: 3, scope: !7432)
!7443 = !DILocation(line: 2802, column: 10, scope: !7432)
!7444 = !DILocation(line: 2802, column: 3, scope: !7432)
!7445 = distinct !DISubprogram(name: "binn_map_object", scope: !384, file: !384, line: 2805, type: !7200, scopeLine: 2805, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7446 = !DILocalVariable(name: "map", arg: 1, scope: !7445, file: !384, line: 2805, type: !82)
!7447 = !DILocation(line: 2805, column: 39, scope: !7445)
!7448 = !DILocalVariable(name: "id", arg: 2, scope: !7445, file: !384, line: 2805, type: !101)
!7449 = !DILocation(line: 2805, column: 48, scope: !7445)
!7450 = !DILocalVariable(name: "value", scope: !7445, file: !384, line: 2806, type: !82)
!7451 = !DILocation(line: 2806, column: 9, scope: !7445)
!7452 = !DILocation(line: 2808, column: 16, scope: !7445)
!7453 = !DILocation(line: 2808, column: 21, scope: !7445)
!7454 = !DILocation(line: 2808, column: 38, scope: !7445)
!7455 = !DILocation(line: 2808, column: 3, scope: !7445)
!7456 = !DILocation(line: 2810, column: 10, scope: !7445)
!7457 = !DILocation(line: 2810, column: 3, scope: !7445)
!7458 = distinct !DISubprogram(name: "binn_object_int8", scope: !384, file: !384, line: 2815, type: !7459, scopeLine: 2815, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7459 = !DISubroutineType(types: !7460)
!7460 = !{!413, !82, !103}
!7461 = !DILocalVariable(name: "obj", arg: 1, scope: !7458, file: !384, line: 2815, type: !82)
!7462 = !DILocation(line: 2815, column: 45, scope: !7458)
!7463 = !DILocalVariable(name: "key", arg: 2, scope: !7458, file: !384, line: 2815, type: !103)
!7464 = !DILocation(line: 2815, column: 56, scope: !7458)
!7465 = !DILocalVariable(name: "value", scope: !7458, file: !384, line: 2816, type: !413)
!7466 = !DILocation(line: 2816, column: 15, scope: !7458)
!7467 = !DILocation(line: 2818, column: 19, scope: !7458)
!7468 = !DILocation(line: 2818, column: 24, scope: !7458)
!7469 = !DILocation(line: 2818, column: 3, scope: !7458)
!7470 = !DILocation(line: 2820, column: 10, scope: !7458)
!7471 = !DILocation(line: 2820, column: 3, scope: !7458)
!7472 = distinct !DISubprogram(name: "binn_object_int16", scope: !384, file: !384, line: 2823, type: !7473, scopeLine: 2823, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7473 = !DISubroutineType(types: !7474)
!7474 = !{!415, !82, !103}
!7475 = !DILocalVariable(name: "obj", arg: 1, scope: !7472, file: !384, line: 2823, type: !82)
!7476 = !DILocation(line: 2823, column: 40, scope: !7472)
!7477 = !DILocalVariable(name: "key", arg: 2, scope: !7472, file: !384, line: 2823, type: !103)
!7478 = !DILocation(line: 2823, column: 51, scope: !7472)
!7479 = !DILocalVariable(name: "value", scope: !7472, file: !384, line: 2824, type: !415)
!7480 = !DILocation(line: 2824, column: 9, scope: !7472)
!7481 = !DILocation(line: 2826, column: 19, scope: !7472)
!7482 = !DILocation(line: 2826, column: 24, scope: !7472)
!7483 = !DILocation(line: 2826, column: 41, scope: !7472)
!7484 = !DILocation(line: 2826, column: 3, scope: !7472)
!7485 = !DILocation(line: 2828, column: 10, scope: !7472)
!7486 = !DILocation(line: 2828, column: 3, scope: !7472)
!7487 = distinct !DISubprogram(name: "binn_object_int32", scope: !384, file: !384, line: 2831, type: !7488, scopeLine: 2831, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7488 = !DISubroutineType(types: !7489)
!7489 = !{!101, !82, !103}
!7490 = !DILocalVariable(name: "obj", arg: 1, scope: !7487, file: !384, line: 2831, type: !82)
!7491 = !DILocation(line: 2831, column: 38, scope: !7487)
!7492 = !DILocalVariable(name: "key", arg: 2, scope: !7487, file: !384, line: 2831, type: !103)
!7493 = !DILocation(line: 2831, column: 49, scope: !7487)
!7494 = !DILocalVariable(name: "value", scope: !7487, file: !384, line: 2832, type: !101)
!7495 = !DILocation(line: 2832, column: 7, scope: !7487)
!7496 = !DILocation(line: 2834, column: 19, scope: !7487)
!7497 = !DILocation(line: 2834, column: 24, scope: !7487)
!7498 = !DILocation(line: 2834, column: 41, scope: !7487)
!7499 = !DILocation(line: 2834, column: 3, scope: !7487)
!7500 = !DILocation(line: 2836, column: 10, scope: !7487)
!7501 = !DILocation(line: 2836, column: 3, scope: !7487)
!7502 = distinct !DISubprogram(name: "binn_object_int64", scope: !384, file: !384, line: 2839, type: !7503, scopeLine: 2839, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7503 = !DISubroutineType(types: !7504)
!7504 = !{!418, !82, !103}
!7505 = !DILocalVariable(name: "obj", arg: 1, scope: !7502, file: !384, line: 2839, type: !82)
!7506 = !DILocation(line: 2839, column: 40, scope: !7502)
!7507 = !DILocalVariable(name: "key", arg: 2, scope: !7502, file: !384, line: 2839, type: !103)
!7508 = !DILocation(line: 2839, column: 51, scope: !7502)
!7509 = !DILocalVariable(name: "value", scope: !7502, file: !384, line: 2840, type: !418)
!7510 = !DILocation(line: 2840, column: 9, scope: !7502)
!7511 = !DILocation(line: 2842, column: 19, scope: !7502)
!7512 = !DILocation(line: 2842, column: 24, scope: !7502)
!7513 = !DILocation(line: 2842, column: 41, scope: !7502)
!7514 = !DILocation(line: 2842, column: 3, scope: !7502)
!7515 = !DILocation(line: 2844, column: 10, scope: !7502)
!7516 = !DILocation(line: 2844, column: 3, scope: !7502)
!7517 = distinct !DISubprogram(name: "binn_object_uint8", scope: !384, file: !384, line: 2847, type: !7518, scopeLine: 2847, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7518 = !DISubroutineType(types: !7519)
!7519 = !{!153, !82, !103}
!7520 = !DILocalVariable(name: "obj", arg: 1, scope: !7517, file: !384, line: 2847, type: !82)
!7521 = !DILocation(line: 2847, column: 48, scope: !7517)
!7522 = !DILocalVariable(name: "key", arg: 2, scope: !7517, file: !384, line: 2847, type: !103)
!7523 = !DILocation(line: 2847, column: 59, scope: !7517)
!7524 = !DILocalVariable(name: "value", scope: !7517, file: !384, line: 2848, type: !153)
!7525 = !DILocation(line: 2848, column: 17, scope: !7517)
!7526 = !DILocation(line: 2850, column: 19, scope: !7517)
!7527 = !DILocation(line: 2850, column: 24, scope: !7517)
!7528 = !DILocation(line: 2850, column: 3, scope: !7517)
!7529 = !DILocation(line: 2852, column: 10, scope: !7517)
!7530 = !DILocation(line: 2852, column: 3, scope: !7517)
!7531 = distinct !DISubprogram(name: "binn_object_uint16", scope: !384, file: !384, line: 2855, type: !7532, scopeLine: 2855, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7532 = !DISubroutineType(types: !7533)
!7533 = !{!169, !82, !103}
!7534 = !DILocalVariable(name: "obj", arg: 1, scope: !7531, file: !384, line: 2855, type: !82)
!7535 = !DILocation(line: 2855, column: 50, scope: !7531)
!7536 = !DILocalVariable(name: "key", arg: 2, scope: !7531, file: !384, line: 2855, type: !103)
!7537 = !DILocation(line: 2855, column: 61, scope: !7531)
!7538 = !DILocalVariable(name: "value", scope: !7531, file: !384, line: 2856, type: !169)
!7539 = !DILocation(line: 2856, column: 18, scope: !7531)
!7540 = !DILocation(line: 2858, column: 19, scope: !7531)
!7541 = !DILocation(line: 2858, column: 24, scope: !7531)
!7542 = !DILocation(line: 2858, column: 42, scope: !7531)
!7543 = !DILocation(line: 2858, column: 3, scope: !7531)
!7544 = !DILocation(line: 2860, column: 10, scope: !7531)
!7545 = !DILocation(line: 2860, column: 3, scope: !7531)
!7546 = distinct !DISubprogram(name: "binn_object_uint32", scope: !384, file: !384, line: 2863, type: !7547, scopeLine: 2863, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7547 = !DISubroutineType(types: !7548)
!7548 = !{!7, !82, !103}
!7549 = !DILocalVariable(name: "obj", arg: 1, scope: !7546, file: !384, line: 2863, type: !82)
!7550 = !DILocation(line: 2863, column: 48, scope: !7546)
!7551 = !DILocalVariable(name: "key", arg: 2, scope: !7546, file: !384, line: 2863, type: !103)
!7552 = !DILocation(line: 2863, column: 59, scope: !7546)
!7553 = !DILocalVariable(name: "value", scope: !7546, file: !384, line: 2864, type: !7)
!7554 = !DILocation(line: 2864, column: 16, scope: !7546)
!7555 = !DILocation(line: 2866, column: 19, scope: !7546)
!7556 = !DILocation(line: 2866, column: 24, scope: !7546)
!7557 = !DILocation(line: 2866, column: 42, scope: !7546)
!7558 = !DILocation(line: 2866, column: 3, scope: !7546)
!7559 = !DILocation(line: 2868, column: 10, scope: !7546)
!7560 = !DILocation(line: 2868, column: 3, scope: !7546)
!7561 = distinct !DISubprogram(name: "binn_object_uint64", scope: !384, file: !384, line: 2871, type: !7562, scopeLine: 2871, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7562 = !DISubroutineType(types: !7563)
!7563 = !{!424, !82, !103}
!7564 = !DILocalVariable(name: "obj", arg: 1, scope: !7561, file: !384, line: 2871, type: !82)
!7565 = !DILocation(line: 2871, column: 42, scope: !7561)
!7566 = !DILocalVariable(name: "key", arg: 2, scope: !7561, file: !384, line: 2871, type: !103)
!7567 = !DILocation(line: 2871, column: 53, scope: !7561)
!7568 = !DILocalVariable(name: "value", scope: !7561, file: !384, line: 2872, type: !424)
!7569 = !DILocation(line: 2872, column: 10, scope: !7561)
!7570 = !DILocation(line: 2874, column: 19, scope: !7561)
!7571 = !DILocation(line: 2874, column: 24, scope: !7561)
!7572 = !DILocation(line: 2874, column: 42, scope: !7561)
!7573 = !DILocation(line: 2874, column: 3, scope: !7561)
!7574 = !DILocation(line: 2876, column: 10, scope: !7561)
!7575 = !DILocation(line: 2876, column: 3, scope: !7561)
!7576 = distinct !DISubprogram(name: "binn_object_float", scope: !384, file: !384, line: 2879, type: !7577, scopeLine: 2879, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7577 = !DISubroutineType(types: !7578)
!7578 = !{!433, !82, !103}
!7579 = !DILocalVariable(name: "obj", arg: 1, scope: !7576, file: !384, line: 2879, type: !82)
!7580 = !DILocation(line: 2879, column: 40, scope: !7576)
!7581 = !DILocalVariable(name: "key", arg: 2, scope: !7576, file: !384, line: 2879, type: !103)
!7582 = !DILocation(line: 2879, column: 51, scope: !7576)
!7583 = !DILocalVariable(name: "value", scope: !7576, file: !384, line: 2880, type: !433)
!7584 = !DILocation(line: 2880, column: 9, scope: !7576)
!7585 = !DILocation(line: 2882, column: 19, scope: !7576)
!7586 = !DILocation(line: 2882, column: 24, scope: !7576)
!7587 = !DILocation(line: 2882, column: 43, scope: !7576)
!7588 = !DILocation(line: 2882, column: 3, scope: !7576)
!7589 = !DILocation(line: 2884, column: 10, scope: !7576)
!7590 = !DILocation(line: 2884, column: 3, scope: !7576)
!7591 = distinct !DISubprogram(name: "binn_object_double", scope: !384, file: !384, line: 2887, type: !7592, scopeLine: 2887, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7592 = !DISubroutineType(types: !7593)
!7593 = !{!435, !82, !103}
!7594 = !DILocalVariable(name: "obj", arg: 1, scope: !7591, file: !384, line: 2887, type: !82)
!7595 = !DILocation(line: 2887, column: 42, scope: !7591)
!7596 = !DILocalVariable(name: "key", arg: 2, scope: !7591, file: !384, line: 2887, type: !103)
!7597 = !DILocation(line: 2887, column: 53, scope: !7591)
!7598 = !DILocalVariable(name: "value", scope: !7591, file: !384, line: 2888, type: !435)
!7599 = !DILocation(line: 2888, column: 10, scope: !7591)
!7600 = !DILocation(line: 2890, column: 19, scope: !7591)
!7601 = !DILocation(line: 2890, column: 24, scope: !7591)
!7602 = !DILocation(line: 2890, column: 43, scope: !7591)
!7603 = !DILocation(line: 2890, column: 3, scope: !7591)
!7604 = !DILocation(line: 2892, column: 10, scope: !7591)
!7605 = !DILocation(line: 2892, column: 3, scope: !7591)
!7606 = distinct !DISubprogram(name: "binn_object_bool", scope: !384, file: !384, line: 2895, type: !7607, scopeLine: 2895, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7607 = !DISubroutineType(types: !7608)
!7608 = !{!393, !82, !103}
!7609 = !DILocalVariable(name: "obj", arg: 1, scope: !7606, file: !384, line: 2895, type: !82)
!7610 = !DILocation(line: 2895, column: 38, scope: !7606)
!7611 = !DILocalVariable(name: "key", arg: 2, scope: !7606, file: !384, line: 2895, type: !103)
!7612 = !DILocation(line: 2895, column: 49, scope: !7606)
!7613 = !DILocalVariable(name: "value", scope: !7606, file: !384, line: 2896, type: !393)
!7614 = !DILocation(line: 2896, column: 8, scope: !7606)
!7615 = !DILocation(line: 2898, column: 19, scope: !7606)
!7616 = !DILocation(line: 2898, column: 24, scope: !7606)
!7617 = !DILocation(line: 2898, column: 40, scope: !7606)
!7618 = !DILocation(line: 2898, column: 3, scope: !7606)
!7619 = !DILocation(line: 2900, column: 10, scope: !7606)
!7620 = !DILocation(line: 2900, column: 3, scope: !7606)
!7621 = distinct !DISubprogram(name: "binn_object_null", scope: !384, file: !384, line: 2903, type: !7607, scopeLine: 2903, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7622 = !DILocalVariable(name: "obj", arg: 1, scope: !7621, file: !384, line: 2903, type: !82)
!7623 = !DILocation(line: 2903, column: 38, scope: !7621)
!7624 = !DILocalVariable(name: "key", arg: 2, scope: !7621, file: !384, line: 2903, type: !103)
!7625 = !DILocation(line: 2903, column: 49, scope: !7621)
!7626 = !DILocation(line: 2905, column: 26, scope: !7621)
!7627 = !DILocation(line: 2905, column: 31, scope: !7621)
!7628 = !DILocation(line: 2905, column: 10, scope: !7621)
!7629 = !DILocation(line: 2905, column: 3, scope: !7621)
!7630 = distinct !DISubprogram(name: "binn_object_str", scope: !384, file: !384, line: 2909, type: !7631, scopeLine: 2909, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7631 = !DISubroutineType(types: !7632)
!7632 = !{!103, !82, !103}
!7633 = !DILocalVariable(name: "obj", arg: 1, scope: !7630, file: !384, line: 2909, type: !82)
!7634 = !DILocation(line: 2909, column: 39, scope: !7630)
!7635 = !DILocalVariable(name: "key", arg: 2, scope: !7630, file: !384, line: 2909, type: !103)
!7636 = !DILocation(line: 2909, column: 50, scope: !7630)
!7637 = !DILocalVariable(name: "value", scope: !7630, file: !384, line: 2910, type: !103)
!7638 = !DILocation(line: 2910, column: 9, scope: !7630)
!7639 = !DILocation(line: 2912, column: 19, scope: !7630)
!7640 = !DILocation(line: 2912, column: 24, scope: !7630)
!7641 = !DILocation(line: 2912, column: 42, scope: !7630)
!7642 = !DILocation(line: 2912, column: 3, scope: !7630)
!7643 = !DILocation(line: 2914, column: 10, scope: !7630)
!7644 = !DILocation(line: 2914, column: 3, scope: !7630)
!7645 = distinct !DISubprogram(name: "binn_object_blob", scope: !384, file: !384, line: 2917, type: !7646, scopeLine: 2917, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7646 = !DISubroutineType(types: !7647)
!7647 = !{!82, !82, !103, !440}
!7648 = !DILocalVariable(name: "obj", arg: 1, scope: !7645, file: !384, line: 2917, type: !82)
!7649 = !DILocation(line: 2917, column: 40, scope: !7645)
!7650 = !DILocalVariable(name: "key", arg: 2, scope: !7645, file: !384, line: 2917, type: !103)
!7651 = !DILocation(line: 2917, column: 51, scope: !7645)
!7652 = !DILocalVariable(name: "psize", arg: 3, scope: !7645, file: !384, line: 2917, type: !440)
!7653 = !DILocation(line: 2917, column: 61, scope: !7645)
!7654 = !DILocalVariable(name: "value", scope: !7645, file: !384, line: 2918, type: !82)
!7655 = !DILocation(line: 2918, column: 9, scope: !7645)
!7656 = !DILocation(line: 2920, column: 19, scope: !7645)
!7657 = !DILocation(line: 2920, column: 24, scope: !7645)
!7658 = !DILocation(line: 2920, column: 40, scope: !7645)
!7659 = !DILocation(line: 2920, column: 48, scope: !7645)
!7660 = !DILocation(line: 2920, column: 3, scope: !7645)
!7661 = !DILocation(line: 2922, column: 10, scope: !7645)
!7662 = !DILocation(line: 2922, column: 3, scope: !7645)
!7663 = distinct !DISubprogram(name: "binn_object_list", scope: !384, file: !384, line: 2925, type: !7664, scopeLine: 2925, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7664 = !DISubroutineType(types: !7665)
!7665 = !{!82, !82, !103}
!7666 = !DILocalVariable(name: "obj", arg: 1, scope: !7663, file: !384, line: 2925, type: !82)
!7667 = !DILocation(line: 2925, column: 40, scope: !7663)
!7668 = !DILocalVariable(name: "key", arg: 2, scope: !7663, file: !384, line: 2925, type: !103)
!7669 = !DILocation(line: 2925, column: 51, scope: !7663)
!7670 = !DILocalVariable(name: "value", scope: !7663, file: !384, line: 2926, type: !82)
!7671 = !DILocation(line: 2926, column: 9, scope: !7663)
!7672 = !DILocation(line: 2928, column: 19, scope: !7663)
!7673 = !DILocation(line: 2928, column: 24, scope: !7663)
!7674 = !DILocation(line: 2928, column: 40, scope: !7663)
!7675 = !DILocation(line: 2928, column: 3, scope: !7663)
!7676 = !DILocation(line: 2930, column: 10, scope: !7663)
!7677 = !DILocation(line: 2930, column: 3, scope: !7663)
!7678 = distinct !DISubprogram(name: "binn_object_map", scope: !384, file: !384, line: 2933, type: !7664, scopeLine: 2933, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7679 = !DILocalVariable(name: "obj", arg: 1, scope: !7678, file: !384, line: 2933, type: !82)
!7680 = !DILocation(line: 2933, column: 39, scope: !7678)
!7681 = !DILocalVariable(name: "key", arg: 2, scope: !7678, file: !384, line: 2933, type: !103)
!7682 = !DILocation(line: 2933, column: 50, scope: !7678)
!7683 = !DILocalVariable(name: "value", scope: !7678, file: !384, line: 2934, type: !82)
!7684 = !DILocation(line: 2934, column: 9, scope: !7678)
!7685 = !DILocation(line: 2936, column: 19, scope: !7678)
!7686 = !DILocation(line: 2936, column: 24, scope: !7678)
!7687 = !DILocation(line: 2936, column: 39, scope: !7678)
!7688 = !DILocation(line: 2936, column: 3, scope: !7678)
!7689 = !DILocation(line: 2938, column: 10, scope: !7678)
!7690 = !DILocation(line: 2938, column: 3, scope: !7678)
!7691 = distinct !DISubprogram(name: "binn_object_object", scope: !384, file: !384, line: 2941, type: !7664, scopeLine: 2941, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7692 = !DILocalVariable(name: "obj", arg: 1, scope: !7691, file: !384, line: 2941, type: !82)
!7693 = !DILocation(line: 2941, column: 42, scope: !7691)
!7694 = !DILocalVariable(name: "key", arg: 2, scope: !7691, file: !384, line: 2941, type: !103)
!7695 = !DILocation(line: 2941, column: 53, scope: !7691)
!7696 = !DILocalVariable(name: "value", scope: !7691, file: !384, line: 2942, type: !82)
!7697 = !DILocation(line: 2942, column: 9, scope: !7691)
!7698 = !DILocation(line: 2944, column: 19, scope: !7691)
!7699 = !DILocation(line: 2944, column: 24, scope: !7691)
!7700 = !DILocation(line: 2944, column: 42, scope: !7691)
!7701 = !DILocation(line: 2944, column: 3, scope: !7691)
!7702 = !DILocation(line: 2946, column: 10, scope: !7691)
!7703 = !DILocation(line: 2946, column: 3, scope: !7691)
!7704 = distinct !DISubprogram(name: "binn_value", scope: !384, file: !384, line: 2966, type: !7705, scopeLine: 2966, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7705 = !DISubroutineType(types: !7706)
!7706 = !{!386, !101, !82, !101, !405}
!7707 = !DILocalVariable(name: "type", arg: 1, scope: !7704, file: !384, line: 2966, type: !101)
!7708 = !DILocation(line: 2966, column: 32, scope: !7704)
!7709 = !DILocalVariable(name: "pvalue", arg: 2, scope: !7704, file: !384, line: 2966, type: !82)
!7710 = !DILocation(line: 2966, column: 44, scope: !7704)
!7711 = !DILocalVariable(name: "size", arg: 3, scope: !7704, file: !384, line: 2966, type: !101)
!7712 = !DILocation(line: 2966, column: 56, scope: !7704)
!7713 = !DILocalVariable(name: "freefn", arg: 4, scope: !7704, file: !384, line: 2966, type: !405)
!7714 = !DILocation(line: 2966, column: 76, scope: !7704)
!7715 = !DILocalVariable(name: "storage_type", scope: !7704, file: !384, line: 2967, type: !101)
!7716 = !DILocation(line: 2967, column: 7, scope: !7704)
!7717 = !DILocalVariable(name: "item", scope: !7704, file: !384, line: 2968, type: !386)
!7718 = !DILocation(line: 2968, column: 9, scope: !7704)
!7719 = !DILocation(line: 2968, column: 16, scope: !7704)
!7720 = !DILocation(line: 2969, column: 7, scope: !7721)
!7721 = distinct !DILexicalBlock(scope: !7704, file: !384, line: 2969, column: 7)
!7722 = !DILocation(line: 2969, column: 7, scope: !7704)
!7723 = !DILocation(line: 2970, column: 18, scope: !7724)
!7724 = distinct !DILexicalBlock(scope: !7721, file: !384, line: 2969, column: 13)
!7725 = !DILocation(line: 2970, column: 5, scope: !7724)
!7726 = !DILocation(line: 2970, column: 11, scope: !7724)
!7727 = !DILocation(line: 2970, column: 16, scope: !7724)
!7728 = !DILocation(line: 2971, column: 24, scope: !7724)
!7729 = !DILocation(line: 2971, column: 5, scope: !7724)
!7730 = !DILocation(line: 2972, column: 13, scope: !7724)
!7731 = !DILocation(line: 2972, column: 5, scope: !7724)
!7732 = !DILocation(line: 2974, column: 7, scope: !7733)
!7733 = distinct !DILexicalBlock(scope: !7724, file: !384, line: 2972, column: 27)
!7734 = !DILocation(line: 2976, column: 11, scope: !7735)
!7735 = distinct !DILexicalBlock(scope: !7733, file: !384, line: 2976, column: 11)
!7736 = !DILocation(line: 2976, column: 16, scope: !7735)
!7737 = !DILocation(line: 2976, column: 11, scope: !7733)
!7738 = !DILocation(line: 2976, column: 43, scope: !7735)
!7739 = !DILocation(line: 2976, column: 29, scope: !7735)
!7740 = !DILocation(line: 2976, column: 51, scope: !7735)
!7741 = !DILocation(line: 2976, column: 27, scope: !7735)
!7742 = !DILocation(line: 2976, column: 22, scope: !7735)
!7743 = !DILocation(line: 2976, column: 19, scope: !7735)
!7744 = !DILocation(line: 2979, column: 11, scope: !7745)
!7745 = distinct !DILexicalBlock(scope: !7733, file: !384, line: 2979, column: 11)
!7746 = !DILocation(line: 2979, column: 18, scope: !7745)
!7747 = !DILocation(line: 2979, column: 11, scope: !7733)
!7748 = !DILocation(line: 2980, column: 33, scope: !7749)
!7749 = distinct !DILexicalBlock(scope: !7745, file: !384, line: 2979, column: 37)
!7750 = !DILocation(line: 2980, column: 41, scope: !7749)
!7751 = !DILocation(line: 2980, column: 21, scope: !7749)
!7752 = !DILocation(line: 2980, column: 9, scope: !7749)
!7753 = !DILocation(line: 2980, column: 15, scope: !7749)
!7754 = !DILocation(line: 2980, column: 19, scope: !7749)
!7755 = !DILocation(line: 2981, column: 13, scope: !7756)
!7756 = distinct !DILexicalBlock(scope: !7749, file: !384, line: 2981, column: 13)
!7757 = !DILocation(line: 2981, column: 19, scope: !7756)
!7758 = !DILocation(line: 2981, column: 23, scope: !7756)
!7759 = !DILocation(line: 2981, column: 13, scope: !7749)
!7760 = !DILocation(line: 2982, column: 11, scope: !7761)
!7761 = distinct !DILexicalBlock(scope: !7756, file: !384, line: 2981, column: 32)
!7762 = !DILocation(line: 2982, column: 19, scope: !7761)
!7763 = !DILocation(line: 2983, column: 11, scope: !7761)
!7764 = !DILocation(line: 2985, column: 24, scope: !7749)
!7765 = !DILocation(line: 2985, column: 9, scope: !7749)
!7766 = !DILocation(line: 2985, column: 15, scope: !7749)
!7767 = !DILocation(line: 2985, column: 22, scope: !7749)
!7768 = !DILocation(line: 2986, column: 13, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !7749, file: !384, line: 2986, column: 13)
!7770 = !DILocation(line: 2986, column: 26, scope: !7769)
!7771 = !DILocation(line: 2986, column: 13, scope: !7749)
!7772 = !DILocation(line: 2986, column: 54, scope: !7769)
!7773 = !DILocation(line: 2986, column: 50, scope: !7769)
!7774 = !DILocation(line: 2987, column: 7, scope: !7749)
!7775 = !DILocation(line: 2988, column: 21, scope: !7776)
!7776 = distinct !DILexicalBlock(scope: !7745, file: !384, line: 2987, column: 14)
!7777 = !DILocation(line: 2988, column: 9, scope: !7776)
!7778 = !DILocation(line: 2988, column: 15, scope: !7776)
!7779 = !DILocation(line: 2988, column: 19, scope: !7776)
!7780 = !DILocation(line: 2989, column: 24, scope: !7776)
!7781 = !DILocation(line: 2989, column: 9, scope: !7776)
!7782 = !DILocation(line: 2989, column: 15, scope: !7776)
!7783 = !DILocation(line: 2989, column: 22, scope: !7776)
!7784 = !DILocation(line: 2991, column: 20, scope: !7733)
!7785 = !DILocation(line: 2991, column: 7, scope: !7733)
!7786 = !DILocation(line: 2991, column: 13, scope: !7733)
!7787 = !DILocation(line: 2991, column: 18, scope: !7733)
!7788 = !DILocation(line: 2992, column: 7, scope: !7733)
!7789 = !DILocation(line: 2994, column: 20, scope: !7733)
!7790 = !DILocation(line: 2994, column: 26, scope: !7733)
!7791 = !DILocation(line: 2994, column: 19, scope: !7733)
!7792 = !DILocation(line: 2994, column: 7, scope: !7733)
!7793 = !DILocation(line: 2994, column: 13, scope: !7733)
!7794 = !DILocation(line: 2994, column: 17, scope: !7733)
!7795 = !DILocation(line: 2995, column: 22, scope: !7733)
!7796 = !DILocation(line: 2995, column: 30, scope: !7733)
!7797 = !DILocation(line: 2995, column: 36, scope: !7733)
!7798 = !DILocation(line: 2995, column: 41, scope: !7733)
!7799 = !DILocation(line: 2995, column: 7, scope: !7733)
!7800 = !DILocation(line: 2996, column: 5, scope: !7733)
!7801 = !DILocation(line: 2997, column: 3, scope: !7724)
!7802 = !DILocation(line: 2998, column: 10, scope: !7704)
!7803 = !DILocation(line: 2998, column: 3, scope: !7704)
!7804 = !DILocation(line: 2999, column: 1, scope: !7704)
!7805 = distinct !DISubprogram(name: "binn_alloc_item", linkageName: "_ZL15binn_alloc_itemv", scope: !384, file: !384, line: 2952, type: !2560, scopeLine: 2952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7806 = !DILocalVariable(name: "item", scope: !7805, file: !384, line: 2953, type: !386)
!7807 = !DILocation(line: 2953, column: 9, scope: !7805)
!7808 = !DILocation(line: 2954, column: 19, scope: !7805)
!7809 = !DILocation(line: 2954, column: 10, scope: !7805)
!7810 = !DILocation(line: 2954, column: 8, scope: !7805)
!7811 = !DILocation(line: 2955, column: 7, scope: !7812)
!7812 = distinct !DILexicalBlock(scope: !7805, file: !384, line: 2955, column: 7)
!7813 = !DILocation(line: 2955, column: 7, scope: !7805)
!7814 = !DILocation(line: 2956, column: 12, scope: !7815)
!7815 = distinct !DILexicalBlock(scope: !7812, file: !384, line: 2955, column: 13)
!7816 = !DILocation(line: 2956, column: 5, scope: !7815)
!7817 = !DILocation(line: 2957, column: 5, scope: !7815)
!7818 = !DILocation(line: 2957, column: 11, scope: !7815)
!7819 = !DILocation(line: 2957, column: 18, scope: !7815)
!7820 = !DILocation(line: 2958, column: 5, scope: !7815)
!7821 = !DILocation(line: 2958, column: 11, scope: !7815)
!7822 = !DILocation(line: 2958, column: 21, scope: !7815)
!7823 = !DILocation(line: 2960, column: 3, scope: !7815)
!7824 = !DILocation(line: 2961, column: 10, scope: !7805)
!7825 = !DILocation(line: 2961, column: 3, scope: !7805)
!7826 = distinct !DISubprogram(name: "binn_memdup", linkageName: "_ZL11binn_memdupPvi", scope: !384, file: !384, line: 147, type: !7200, scopeLine: 147, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7827 = !DILocalVariable(name: "src", arg: 1, scope: !7826, file: !384, line: 147, type: !82)
!7828 = !DILocation(line: 147, column: 39, scope: !7826)
!7829 = !DILocalVariable(name: "size", arg: 2, scope: !7826, file: !384, line: 147, type: !101)
!7830 = !DILocation(line: 147, column: 48, scope: !7826)
!7831 = !DILocalVariable(name: "dest", scope: !7826, file: !384, line: 148, type: !82)
!7832 = !DILocation(line: 148, column: 9, scope: !7826)
!7833 = !DILocation(line: 150, column: 7, scope: !7834)
!7834 = distinct !DILexicalBlock(scope: !7826, file: !384, line: 150, column: 7)
!7835 = !DILocation(line: 150, column: 11, scope: !7834)
!7836 = !DILocation(line: 150, column: 19, scope: !7834)
!7837 = !DILocation(line: 150, column: 22, scope: !7834)
!7838 = !DILocation(line: 150, column: 27, scope: !7834)
!7839 = !DILocation(line: 150, column: 7, scope: !7826)
!7840 = !DILocation(line: 150, column: 33, scope: !7834)
!7841 = !DILocation(line: 151, column: 22, scope: !7826)
!7842 = !DILocation(line: 151, column: 10, scope: !7826)
!7843 = !DILocation(line: 151, column: 8, scope: !7826)
!7844 = !DILocation(line: 152, column: 7, scope: !7845)
!7845 = distinct !DILexicalBlock(scope: !7826, file: !384, line: 152, column: 7)
!7846 = !DILocation(line: 152, column: 12, scope: !7845)
!7847 = !DILocation(line: 152, column: 7, scope: !7826)
!7848 = !DILocation(line: 152, column: 21, scope: !7845)
!7849 = !DILocation(line: 153, column: 10, scope: !7826)
!7850 = !DILocation(line: 153, column: 16, scope: !7826)
!7851 = !DILocation(line: 153, column: 21, scope: !7826)
!7852 = !DILocation(line: 153, column: 3, scope: !7826)
!7853 = !DILocation(line: 154, column: 10, scope: !7826)
!7854 = !DILocation(line: 154, column: 3, scope: !7826)
!7855 = !DILocation(line: 156, column: 1, scope: !7826)
!7856 = distinct !DISubprogram(name: "binn_set_string", scope: !384, file: !384, line: 3003, type: !7857, scopeLine: 3003, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7857 = !DISubroutineType(types: !7858)
!7858 = !{!393, !386, !103, !405}
!7859 = !DILocalVariable(name: "item", arg: 1, scope: !7856, file: !384, line: 3003, type: !386)
!7860 = !DILocation(line: 3003, column: 37, scope: !7856)
!7861 = !DILocalVariable(name: "str", arg: 2, scope: !7856, file: !384, line: 3003, type: !103)
!7862 = !DILocation(line: 3003, column: 49, scope: !7856)
!7863 = !DILocalVariable(name: "pfree", arg: 3, scope: !7856, file: !384, line: 3003, type: !405)
!7864 = !DILocation(line: 3003, column: 68, scope: !7856)
!7865 = !DILocation(line: 3005, column: 7, scope: !7866)
!7866 = distinct !DILexicalBlock(scope: !7856, file: !384, line: 3005, column: 7)
!7867 = !DILocation(line: 3005, column: 12, scope: !7866)
!7868 = !DILocation(line: 3005, column: 20, scope: !7866)
!7869 = !DILocation(line: 3005, column: 23, scope: !7866)
!7870 = !DILocation(line: 3005, column: 27, scope: !7866)
!7871 = !DILocation(line: 3005, column: 7, scope: !7856)
!7872 = !DILocation(line: 3005, column: 36, scope: !7866)
!7873 = !DILocation(line: 3007, column: 7, scope: !7874)
!7874 = distinct !DILexicalBlock(scope: !7856, file: !384, line: 3007, column: 7)
!7875 = !DILocation(line: 3007, column: 13, scope: !7874)
!7876 = !DILocation(line: 3007, column: 7, scope: !7856)
!7877 = !DILocation(line: 3008, column: 29, scope: !7878)
!7878 = distinct !DILexicalBlock(scope: !7874, file: !384, line: 3007, column: 32)
!7879 = !DILocation(line: 3008, column: 41, scope: !7878)
!7880 = !DILocation(line: 3008, column: 34, scope: !7878)
!7881 = !DILocation(line: 3008, column: 46, scope: !7878)
!7882 = !DILocation(line: 3008, column: 17, scope: !7878)
!7883 = !DILocation(line: 3008, column: 5, scope: !7878)
!7884 = !DILocation(line: 3008, column: 11, scope: !7878)
!7885 = !DILocation(line: 3008, column: 15, scope: !7878)
!7886 = !DILocation(line: 3009, column: 9, scope: !7887)
!7887 = distinct !DILexicalBlock(scope: !7878, file: !384, line: 3009, column: 9)
!7888 = !DILocation(line: 3009, column: 15, scope: !7887)
!7889 = !DILocation(line: 3009, column: 19, scope: !7887)
!7890 = !DILocation(line: 3009, column: 9, scope: !7878)
!7891 = !DILocation(line: 3009, column: 28, scope: !7887)
!7892 = !DILocation(line: 3010, column: 20, scope: !7878)
!7893 = !DILocation(line: 3010, column: 5, scope: !7878)
!7894 = !DILocation(line: 3010, column: 11, scope: !7878)
!7895 = !DILocation(line: 3010, column: 18, scope: !7878)
!7896 = !DILocation(line: 3011, column: 3, scope: !7878)
!7897 = !DILocation(line: 3012, column: 17, scope: !7898)
!7898 = distinct !DILexicalBlock(scope: !7874, file: !384, line: 3011, column: 10)
!7899 = !DILocation(line: 3012, column: 5, scope: !7898)
!7900 = !DILocation(line: 3012, column: 11, scope: !7898)
!7901 = !DILocation(line: 3012, column: 15, scope: !7898)
!7902 = !DILocation(line: 3013, column: 20, scope: !7898)
!7903 = !DILocation(line: 3013, column: 5, scope: !7898)
!7904 = !DILocation(line: 3013, column: 11, scope: !7898)
!7905 = !DILocation(line: 3013, column: 18, scope: !7898)
!7906 = !DILocation(line: 3016, column: 3, scope: !7856)
!7907 = !DILocation(line: 3016, column: 9, scope: !7856)
!7908 = !DILocation(line: 3016, column: 14, scope: !7856)
!7909 = !DILocation(line: 3017, column: 3, scope: !7856)
!7910 = !DILocation(line: 3019, column: 1, scope: !7856)
!7911 = distinct !DISubprogram(name: "binn_set_blob", scope: !384, file: !384, line: 3023, type: !7912, scopeLine: 3023, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7912 = !DISubroutineType(types: !7913)
!7913 = !{!393, !386, !82, !101, !405}
!7914 = !DILocalVariable(name: "item", arg: 1, scope: !7911, file: !384, line: 3023, type: !386)
!7915 = !DILocation(line: 3023, column: 35, scope: !7911)
!7916 = !DILocalVariable(name: "ptr", arg: 2, scope: !7911, file: !384, line: 3023, type: !82)
!7917 = !DILocation(line: 3023, column: 47, scope: !7911)
!7918 = !DILocalVariable(name: "size", arg: 3, scope: !7911, file: !384, line: 3023, type: !101)
!7919 = !DILocation(line: 3023, column: 56, scope: !7911)
!7920 = !DILocalVariable(name: "pfree", arg: 4, scope: !7911, file: !384, line: 3023, type: !405)
!7921 = !DILocation(line: 3023, column: 76, scope: !7911)
!7922 = !DILocation(line: 3025, column: 7, scope: !7923)
!7923 = distinct !DILexicalBlock(scope: !7911, file: !384, line: 3025, column: 7)
!7924 = !DILocation(line: 3025, column: 12, scope: !7923)
!7925 = !DILocation(line: 3025, column: 20, scope: !7923)
!7926 = !DILocation(line: 3025, column: 23, scope: !7923)
!7927 = !DILocation(line: 3025, column: 27, scope: !7923)
!7928 = !DILocation(line: 3025, column: 7, scope: !7911)
!7929 = !DILocation(line: 3025, column: 36, scope: !7923)
!7930 = !DILocation(line: 3027, column: 7, scope: !7931)
!7931 = distinct !DILexicalBlock(scope: !7911, file: !384, line: 3027, column: 7)
!7932 = !DILocation(line: 3027, column: 13, scope: !7931)
!7933 = !DILocation(line: 3027, column: 7, scope: !7911)
!7934 = !DILocation(line: 3028, column: 29, scope: !7935)
!7935 = distinct !DILexicalBlock(scope: !7931, file: !384, line: 3027, column: 32)
!7936 = !DILocation(line: 3028, column: 34, scope: !7935)
!7937 = !DILocation(line: 3028, column: 17, scope: !7935)
!7938 = !DILocation(line: 3028, column: 5, scope: !7935)
!7939 = !DILocation(line: 3028, column: 11, scope: !7935)
!7940 = !DILocation(line: 3028, column: 15, scope: !7935)
!7941 = !DILocation(line: 3029, column: 9, scope: !7942)
!7942 = distinct !DILexicalBlock(scope: !7935, file: !384, line: 3029, column: 9)
!7943 = !DILocation(line: 3029, column: 15, scope: !7942)
!7944 = !DILocation(line: 3029, column: 19, scope: !7942)
!7945 = !DILocation(line: 3029, column: 9, scope: !7935)
!7946 = !DILocation(line: 3029, column: 28, scope: !7942)
!7947 = !DILocation(line: 3030, column: 20, scope: !7935)
!7948 = !DILocation(line: 3030, column: 5, scope: !7935)
!7949 = !DILocation(line: 3030, column: 11, scope: !7935)
!7950 = !DILocation(line: 3030, column: 18, scope: !7935)
!7951 = !DILocation(line: 3031, column: 3, scope: !7935)
!7952 = !DILocation(line: 3032, column: 17, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7931, file: !384, line: 3031, column: 10)
!7954 = !DILocation(line: 3032, column: 5, scope: !7953)
!7955 = !DILocation(line: 3032, column: 11, scope: !7953)
!7956 = !DILocation(line: 3032, column: 15, scope: !7953)
!7957 = !DILocation(line: 3033, column: 20, scope: !7953)
!7958 = !DILocation(line: 3033, column: 5, scope: !7953)
!7959 = !DILocation(line: 3033, column: 11, scope: !7953)
!7960 = !DILocation(line: 3033, column: 18, scope: !7953)
!7961 = !DILocation(line: 3036, column: 3, scope: !7911)
!7962 = !DILocation(line: 3036, column: 9, scope: !7911)
!7963 = !DILocation(line: 3036, column: 14, scope: !7911)
!7964 = !DILocation(line: 3037, column: 16, scope: !7911)
!7965 = !DILocation(line: 3037, column: 3, scope: !7911)
!7966 = !DILocation(line: 3037, column: 9, scope: !7911)
!7967 = !DILocation(line: 3037, column: 14, scope: !7911)
!7968 = !DILocation(line: 3038, column: 3, scope: !7911)
!7969 = !DILocation(line: 3040, column: 1, scope: !7911)
!7970 = distinct !DISubprogram(name: "atoi64", linkageName: "_Z6atoi64Pc", scope: !384, file: !384, line: 3049, type: !7971, scopeLine: 3049, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!7971 = !DISubroutineType(types: !7972)
!7972 = !{!418, !103}
!7973 = !DILocalVariable(name: "str", arg: 1, scope: !7970, file: !384, line: 3049, type: !103)
!7974 = !DILocation(line: 3049, column: 20, scope: !7970)
!7975 = !DILocalVariable(name: "retval", scope: !7970, file: !384, line: 3050, type: !418)
!7976 = !DILocation(line: 3050, column: 9, scope: !7970)
!7977 = !DILocalVariable(name: "is_negative", scope: !7970, file: !384, line: 3051, type: !101)
!7978 = !DILocation(line: 3051, column: 7, scope: !7970)
!7979 = !DILocation(line: 3053, column: 8, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7970, file: !384, line: 3053, column: 7)
!7981 = !DILocation(line: 3053, column: 7, scope: !7980)
!7982 = !DILocation(line: 3053, column: 12, scope: !7980)
!7983 = !DILocation(line: 3053, column: 7, scope: !7970)
!7984 = !DILocation(line: 3054, column: 17, scope: !7985)
!7985 = distinct !DILexicalBlock(scope: !7980, file: !384, line: 3053, column: 20)
!7986 = !DILocation(line: 3055, column: 8, scope: !7985)
!7987 = !DILocation(line: 3056, column: 3, scope: !7985)
!7988 = !DILocation(line: 3057, column: 10, scope: !7970)
!7989 = !DILocation(line: 3058, column: 3, scope: !7970)
!7990 = !DILocation(line: 3058, column: 11, scope: !7991)
!7991 = distinct !DILexicalBlock(scope: !7992, file: !384, line: 3058, column: 3)
!7992 = distinct !DILexicalBlock(scope: !7970, file: !384, line: 3058, column: 3)
!7993 = !DILocation(line: 3058, column: 10, scope: !7991)
!7994 = !DILocation(line: 3058, column: 3, scope: !7992)
!7995 = !DILocation(line: 3059, column: 19, scope: !7996)
!7996 = distinct !DILexicalBlock(scope: !7991, file: !384, line: 3058, column: 23)
!7997 = !DILocation(line: 3059, column: 17, scope: !7996)
!7998 = !DILocation(line: 3059, column: 30, scope: !7996)
!7999 = !DILocation(line: 3059, column: 29, scope: !7996)
!8000 = !DILocation(line: 3059, column: 34, scope: !7996)
!8001 = !DILocation(line: 3059, column: 28, scope: !7996)
!8002 = !DILocation(line: 3059, column: 26, scope: !7996)
!8003 = !DILocation(line: 3059, column: 12, scope: !7996)
!8004 = !DILocation(line: 3060, column: 3, scope: !7996)
!8005 = !DILocation(line: 3058, column: 19, scope: !7991)
!8006 = !DILocation(line: 3058, column: 3, scope: !7991)
!8007 = distinct !{!8007, !7994, !8008}
!8008 = !DILocation(line: 3060, column: 3, scope: !7992)
!8009 = !DILocation(line: 3061, column: 7, scope: !8010)
!8010 = distinct !DILexicalBlock(scope: !7970, file: !384, line: 3061, column: 7)
!8011 = !DILocation(line: 3061, column: 7, scope: !7970)
!8012 = !DILocation(line: 3061, column: 27, scope: !8010)
!8013 = !DILocation(line: 3061, column: 20, scope: !8010)
!8014 = !DILocation(line: 3062, column: 10, scope: !7970)
!8015 = !DILocation(line: 3062, column: 3, scope: !7970)
!8016 = distinct !DISubprogram(name: "binn_get_int32", scope: !384, file: !384, line: 3152, type: !8017, scopeLine: 3152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8017 = !DISubroutineType(types: !8018)
!8018 = !{!393, !386, !440}
!8019 = !DILocalVariable(name: "value", arg: 1, scope: !8016, file: !384, line: 3152, type: !386)
!8020 = !DILocation(line: 3152, column: 36, scope: !8016)
!8021 = !DILocalVariable(name: "pint", arg: 2, scope: !8016, file: !384, line: 3152, type: !440)
!8022 = !DILocation(line: 3152, column: 48, scope: !8016)
!8023 = !DILocation(line: 3154, column: 7, scope: !8024)
!8024 = distinct !DILexicalBlock(scope: !8016, file: !384, line: 3154, column: 7)
!8025 = !DILocation(line: 3154, column: 13, scope: !8024)
!8026 = !DILocation(line: 3154, column: 21, scope: !8024)
!8027 = !DILocation(line: 3154, column: 24, scope: !8024)
!8028 = !DILocation(line: 3154, column: 29, scope: !8024)
!8029 = !DILocation(line: 3154, column: 7, scope: !8016)
!8030 = !DILocation(line: 3154, column: 38, scope: !8024)
!8031 = !DILocation(line: 3156, column: 19, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !8016, file: !384, line: 3156, column: 7)
!8033 = !DILocation(line: 3156, column: 26, scope: !8032)
!8034 = !DILocation(line: 3156, column: 7, scope: !8032)
!8035 = !DILocation(line: 3156, column: 32, scope: !8032)
!8036 = !DILocation(line: 3156, column: 7, scope: !8016)
!8037 = !DILocation(line: 3157, column: 27, scope: !8038)
!8038 = distinct !DILexicalBlock(scope: !8032, file: !384, line: 3156, column: 52)
!8039 = !DILocation(line: 3157, column: 34, scope: !8038)
!8040 = !DILocation(line: 3157, column: 39, scope: !8038)
!8041 = !DILocation(line: 3157, column: 45, scope: !8038)
!8042 = !DILocation(line: 3157, column: 52, scope: !8038)
!8043 = !DILocation(line: 3157, column: 12, scope: !8038)
!8044 = !DILocation(line: 3157, column: 5, scope: !8038)
!8045 = !DILocation(line: 3160, column: 11, scope: !8016)
!8046 = !DILocation(line: 3160, column: 18, scope: !8016)
!8047 = !DILocation(line: 3160, column: 3, scope: !8016)
!8048 = !DILocation(line: 3162, column: 10, scope: !8049)
!8049 = distinct !DILexicalBlock(scope: !8050, file: !384, line: 3162, column: 9)
!8050 = distinct !DILexicalBlock(scope: !8016, file: !384, line: 3160, column: 24)
!8051 = !DILocation(line: 3162, column: 17, scope: !8049)
!8052 = !DILocation(line: 3162, column: 24, scope: !8049)
!8053 = !DILocation(line: 3162, column: 37, scope: !8049)
!8054 = !DILocation(line: 3162, column: 41, scope: !8049)
!8055 = !DILocation(line: 3162, column: 48, scope: !8049)
!8056 = !DILocation(line: 3162, column: 55, scope: !8049)
!8057 = !DILocation(line: 3162, column: 9, scope: !8050)
!8058 = !DILocation(line: 3162, column: 69, scope: !8049)
!8059 = !DILocation(line: 3163, column: 13, scope: !8050)
!8060 = !DILocation(line: 3163, column: 6, scope: !8050)
!8061 = !DILocation(line: 3163, column: 11, scope: !8050)
!8062 = !DILocation(line: 3164, column: 5, scope: !8050)
!8063 = !DILocation(line: 3166, column: 10, scope: !8064)
!8064 = distinct !DILexicalBlock(scope: !8050, file: !384, line: 3166, column: 9)
!8065 = !DILocation(line: 3166, column: 17, scope: !8064)
!8066 = !DILocation(line: 3166, column: 25, scope: !8064)
!8067 = !DILocation(line: 3166, column: 38, scope: !8064)
!8068 = !DILocation(line: 3166, column: 42, scope: !8064)
!8069 = !DILocation(line: 3166, column: 49, scope: !8064)
!8070 = !DILocation(line: 3166, column: 57, scope: !8064)
!8071 = !DILocation(line: 3166, column: 9, scope: !8050)
!8072 = !DILocation(line: 3166, column: 71, scope: !8064)
!8073 = !DILocation(line: 3167, column: 13, scope: !8050)
!8074 = !DILocation(line: 3167, column: 6, scope: !8050)
!8075 = !DILocation(line: 3167, column: 11, scope: !8050)
!8076 = !DILocation(line: 3168, column: 5, scope: !8050)
!8077 = !DILocation(line: 3170, column: 27, scope: !8078)
!8078 = distinct !DILexicalBlock(scope: !8050, file: !384, line: 3170, column: 9)
!8079 = !DILocation(line: 3170, column: 34, scope: !8078)
!8080 = !DILocation(line: 3170, column: 9, scope: !8078)
!8081 = !DILocation(line: 3170, column: 9, scope: !8050)
!8082 = !DILocation(line: 3171, column: 27, scope: !8078)
!8083 = !DILocation(line: 3171, column: 34, scope: !8078)
!8084 = !DILocation(line: 3171, column: 15, scope: !8078)
!8085 = !DILocation(line: 3171, column: 8, scope: !8078)
!8086 = !DILocation(line: 3171, column: 13, scope: !8078)
!8087 = !DILocation(line: 3171, column: 7, scope: !8078)
!8088 = !DILocation(line: 3172, column: 30, scope: !8089)
!8089 = distinct !DILexicalBlock(scope: !8078, file: !384, line: 3172, column: 14)
!8090 = !DILocation(line: 3172, column: 37, scope: !8089)
!8091 = !DILocation(line: 3172, column: 14, scope: !8089)
!8092 = !DILocation(line: 3172, column: 14, scope: !8078)
!8093 = !DILocation(line: 3173, column: 15, scope: !8089)
!8094 = !DILocation(line: 3173, column: 8, scope: !8089)
!8095 = !DILocation(line: 3173, column: 13, scope: !8089)
!8096 = !DILocation(line: 3173, column: 7, scope: !8089)
!8097 = !DILocation(line: 3175, column: 7, scope: !8089)
!8098 = !DILocation(line: 3176, column: 5, scope: !8050)
!8099 = !DILocation(line: 3178, column: 13, scope: !8050)
!8100 = !DILocation(line: 3178, column: 20, scope: !8050)
!8101 = !DILocation(line: 3178, column: 6, scope: !8050)
!8102 = !DILocation(line: 3178, column: 11, scope: !8050)
!8103 = !DILocation(line: 3179, column: 5, scope: !8050)
!8104 = !DILocation(line: 3181, column: 5, scope: !8050)
!8105 = !DILocation(line: 3184, column: 3, scope: !8016)
!8106 = !DILocation(line: 3185, column: 1, scope: !8016)
!8107 = distinct !DISubprogram(name: "is_integer", linkageName: "_ZL10is_integerPc", scope: !384, file: !384, line: 3068, type: !8108, scopeLine: 3068, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8108 = !DISubroutineType(types: !8109)
!8109 = !{!393, !103}
!8110 = !DILocalVariable(name: "p", arg: 1, scope: !8107, file: !384, line: 3068, type: !103)
!8111 = !DILocation(line: 3068, column: 36, scope: !8107)
!8112 = !DILocalVariable(name: "retval", scope: !8107, file: !384, line: 3069, type: !393)
!8113 = !DILocation(line: 3069, column: 8, scope: !8107)
!8114 = !DILocation(line: 3071, column: 7, scope: !8115)
!8115 = distinct !DILexicalBlock(scope: !8107, file: !384, line: 3071, column: 7)
!8116 = !DILocation(line: 3071, column: 9, scope: !8115)
!8117 = !DILocation(line: 3071, column: 7, scope: !8107)
!8118 = !DILocation(line: 3071, column: 18, scope: !8115)
!8119 = !DILocation(line: 3072, column: 8, scope: !8120)
!8120 = distinct !DILexicalBlock(scope: !8107, file: !384, line: 3072, column: 7)
!8121 = !DILocation(line: 3072, column: 7, scope: !8120)
!8122 = !DILocation(line: 3072, column: 10, scope: !8120)
!8123 = !DILocation(line: 3072, column: 7, scope: !8107)
!8124 = !DILocation(line: 3072, column: 19, scope: !8120)
!8125 = !DILocation(line: 3072, column: 18, scope: !8120)
!8126 = !DILocation(line: 3073, column: 8, scope: !8127)
!8127 = distinct !DILexicalBlock(scope: !8107, file: !384, line: 3073, column: 7)
!8128 = !DILocation(line: 3073, column: 7, scope: !8127)
!8129 = !DILocation(line: 3073, column: 10, scope: !8127)
!8130 = !DILocation(line: 3073, column: 7, scope: !8107)
!8131 = !DILocation(line: 3073, column: 16, scope: !8127)
!8132 = !DILocation(line: 3075, column: 10, scope: !8107)
!8133 = !DILocation(line: 3077, column: 3, scope: !8107)
!8134 = !DILocation(line: 3077, column: 11, scope: !8135)
!8135 = distinct !DILexicalBlock(scope: !8136, file: !384, line: 3077, column: 3)
!8136 = distinct !DILexicalBlock(scope: !8107, file: !384, line: 3077, column: 3)
!8137 = !DILocation(line: 3077, column: 10, scope: !8135)
!8138 = !DILocation(line: 3077, column: 3, scope: !8136)
!8139 = !DILocation(line: 3078, column: 12, scope: !8140)
!8140 = distinct !DILexicalBlock(scope: !8141, file: !384, line: 3078, column: 10)
!8141 = distinct !DILexicalBlock(scope: !8135, file: !384, line: 3077, column: 19)
!8142 = !DILocation(line: 3078, column: 11, scope: !8140)
!8143 = !DILocation(line: 3078, column: 14, scope: !8140)
!8144 = !DILocation(line: 3078, column: 21, scope: !8140)
!8145 = !DILocation(line: 3078, column: 26, scope: !8140)
!8146 = !DILocation(line: 3078, column: 25, scope: !8140)
!8147 = !DILocation(line: 3078, column: 28, scope: !8140)
!8148 = !DILocation(line: 3078, column: 10, scope: !8141)
!8149 = !DILocation(line: 3079, column: 14, scope: !8150)
!8150 = distinct !DILexicalBlock(scope: !8140, file: !384, line: 3078, column: 37)
!8151 = !DILocation(line: 3080, column: 5, scope: !8150)
!8152 = !DILocation(line: 3081, column: 3, scope: !8141)
!8153 = !DILocation(line: 3077, column: 15, scope: !8135)
!8154 = !DILocation(line: 3077, column: 3, scope: !8135)
!8155 = distinct !{!8155, !8138, !8156}
!8156 = !DILocation(line: 3081, column: 3, scope: !8136)
!8157 = !DILocation(line: 3083, column: 10, scope: !8107)
!8158 = !DILocation(line: 3083, column: 3, scope: !8107)
!8159 = !DILocation(line: 3084, column: 1, scope: !8107)
!8160 = distinct !DISubprogram(name: "is_float", linkageName: "_ZL8is_floatPc", scope: !384, file: !384, line: 3088, type: !8108, scopeLine: 3088, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8161 = !DILocalVariable(name: "p", arg: 1, scope: !8160, file: !384, line: 3088, type: !103)
!8162 = !DILocation(line: 3088, column: 34, scope: !8160)
!8163 = !DILocalVariable(name: "retval", scope: !8160, file: !384, line: 3089, type: !393)
!8164 = !DILocation(line: 3089, column: 8, scope: !8160)
!8165 = !DILocalVariable(name: "number_found", scope: !8160, file: !384, line: 3089, type: !393)
!8166 = !DILocation(line: 3089, column: 16, scope: !8160)
!8167 = !DILocation(line: 3091, column: 7, scope: !8168)
!8168 = distinct !DILexicalBlock(scope: !8160, file: !384, line: 3091, column: 7)
!8169 = !DILocation(line: 3091, column: 9, scope: !8168)
!8170 = !DILocation(line: 3091, column: 7, scope: !8160)
!8171 = !DILocation(line: 3091, column: 18, scope: !8168)
!8172 = !DILocation(line: 3092, column: 8, scope: !8173)
!8173 = distinct !DILexicalBlock(scope: !8160, file: !384, line: 3092, column: 7)
!8174 = !DILocation(line: 3092, column: 7, scope: !8173)
!8175 = !DILocation(line: 3092, column: 10, scope: !8173)
!8176 = !DILocation(line: 3092, column: 7, scope: !8160)
!8177 = !DILocation(line: 3092, column: 19, scope: !8173)
!8178 = !DILocation(line: 3092, column: 18, scope: !8173)
!8179 = !DILocation(line: 3093, column: 8, scope: !8180)
!8180 = distinct !DILexicalBlock(scope: !8160, file: !384, line: 3093, column: 7)
!8181 = !DILocation(line: 3093, column: 7, scope: !8180)
!8182 = !DILocation(line: 3093, column: 10, scope: !8180)
!8183 = !DILocation(line: 3093, column: 7, scope: !8160)
!8184 = !DILocation(line: 3093, column: 16, scope: !8180)
!8185 = !DILocation(line: 3095, column: 10, scope: !8160)
!8186 = !DILocation(line: 3097, column: 3, scope: !8160)
!8187 = !DILocation(line: 3097, column: 11, scope: !8188)
!8188 = distinct !DILexicalBlock(scope: !8189, file: !384, line: 3097, column: 3)
!8189 = distinct !DILexicalBlock(scope: !8160, file: !384, line: 3097, column: 3)
!8190 = !DILocation(line: 3097, column: 10, scope: !8188)
!8191 = !DILocation(line: 3097, column: 3, scope: !8189)
!8192 = !DILocation(line: 3098, column: 11, scope: !8193)
!8193 = distinct !DILexicalBlock(scope: !8194, file: !384, line: 3098, column: 9)
!8194 = distinct !DILexicalBlock(scope: !8188, file: !384, line: 3097, column: 19)
!8195 = !DILocation(line: 3098, column: 10, scope: !8193)
!8196 = !DILocation(line: 3098, column: 13, scope: !8193)
!8197 = !DILocation(line: 3098, column: 21, scope: !8193)
!8198 = !DILocation(line: 3098, column: 26, scope: !8193)
!8199 = !DILocation(line: 3098, column: 25, scope: !8193)
!8200 = !DILocation(line: 3098, column: 28, scope: !8193)
!8201 = !DILocation(line: 3098, column: 9, scope: !8194)
!8202 = !DILocation(line: 3099, column: 12, scope: !8203)
!8203 = distinct !DILexicalBlock(scope: !8204, file: !384, line: 3099, column: 11)
!8204 = distinct !DILexicalBlock(scope: !8193, file: !384, line: 3098, column: 37)
!8205 = !DILocation(line: 3099, column: 11, scope: !8204)
!8206 = !DILocation(line: 3099, column: 33, scope: !8203)
!8207 = !DILocation(line: 3099, column: 26, scope: !8203)
!8208 = !DILocation(line: 3100, column: 5, scope: !8204)
!8209 = !DILocation(line: 3100, column: 19, scope: !8210)
!8210 = distinct !DILexicalBlock(scope: !8193, file: !384, line: 3100, column: 17)
!8211 = !DILocation(line: 3100, column: 18, scope: !8210)
!8212 = !DILocation(line: 3100, column: 21, scope: !8210)
!8213 = !DILocation(line: 3100, column: 29, scope: !8210)
!8214 = !DILocation(line: 3100, column: 34, scope: !8210)
!8215 = !DILocation(line: 3100, column: 33, scope: !8210)
!8216 = !DILocation(line: 3100, column: 36, scope: !8210)
!8217 = !DILocation(line: 3100, column: 17, scope: !8193)
!8218 = !DILocation(line: 3101, column: 20, scope: !8219)
!8219 = distinct !DILexicalBlock(scope: !8210, file: !384, line: 3100, column: 46)
!8220 = !DILocation(line: 3102, column: 5, scope: !8219)
!8221 = !DILocation(line: 3103, column: 7, scope: !8222)
!8222 = distinct !DILexicalBlock(scope: !8210, file: !384, line: 3102, column: 12)
!8223 = !DILocation(line: 3105, column: 3, scope: !8194)
!8224 = !DILocation(line: 3097, column: 15, scope: !8188)
!8225 = !DILocation(line: 3097, column: 3, scope: !8188)
!8226 = distinct !{!8226, !8191, !8227}
!8227 = !DILocation(line: 3105, column: 3, scope: !8189)
!8228 = !DILocation(line: 3107, column: 10, scope: !8160)
!8229 = !DILocation(line: 3107, column: 3, scope: !8160)
!8230 = !DILocation(line: 3108, column: 1, scope: !8160)
!8231 = distinct !DISubprogram(name: "binn_get_int64", scope: !384, file: !384, line: 3189, type: !8232, scopeLine: 3189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8232 = !DISubroutineType(types: !8233)
!8233 = !{!393, !386, !445}
!8234 = !DILocalVariable(name: "value", arg: 1, scope: !8231, file: !384, line: 3189, type: !386)
!8235 = !DILocation(line: 3189, column: 36, scope: !8231)
!8236 = !DILocalVariable(name: "pint", arg: 2, scope: !8231, file: !384, line: 3189, type: !445)
!8237 = !DILocation(line: 3189, column: 50, scope: !8231)
!8238 = !DILocation(line: 3191, column: 7, scope: !8239)
!8239 = distinct !DILexicalBlock(scope: !8231, file: !384, line: 3191, column: 7)
!8240 = !DILocation(line: 3191, column: 13, scope: !8239)
!8241 = !DILocation(line: 3191, column: 21, scope: !8239)
!8242 = !DILocation(line: 3191, column: 24, scope: !8239)
!8243 = !DILocation(line: 3191, column: 29, scope: !8239)
!8244 = !DILocation(line: 3191, column: 7, scope: !8231)
!8245 = !DILocation(line: 3191, column: 38, scope: !8239)
!8246 = !DILocation(line: 3193, column: 19, scope: !8247)
!8247 = distinct !DILexicalBlock(scope: !8231, file: !384, line: 3193, column: 7)
!8248 = !DILocation(line: 3193, column: 26, scope: !8247)
!8249 = !DILocation(line: 3193, column: 7, scope: !8247)
!8250 = !DILocation(line: 3193, column: 32, scope: !8247)
!8251 = !DILocation(line: 3193, column: 7, scope: !8231)
!8252 = !DILocation(line: 3194, column: 27, scope: !8253)
!8253 = distinct !DILexicalBlock(scope: !8247, file: !384, line: 3193, column: 52)
!8254 = !DILocation(line: 3194, column: 34, scope: !8253)
!8255 = !DILocation(line: 3194, column: 39, scope: !8253)
!8256 = !DILocation(line: 3194, column: 45, scope: !8253)
!8257 = !DILocation(line: 3194, column: 52, scope: !8253)
!8258 = !DILocation(line: 3194, column: 12, scope: !8253)
!8259 = !DILocation(line: 3194, column: 5, scope: !8253)
!8260 = !DILocation(line: 3197, column: 11, scope: !8231)
!8261 = !DILocation(line: 3197, column: 18, scope: !8231)
!8262 = !DILocation(line: 3197, column: 3, scope: !8231)
!8263 = !DILocation(line: 3199, column: 10, scope: !8264)
!8264 = distinct !DILexicalBlock(scope: !8265, file: !384, line: 3199, column: 9)
!8265 = distinct !DILexicalBlock(scope: !8231, file: !384, line: 3197, column: 24)
!8266 = !DILocation(line: 3199, column: 17, scope: !8264)
!8267 = !DILocation(line: 3199, column: 24, scope: !8264)
!8268 = !DILocation(line: 3199, column: 37, scope: !8264)
!8269 = !DILocation(line: 3199, column: 41, scope: !8264)
!8270 = !DILocation(line: 3199, column: 48, scope: !8264)
!8271 = !DILocation(line: 3199, column: 55, scope: !8264)
!8272 = !DILocation(line: 3199, column: 9, scope: !8265)
!8273 = !DILocation(line: 3199, column: 69, scope: !8264)
!8274 = !DILocation(line: 3200, column: 13, scope: !8265)
!8275 = !DILocation(line: 3200, column: 6, scope: !8265)
!8276 = !DILocation(line: 3200, column: 11, scope: !8265)
!8277 = !DILocation(line: 3201, column: 5, scope: !8265)
!8278 = !DILocation(line: 3203, column: 10, scope: !8279)
!8279 = distinct !DILexicalBlock(scope: !8265, file: !384, line: 3203, column: 9)
!8280 = !DILocation(line: 3203, column: 17, scope: !8279)
!8281 = !DILocation(line: 3203, column: 25, scope: !8279)
!8282 = !DILocation(line: 3203, column: 38, scope: !8279)
!8283 = !DILocation(line: 3203, column: 42, scope: !8279)
!8284 = !DILocation(line: 3203, column: 49, scope: !8279)
!8285 = !DILocation(line: 3203, column: 57, scope: !8279)
!8286 = !DILocation(line: 3203, column: 9, scope: !8265)
!8287 = !DILocation(line: 3203, column: 71, scope: !8279)
!8288 = !DILocation(line: 3204, column: 13, scope: !8265)
!8289 = !DILocation(line: 3204, column: 6, scope: !8265)
!8290 = !DILocation(line: 3204, column: 11, scope: !8265)
!8291 = !DILocation(line: 3205, column: 5, scope: !8265)
!8292 = !DILocation(line: 3207, column: 27, scope: !8293)
!8293 = distinct !DILexicalBlock(scope: !8265, file: !384, line: 3207, column: 9)
!8294 = !DILocation(line: 3207, column: 34, scope: !8293)
!8295 = !DILocation(line: 3207, column: 9, scope: !8293)
!8296 = !DILocation(line: 3207, column: 9, scope: !8265)
!8297 = !DILocation(line: 3208, column: 29, scope: !8293)
!8298 = !DILocation(line: 3208, column: 36, scope: !8293)
!8299 = !DILocation(line: 3208, column: 15, scope: !8293)
!8300 = !DILocation(line: 3208, column: 8, scope: !8293)
!8301 = !DILocation(line: 3208, column: 13, scope: !8293)
!8302 = !DILocation(line: 3208, column: 7, scope: !8293)
!8303 = !DILocation(line: 3209, column: 30, scope: !8304)
!8304 = distinct !DILexicalBlock(scope: !8293, file: !384, line: 3209, column: 14)
!8305 = !DILocation(line: 3209, column: 37, scope: !8304)
!8306 = !DILocation(line: 3209, column: 14, scope: !8304)
!8307 = !DILocation(line: 3209, column: 14, scope: !8293)
!8308 = !DILocation(line: 3210, column: 15, scope: !8304)
!8309 = !DILocation(line: 3210, column: 8, scope: !8304)
!8310 = !DILocation(line: 3210, column: 13, scope: !8304)
!8311 = !DILocation(line: 3210, column: 7, scope: !8304)
!8312 = !DILocation(line: 3212, column: 7, scope: !8304)
!8313 = !DILocation(line: 3213, column: 5, scope: !8265)
!8314 = !DILocation(line: 3215, column: 13, scope: !8265)
!8315 = !DILocation(line: 3215, column: 20, scope: !8265)
!8316 = !DILocation(line: 3215, column: 6, scope: !8265)
!8317 = !DILocation(line: 3215, column: 11, scope: !8265)
!8318 = !DILocation(line: 3216, column: 5, scope: !8265)
!8319 = !DILocation(line: 3218, column: 5, scope: !8265)
!8320 = !DILocation(line: 3221, column: 3, scope: !8231)
!8321 = !DILocation(line: 3222, column: 1, scope: !8231)
!8322 = distinct !DISubprogram(name: "binn_get_double", scope: !384, file: !384, line: 3226, type: !8323, scopeLine: 3226, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8323 = !DISubroutineType(types: !8324)
!8324 = !{!393, !386, !449}
!8325 = !DILocalVariable(name: "value", arg: 1, scope: !8322, file: !384, line: 3226, type: !386)
!8326 = !DILocation(line: 3226, column: 37, scope: !8322)
!8327 = !DILocalVariable(name: "pfloat", arg: 2, scope: !8322, file: !384, line: 3226, type: !449)
!8328 = !DILocation(line: 3226, column: 52, scope: !8322)
!8329 = !DILocalVariable(name: "vint", scope: !8322, file: !384, line: 3227, type: !418)
!8330 = !DILocation(line: 3227, column: 9, scope: !8322)
!8331 = !DILocation(line: 3229, column: 7, scope: !8332)
!8332 = distinct !DILexicalBlock(scope: !8322, file: !384, line: 3229, column: 7)
!8333 = !DILocation(line: 3229, column: 13, scope: !8332)
!8334 = !DILocation(line: 3229, column: 21, scope: !8332)
!8335 = !DILocation(line: 3229, column: 24, scope: !8332)
!8336 = !DILocation(line: 3229, column: 31, scope: !8332)
!8337 = !DILocation(line: 3229, column: 7, scope: !8322)
!8338 = !DILocation(line: 3229, column: 40, scope: !8332)
!8339 = !DILocation(line: 3231, column: 19, scope: !8340)
!8340 = distinct !DILexicalBlock(scope: !8322, file: !384, line: 3231, column: 7)
!8341 = !DILocation(line: 3231, column: 26, scope: !8340)
!8342 = !DILocation(line: 3231, column: 7, scope: !8340)
!8343 = !DILocation(line: 3231, column: 32, scope: !8340)
!8344 = !DILocation(line: 3231, column: 7, scope: !8322)
!8345 = !DILocation(line: 3232, column: 24, scope: !8346)
!8346 = distinct !DILexicalBlock(scope: !8347, file: !384, line: 3232, column: 9)
!8347 = distinct !DILexicalBlock(scope: !8340, file: !384, line: 3231, column: 52)
!8348 = !DILocation(line: 3232, column: 31, scope: !8346)
!8349 = !DILocation(line: 3232, column: 36, scope: !8346)
!8350 = !DILocation(line: 3232, column: 43, scope: !8346)
!8351 = !DILocation(line: 3232, column: 50, scope: !8346)
!8352 = !DILocation(line: 3232, column: 9, scope: !8346)
!8353 = !DILocation(line: 3232, column: 68, scope: !8346)
!8354 = !DILocation(line: 3232, column: 9, scope: !8347)
!8355 = !DILocation(line: 3232, column: 78, scope: !8346)
!8356 = !DILocation(line: 3233, column: 24, scope: !8347)
!8357 = !DILocation(line: 3233, column: 6, scope: !8347)
!8358 = !DILocation(line: 3233, column: 13, scope: !8347)
!8359 = !DILocation(line: 3234, column: 5, scope: !8347)
!8360 = !DILocation(line: 3237, column: 11, scope: !8322)
!8361 = !DILocation(line: 3237, column: 18, scope: !8322)
!8362 = !DILocation(line: 3237, column: 3, scope: !8322)
!8363 = !DILocation(line: 3239, column: 15, scope: !8364)
!8364 = distinct !DILexicalBlock(scope: !8322, file: !384, line: 3237, column: 24)
!8365 = !DILocation(line: 3239, column: 22, scope: !8364)
!8366 = !DILocation(line: 3239, column: 6, scope: !8364)
!8367 = !DILocation(line: 3239, column: 13, scope: !8364)
!8368 = !DILocation(line: 3240, column: 5, scope: !8364)
!8369 = !DILocation(line: 3242, column: 15, scope: !8364)
!8370 = !DILocation(line: 3242, column: 22, scope: !8364)
!8371 = !DILocation(line: 3242, column: 6, scope: !8364)
!8372 = !DILocation(line: 3242, column: 13, scope: !8364)
!8373 = !DILocation(line: 3243, column: 5, scope: !8364)
!8374 = !DILocation(line: 3245, column: 27, scope: !8375)
!8375 = distinct !DILexicalBlock(scope: !8364, file: !384, line: 3245, column: 9)
!8376 = !DILocation(line: 3245, column: 34, scope: !8375)
!8377 = !DILocation(line: 3245, column: 9, scope: !8375)
!8378 = !DILocation(line: 3245, column: 9, scope: !8364)
!8379 = !DILocation(line: 3246, column: 40, scope: !8375)
!8380 = !DILocation(line: 3246, column: 47, scope: !8375)
!8381 = !DILocation(line: 3246, column: 26, scope: !8375)
!8382 = !DILocation(line: 3246, column: 8, scope: !8375)
!8383 = !DILocation(line: 3246, column: 15, scope: !8375)
!8384 = !DILocation(line: 3246, column: 7, scope: !8375)
!8385 = !DILocation(line: 3247, column: 30, scope: !8386)
!8386 = distinct !DILexicalBlock(scope: !8375, file: !384, line: 3247, column: 14)
!8387 = !DILocation(line: 3247, column: 37, scope: !8386)
!8388 = !DILocation(line: 3247, column: 14, scope: !8386)
!8389 = !DILocation(line: 3247, column: 14, scope: !8375)
!8390 = !DILocation(line: 3248, column: 29, scope: !8386)
!8391 = !DILocation(line: 3248, column: 36, scope: !8386)
!8392 = !DILocation(line: 3248, column: 17, scope: !8386)
!8393 = !DILocation(line: 3248, column: 8, scope: !8386)
!8394 = !DILocation(line: 3248, column: 15, scope: !8386)
!8395 = !DILocation(line: 3248, column: 7, scope: !8386)
!8396 = !DILocation(line: 3250, column: 7, scope: !8386)
!8397 = !DILocation(line: 3251, column: 5, scope: !8364)
!8398 = !DILocation(line: 3253, column: 15, scope: !8364)
!8399 = !DILocation(line: 3253, column: 22, scope: !8364)
!8400 = !DILocation(line: 3253, column: 6, scope: !8364)
!8401 = !DILocation(line: 3253, column: 13, scope: !8364)
!8402 = !DILocation(line: 3254, column: 5, scope: !8364)
!8403 = !DILocation(line: 3256, column: 5, scope: !8364)
!8404 = !DILocation(line: 3259, column: 3, scope: !8322)
!8405 = !DILocation(line: 3260, column: 1, scope: !8322)
!8406 = distinct !DISubprogram(name: "binn_get_bool", scope: !384, file: !384, line: 3264, type: !8407, scopeLine: 3264, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8407 = !DISubroutineType(types: !8408)
!8408 = !{!393, !386, !444}
!8409 = !DILocalVariable(name: "value", arg: 1, scope: !8406, file: !384, line: 3264, type: !386)
!8410 = !DILocation(line: 3264, column: 35, scope: !8406)
!8411 = !DILocalVariable(name: "pbool", arg: 2, scope: !8406, file: !384, line: 3264, type: !444)
!8412 = !DILocation(line: 3264, column: 48, scope: !8406)
!8413 = !DILocalVariable(name: "vint", scope: !8406, file: !384, line: 3265, type: !418)
!8414 = !DILocation(line: 3265, column: 9, scope: !8406)
!8415 = !DILocation(line: 3267, column: 7, scope: !8416)
!8416 = distinct !DILexicalBlock(scope: !8406, file: !384, line: 3267, column: 7)
!8417 = !DILocation(line: 3267, column: 13, scope: !8416)
!8418 = !DILocation(line: 3267, column: 21, scope: !8416)
!8419 = !DILocation(line: 3267, column: 24, scope: !8416)
!8420 = !DILocation(line: 3267, column: 30, scope: !8416)
!8421 = !DILocation(line: 3267, column: 7, scope: !8406)
!8422 = !DILocation(line: 3267, column: 39, scope: !8416)
!8423 = !DILocation(line: 3269, column: 19, scope: !8424)
!8424 = distinct !DILexicalBlock(scope: !8406, file: !384, line: 3269, column: 7)
!8425 = !DILocation(line: 3269, column: 26, scope: !8424)
!8426 = !DILocation(line: 3269, column: 7, scope: !8424)
!8427 = !DILocation(line: 3269, column: 32, scope: !8424)
!8428 = !DILocation(line: 3269, column: 7, scope: !8406)
!8429 = !DILocation(line: 3270, column: 24, scope: !8430)
!8430 = distinct !DILexicalBlock(scope: !8431, file: !384, line: 3270, column: 9)
!8431 = distinct !DILexicalBlock(scope: !8424, file: !384, line: 3269, column: 52)
!8432 = !DILocation(line: 3270, column: 31, scope: !8430)
!8433 = !DILocation(line: 3270, column: 36, scope: !8430)
!8434 = !DILocation(line: 3270, column: 43, scope: !8430)
!8435 = !DILocation(line: 3270, column: 50, scope: !8430)
!8436 = !DILocation(line: 3270, column: 9, scope: !8430)
!8437 = !DILocation(line: 3270, column: 68, scope: !8430)
!8438 = !DILocation(line: 3270, column: 9, scope: !8431)
!8439 = !DILocation(line: 3270, column: 78, scope: !8430)
!8440 = !DILocation(line: 3271, column: 15, scope: !8431)
!8441 = !DILocation(line: 3271, column: 20, scope: !8431)
!8442 = !DILocation(line: 3271, column: 14, scope: !8431)
!8443 = !DILocation(line: 3271, column: 6, scope: !8431)
!8444 = !DILocation(line: 3271, column: 12, scope: !8431)
!8445 = !DILocation(line: 3272, column: 5, scope: !8431)
!8446 = !DILocation(line: 3275, column: 11, scope: !8406)
!8447 = !DILocation(line: 3275, column: 18, scope: !8406)
!8448 = !DILocation(line: 3275, column: 3, scope: !8406)
!8449 = !DILocation(line: 3277, column: 14, scope: !8450)
!8450 = distinct !DILexicalBlock(scope: !8406, file: !384, line: 3275, column: 24)
!8451 = !DILocation(line: 3277, column: 21, scope: !8450)
!8452 = !DILocation(line: 3277, column: 6, scope: !8450)
!8453 = !DILocation(line: 3277, column: 12, scope: !8450)
!8454 = !DILocation(line: 3278, column: 5, scope: !8450)
!8455 = !DILocation(line: 3280, column: 15, scope: !8450)
!8456 = !DILocation(line: 3280, column: 22, scope: !8450)
!8457 = !DILocation(line: 3280, column: 29, scope: !8450)
!8458 = !DILocation(line: 3280, column: 14, scope: !8450)
!8459 = !DILocation(line: 3280, column: 6, scope: !8450)
!8460 = !DILocation(line: 3280, column: 12, scope: !8450)
!8461 = !DILocation(line: 3281, column: 5, scope: !8450)
!8462 = !DILocation(line: 3283, column: 15, scope: !8450)
!8463 = !DILocation(line: 3283, column: 22, scope: !8450)
!8464 = !DILocation(line: 3283, column: 30, scope: !8450)
!8465 = !DILocation(line: 3283, column: 14, scope: !8450)
!8466 = !DILocation(line: 3283, column: 6, scope: !8450)
!8467 = !DILocation(line: 3283, column: 12, scope: !8450)
!8468 = !DILocation(line: 3284, column: 5, scope: !8450)
!8469 = !DILocation(line: 3286, column: 31, scope: !8450)
!8470 = !DILocation(line: 3286, column: 38, scope: !8450)
!8471 = !DILocation(line: 3286, column: 43, scope: !8450)
!8472 = !DILocation(line: 3286, column: 12, scope: !8450)
!8473 = !DILocation(line: 3286, column: 5, scope: !8450)
!8474 = !DILocation(line: 3288, column: 5, scope: !8450)
!8475 = !DILocation(line: 3291, column: 3, scope: !8406)
!8476 = !DILocation(line: 3292, column: 1, scope: !8406)
!8477 = distinct !DISubprogram(name: "is_bool_str", linkageName: "_ZL11is_bool_strPcPi", scope: !384, file: !384, line: 3112, type: !8478, scopeLine: 3112, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8478 = !DISubroutineType(types: !8479)
!8479 = !{!393, !103, !444}
!8480 = !DILocalVariable(name: "str", arg: 1, scope: !8477, file: !384, line: 3112, type: !103)
!8481 = !DILocation(line: 3112, column: 37, scope: !8477)
!8482 = !DILocalVariable(name: "pbool", arg: 2, scope: !8477, file: !384, line: 3112, type: !444)
!8483 = !DILocation(line: 3112, column: 48, scope: !8477)
!8484 = !DILocalVariable(name: "vint", scope: !8477, file: !384, line: 3113, type: !418)
!8485 = !DILocation(line: 3113, column: 10, scope: !8477)
!8486 = !DILocalVariable(name: "vdouble", scope: !8477, file: !384, line: 3114, type: !435)
!8487 = !DILocation(line: 3114, column: 10, scope: !8477)
!8488 = !DILocation(line: 3116, column: 7, scope: !8489)
!8489 = distinct !DILexicalBlock(scope: !8477, file: !384, line: 3116, column: 7)
!8490 = !DILocation(line: 3116, column: 11, scope: !8489)
!8491 = !DILocation(line: 3116, column: 19, scope: !8489)
!8492 = !DILocation(line: 3116, column: 22, scope: !8489)
!8493 = !DILocation(line: 3116, column: 28, scope: !8489)
!8494 = !DILocation(line: 3116, column: 7, scope: !8477)
!8495 = !DILocation(line: 3116, column: 37, scope: !8489)
!8496 = !DILocation(line: 3118, column: 15, scope: !8497)
!8497 = distinct !DILexicalBlock(scope: !8477, file: !384, line: 3118, column: 7)
!8498 = !DILocation(line: 3118, column: 7, scope: !8497)
!8499 = !DILocation(line: 3118, column: 28, scope: !8497)
!8500 = !DILocation(line: 3118, column: 7, scope: !8477)
!8501 = !DILocation(line: 3118, column: 34, scope: !8497)
!8502 = !DILocation(line: 3119, column: 15, scope: !8503)
!8503 = distinct !DILexicalBlock(scope: !8477, file: !384, line: 3119, column: 7)
!8504 = !DILocation(line: 3119, column: 7, scope: !8503)
!8505 = !DILocation(line: 3119, column: 27, scope: !8503)
!8506 = !DILocation(line: 3119, column: 7, scope: !8477)
!8507 = !DILocation(line: 3119, column: 33, scope: !8503)
!8508 = !DILocation(line: 3120, column: 15, scope: !8509)
!8509 = distinct !DILexicalBlock(scope: !8477, file: !384, line: 3120, column: 7)
!8510 = !DILocation(line: 3120, column: 7, scope: !8509)
!8511 = !DILocation(line: 3120, column: 26, scope: !8509)
!8512 = !DILocation(line: 3120, column: 7, scope: !8477)
!8513 = !DILocation(line: 3120, column: 32, scope: !8509)
!8514 = !DILocation(line: 3123, column: 15, scope: !8515)
!8515 = distinct !DILexicalBlock(scope: !8477, file: !384, line: 3123, column: 7)
!8516 = !DILocation(line: 3123, column: 7, scope: !8515)
!8517 = !DILocation(line: 3123, column: 29, scope: !8515)
!8518 = !DILocation(line: 3123, column: 7, scope: !8477)
!8519 = !DILocation(line: 3123, column: 35, scope: !8515)
!8520 = !DILocation(line: 3124, column: 15, scope: !8521)
!8521 = distinct !DILexicalBlock(scope: !8477, file: !384, line: 3124, column: 7)
!8522 = !DILocation(line: 3124, column: 7, scope: !8521)
!8523 = !DILocation(line: 3124, column: 26, scope: !8521)
!8524 = !DILocation(line: 3124, column: 7, scope: !8477)
!8525 = !DILocation(line: 3124, column: 32, scope: !8521)
!8526 = !DILocation(line: 3125, column: 15, scope: !8527)
!8527 = distinct !DILexicalBlock(scope: !8477, file: !384, line: 3125, column: 7)
!8528 = !DILocation(line: 3125, column: 7, scope: !8527)
!8529 = !DILocation(line: 3125, column: 27, scope: !8527)
!8530 = !DILocation(line: 3125, column: 7, scope: !8477)
!8531 = !DILocation(line: 3125, column: 33, scope: !8527)
!8532 = !DILocation(line: 3128, column: 18, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !8477, file: !384, line: 3128, column: 7)
!8534 = !DILocation(line: 3128, column: 7, scope: !8533)
!8535 = !DILocation(line: 3128, column: 7, scope: !8477)
!8536 = !DILocation(line: 3129, column: 19, scope: !8537)
!8537 = distinct !DILexicalBlock(scope: !8533, file: !384, line: 3128, column: 24)
!8538 = !DILocation(line: 3129, column: 12, scope: !8537)
!8539 = !DILocation(line: 3129, column: 10, scope: !8537)
!8540 = !DILocation(line: 3130, column: 15, scope: !8537)
!8541 = !DILocation(line: 3130, column: 20, scope: !8537)
!8542 = !DILocation(line: 3130, column: 14, scope: !8537)
!8543 = !DILocation(line: 3130, column: 6, scope: !8537)
!8544 = !DILocation(line: 3130, column: 12, scope: !8537)
!8545 = !DILocation(line: 3131, column: 5, scope: !8537)
!8546 = !DILocation(line: 3132, column: 23, scope: !8547)
!8547 = distinct !DILexicalBlock(scope: !8533, file: !384, line: 3132, column: 14)
!8548 = !DILocation(line: 3132, column: 14, scope: !8547)
!8549 = !DILocation(line: 3132, column: 14, scope: !8533)
!8550 = !DILocation(line: 3133, column: 20, scope: !8551)
!8551 = distinct !DILexicalBlock(scope: !8547, file: !384, line: 3132, column: 29)
!8552 = !DILocation(line: 3133, column: 15, scope: !8551)
!8553 = !DILocation(line: 3133, column: 13, scope: !8551)
!8554 = !DILocation(line: 3134, column: 15, scope: !8551)
!8555 = !DILocation(line: 3134, column: 23, scope: !8551)
!8556 = !DILocation(line: 3134, column: 14, scope: !8551)
!8557 = !DILocation(line: 3134, column: 6, scope: !8551)
!8558 = !DILocation(line: 3134, column: 12, scope: !8551)
!8559 = !DILocation(line: 3135, column: 5, scope: !8551)
!8560 = !DILocation(line: 3138, column: 3, scope: !8477)
!8561 = !DILabel(scope: !8477, name: "loc_true", file: !384, line: 3140)
!8562 = !DILocation(line: 3140, column: 1, scope: !8477)
!8563 = !DILocation(line: 3141, column: 4, scope: !8477)
!8564 = !DILocation(line: 3141, column: 10, scope: !8477)
!8565 = !DILocation(line: 3142, column: 3, scope: !8477)
!8566 = !DILabel(scope: !8477, name: "loc_false", file: !384, line: 3144)
!8567 = !DILocation(line: 3144, column: 1, scope: !8477)
!8568 = !DILocation(line: 3145, column: 4, scope: !8477)
!8569 = !DILocation(line: 3145, column: 10, scope: !8477)
!8570 = !DILocation(line: 3146, column: 3, scope: !8477)
!8571 = !DILocation(line: 3148, column: 1, scope: !8477)
!8572 = distinct !DISubprogram(name: "binn_get_str", scope: !384, file: !384, line: 3296, type: !8573, scopeLine: 3296, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8573 = !DISubroutineType(types: !8574)
!8574 = !{!103, !386}
!8575 = !DILocalVariable(name: "value", arg: 1, scope: !8572, file: !384, line: 3296, type: !386)
!8576 = !DILocation(line: 3296, column: 36, scope: !8572)
!8577 = !DILocalVariable(name: "vint", scope: !8572, file: !384, line: 3297, type: !418)
!8578 = !DILocation(line: 3297, column: 9, scope: !8572)
!8579 = !DILocalVariable(name: "buf", scope: !8572, file: !384, line: 3298, type: !5254)
!8580 = !DILocation(line: 3298, column: 8, scope: !8572)
!8581 = !DILocation(line: 3300, column: 7, scope: !8582)
!8582 = distinct !DILexicalBlock(scope: !8572, file: !384, line: 3300, column: 7)
!8583 = !DILocation(line: 3300, column: 13, scope: !8582)
!8584 = !DILocation(line: 3300, column: 7, scope: !8572)
!8585 = !DILocation(line: 3300, column: 22, scope: !8582)
!8586 = !DILocation(line: 3302, column: 19, scope: !8587)
!8587 = distinct !DILexicalBlock(scope: !8572, file: !384, line: 3302, column: 7)
!8588 = !DILocation(line: 3302, column: 26, scope: !8587)
!8589 = !DILocation(line: 3302, column: 7, scope: !8587)
!8590 = !DILocation(line: 3302, column: 32, scope: !8587)
!8591 = !DILocation(line: 3302, column: 7, scope: !8572)
!8592 = !DILocation(line: 3303, column: 24, scope: !8593)
!8593 = distinct !DILexicalBlock(scope: !8594, file: !384, line: 3303, column: 9)
!8594 = distinct !DILexicalBlock(scope: !8587, file: !384, line: 3302, column: 52)
!8595 = !DILocation(line: 3303, column: 31, scope: !8593)
!8596 = !DILocation(line: 3303, column: 36, scope: !8593)
!8597 = !DILocation(line: 3303, column: 43, scope: !8593)
!8598 = !DILocation(line: 3303, column: 50, scope: !8593)
!8599 = !DILocation(line: 3303, column: 9, scope: !8593)
!8600 = !DILocation(line: 3303, column: 68, scope: !8593)
!8601 = !DILocation(line: 3303, column: 9, scope: !8594)
!8602 = !DILocation(line: 3303, column: 78, scope: !8593)
!8603 = !DILocation(line: 3304, column: 14, scope: !8594)
!8604 = !DILocation(line: 3304, column: 50, scope: !8594)
!8605 = !DILocation(line: 3304, column: 5, scope: !8594)
!8606 = !DILocation(line: 3305, column: 5, scope: !8594)
!8607 = !DILocation(line: 3308, column: 11, scope: !8572)
!8608 = !DILocation(line: 3308, column: 18, scope: !8572)
!8609 = !DILocation(line: 3308, column: 3, scope: !8572)
!8610 = !DILocation(line: 3310, column: 22, scope: !8611)
!8611 = distinct !DILexicalBlock(scope: !8572, file: !384, line: 3308, column: 24)
!8612 = !DILocation(line: 3310, column: 29, scope: !8611)
!8613 = !DILocation(line: 3310, column: 5, scope: !8611)
!8614 = !DILocation(line: 3310, column: 12, scope: !8611)
!8615 = !DILocation(line: 3310, column: 20, scope: !8611)
!8616 = !DILocation(line: 3312, column: 14, scope: !8611)
!8617 = !DILocation(line: 3312, column: 38, scope: !8611)
!8618 = !DILocation(line: 3312, column: 45, scope: !8611)
!8619 = !DILocation(line: 3312, column: 5, scope: !8611)
!8620 = !DILocation(line: 3313, column: 5, scope: !8611)
!8621 = !DILocation(line: 3315, column: 20, scope: !8611)
!8622 = !DILocation(line: 3315, column: 27, scope: !8611)
!8623 = !DILocation(line: 3315, column: 5, scope: !8611)
!8624 = !DILocation(line: 3317, column: 9, scope: !8625)
!8625 = distinct !DILexicalBlock(scope: !8611, file: !384, line: 3317, column: 9)
!8626 = !DILocation(line: 3317, column: 16, scope: !8625)
!8627 = !DILocation(line: 3317, column: 9, scope: !8611)
!8628 = !DILocation(line: 3318, column: 15, scope: !8625)
!8629 = !DILocation(line: 3318, column: 7, scope: !8625)
!8630 = !DILocation(line: 3320, column: 15, scope: !8625)
!8631 = !DILocation(line: 3320, column: 7, scope: !8625)
!8632 = !DILocation(line: 3321, column: 5, scope: !8611)
!8633 = !DILocation(line: 3324, column: 3, scope: !8572)
!8634 = !DILabel(scope: !8572, name: "loc_convert_value", file: !384, line: 3326)
!8635 = !DILocation(line: 3326, column: 1, scope: !8572)
!8636 = !DILocation(line: 3329, column: 24, scope: !8572)
!8637 = !DILocation(line: 3329, column: 16, scope: !8572)
!8638 = !DILocation(line: 3329, column: 3, scope: !8572)
!8639 = !DILocation(line: 3329, column: 10, scope: !8572)
!8640 = !DILocation(line: 3329, column: 14, scope: !8572)
!8641 = !DILocation(line: 3330, column: 7, scope: !8642)
!8642 = distinct !DILexicalBlock(scope: !8572, file: !384, line: 3330, column: 7)
!8643 = !DILocation(line: 3330, column: 14, scope: !8642)
!8644 = !DILocation(line: 3330, column: 18, scope: !8642)
!8645 = !DILocation(line: 3330, column: 7, scope: !8572)
!8646 = !DILocation(line: 3330, column: 27, scope: !8642)
!8647 = !DILocation(line: 3331, column: 3, scope: !8572)
!8648 = !DILocation(line: 3331, column: 10, scope: !8572)
!8649 = !DILocation(line: 3331, column: 17, scope: !8572)
!8650 = !DILocation(line: 3332, column: 3, scope: !8572)
!8651 = !DILocation(line: 3332, column: 10, scope: !8572)
!8652 = !DILocation(line: 3332, column: 15, scope: !8572)
!8653 = !DILocation(line: 3333, column: 18, scope: !8572)
!8654 = !DILocation(line: 3333, column: 25, scope: !8572)
!8655 = !DILocation(line: 3333, column: 3, scope: !8572)
!8656 = !DILocation(line: 3335, column: 1, scope: !8572)
!8657 = distinct !DISubprogram(name: "binn_is_container", scope: !384, file: !384, line: 3341, type: !2540, scopeLine: 3341, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !383, retainedNodes: !370)
!8658 = !DILocalVariable(name: "item", arg: 1, scope: !8657, file: !384, line: 3341, type: !386)
!8659 = !DILocation(line: 3341, column: 39, scope: !8657)
!8660 = !DILocation(line: 3343, column: 7, scope: !8661)
!8661 = distinct !DILexicalBlock(scope: !8657, file: !384, line: 3343, column: 7)
!8662 = !DILocation(line: 3343, column: 12, scope: !8661)
!8663 = !DILocation(line: 3343, column: 7, scope: !8657)
!8664 = !DILocation(line: 3343, column: 21, scope: !8661)
!8665 = !DILocation(line: 3345, column: 11, scope: !8657)
!8666 = !DILocation(line: 3345, column: 17, scope: !8657)
!8667 = !DILocation(line: 3345, column: 3, scope: !8657)
!8668 = !DILocation(line: 3349, column: 5, scope: !8669)
!8669 = distinct !DILexicalBlock(scope: !8657, file: !384, line: 3345, column: 23)
!8670 = !DILocation(line: 3351, column: 5, scope: !8669)
!8671 = !DILocation(line: 3354, column: 1, scope: !8657)
!8672 = distinct !DISubprogram(name: "do_something", linkageName: "_Z12do_somethingv", scope: !504, file: !504, line: 215, type: !8673, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !503, retainedNodes: !370)
!8673 = !DISubroutineType(types: !8674)
!8674 = !{!101}
!8675 = !DILocation(line: 217, column: 5, scope: !8672)
!8676 = distinct !DISubprogram(name: "crypto_scrypt", linkageName: "_Z13crypto_scryptPKhmS0_mmjjPhm", scope: !504, file: !504, line: 231, type: !8677, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !503, retainedNodes: !370)
!8677 = !DISubroutineType(types: !8678)
!8678 = !{!101, !345, !91, !345, !91, !188, !201, !201, !149, !91}
!8679 = !DILocalVariable(name: "passwd", arg: 1, scope: !8676, file: !504, line: 231, type: !345)
!8680 = !DILocation(line: 231, column: 31, scope: !8676)
!8681 = !DILocalVariable(name: "passwdlen", arg: 2, scope: !8676, file: !504, line: 231, type: !91)
!8682 = !DILocation(line: 231, column: 46, scope: !8676)
!8683 = !DILocalVariable(name: "salt", arg: 3, scope: !8676, file: !504, line: 232, type: !345)
!8684 = !DILocation(line: 232, column: 21, scope: !8676)
!8685 = !DILocalVariable(name: "saltlen", arg: 4, scope: !8676, file: !504, line: 232, type: !91)
!8686 = !DILocation(line: 232, column: 34, scope: !8676)
!8687 = !DILocalVariable(name: "N", arg: 5, scope: !8676, file: !504, line: 232, type: !188)
!8688 = !DILocation(line: 232, column: 52, scope: !8676)
!8689 = !DILocalVariable(name: "_r", arg: 6, scope: !8676, file: !504, line: 232, type: !201)
!8690 = !DILocation(line: 232, column: 64, scope: !8676)
!8691 = !DILocalVariable(name: "_p", arg: 7, scope: !8676, file: !504, line: 232, type: !201)
!8692 = !DILocation(line: 232, column: 77, scope: !8676)
!8693 = !DILocalVariable(name: "buf", arg: 8, scope: !8676, file: !504, line: 233, type: !149)
!8694 = !DILocation(line: 233, column: 15, scope: !8676)
!8695 = !DILocalVariable(name: "buflen", arg: 9, scope: !8676, file: !504, line: 233, type: !91)
!8696 = !DILocation(line: 233, column: 27, scope: !8676)
!8697 = !DILocation(line: 235, column: 5, scope: !8676)
!8698 = !DILocation(line: 236, column: 25, scope: !8676)
!8699 = !DILocation(line: 236, column: 33, scope: !8676)
!8700 = !DILocation(line: 236, column: 44, scope: !8676)
!8701 =